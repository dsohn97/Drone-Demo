/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
var $asm05 = JSIL.DeclareAssembly("Fusee.Engine.GUI, Version=0.7.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
JSIL.DeclareNamespace("Fusee.Engine.GUI");
/* class Fusee.Engine.GUI.GUIButton */ 

(function GUIButton$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CodeComponent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.CodeComponent_InteractionHandler)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ButtonValueChangedArgs))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.AxisValueChangedArgs))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisValueChangedArgs)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonValueChangedArgs)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.ButtonValueChangedArgs]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.AxisValueChangedArgs]))) ();
  };


  function GUIButton__ctor () {
    $T00().prototype._ctor.call(this);
    this._isAttached = false;
  }; 

  function GUIButton_add_OnMouseDown (value) {
    var interactionHandler = this.OnMouseDown;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Combine(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseDown"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_add_OnMouseEnter (value) {
    var interactionHandler = this.OnMouseEnter;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Combine(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseEnter"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_add_OnMouseExit (value) {
    var interactionHandler = this.OnMouseExit;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Combine(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseExit"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_add_OnMouseOver (value) {
    var interactionHandler = this.OnMouseOver;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Combine(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseOver"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_add_OnMouseUp (value) {
    var interactionHandler = this.OnMouseUp;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Combine(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseUp"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_DetachEvents () {
    $T05().get_Mouse().remove_ButtonValueChanged($T06().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouse", $S00(), false, false)));
    $T05().get_Touch().remove_ButtonValueChanged($T06().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouse", $S00(), false, false)));
    $T05().get_Mouse().remove_AxisValueChanged($T07().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnAxisChanged", $S01(), false, false)));
    var expr_4C = this.OnMouseExit;
    if (expr_4C !== null) {
      expr_4C(this);
    }
    this._isAttached = false;
  }; 

  function GUIButton_InvokeEvents () {
    var expr_07 = this.OnMouseOver;
    if (expr_07 !== null) {
      expr_07(this);
    }
    if (!this._isAttached) {
      $T05().get_Mouse().add_ButtonValueChanged($T06().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouse", $S00(), false, false)));
      $T05().get_Touch().add_ButtonValueChanged($T06().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouse", $S00(), false, false)));
      $T05().get_Mouse().add_AxisValueChanged($T07().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnAxisChanged", $S01(), false, false)));
      var expr_6D = this.OnMouseEnter;
      if (expr_6D !== null) {
        expr_6D(this);
      }
    }
    this._isAttached = true;
  }; 

  function GUIButton_OnAxisChanged (sender, avca) {
  }; 

  function GUIButton_OnMouse (sender, bvca) {
    var pressed = bvca.Pressed;
    if (pressed) {
      var expr_11 = this.OnMouseDown;
      if (expr_11 !== null) {
        expr_11(this);
      }
    } else {
      var expr_26 = this.OnMouseUp;
      if (expr_26 !== null) {
        expr_26(this);
      }
    }
  }; 

  function GUIButton_remove_OnMouseDown (value) {
    var interactionHandler = this.OnMouseDown;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Remove(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseDown"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_remove_OnMouseEnter (value) {
    var interactionHandler = this.OnMouseEnter;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Remove(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseEnter"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_remove_OnMouseExit (value) {
    var interactionHandler = this.OnMouseExit;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Remove(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseExit"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_remove_OnMouseOver (value) {
    var interactionHandler = this.OnMouseOver;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Remove(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseOver"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  function GUIButton_remove_OnMouseUp (value) {
    var interactionHandler = this.OnMouseUp;

    do {
      var interactionHandler2 = interactionHandler;
      var value2 = $T02().Remove(interactionHandler2, value);
      interactionHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseUp"), value2, interactionHandler2);
    } while (interactionHandler !== interactionHandler2);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CodeComponent"), 
      Name: "Fusee.Engine.GUI.GUIButton", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GUIButton__ctor
    );

    $.Method({Static:false, Public:true }, "add_OnMouseDown", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_add_OnMouseDown
    );

    $.Method({Static:false, Public:true }, "add_OnMouseEnter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_add_OnMouseEnter
    );

    $.Method({Static:false, Public:true }, "add_OnMouseExit", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_add_OnMouseExit
    );

    $.Method({Static:false, Public:true }, "add_OnMouseOver", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_add_OnMouseOver
    );

    $.Method({Static:false, Public:true }, "add_OnMouseUp", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_add_OnMouseUp
    );

    $.Method({Static:false, Public:false}, "DetachEvents", 
      JSIL.MethodSignature.Void, 
      GUIButton_DetachEvents
    );

    $.Method({Static:false, Public:false}, "InvokeEvents", 
      JSIL.MethodSignature.Void, 
      GUIButton_InvokeEvents
    );

    $.Method({Static:false, Public:false}, "OnAxisChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]), 
      GUIButton_OnAxisChanged
    );

    $.Method({Static:false, Public:false}, "OnMouse", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]), 
      GUIButton_OnMouse
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseDown", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_remove_OnMouseDown
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseEnter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_remove_OnMouseEnter
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseExit", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_remove_OnMouseExit
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseOver", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_remove_OnMouseOver
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseUp", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler")), 
      GUIButton_remove_OnMouseUp
    );

    $.Field({Static:false, Public:false}, "OnMouseDown", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Field({Static:false, Public:false}, "OnMouseUp", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Field({Static:false, Public:false}, "OnMouseOver", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Field({Static:false, Public:false}, "OnMouseEnter", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Field({Static:false, Public:false}, "OnMouseExit", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Field({Static:false, Public:false}, "_isAttached", $.Boolean);

    $.Event({Static:false, Public:true }, "OnMouseDown", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Event({Static:false, Public:true }, "OnMouseUp", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Event({Static:false, Public:true }, "OnMouseOver", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Event({Static:false, Public:true }, "OnMouseEnter", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));

    $.Event({Static:false, Public:true }, "OnMouseExit", $asm04.TypeRef("Fusee.Engine.Core.CodeComponent+InteractionHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.CanvasNodeContainer */ 

(function CanvasNodeContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.Fusee.Serialization.CanvasRenderMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0B.Fusee.Serialization.CanvasTransformComponent)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.Fusee.Serialization.XFormComponent)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer), null))) ();
  };


  function CanvasNodeContainer__ctor (name, canvasRenderMode, size, scale) {
    $T04().prototype._ctor.call(this);
    this.Name = name;
    var expr_15 = $S00().Construct();
    var expr_1E = new ($T06())(canvasRenderMode, scale);
    expr_1E.Name = (JSIL.ConcatString(name, "_CanvasTransform"));
    expr_1E.Size = size.MemberwiseClone();
    expr_15.Add(expr_1E);
    var expr_42 = new ($T07())();
    expr_42.Name = (JSIL.ConcatString(name, "_Canvas_XForm"));
    expr_15.Add(expr_42);
    this.Components = expr_15;
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), 
      Name: "Fusee.Engine.GUI.CanvasNodeContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("Fusee.Serialization.CanvasRenderMode"), 
          $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), $.Single
        ]), 
      CanvasNodeContainer__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.TextureNodeContainer */ 

(function TextureNodeContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.Fusee.Serialization.RectTransformComponent)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0B.Fusee.Serialization.XFormComponent)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectComponent)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm03.Fusee.Engine.Common.Blend)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm03.Fusee.Engine.Common.BlendOperation)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Fusee.Engine.Core.NineSlicePlane)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Engine.Core.Plane)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer), null))) ();
  };


  function TextureNodeContainer__ctor$00 (name, vs, ps, tex, anchors, offsets, tiles, borders, borderthickness, borderScaleFactor) {
    $T06().prototype._ctor.call(this);
    this.Name = name;
    var list = $S00().Construct();
    var arg_3D_0 = list;
    var expr_1C = new ($T08())();
    expr_1C.Name = (JSIL.ConcatString(name, "_RectTransform"));
    expr_1C.Anchors = anchors.MemberwiseClone();
    expr_1C.Offsets = offsets.MemberwiseClone();
    arg_3D_0.Add(expr_1C);
    var arg_5A_0 = list;
    var expr_49 = new ($T09())();
    expr_49.Name = (JSIL.ConcatString(name, "_XForm"));
    arg_5A_0.Add(expr_49);
    var arg_28A_0 = list;
    var shaderEffectComponent = new ($T0A())();
    var arg_283_0 = shaderEffectComponent;
    var expr_6E = JSIL.Array.New($T0C(), 1);
    var effectPassDeclaration = new ($T0C())();
    effectPassDeclaration.VS = vs;
    effectPassDeclaration.PS = ps;
    var expr_8F = new ($T0D())();
    expr_8F.set_AlphaBlendEnable(true);
    expr_8F.set_SourceBlend($T0E().SourceAlpha);
    expr_8F.set_DestinationBlend($T0E().InverseSourceAlpha);
    expr_8F.set_BlendOperation($T0F().Add);
    expr_8F.set_ZEnable(false);
    effectPassDeclaration.StateSet = expr_8F;
    expr_6E[0] = effectPassDeclaration.MemberwiseClone();
    var expr_C9 = JSIL.Array.New($T11(), 10);
    var effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "DiffuseTexture";
    effectParameterDeclaration.Value = tex;
    expr_C9[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "DiffuseColor";
    effectParameterDeclaration.Value = $T04().One.MemberwiseClone();
    expr_C9[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "Tile";
    effectParameterDeclaration.Value = tiles.MemberwiseClone();
    expr_C9[2] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "DiffuseMix";
    effectParameterDeclaration.Value = $T05().$Box(1);
    expr_C9[3] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "borders";
    effectParameterDeclaration.Value = borders.MemberwiseClone();
    expr_C9[4] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "borderThickness";
    effectParameterDeclaration.Value = $T05().$Box((+borderthickness * +borderScaleFactor));
    expr_C9[5] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "FUSEE_ITMV";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_C9[6] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "FUSEE_M";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_C9[7] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "FUSEE_V";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_C9[8] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "FUSEE_P";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_C9[9] = effectParameterDeclaration.MemberwiseClone();
    arg_283_0.ShaderEffectComponent$Effect$value = new ($T13())(expr_6E, $T14().$Cast(expr_C9));
    arg_28A_0.Add(shaderEffectComponent);
    list.Add(new ($T15())());
    this.Components = list;
  }; 

  function TextureNodeContainer__ctor$01 (name, vs, ps, tex, anchors, offsets) {
    $T06().prototype._ctor.call(this);
    this.Name = name;
    var list = $S00().Construct();
    var arg_3D_0 = list;
    var expr_1C = new ($T08())();
    expr_1C.Name = (JSIL.ConcatString(name, "_RectTransform"));
    expr_1C.Anchors = anchors.MemberwiseClone();
    expr_1C.Offsets = offsets.MemberwiseClone();
    arg_3D_0.Add(expr_1C);
    var arg_5A_0 = list;
    var expr_49 = new ($T09())();
    expr_49.Name = (JSIL.ConcatString(name, "_XForm"));
    arg_5A_0.Add(expr_49);
    var arg_1AD_0 = list;
    var shaderEffectComponent = new ($T0A())();
    var arg_1A6_0 = shaderEffectComponent;
    var expr_6E = JSIL.Array.New($T0C(), 1);
    var effectPassDeclaration = new ($T0C())();
    effectPassDeclaration.VS = vs;
    effectPassDeclaration.PS = ps;
    var expr_8F = new ($T0D())();
    expr_8F.set_AlphaBlendEnable(true);
    expr_8F.set_SourceBlend($T0E().SourceAlpha);
    expr_8F.set_DestinationBlend($T0E().InverseSourceAlpha);
    expr_8F.set_BlendOperation($T0F().Add);
    expr_8F.set_ZEnable(false);
    effectPassDeclaration.StateSet = expr_8F;
    expr_6E[0] = effectPassDeclaration.MemberwiseClone();
    var expr_C8 = JSIL.Array.New($T11(), 5);
    var effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "DiffuseTexture";
    effectParameterDeclaration.Value = tex;
    expr_C8[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "DiffuseColor";
    effectParameterDeclaration.Value = $T04().One.MemberwiseClone();
    expr_C8[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "DiffuseMix";
    effectParameterDeclaration.Value = $T05().$Box(1);
    expr_C8[2] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "FUSEE_ITMV";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_C8[3] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "FUSEE_MVP";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_C8[4] = effectParameterDeclaration.MemberwiseClone();
    arg_1A6_0.ShaderEffectComponent$Effect$value = new ($T13())(expr_6E, $T14().$Cast(expr_C8));
    arg_1AD_0.Add(shaderEffectComponent);
    list.Add(new ($T16())());
    this.Components = list;
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), 
      Name: "Fusee.Engine.GUI.TextureNodeContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm04.TypeRef("Fusee.Engine.Core.Texture"), 
          $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), 
          $asm0A.TypeRef("Fusee.Math.Core.float2"), $asm0A.TypeRef("Fusee.Math.Core.float4"), 
          $.Single, $.Single
        ]), 
      TextureNodeContainer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm04.TypeRef("Fusee.Engine.Core.Texture"), 
          $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")
        ]), 
      TextureNodeContainer__ctor$01
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.TextNodeContainer */ 

(function TextNodeContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.FontMap)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.Fusee.Serialization.RectTransformComponent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.Fusee.Serialization.XFormComponent)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0B.Fusee.Serialization.XFormTextComponent)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectComponent)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm03.Fusee.Engine.Common.Blend)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.Fusee.Engine.Common.BlendOperation)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIText)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.Texture, [$asm00.Fusee.Base.Common.IImageData]))) ();
  };


  function TextNodeContainer__ctor (text, name, vs, ps, anchors, offsets, fontMap, color, textScaleFactor) {
    $T05().prototype._ctor.call(this);
    this.Name = name;
    var expr_15 = $S00().Construct();
    var expr_1B = new ($T07())();
    expr_1B.Name = (JSIL.ConcatString(name, "_RectTransform"));
    expr_1B.Anchors = anchors.MemberwiseClone();
    expr_1B.Offsets = offsets.MemberwiseClone();
    expr_15.Add(expr_1B);
    var expr_48 = new ($T08())();
    expr_48.Name = (JSIL.ConcatString(name, "_XForm"));
    expr_15.Add(expr_48);
    this.Components = expr_15;
    var list = $S01().Construct();
    var sceneNodeContainer = new ($T05())();
    var arg_209_0 = sceneNodeContainer;
    var list2 = $S00().Construct();
    list2.Add(new ($T0A())(textScaleFactor));
    var arg_1E2_0 = list2;
    var shaderEffectComponent = new ($T0B())();
    var arg_1DB_0 = shaderEffectComponent;
    var expr_95 = JSIL.Array.New($T0D(), 1);
    var effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = vs;
    effectPassDeclaration.PS = ps;
    var expr_B7 = new ($T0E())();
    expr_B7.set_AlphaBlendEnable(true);
    expr_B7.set_SourceBlend($T0F().SourceAlpha);
    expr_B7.set_DestinationBlend($T0F().InverseSourceAlpha);
    expr_B7.set_BlendOperation($T10().Add);
    expr_B7.set_ZEnable(false);
    effectPassDeclaration.StateSet = expr_B7;
    expr_95[0] = effectPassDeclaration.MemberwiseClone();
    var expr_F1 = JSIL.Array.New($T12(), 5);
    var effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseTexture";
    effectParameterDeclaration.Value = $S02().Construct(fontMap.get_Image());
    expr_F1[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseColor";
    effectParameterDeclaration.Value = color.MemberwiseClone();
    expr_F1[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseMix";
    effectParameterDeclaration.Value = $T04().$Box(0);
    expr_F1[2] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_ITMV";
    effectParameterDeclaration.Value = $T14().Identity.MemberwiseClone();
    expr_F1[3] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_MVP";
    effectParameterDeclaration.Value = $T14().Identity.MemberwiseClone();
    expr_F1[4] = effectParameterDeclaration.MemberwiseClone();
    arg_1DB_0.ShaderEffectComponent$Effect$value = new ($T15())(expr_95, $T16().$Cast(expr_F1));
    arg_1E2_0.Add(shaderEffectComponent);
    var arg_202_0 = list2;
    var expr_1F1 = new ($T17())(fontMap, text);
    expr_1F1.Name = (JSIL.ConcatString(name, "textMesh"));
    arg_202_0.Add(expr_1F1);
    arg_209_0.Components = list2;
    list.Add(sceneNodeContainer);
    this.Children = list;
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), 
      Name: "Fusee.Engine.GUI.TextNodeContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), 
          $asm04.TypeRef("Fusee.Engine.Core.FontMap"), $asm0A.TypeRef("Fusee.Math.Core.float4"), 
          $.Single
        ]), 
      TextNodeContainer__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIText */ 

(function GUIText$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.FontMap)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Char)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.GlyphOnMap)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Fusee.Base.Common.GlyphInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Fusee.Base.Core.Font)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float2), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function GUIText__ctor (fontMap, text) {
    $T02().prototype._ctor.call(this);
    this._fontMap = fontMap;
    this._text = text;
    this.CreateTextMesh();
  }; 

  function GUIText_CreateTextMesh () {
    var vec = new ($T03())();
    if (this._fontMap === null) {
      throw $S00().Construct("Can not create Text Mesh - FontMap not found!");
    }
    var list = $S01().Construct();
    var list2 = $S02().Construct();
    var list3 = $S03().Construct();
    var list4 = $S01().Construct();
    var width = (((this._fontMap).get_Image()).get_Width() | 0);
    var height = (((this._fontMap).get_Image()).get_Height() | 0);
    var num = 0;
    var num2 = 0;
    var num3 = 0;
    var num4 = 0;
    var text = this._text;

    for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
      var c = (text[i]);
      var glyphOnMap = (this._fontMap).GetGlyphOnMap(c.charCodeAt(0)).MemberwiseClone();
      var glyphInfo = ((this._fontMap).get_Font()).GetGlyphInfo(c.charCodeAt(0)).MemberwiseClone();
      var num5 = num2 + +glyphOnMap.BitmapL;
      var num6 = num3 - +glyphOnMap.BitmapT;
      var bitmapW = +glyphOnMap.BitmapW;
      var bitmapH = +glyphOnMap.BitmapH;
      var flag2 = -num6 > num4;
      if (flag2) {
        num4 = -num6;
      }
      num2 += +glyphInfo.AdvanceX;
      num3 += +glyphInfo.AdvanceY;
      if (!((bitmapW <= 1.192093E-07) || (bitmapH <= 1.192093E-07))) {
        var bitmapW2 = +glyphOnMap.BitmapW;
        var bitmapH2 = +glyphOnMap.BitmapH;
        var texOffX = +glyphOnMap.TexOffX;
        var texOffY = +glyphOnMap.TexOffY;
        list.Add($S04().Construct(num5, (-num6 - bitmapH), 0));
        list.Add($S04().Construct(num5, -num6, 0));
        list.Add($S04().Construct((num5 + bitmapW), (-num6 - bitmapH), 0));
        list.Add($S04().Construct((num5 + bitmapW), -num6, 0));
        list4.Add($T03().op_UnaryNegation($T03().UnitZ.MemberwiseClone()).MemberwiseClone());
        list4.Add($T03().op_UnaryNegation($T03().UnitZ.MemberwiseClone()).MemberwiseClone());
        list4.Add($T03().op_UnaryNegation($T03().UnitZ.MemberwiseClone()).MemberwiseClone());
        list4.Add($T03().op_UnaryNegation($T03().UnitZ.MemberwiseClone()).MemberwiseClone());
        list2.Add($S05().Construct(texOffX, (texOffY + +((bitmapH2 / +height)))));
        list2.Add($S05().Construct(texOffX, texOffY));
        list2.Add($S05().Construct((texOffX + +((bitmapW2 / +width))), (texOffY + +((bitmapH2 / +height)))));
        list2.Add($S05().Construct((texOffX + +((bitmapW2 / +width))), texOffY));
        list3.Add((((num + 1) >>> 0) & 0xFFFF));
        list3.Add(num);
        list3.Add((((num + 2) >>> 0) & 0xFFFF));
        list3.Add((((num + 1) >>> 0) & 0xFFFF));
        list3.Add((((num + 2) >>> 0) & 0xFFFF));
        list3.Add((((num + 3) >>> 0) & 0xFFFF));
        num = (((num + 4) >>> 0) & 0xFFFF);
      }
    }
    this.set_Vertices($T05().prototype.ToArray.call(list));
    this.set_Triangles($T07().prototype.ToArray.call(list3));
    this.set_UVs($T06().prototype.ToArray.call(list2));
    this.set_Normals($T05().prototype.ToArray.call(list4));
    this.set_Vertices((this._fontMap).FixTextKerning(this.get_Vertices(), this._text, 1));
    var num7 = +this.get_Vertices()[(((this.get_Vertices().length | 0) - 1) | 0)].x - +this.get_Vertices()[0].x;
    var x = +this.get_Vertices()[0].x;

    for (var j = 0; j < (this.get_Vertices().length | 0); j = ((j + 1) | 0)) {
      (vec = vec.MemberwiseClone(), 
        $T03().prototype._ctor.call(vec, 
          (+this.get_Vertices()[j].x - x) - +((num7 / 2)), 
          +this.get_Vertices()[j].y - +((num4 / 2)), 
          this.get_Vertices()[j].z
        ));
      var float = $T03().op_Division(vec.MemberwiseClone(), num7).MemberwiseClone();
      this.Mesh$Vertices[j] = float.MemberwiseClone();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
      Name: "Fusee.Engine.GUI.GUIText", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Engine.Core.FontMap"), $.String]), 
      GUIText__ctor
    );

    $.Method({Static:false, Public:false}, "CreateTextMesh", 
      JSIL.MethodSignature.Void, 
      GUIText_CreateTextMesh
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fontMap", $asm04.TypeRef("Fusee.Engine.Core.FontMap"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_text", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Fusee.Engine.GUI.NamespaceDoc", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.SceneInteractionHandler */ 

(function SceneInteractionHandler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneContainer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0D.Fusee.Xene.SceneVisitor)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.ScenePicker)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Func$b2.Of($asm04.Fusee.Engine.Core.PickResult, $asm0F.System.Single))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Func$b2.Of($asm04.Fusee.Engine.Core.PickResult, $asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.PickResult))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Engine.Core.PickResult)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm05.Fusee.Engine.GUI.SceneInteractionHandler_$l$gc)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.PickResult))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIButton)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [$asm0A.Fusee.Math.Core.float2, $asm0A.Fusee.Math.Core.float2]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm04.Fusee.Engine.Core.PickResult]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0B.Fusee.Serialization.SceneNodeContainer, [$asm04.Fusee.Engine.Core.PickResult]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer).get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer).get_Item)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer).Contains)) ();
  };


  function SceneInteractionHandler__ctor (scene) {
    $T01().prototype._ctor.call(this);
    this._scenePicker = new ($T02())(scene);
  }; 

  function SceneInteractionHandler_CheckForInteractiveObjects (mousePos, canvasWidth, canvasHeight) {
    var arg_83_1 = null, arg_AE_1 = null;
    this._scenePicker.View = this.View.MemberwiseClone();
    this._scenePicker.Projection = this.Projection.MemberwiseClone();
    var pickPos = $T03().op_Addition($S00().CallStatic($T03(), "op_Multiply", null, mousePos.MemberwiseClone(), $S01().Construct(+((2 / +canvasWidth)), +((-2 / +canvasHeight)))).MemberwiseClone(), $S01().Construct(-1, 1));
    var arg_83_0 = $T09().ToList$b1($T08())((this._scenePicker).Pick(pickPos.MemberwiseClone()));
    if ((arg_83_1 = $T0A().$l$g9__7_0) === null) {
      arg_83_1 = $T0A().$l$g9__7_0 = $T05().New($T0A().$l$g9, null, new JSIL.MethodPointerInfo($asm05.Fusee.Engine.GUI.SceneInteractionHandler_$l$gc, "$lCheckForInteractiveObjects$gb__7_0", $S02(), false, false));
    }
    var list = $T09().ToList$b1($T08())($S03().CallStatic($T09(), "OrderBy$b2", [$asm04.Fusee.Engine.Core.PickResult, $asm0F.System.Single], arg_83_0, arg_83_1));
    var arg_AE_0 = list;
    if ((arg_AE_1 = $T0A().$l$g9__7_1) === null) {
      arg_AE_1 = $T0A().$l$g9__7_1 = $T06().New($T0A().$l$g9, null, new JSIL.MethodPointerInfo($asm05.Fusee.Engine.GUI.SceneInteractionHandler_$l$gc, "$lCheckForInteractiveObjects$gb__7_1", $S04(), false, false));
    }
    var pickResults = $T09().ToList$b1($T0E())($S05().CallStatic($T09(), "Select$b2", [$asm04.Fusee.Engine.Core.PickResult, $asm0B.Fusee.Serialization.SceneNodeContainer], arg_AE_0, arg_AE_1));
    var pickResult = $S06().CallStatic($T09(), "FirstOrDefault$b1", [$asm04.Fusee.Engine.Core.PickResult], list);
    this._pickRes = null;
    if (pickResult !== null) {
      this._pickRes = $thisType.FindLeafNodeInPickRes((
          (pickResult !== null)
             ? pickResult.Node
             : null)
        , pickResults);
    }
    if (this._pickRes !== this._pickResCache) {
      $S07().CallVirtual("Traverse", null, this, this._pickResCache);
    }
    this._pickResCache = this._pickRes;
    if (this._pickRes !== null) {
      $S07().CallVirtual("Traverse", null, this, this._pickRes);
    }
  }; 

  function SceneInteractionHandler_FindLeafNodeInPickRes (firstPickRes, pickResults) {
    var $temp00;
    var flag = ($IM00().Call(pickResults, null) | 0) === 1;
    if (flag) {
      var result = $IM01().Call(pickResults, null, 0);
    } else {
      var flag2 = firstPickRes.Children === null;
      if (flag2) {
        result = firstPickRes;
      } else {

        for (var a$0 = firstPickRes.Children._items, i$0 = 0, l$0 = (firstPickRes.Children._size | 0); i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var current = a$0[i$0];
          var flag3 = $IM02().Call(pickResults, null, current);
          if (flag3) {
            result = current;
            return result;
          }
          var flag4 = current.Children !== null;
          if (flag4) {
            var sceneNodeContainer = $thisType.FindLeafNodeInPickRes(current, pickResults);
            if (sceneNodeContainer !== null) {
              result = sceneNodeContainer;
              return result;
            }
          }
        }
        result = null;
      }
    }
    return result;
  }; 

  function SceneInteractionHandler_InvokeInteraction (btn) {
    var flag = (this.SceneVisitor$CurrentNode$value === this._pickResCache) && 
    (this._pickResCache !== this._pickRes);
    if (flag) {
      btn.IsMouseOver = false;
      btn.DetachEvents();
    }
    var flag2 = this.SceneVisitor$CurrentNode$value === this._pickRes;
    if (flag2) {
      btn.IsMouseOver = true;
      btn.InvokeEvents();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.SceneVisitor"), 
      Name: "Fusee.Engine.GUI.SceneInteractionHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneContainer")), 
      SceneInteractionHandler__ctor
    );

    $.Method({Static:false, Public:true }, "CheckForInteractiveObjects", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("Fusee.Math.Core.float2"), $.Int32, 
          $.Int32
        ]), 
      SceneInteractionHandler_CheckForInteractiveObjects
    );

    $.Method({Static:true , Public:false}, "FindLeafNodeInPickRes", 
      new JSIL.MethodSignature($asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")])]), 
      SceneInteractionHandler_FindLeafNodeInPickRes
    );

    $.Method({Static:false, Public:true }, "InvokeInteraction", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButton")), 
      SceneInteractionHandler_InvokeInteraction
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_scenePicker", $asm04.TypeRef("Fusee.Engine.Core.ScenePicker"));

    $.Field({Static:false, Public:true }, "View", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:true }, "Projection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_pickRes", $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"));

    $.Field({Static:false, Public:false}, "_pickResCache", $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.SceneInteractionHandler+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.PickResult)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lCheckForInteractiveObjects$gb__7_0 (pr) {
    return pr.get_ClipPos().z;
  }; 

  function $l$gc_$lCheckForInteractiveObjects$gb__7_1 (x) {
    return x.Node;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.GUI.SceneInteractionHandler+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lCheckForInteractiveObjects$gb__7_0", 
      new JSIL.MethodSignature($.Single, [$asm04.TypeRef("Fusee.Engine.Core.PickResult")]), 
      $l$gc_$lCheckForInteractiveObjects$gb__7_0
    );

    $.Method({Static:false, Public:false}, "$lCheckForInteractiveObjects$gb__7_1", 
      new JSIL.MethodSignature($asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), [$asm04.TypeRef("Fusee.Engine.Core.PickResult")]), 
      $l$gc_$lCheckForInteractiveObjects$gb__7_1
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__7_0", $asm0F.TypeRef("System.Func`2", [$asm04.TypeRef("Fusee.Engine.Core.PickResult"), $.Single]));

    $.Field({Static:true , Public:true }, "$l$g9__7_1", $asm0F.TypeRef("System.Func`2", [$asm04.TypeRef("Fusee.Engine.Core.PickResult"), $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

