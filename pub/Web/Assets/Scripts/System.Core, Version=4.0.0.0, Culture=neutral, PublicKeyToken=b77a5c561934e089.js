/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm15 = JSIL.DeclareAssembly("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
/* delegate System.Action`9 */ 

JSIL.MakeDelegate("System.Action`9", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`9").in(), new JSIL.GenericParameter("T2", "System.Action`9").in(), 
      new JSIL.GenericParameter("T3", "System.Action`9").in(), new JSIL.GenericParameter("T4", "System.Action`9").in(), 
      new JSIL.GenericParameter("T5", "System.Action`9").in(), new JSIL.GenericParameter("T6", "System.Action`9").in(), 
      new JSIL.GenericParameter("T7", "System.Action`9").in(), new JSIL.GenericParameter("T8", "System.Action`9").in(), 
      new JSIL.GenericParameter("T9", "System.Action`9").in()
    ]));

/* delegate System.Action`10 */ 

JSIL.MakeDelegate("System.Action`10", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`10").in(), new JSIL.GenericParameter("T2", "System.Action`10").in(), 
      new JSIL.GenericParameter("T3", "System.Action`10").in(), new JSIL.GenericParameter("T4", "System.Action`10").in(), 
      new JSIL.GenericParameter("T5", "System.Action`10").in(), new JSIL.GenericParameter("T6", "System.Action`10").in(), 
      new JSIL.GenericParameter("T7", "System.Action`10").in(), new JSIL.GenericParameter("T8", "System.Action`10").in(), 
      new JSIL.GenericParameter("T9", "System.Action`10").in(), new JSIL.GenericParameter("T10", "System.Action`10").in()
    ]));

/* delegate System.Action`11 */ 

JSIL.MakeDelegate("System.Action`11", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`11").in(), new JSIL.GenericParameter("T2", "System.Action`11").in(), 
      new JSIL.GenericParameter("T3", "System.Action`11").in(), new JSIL.GenericParameter("T4", "System.Action`11").in(), 
      new JSIL.GenericParameter("T5", "System.Action`11").in(), new JSIL.GenericParameter("T6", "System.Action`11").in(), 
      new JSIL.GenericParameter("T7", "System.Action`11").in(), new JSIL.GenericParameter("T8", "System.Action`11").in(), 
      new JSIL.GenericParameter("T9", "System.Action`11").in(), new JSIL.GenericParameter("T10", "System.Action`11").in(), 
      new JSIL.GenericParameter("T11", "System.Action`11").in()
    ]));

/* delegate System.Action`12 */ 

JSIL.MakeDelegate("System.Action`12", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`12").in(), new JSIL.GenericParameter("T2", "System.Action`12").in(), 
      new JSIL.GenericParameter("T3", "System.Action`12").in(), new JSIL.GenericParameter("T4", "System.Action`12").in(), 
      new JSIL.GenericParameter("T5", "System.Action`12").in(), new JSIL.GenericParameter("T6", "System.Action`12").in(), 
      new JSIL.GenericParameter("T7", "System.Action`12").in(), new JSIL.GenericParameter("T8", "System.Action`12").in(), 
      new JSIL.GenericParameter("T9", "System.Action`12").in(), new JSIL.GenericParameter("T10", "System.Action`12").in(), 
      new JSIL.GenericParameter("T11", "System.Action`12").in(), new JSIL.GenericParameter("T12", "System.Action`12").in()
    ]));

/* delegate System.Action`13 */ 

JSIL.MakeDelegate("System.Action`13", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`13").in(), new JSIL.GenericParameter("T2", "System.Action`13").in(), 
      new JSIL.GenericParameter("T3", "System.Action`13").in(), new JSIL.GenericParameter("T4", "System.Action`13").in(), 
      new JSIL.GenericParameter("T5", "System.Action`13").in(), new JSIL.GenericParameter("T6", "System.Action`13").in(), 
      new JSIL.GenericParameter("T7", "System.Action`13").in(), new JSIL.GenericParameter("T8", "System.Action`13").in(), 
      new JSIL.GenericParameter("T9", "System.Action`13").in(), new JSIL.GenericParameter("T10", "System.Action`13").in(), 
      new JSIL.GenericParameter("T11", "System.Action`13").in(), new JSIL.GenericParameter("T12", "System.Action`13").in(), 
      new JSIL.GenericParameter("T13", "System.Action`13").in()
    ]));

/* delegate System.Action`14 */ 

JSIL.MakeDelegate("System.Action`14", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`14").in(), new JSIL.GenericParameter("T2", "System.Action`14").in(), 
      new JSIL.GenericParameter("T3", "System.Action`14").in(), new JSIL.GenericParameter("T4", "System.Action`14").in(), 
      new JSIL.GenericParameter("T5", "System.Action`14").in(), new JSIL.GenericParameter("T6", "System.Action`14").in(), 
      new JSIL.GenericParameter("T7", "System.Action`14").in(), new JSIL.GenericParameter("T8", "System.Action`14").in(), 
      new JSIL.GenericParameter("T9", "System.Action`14").in(), new JSIL.GenericParameter("T10", "System.Action`14").in(), 
      new JSIL.GenericParameter("T11", "System.Action`14").in(), new JSIL.GenericParameter("T12", "System.Action`14").in(), 
      new JSIL.GenericParameter("T13", "System.Action`14").in(), new JSIL.GenericParameter("T14", "System.Action`14").in()
    ]));

/* delegate System.Action`15 */ 

JSIL.MakeDelegate("System.Action`15", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`15").in(), new JSIL.GenericParameter("T2", "System.Action`15").in(), 
      new JSIL.GenericParameter("T3", "System.Action`15").in(), new JSIL.GenericParameter("T4", "System.Action`15").in(), 
      new JSIL.GenericParameter("T5", "System.Action`15").in(), new JSIL.GenericParameter("T6", "System.Action`15").in(), 
      new JSIL.GenericParameter("T7", "System.Action`15").in(), new JSIL.GenericParameter("T8", "System.Action`15").in(), 
      new JSIL.GenericParameter("T9", "System.Action`15").in(), new JSIL.GenericParameter("T10", "System.Action`15").in(), 
      new JSIL.GenericParameter("T11", "System.Action`15").in(), new JSIL.GenericParameter("T12", "System.Action`15").in(), 
      new JSIL.GenericParameter("T13", "System.Action`15").in(), new JSIL.GenericParameter("T14", "System.Action`15").in(), 
      new JSIL.GenericParameter("T15", "System.Action`15").in()
    ]));

/* delegate System.Action`16 */ 

JSIL.MakeDelegate("System.Action`16", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "in T16"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`16").in(), new JSIL.GenericParameter("T2", "System.Action`16").in(), 
      new JSIL.GenericParameter("T3", "System.Action`16").in(), new JSIL.GenericParameter("T4", "System.Action`16").in(), 
      new JSIL.GenericParameter("T5", "System.Action`16").in(), new JSIL.GenericParameter("T6", "System.Action`16").in(), 
      new JSIL.GenericParameter("T7", "System.Action`16").in(), new JSIL.GenericParameter("T8", "System.Action`16").in(), 
      new JSIL.GenericParameter("T9", "System.Action`16").in(), new JSIL.GenericParameter("T10", "System.Action`16").in(), 
      new JSIL.GenericParameter("T11", "System.Action`16").in(), new JSIL.GenericParameter("T12", "System.Action`16").in(), 
      new JSIL.GenericParameter("T13", "System.Action`16").in(), new JSIL.GenericParameter("T14", "System.Action`16").in(), 
      new JSIL.GenericParameter("T15", "System.Action`16").in(), new JSIL.GenericParameter("T16", "System.Action`16").in()
    ]));

/* delegate System.Func`10 */ 

JSIL.MakeDelegate("System.Func`10", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`10").out(), [
      new JSIL.GenericParameter("T1", "System.Func`10").in(), new JSIL.GenericParameter("T2", "System.Func`10").in(), 
      new JSIL.GenericParameter("T3", "System.Func`10").in(), new JSIL.GenericParameter("T4", "System.Func`10").in(), 
      new JSIL.GenericParameter("T5", "System.Func`10").in(), new JSIL.GenericParameter("T6", "System.Func`10").in(), 
      new JSIL.GenericParameter("T7", "System.Func`10").in(), new JSIL.GenericParameter("T8", "System.Func`10").in(), 
      new JSIL.GenericParameter("T9", "System.Func`10").in()
    ]));

/* delegate System.Func`11 */ 

JSIL.MakeDelegate("System.Func`11", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`11").out(), [
      new JSIL.GenericParameter("T1", "System.Func`11").in(), new JSIL.GenericParameter("T2", "System.Func`11").in(), 
      new JSIL.GenericParameter("T3", "System.Func`11").in(), new JSIL.GenericParameter("T4", "System.Func`11").in(), 
      new JSIL.GenericParameter("T5", "System.Func`11").in(), new JSIL.GenericParameter("T6", "System.Func`11").in(), 
      new JSIL.GenericParameter("T7", "System.Func`11").in(), new JSIL.GenericParameter("T8", "System.Func`11").in(), 
      new JSIL.GenericParameter("T9", "System.Func`11").in(), new JSIL.GenericParameter("T10", "System.Func`11").in()
    ]));

/* delegate System.Func`12 */ 

JSIL.MakeDelegate("System.Func`12", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`12").out(), [
      new JSIL.GenericParameter("T1", "System.Func`12").in(), new JSIL.GenericParameter("T2", "System.Func`12").in(), 
      new JSIL.GenericParameter("T3", "System.Func`12").in(), new JSIL.GenericParameter("T4", "System.Func`12").in(), 
      new JSIL.GenericParameter("T5", "System.Func`12").in(), new JSIL.GenericParameter("T6", "System.Func`12").in(), 
      new JSIL.GenericParameter("T7", "System.Func`12").in(), new JSIL.GenericParameter("T8", "System.Func`12").in(), 
      new JSIL.GenericParameter("T9", "System.Func`12").in(), new JSIL.GenericParameter("T10", "System.Func`12").in(), 
      new JSIL.GenericParameter("T11", "System.Func`12").in()
    ]));

/* delegate System.Func`13 */ 

JSIL.MakeDelegate("System.Func`13", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`13").out(), [
      new JSIL.GenericParameter("T1", "System.Func`13").in(), new JSIL.GenericParameter("T2", "System.Func`13").in(), 
      new JSIL.GenericParameter("T3", "System.Func`13").in(), new JSIL.GenericParameter("T4", "System.Func`13").in(), 
      new JSIL.GenericParameter("T5", "System.Func`13").in(), new JSIL.GenericParameter("T6", "System.Func`13").in(), 
      new JSIL.GenericParameter("T7", "System.Func`13").in(), new JSIL.GenericParameter("T8", "System.Func`13").in(), 
      new JSIL.GenericParameter("T9", "System.Func`13").in(), new JSIL.GenericParameter("T10", "System.Func`13").in(), 
      new JSIL.GenericParameter("T11", "System.Func`13").in(), new JSIL.GenericParameter("T12", "System.Func`13").in()
    ]));

/* delegate System.Func`14 */ 

JSIL.MakeDelegate("System.Func`14", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`14").out(), [
      new JSIL.GenericParameter("T1", "System.Func`14").in(), new JSIL.GenericParameter("T2", "System.Func`14").in(), 
      new JSIL.GenericParameter("T3", "System.Func`14").in(), new JSIL.GenericParameter("T4", "System.Func`14").in(), 
      new JSIL.GenericParameter("T5", "System.Func`14").in(), new JSIL.GenericParameter("T6", "System.Func`14").in(), 
      new JSIL.GenericParameter("T7", "System.Func`14").in(), new JSIL.GenericParameter("T8", "System.Func`14").in(), 
      new JSIL.GenericParameter("T9", "System.Func`14").in(), new JSIL.GenericParameter("T10", "System.Func`14").in(), 
      new JSIL.GenericParameter("T11", "System.Func`14").in(), new JSIL.GenericParameter("T12", "System.Func`14").in(), 
      new JSIL.GenericParameter("T13", "System.Func`14").in()
    ]));

/* delegate System.Func`15 */ 

JSIL.MakeDelegate("System.Func`15", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`15").out(), [
      new JSIL.GenericParameter("T1", "System.Func`15").in(), new JSIL.GenericParameter("T2", "System.Func`15").in(), 
      new JSIL.GenericParameter("T3", "System.Func`15").in(), new JSIL.GenericParameter("T4", "System.Func`15").in(), 
      new JSIL.GenericParameter("T5", "System.Func`15").in(), new JSIL.GenericParameter("T6", "System.Func`15").in(), 
      new JSIL.GenericParameter("T7", "System.Func`15").in(), new JSIL.GenericParameter("T8", "System.Func`15").in(), 
      new JSIL.GenericParameter("T9", "System.Func`15").in(), new JSIL.GenericParameter("T10", "System.Func`15").in(), 
      new JSIL.GenericParameter("T11", "System.Func`15").in(), new JSIL.GenericParameter("T12", "System.Func`15").in(), 
      new JSIL.GenericParameter("T13", "System.Func`15").in(), new JSIL.GenericParameter("T14", "System.Func`15").in()
    ]));

/* delegate System.Func`16 */ 

JSIL.MakeDelegate("System.Func`16", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`16").out(), [
      new JSIL.GenericParameter("T1", "System.Func`16").in(), new JSIL.GenericParameter("T2", "System.Func`16").in(), 
      new JSIL.GenericParameter("T3", "System.Func`16").in(), new JSIL.GenericParameter("T4", "System.Func`16").in(), 
      new JSIL.GenericParameter("T5", "System.Func`16").in(), new JSIL.GenericParameter("T6", "System.Func`16").in(), 
      new JSIL.GenericParameter("T7", "System.Func`16").in(), new JSIL.GenericParameter("T8", "System.Func`16").in(), 
      new JSIL.GenericParameter("T9", "System.Func`16").in(), new JSIL.GenericParameter("T10", "System.Func`16").in(), 
      new JSIL.GenericParameter("T11", "System.Func`16").in(), new JSIL.GenericParameter("T12", "System.Func`16").in(), 
      new JSIL.GenericParameter("T13", "System.Func`16").in(), new JSIL.GenericParameter("T14", "System.Func`16").in(), 
      new JSIL.GenericParameter("T15", "System.Func`16").in()
    ]));

/* delegate System.Func`17 */ 

JSIL.MakeDelegate("System.Func`17", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "in T16", 
    "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`17").out(), [
      new JSIL.GenericParameter("T1", "System.Func`17").in(), new JSIL.GenericParameter("T2", "System.Func`17").in(), 
      new JSIL.GenericParameter("T3", "System.Func`17").in(), new JSIL.GenericParameter("T4", "System.Func`17").in(), 
      new JSIL.GenericParameter("T5", "System.Func`17").in(), new JSIL.GenericParameter("T6", "System.Func`17").in(), 
      new JSIL.GenericParameter("T7", "System.Func`17").in(), new JSIL.GenericParameter("T8", "System.Func`17").in(), 
      new JSIL.GenericParameter("T9", "System.Func`17").in(), new JSIL.GenericParameter("T10", "System.Func`17").in(), 
      new JSIL.GenericParameter("T11", "System.Func`17").in(), new JSIL.GenericParameter("T12", "System.Func`17").in(), 
      new JSIL.GenericParameter("T13", "System.Func`17").in(), new JSIL.GenericParameter("T14", "System.Func`17").in(), 
      new JSIL.GenericParameter("T15", "System.Func`17").in(), new JSIL.GenericParameter("T16", "System.Func`17").in()
    ]));

/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0F.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading");
/* enum System.Threading.LockRecursionPolicy */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.LockRecursionPolicy", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoRecursion: 0, 
    SupportsRecursion: 1, 
  }
);

/* class System.Threading.ReaderWriterCount */ 

(function ReaderWriterCount$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterCount", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "lockID", $.Int64);

    $.Field({Static:false, Public:true }, "readercount", $.Int32);

    $.Field({Static:false, Public:true }, "writercount", $.Int32);

    $.Field({Static:false, Public:true }, "upgradecount", $.Int32);

    $.Field({Static:false, Public:true }, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.ReaderWriterLockSlim */ 

(function ReaderWriterLockSlim$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterLockSlim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Threading.LockRecursionPolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearUpgraderWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWriterAcquired", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWritersWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterReadLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterWriteLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateReadWaiters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaiters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaitersPreferringWriters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitReadLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitWriteLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasNoWaiters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUpgradeableReadLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWriteLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveUpgradeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveWriteCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingUpgradeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingWriteCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNumReaders", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetThreadRWCount", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Threading.ReaderWriterCount"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeThreadCounts", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRWEntryEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Threading.ReaderWriterCount")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRwHashEntryChanged", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Threading.ReaderWriterCount")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWriterAcquired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyCreateEvent", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.EventWaitHandle")]), $asm15.TypeRef("System.Threading.ReaderWriterLockSlim+EnterLockType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasNoWaiters", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpgraderWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWriterAcquired", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWritersWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSpinForEnterAnyRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSpinForEnterAnyWrite", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpinWait", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterReadLockCore", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterWriteLockCore", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitOnEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Threading.EventWaitHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $asm15.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker"), $asm15.TypeRef("System.Threading.ReaderWriterLockSlim+EnterLockType")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ProcessorCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fIsReentrant", $.Boolean);

    $.Field({Static:false, Public:false}, "_spinLock", $asm15.TypeRef("System.Threading.ReaderWriterLockSlim+SpinLock"));

    $.Field({Static:false, Public:false}, "_numWriteWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "_numReadWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "_numWriteUpgradeWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "_numUpgradeWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "_waiterStates", $asm15.TypeRef("System.Threading.ReaderWriterLockSlim+WaiterStates"));

    $.Field({Static:false, Public:false}, "_upgradeLockOwnerId", $.Int32);

    $.Field({Static:false, Public:false}, "_writeLockOwnerId", $.Int32);

    $.Field({Static:false, Public:false}, "_writeEvent", $asm0F.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "_readEvent", $asm0F.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "_upgradeEvent", $asm0F.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "_waitUpgradeEvent", $asm0F.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:true , Public:false}, "s_nextLockID", $.Int64);

    $.Field({Static:false, Public:false}, "_lockID", $.Int64);

    $.Field({Static:true , Public:false}, "t_rwc", $asm15.TypeRef("System.Threading.ReaderWriterCount"));

    $.Field({Static:false, Public:false}, "_fUpgradeThreadHoldingRead", $.Boolean);

    $.Field({Static:false, Public:false}, "_owners", $.UInt32);

    $.Field({Static:false, Public:false}, "_fDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "HasNoWaiters", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsUpgradeableReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWriteLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "RecursiveReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveWriteCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingWriteCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Threading.ReaderWriterLockSlim+TimeoutTracker */ 

(function TimeoutTracker$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Threading.ReaderWriterLockSlim+TimeoutTracker", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemainingMilliseconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_total", $.Int32);

    $.Field({Static:false, Public:false}, "_start", $.Int32);

    $.Property({Static:false, Public:true }, "RemainingMilliseconds", $.Int32);

    $.Property({Static:false, Public:true }, "IsExpired", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Threading.ReaderWriterLockSlim+SpinLock */ 

(function SpinLock$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Threading.ReaderWriterLockSlim+SpinLock", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Enter", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Threading.ReaderWriterLockSlim+EnterSpinLockReason"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterSpin", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Threading.ReaderWriterLockSlim+EnterSpinLockReason"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Exit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnterForEnterAnyReadDeprioritizedCount", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnterForEnterAnyWriteDeprioritizedCount", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEnterDeprioritizationStateChange", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Threading.ReaderWriterLockSlim+EnterSpinLockReason")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEnterDeprioritized", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Threading.ReaderWriterLockSlim+EnterSpinLockReason")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_isLocked", $.Int32);

    $.Field({Static:false, Public:false}, "_enterDeprioritizationState", $.Int32);

    $.Property({Static:false, Public:false}, "EnterForEnterAnyReadDeprioritizedCount", $.UInt16);

    $.Property({Static:false, Public:false}, "EnterForEnterAnyWriteDeprioritizedCount", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Threading.ReaderWriterLockSlim+WaiterStates */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.ReaderWriterLockSlim+WaiterStates", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    NoWaiters: 1, 
    WriteWaiterSignaled: 2, 
    UpgradeableReadWaiterSignaled: 4, 
  }
);

/* enum System.Threading.ReaderWriterLockSlim+EnterSpinLockReason */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.ReaderWriterLockSlim+EnterSpinLockReason", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EnterAnyRead: 0, 
    ExitAnyRead: 1, 
    EnterWrite: 2, 
    UpgradeToWrite: 3, 
    EnterRecursiveWrite: 4, 
    ExitAnyWrite: 5, 
    OperationMask: 7, 
    Wait: 8, 
  }
);

/* enum System.Threading.ReaderWriterLockSlim+EnterLockType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.ReaderWriterLockSlim+EnterLockType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Read: 0, 
    UpgradeableRead: 1, 
    Write: 2, 
    UpgradeToWrite: 3, 
  }
);

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
/* class System.Collections.Generic.HashSet`1 */ 

(function HashSet$b1$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSet`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.HashSet`1+Enumerator", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");
    ; 
    ; 
    ; 
    ; 
    ; 
    ; 
    ; 
    ; 

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm0F.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 6 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");
    ; 
    ; 
    ; 
    ; 

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.CopyPosition */ 

(function CopyPosition$Members () {
  var $, $thisType;


  function CopyPosition_get_Column () {
    return this.CopyPosition$Column$value;
  }; 

  function CopyPosition_get_Row () {
    return this.CopyPosition$Row$value;
  }; 


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.CopyPosition", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Method({Static:false, Public:false}, "get_Column", 
      JSIL.MethodSignature.Return($.Int32), 
      CopyPosition_get_Column
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Row", 
      JSIL.MethodSignature.Return($.Int32), 
      CopyPosition_get_Row
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Start", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "CopyPosition$Row$value", $.Int32)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "CopyPosition$Column$value", $.Int32)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:true }, "Start", $.Type);

    $.Property({Static:false, Public:false}, "Row", $.Int32);

    $.Property({Static:false, Public:false}, "Column", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.LargeArrayBuilder`1 */ 

(function LargeArrayBuilder$b1$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.LargeArrayBuilder`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.CopyPosition"), [
          $asm15.TypeRef("System.Collections.Generic.CopyPosition"), $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "SlowAdd", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryMove", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxCapacity", $.Int32);

    $.Field({Static:false, Public:false}, "_first", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_buffers", $asm15.TypeRef("System.Collections.Generic.ArrayBuilder`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "_current", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.ArrayBuilder`1 */ 

(function ArrayBuilder$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.ArrayBuilder`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "UncheckedAdd", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "_array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.Marker */ 

(function Marker$Members () {
  var $, $thisType;


  function Marker_get_Count () {
    return this.Marker$Count$value;
  }; 

  function Marker_get_Index () {
    return this.Marker$Index$value;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.Marker", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      Marker_get_Count
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32), 
      Marker_get_Index
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Marker$Count$value", $.Int32)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Marker$Index$value", $.Int32)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.SparseArrayBuilder`1 */ 

(function SparseArrayBuilder$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.SparseArrayBuilder`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Reserve", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "_builder", $asm15.TypeRef("System.Collections.Generic.LargeArrayBuilder`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_markers", $asm15.TypeRef("System.Collections.Generic.ArrayBuilder`1", [$asm15.TypeRef("System.Collections.Generic.Marker")]));

    $.Field({Static:false, Public:false}, "_reservedCount", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.EnumerableHelpers */ 

(function EnumerableHelpers$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Collections.Generic.EnumerableHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "IterativeCopy", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Dynamic");
JSIL.MakeTypeAlias($jsilcore, "System.Runtime.CompilerServices.CallSiteBinder");

/* class System.Runtime.CompilerServices.CallSiteBinder+LambdaSignature`1 */ 

(function LambdaSignature$b1$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.CallSiteBinder+LambdaSignature`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;
    ; 

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parameters", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ReturnLabel", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicMetaObjectBinder */ 

(function DynamicMetaObjectBinder$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
      Name: "System.Dynamic.DynamicMetaObjectBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddRemoteObjectRestrictions", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.BindingRestrictions"), [
          $asm15.TypeRef("System.Dynamic.BindingRestrictions"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateArgumentMetaObjects", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), [$jsilcore.TypeRef("System.Array", [$.Object]), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsComObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComObjectType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BinaryOperationBinder */ 

(function BinaryOperationBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.BinaryOperationBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Operation", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions */ 

(function BindingRestrictions$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExpressionRestriction", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInstanceRestriction", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTypeRestriction", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeRestriction", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Property({Static:false, Public:false}, "DebugView", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+TestBuilder */ 

(function TestBuilder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions+TestBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_unique", $asm15.TypeRef("System.Linq.Expressions.Set`1", [$asm15.TypeRef("System.Dynamic.BindingRestrictions")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tests", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm15.TypeRef("System.Dynamic.BindingRestrictions+TestBuilder+AndNode")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Dynamic.BindingRestrictions+TestBuilder+AndNode */ 

(function AndNode$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Dynamic.BindingRestrictions+TestBuilder+AndNode", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Depth", $.Int32);

    $.Field({Static:false, Public:false}, "Node", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+MergedRestriction */ 

(function MergedRestriction$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+MergedRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Dynamic.BindingRestrictions"), $asm15.TypeRef("System.Dynamic.BindingRestrictions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Left", $asm15.TypeRef("System.Dynamic.BindingRestrictions"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Right", $asm15.TypeRef("System.Dynamic.BindingRestrictions"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+CustomRestriction */ 

(function CustomRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+CustomRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+TypeRestriction */ 

(function TypeRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+TypeRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+InstanceRestriction */ 

(function InstanceRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+InstanceRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+BindingRestrictionsProxy */ 

(function BindingRestrictionsProxy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions+BindingRestrictionsProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Dynamic.BindingRestrictions"));

    $.Property({Static:false, Public:true }, "Test", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ConvertBinder */ 

(function ConvertBinder$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.ConvertBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.CreateInstanceBinder */ 

(function CreateInstanceBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.CreateInstanceBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackCreateInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackCreateInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DeleteIndexBinder */ 

(function DeleteIndexBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.DeleteIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackDeleteIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DeleteMemberBinder */ 

(function DeleteMemberBinder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.DeleteMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackDeleteMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicMetaObject */ 

(function DynamicMetaObject$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicMetaObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Dynamic.BindingRestrictions")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Dynamic.BindingRestrictions"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindBinaryOperation", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindConvert", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.ConvertBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindCreateInstance", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteIndex", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.DeleteMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetIndex", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.GetMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvoke", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetIndex", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.SetMemberBinder"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindUnaryOperation", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.UnaryOperationBinder")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LimitType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Restrictions", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RuntimeType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExpressions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Restrictions", $asm15.TypeRef("System.Dynamic.BindingRestrictions"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "RuntimeType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "LimitType", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject */ 

(function DynamicObject$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMetaObject", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryBinaryOperation", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryConvert", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.ConvertBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryCreateInstance", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryDeleteIndex", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryDeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.DeleteMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetIndex", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.GetMemberBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryInvoke", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryInvokeMember", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrySetIndex", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrySetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.SetMemberBinder"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryUnaryOperation", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.UnaryOperationBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject+MetaDynamic */ 

(function MetaDynamic$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Dynamic.DynamicObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindBinaryOperation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.BinaryOperationBinder"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindConvert", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.ConvertBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindCreateInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DeleteMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.GetMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvoke", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.SetMemberBinder"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindUnaryOperation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.UnaryOperationBinder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildCallArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildCallMethodWithResult", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodNoResult", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodReturnLast", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback"), 
          $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Constant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ConstantExpression"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Dynamic.DynamicObject"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConvertedArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOverridden", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceArgAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoArgs", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), function ($pi) {
        return JSIL.Array.New($asm15.System.Linq.Expressions.Expression, 0);
      });

    $.Property({Static:false, Public:false}, "Value", $asm15.TypeRef("System.Dynamic.DynamicObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Dynamic.DynamicObject+MetaDynamic+Fallback */ 

JSIL.MakeDelegate("System.Dynamic.DynamicObject+MetaDynamic+Fallback", false, [], 
  new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));

/* class System.Dynamic.GetMemberBinder */ 

(function GetMemberBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.GetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+GetBinderAdapter */ 

(function GetBinderAdapter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.GetMemberBinder"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+GetBinderAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Dynamic.InvokeMemberBinder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass2_0 */ 

(function $l$gc__DisplayClass2_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass2_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetMember$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.GetMemberBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindSetMember$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.SetMemberBinder"));

    $.Field({Static:false, Public:true }, "value", $asm15.TypeRef("System.Dynamic.DynamicMetaObject"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindDeleteMember$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.DeleteMemberBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass5_0 */ 

(function $l$gc__DisplayClass5_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass5_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindConvert$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.ConvertBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass6_0 */ 

(function $l$gc__DisplayClass6_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass6_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvokeMember$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvokeMember$gb__1", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.InvokeMemberBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass7_0 */ 

(function $l$gc__DisplayClass7_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass7_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindCreateInstance$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.CreateInstanceBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass8_0 */ 

(function $l$gc__DisplayClass8_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass8_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvoke$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.InvokeBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass9_0 */ 

(function $l$gc__DisplayClass9_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass9_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindBinaryOperation$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.BinaryOperationBinder"));

    $.Field({Static:false, Public:true }, "arg", $asm15.TypeRef("System.Dynamic.DynamicMetaObject"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass10_0 */ 

(function $l$gc__DisplayClass10_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass10_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindUnaryOperation$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.UnaryOperationBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass11_0 */ 

(function $l$gc__DisplayClass11_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass11_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetIndex$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.GetIndexBinder"));

    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass12_0 */ 

(function $l$gc__DisplayClass12_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass12_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindSetIndex$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.SetIndexBinder"));

    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "value", $asm15.TypeRef("System.Dynamic.DynamicMetaObject"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass13_0 */ 

(function $l$gc__DisplayClass13_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass13_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindDeleteIndex$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.DeleteIndexBinder"));

    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoClass */ 

(function ExpandoClass$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNewClass", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Keys", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransitionList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.WeakReference")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndex", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $asm15.TypeRef("System.Dynamic.ExpandoObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseInsensitive", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm15.TypeRef("System.Dynamic.ExpandoObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseSensitive", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_keys", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "_transitions", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.WeakReference")])]));

    $.Field({Static:true , Public:false}, "Empty", $.Type);

    $.Property({Static:false, Public:false}, "Keys", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject */ 

(function ExpandoObject$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "ExpandoContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Class", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Dynamic.ExpandoClass"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [$asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDeletedMember", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteClassCore", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"), [$asm15.TypeRef("System.Dynamic.ExpandoClass"), $asm15.TypeRef("System.Dynamic.ExpandoClass")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Add", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "ContainsKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Values", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "TryGetValue");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm15.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), "GetMetaObject");

    $.ExternalMethod({Static:false, Public:false}, "TryAddMember", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDeleteValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValueForKey", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Object, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "LockObject", $.Object);

    $.Field({Static:false, Public:false}, "_data", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Uninitialized", $.Object);

    $.Field({Static:false, Public:false}, "_propertyChanged", $asm12.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Property({Static:false, Public:false}, "Class", $asm15.TypeRef("System.Dynamic.ExpandoClass"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Keys", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Values", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+KeyCollection */ 

(function KeyCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+KeyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm15.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+KeyCollection+<GetEnumerator>d__15 */ 

(function $lGetEnumerator$gd__15$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+KeyCollection+<GetEnumerator>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.String")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.ExpandoObject+KeyCollection"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$ln$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+ValueCollection */ 

(function ValueCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm15.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+ValueCollection+<GetEnumerator>d__15 */ 

(function $lGetEnumerator$gd__15$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ValueCollection+<GetEnumerator>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.ExpandoObject+ValueCollection"));

    $.Field({Static:false, Public:false}, "$ldata$g5__1", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+MetaExpando */ 

(function MetaExpando$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), 
      Name: "System.Dynamic.ExpandoObject+MetaExpando", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Dynamic.ExpandoObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDynamicTestAndDefer", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm15.TypeRef("System.Dynamic.ExpandoClass"), 
          $asm15.TypeRef("System.Dynamic.ExpandoClass"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DeleteMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.GetMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindGetOrInvokeMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.String, 
          $.Boolean, $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.SetMemberBinder"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClassEnsureIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.ExpandoClass"), [
          $.String, $.Boolean, 
          $asm15.TypeRef("System.Dynamic.ExpandoObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Dynamic.ExpandoClass")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.Property({Static:false, Public:true }, "Value", $asm15.TypeRef("System.Dynamic.ExpandoObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+MetaExpando+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+MetaExpando+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvokeMember$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm15.TypeRef("System.Dynamic.InvokeMemberBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+ExpandoData */ 

(function ExpandoData$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ExpandoData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Dynamic.ExpandoClass"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlignedSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateClass", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.ExpandoClass")])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Class", $asm15.TypeRef("System.Dynamic.ExpandoClass"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Version", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+<GetExpandoEnumerator>d__46 */ 

(function $lGetExpandoEnumerator$gd__46$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+<GetExpandoEnumerator>d__46", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Current", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:true }, "version", $.Int32);

    $.Field({Static:false, Public:true }, "data", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.GetIndexBinder */ 

(function GetIndexBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.GetIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Dynamic.IDynamicMetaObjectProvider */ 

JSIL.MakeInterface(
  "System.Dynamic.IDynamicMetaObjectProvider", true, [], function ($) {
    $.Method({}, "GetMetaObject", new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Linq.Expressions.Expression")]));
  }, []);

/* class System.Dynamic.InvokeBinder */ 

(function InvokeBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.InvokeBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.InvokeMemberBinder */ 

(function InvokeMemberBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.InvokeMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.SetIndexBinder */ 

(function SetIndexBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.SetIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.SetMemberBinder */ 

(function SetMemberBinder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.SetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm15.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.UnaryOperationBinder */ 

(function UnaryOperationBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.UnaryOperationBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm15.TypeRef("System.Dynamic.DynamicMetaObject"), $asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Operation", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Dynamic.Utils");
/* class System.Dynamic.Utils.TypeUtils */ 

(function TypeUtils$Members () {
  var $, $thisType;






































  JSIL.MakeStaticClass("System.Dynamic.Utils.TypeUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AreEquivalent", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreReferenceAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanCache", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindConversionOperator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.MethodInfo")]), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBooleanOperator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNonRefType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNullableType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasBuiltInEqualityOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasIdentityPrimitiveOrNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceEquality", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArithmetic", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBool", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsContravariant", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCovariant", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDelegate", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFloatingPoint", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitBoxingConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitlyConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNumericConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntegerOrBool", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInvariant", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLegalExplicitVariantDelegateConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSameOrSubclass", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsigned", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsignedInt", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidInstanceType", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_mscorlib", $asm0F.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_systemCore", $asm0F.TypeRef("System.Reflection.Assembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Dynamic.Utils.CollectionExtensions */ 

(function CollectionExtensions$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Dynamic.Utils.CollectionExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "First", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Map", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RemoveFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RemoveLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnly", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Dynamic.Utils.EmptyReadOnlyCollection`1 */ 

(function EmptyReadOnlyCollection$b1$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Dynamic.Utils.EmptyReadOnlyCollection`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false}, "Instance", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ContractUtils */ 

(function ContractUtils$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Dynamic.Utils.ContractUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Unreachable", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Requires", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "Requires", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresArrayRange", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.Int32, $.String, 
          $.String
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotEmpty", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotNullItems", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.String], ["T"])
    );

    $.Property({Static:true , Public:false}, "Unreachable", $asm0F.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Dynamic.Utils.Helpers", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ReferenceEqualityComparer`1 */ 

(function ReferenceEqualityComparer$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.ReferenceEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $asm15.TypeRef("System.Dynamic.Utils.ReferenceEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.TypeExtensions */ 

(function TypeExtensions$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Dynamic.Utils.TypeExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetMethodValidated", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Type"), $.String, 
          $asm0F.TypeRef("System.Reflection.BindingFlags"), $asm0F.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterModifier")])
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetParametersCached", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")]), [$asm0F.TypeRef("System.Reflection.MethodBase")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetReturnType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Reflection.MethodBase")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsByRefParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.ParameterInfo")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MatchesArgumentTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_ParamInfoCache", $asm15.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm0F.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.CompilerServices");
/* class System.Runtime.CompilerServices.ExecutionScope */ 

(function ExecutionScope$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ExecutionScope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "IsolateExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Runtime.CompilerServices.CallSite");

JSIL.MakeTypeAlias($jsilcore, "System.Runtime.CompilerServices.CallSite`1");

/* class System.Runtime.CompilerServices.CallSite`1+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.CallSite`1+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateCustomNoMatchDelegate$gb__19_0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateCustomUpdateDelegate$gb__20_0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateCustomUpdateDelegate$gb__20_1", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Runtime.CompilerServices.CallSite`1+<>c", [$.GenericParameter("T")]));

    $.Field({Static:true , Public:true }, "$l$g9__19_0", $asm0F.TypeRef("System.Func`2", [$asm0F.TypeRef("System.Reflection.ParameterInfo"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:true , Public:true }, "$l$g9__20_0", $asm0F.TypeRef("System.Func`2", [$asm0F.TypeRef("System.Reflection.ParameterInfo"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:true , Public:true }, "$l$g9__20_1", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm15.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.CompilerServices.CallSiteOps */ 

(function CallSiteOps$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteOps", true, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps */ 

(function RuntimeOps$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Runtime.CompilerServices.RuntimeOps", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq");
JSIL.DeclareNamespace("System.Linq.Expressions");
/* class System.Linq.Expressions.ExpressionVisitor */ 

(function ExpressionVisitor$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionVisitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateChildType", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSwitch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), [$asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm15.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm15.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Visit", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Visit", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
      new JSIL.MethodSignature("!!0", ["!!0", $.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DefaultExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DynamicExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ElementInit"), [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.GotoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.IndexExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LabelExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabelTarget", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LoopExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm15.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.TryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps+ExpressionQuoter */ 

(function ExpressionQuoter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps+ExpressionQuoter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBox", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Runtime.CompilerServices.IStrongBox"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_scope", $asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_shadowedVars", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm15.TypeRef("System.Linq.Expressions.Set`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps+RuntimeVariables */ 

(function RuntimeVariables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps+RuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Runtime.CompilerServices.IStrongBox")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxes", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Runtime.CompilerServices.IStrongBox")]));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.Closure */ 

(function Closure$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.Closure", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Constants", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.DebugInfoGenerator */ 

(function DebugInfoGenerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.DebugInfoGenerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
          $asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm0F.TypeRef("System.Reflection.MethodBase"), 
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetLocalName", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.SymbolDocumentGenerator */ 

(function SymbolDocumentGenerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"), 
      Name: "System.Runtime.CompilerServices.SymbolDocumentGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolWriter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter"), [$asm0F.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm0F.TypeRef("System.Reflection.MethodBase"), 
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
          $asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetLocalName", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String])
    );

    $.Field({Static:false, Public:false}, "_symbolWriters", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $asm0F.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.CompilerServices.IRuntimeVariables */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IRuntimeVariables", true, [], function ($) {
  }, []);

/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1 */ 

(function ReadOnlyCollectionBuilder$b1$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidTypeException", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNullValue", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_syncRoot", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IList"), 
      /* 5 */ $asm0F.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_builder", $asm15.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_current", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.StrongBox`1 */ 

(function StrongBox$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.StrongBox`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("T"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Runtime.CompilerServices.IStrongBox")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.CompilerServices.IStrongBox */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IStrongBox", true, [], function ($) {
  }, []);

/* class System.Runtime.CompilerServices.TrueReadOnlyCollection`1 */ 

(function TrueReadOnlyCollection$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.TrueReadOnlyCollection`1")]), 
      Name: "System.Runtime.CompilerServices.TrueReadOnlyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.IQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable", true, [], function ($) {
    $.Method({}, "get_Expression", JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression")));
    $.Method({}, "get_ElementType", JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type")));
    $.Method({}, "get_Provider", JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.IQueryProvider")));
    $.Property({}, "Expression");
    $.Property({}, "ElementType");
    $.Property({}, "Provider");
  }, [$asm0F.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable`1", true, ["out T"], function ($) {
  }, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IQueryable`1").out()]), $asm0F.TypeRef("System.Collections.IEnumerable"), $asm15.TypeRef("System.Linq.IQueryable")]);

/* interface System.Linq.IQueryProvider */ 

JSIL.MakeInterface(
  "System.Linq.IQueryProvider", true, [], function ($) {
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable"), [$asm15.TypeRef("System.Linq.Expressions.Expression")]));
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.Expressions.Expression")], ["TElement"]));
    $.Method({}, "Execute", new JSIL.MethodSignature($.Object, [$asm15.TypeRef("System.Linq.Expressions.Expression")]));
    $.Method({}, "Execute", new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.Expressions.Expression")], ["TResult"]));
  }, []);

/* interface System.Linq.IOrderedQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable", true, [], function ($) {
  }, [$asm15.TypeRef("System.Linq.IQueryable"), $asm0F.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IOrderedQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable`1", true, ["out T"], function ($) {
  }, [$asm15.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1").out()]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1").out()]), $asm0F.TypeRef("System.Collections.IEnumerable"), $asm15.TypeRef("System.Linq.IQueryable"), $asm15.TypeRef("System.Linq.IOrderedQueryable")]);

/* class System.Linq.Queryable */ 

(function Queryable$Members () {
  var $, $thisType;



































































































































  JSIL.MakeStaticClass("System.Linq.Queryable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable"), [$asm0F.TypeRef("System.Collections.IEnumerable")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0", 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), "!!0"], ["T1", "T2"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ]), "!!0", 
          "!!1"
        ], ["T1", "T2", "T3"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Func`4", [
              "!!0", "!!1", 
              "!!2", "!!3"
            ]), "!!0", 
          "!!1", "!!2"
        ], ["T1", "T2", "T3", "T4"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Func`5", [
              "!!0", "!!1", 
              "!!2", "!!3", 
              "!!4"
            ]), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5"
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Func`6", [
              "!!0", "!!1", 
              "!!2", "!!3", 
              "!!4", "!!5"
            ]), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5", "T6"
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Func`7", [
              "!!0", "!!1", 
              "!!2", "!!3", 
              "!!4", "!!5", 
              "!!6"
            ]), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5", "T6", "T7"
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSourceExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              "!!1"
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", $.Int32, 
                $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
              ])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.IQueryable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression`1", [$asm0F.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Enumerable */ 

(function Enumerable$Members () {
  var $, $thisType;
















































































































































































































  JSIL.MakeStaticClass("System.Linq.Enumerable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Append", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CastIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombinePredicates", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean]), [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineSelectors", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])], ["TSource", "TMiddle", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConcatIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0", 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DefaultIfEmptyIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DistinctIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), null, ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExceptIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GroupJoinIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IntersectIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "JoinIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OfTypeIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Prepend", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "RangeIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RepeatIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToHashSet", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.HashSet`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToHashSet", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.HashSet`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnionIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WhereIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ZipIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Enumerable+Iterator`1 */ 

(function Iterator$b1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+Iterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "threadId", $.Int32);

    $.Field({Static:false, Public:false}, "state", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereEnumerableIterator`1 */ 

(function WhereEnumerableIterator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereEnumerableIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereEnumerableIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereArrayIterator`1 */ 

(function WhereArrayIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereArrayIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereArrayIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereListIterator`1 */ 

(function WhereListIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereListIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereListIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+SelectEnumerableIterator`2 */ 

(function SelectEnumerableIterator$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+SelectEnumerableIterator`2")]), 
      Name: "System.Linq.Enumerable+SelectEnumerableIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCount", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "_enumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
      /* 5 */ $asm15.TypeRef("System.Linq.IIListProvider`1", [$.GenericParameter("TResult")]), 
      /* 6 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectEnumerableIterator`2 */ 

(function WhereSelectEnumerableIterator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectEnumerableIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectEnumerableIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectArrayIterator`2 */ 

(function WhereSelectArrayIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectArrayIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectArrayIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectListIterator`2 */ 

(function WhereSelectListIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectListIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectListIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+AppendPrependIterator`1 */ 

(function AppendPrependIterator$b1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+AppendPrependIterator`1")]), 
      Name: "System.Linq.Enumerable+AppendPrependIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Append", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [$.GenericParameter("TSource")]), [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCount", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSourceEnumerator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFromEnumerator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepend", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [$.GenericParameter("TSource")]), [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
      /* 5 */ $asm15.TypeRef("System.Linq.IIListProvider`1", [$.GenericParameter("TSource")]), 
      /* 6 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+AppendPrepend1Iterator`1 */ 

(function AppendPrepend1Iterator$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+AppendPrepend1Iterator`1")]), 
      Name: "System.Linq.Enumerable+AppendPrepend1Iterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $.GenericParameter("TSource"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Append", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [$.GenericParameter("TSource")]), [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCount", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepend", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [$.GenericParameter("TSource")]), [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_item", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_appending", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+AppendPrependN`1 */ 

(function AppendPrependN$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+AppendPrependN`1")]), 
      Name: "System.Linq.Enumerable+AppendPrependN`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]), 
          $asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Append", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [$.GenericParameter("TSource")]), [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCount", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepend", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+AppendPrependIterator`1", [$.GenericParameter("TSource")]), [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_prepended", $asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_appended", $asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_prependCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_appendCount", $.Int32);

    $.Field({Static:false, Public:false}, "_node", $asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+<WhereIterator>d__2`1 */ 

(function $lWhereIterator$gd__2$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<WhereIterator>d__2`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectIterator>d__5`2 */ 

(function $lSelectIterator$gd__5$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectIterator>d__5`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<>c__DisplayClass6_0`1 */ 

(function $l$gc__DisplayClass6_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClass6_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCombinePredicates$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "predicate1", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "predicate2", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<>c__DisplayClass7_0`3 */ 

(function $l$gc__DisplayClass7_0$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClass7_0`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TMiddle", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCombineSelectors$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "selector2", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TMiddle"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:true }, "selector1", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TMiddle")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__17`2 */ 

(function $lSelectManyIterator$gd__17$b2$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__17`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__19`2 */ 

(function $lSelectManyIterator$gd__19$b2$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__19`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__21`3 */ 

(function $lSelectManyIterator$gd__21$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__21`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "collectionSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__collectionSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$lelement$g5__2", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__23`3 */ 

(function $lSelectManyIterator$gd__23$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__23`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "collectionSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])]));

    $.Field({Static:false, Public:true }, "$l$g3__collectionSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$lelement$g5__1", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeIterator>d__25`1 */ 

(function $lTakeIterator$gd__25$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeIterator>d__25`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeWhileIterator>d__27`1 */ 

(function $lTakeWhileIterator$gd__27$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeWhileIterator>d__27`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeWhileIterator>d__29`1 */ 

(function $lTakeWhileIterator$gd__29$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeWhileIterator>d__29`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipIterator>d__31`1 */ 

(function $lSkipIterator$gd__31$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipIterator>d__31`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:false}, "$le$g5__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipWhileIterator>d__33`1 */ 

(function $lSkipWhileIterator$gd__33$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipWhileIterator>d__33`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lyielding$g5__1", $.Boolean);

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipWhileIterator>d__35`1 */ 

(function $lSkipWhileIterator$gd__35$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipWhileIterator>d__35`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lyielding$g5__2", $.Boolean);

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<JoinIterator>d__38`4 */ 

(function $lJoinIterator$gd__38$b4$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<JoinIterator>d__38`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "inner", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$l$g3__inner", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "innerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__innerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "outer", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "$l$g3__outer", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:false}, "$llookup$g5__1", $asm15.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "outerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__outerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$litem$g5__2", $.GenericParameter("TOuter"));

    $.Field({Static:false, Public:false}, "$lg$g5__3", $asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "$li$g5__4", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<GroupJoinIterator>d__41`4 */ 

(function $lGroupJoinIterator$gd__41$b4$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<GroupJoinIterator>d__41`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "inner", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$l$g3__inner", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "innerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__innerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "outer", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "$l$g3__outer", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$llookup$g5__1", $asm15.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "outerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__outerKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ConcatIterator>d__59`1 */ 

(function $lConcatIterator$gd__59$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ConcatIterator>d__59`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ZipIterator>d__61`3 */ 

(function $lZipIterator$gd__61$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ZipIterator>d__61`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TFirst", "TSecond", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")]));

    $.Field({Static:false, Public:false}, "second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$le1$g5__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TFirst")]));

    $.Field({Static:false, Public:false}, "$le2$g5__2", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSecond")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<DistinctIterator>d__64`1 */ 

(function $lDistinctIterator$gd__64$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<DistinctIterator>d__64`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<UnionIterator>d__67`1 */ 

(function $lUnionIterator$gd__67$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<UnionIterator>d__67`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<IntersectIterator>d__70`1 */ 

(function $lIntersectIterator$gd__70$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<IntersectIterator>d__70`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ExceptIterator>d__73`1 */ 

(function $lExceptIterator$gd__73$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ExceptIterator>d__73`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ReverseIterator>d__75`1 */ 

(function $lReverseIterator$gd__75$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ReverseIterator>d__75`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lbuffer$g5__1", $asm15.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<DefaultIfEmptyIterator>d__93`1 */ 

(function $lDefaultIfEmptyIterator$gd__93$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<DefaultIfEmptyIterator>d__93`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$le$g5__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "defaultValue", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g3__defaultValue", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<OfTypeIterator>d__95`1 */ 

(function $lOfTypeIterator$gd__95$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<OfTypeIterator>d__95`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<CastIterator>d__97`1 */ 

(function $lCastIterator$gd__97$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<CastIterator>d__97`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<RangeIterator>d__113 */ 

(function $lRangeIterator$gd__113$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<RangeIterator>d__113", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Int32$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Int32")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.get_Current", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Int32")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "start", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__start", $.Int32);

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.Current", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<RepeatIterator>d__115`1 */ 

(function $lRepeatIterator$gd__115$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<RepeatIterator>d__115`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:true }, "$l$g3__element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EmptyEnumerable`1 */ 

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.EmptyEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.IdentityFunction`1 */ 

(function IdentityFunction$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.IdentityFunction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]), null)
    );

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.IdentityFunction`1+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.IdentityFunction`1+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lget_Instance$gb__1_0", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), [$.GenericParameter("TElement")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.IdentityFunction`1+<>c", [$.GenericParameter("TElement")]));

    $.Field({Static:true , Public:true }, "$l$g9__1_0", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* interface System.Linq.IOrderedEnumerable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedEnumerable`1", true, ["TElement"], function ($) {
    $.Method({}, "CreateOrderedEnumerable", new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), [
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), "!!0"]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"]));
  }, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1")]), $asm0F.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IGrouping`2 */ 

JSIL.MakeInterface(
  "System.Linq.IGrouping`2", true, ["out TKey", "out TElement"], function ($) {
    $.Method({}, "get_Key", new JSIL.MethodSignature($.GenericParameter("TKey").out(), null));
    $.Property({}, "Key");
  }, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IGrouping`2").out()]), $asm0F.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.ILookup`2 */ 

JSIL.MakeInterface(
  "System.Linq.ILookup`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Item", new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")]));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")]));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")])]), $asm0F.TypeRef("System.Collections.IEnumerable")]);

/* class System.Linq.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ApplyResultSelector", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`3", [
            $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
            "!!0"
          ])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.GenericParameter("TKey")]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", $.GenericParameter("TElement")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateForJoin", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGrouping", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [$.GenericParameter("TKey"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "groupings", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "lastGrouping", $asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm15.TypeRef("System.Linq.ILookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Lookup`2+Grouping */ 

(function Grouping$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+Grouping", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), [$.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElement")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TElement")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TElement")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "hashNext", $asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "next", $asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.GenericParameter("TKey"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Item", $.GenericParameter("TElement"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), 
      /* 4 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Lookup`2+Grouping+<GetEnumerator>d__7 */ 

(function $lGetEnumerator$gd__7$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+Grouping+<GetEnumerator>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2+<GetEnumerator>d__12 */ 

(function $lGetEnumerator$gd__12$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+<GetEnumerator>d__12", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lg$g5__1", $asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2+<ApplyResultSelector>d__13`1 */ 

(function $lApplyResultSelector$gd__13$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+<ApplyResultSelector>d__13`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lg$g5__1", $asm15.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Set`1+Slot", [$.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "freeList", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Set`1+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Set`1+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`4 */ 

(function GroupedEnumerable$b4$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
              $.GenericParameter("TResult")
            ]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "elementSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`3 */ 

(function GroupedEnumerable$b3$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "elementSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1 */ 

(function OrderedEnumerable$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]), [$asm15.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTElement$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), [
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), "!!0"]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"])
    )
      .Overrides($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), "CreateOrderedEnumerable");

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1+<GetEnumerator>d__1 */ 

(function $lGetEnumerator$gd__1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1+<GetEnumerator>d__1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lbuffer$g5__1", $asm15.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lmap$g5__2", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "$li$g5__3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.OrderedEnumerable`2 */ 

(function OrderedEnumerable$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.OrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), 
      Name: "System.Linq.OrderedEnumerable`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]), [$asm15.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:false}, "parent", $asm15.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "descending", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`1 */ 

(function EnumerableSorter$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableSorter`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`2 */ 

(function EnumerableSorter$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), 
      Name: "System.Linq.EnumerableSorter`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "descending", $.Boolean);

    $.Field({Static:false, Public:false}, "next", $asm15.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Buffer`1 */ 

(function Buffer$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Buffer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), null)
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView`1 */ 

(function SystemCore_EnumerableDebugView$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugViewEmptyException */ 

(function SystemCore_EnumerableDebugViewEmptyException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Exception"), 
      Name: "System.Linq.SystemCore_EnumerableDebugViewEmptyException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "Empty", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView */ 

(function SystemCore_EnumerableDebugView$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.IIListProvider`1 */ 

JSIL.MakeInterface(
  "System.Linq.IIListProvider`1", false, ["TElement"], function ($) {
    $.Method({}, "ToArray", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), null));
    $.Method({}, "ToList", new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TElement")]), null));
    $.Method({}, "GetCount", new JSIL.MethodSignature($.Int32, [$.Boolean]));
  }, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IIListProvider`1")]), $asm0F.TypeRef("System.Collections.IEnumerable")]);

/* class System.Linq.SingleLinkedNode`1 */ 

(function SingleLinkedNode$b1$Members () {
  var $, $thisType;




  function SingleLinkedNode$b1_get_Item () {
    return this.SingleLinkedNode$b1$Item$value;
  }; 

  function SingleLinkedNode$b1_get_Linked () {
    return this.SingleLinkedNode$b1$Linked$value;
  }; 





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.SingleLinkedNode`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]), $.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]), [$.GenericParameter("TSource")])
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null), 
      SingleLinkedNode$b1_get_Item
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Linked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]), null), 
      SingleLinkedNode$b1_get_Linked
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNode", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), [$.Int32])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "SingleLinkedNode$b1$Item$value", $.GenericParameter("TSource"))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SingleLinkedNode$b1$Linked$value", $asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:true }, "Linked", $asm15.TypeRef("System.Linq.SingleLinkedNode`1", [$.GenericParameter("TSource")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableQuery */ 

(function EnumerableQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.IEnumerable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable"), [$asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm0F.TypeRef("System.Collections.IEnumerable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableQuery`1 */ 

(function EnumerableQuery$b1$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.EnumerableQuery"), 
      Name: "System.Linq.EnumerableQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_ElementType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    )
      .Overrides($asm15.TypeRef("System.Linq.IQueryable"), "get_ElementType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Overrides($asm15.TypeRef("System.Linq.IQueryable"), "get_Expression");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Provider", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.IQueryProvider"))
    )
      .Overrides($asm15.TypeRef("System.Linq.IQueryable"), "get_Provider");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm15.TypeRef("System.Linq.IQueryProvider"), "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides($asm15.TypeRef("System.Linq.IQueryProvider"), "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature($.Object, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm15.TypeRef("System.Linq.IQueryProvider"), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides($asm15.TypeRef("System.Linq.IQueryProvider"), "Execute");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "enumerable", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Provider", $asm15.TypeRef("System.Linq.IQueryProvider"));

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.ElementType", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.IOrderedQueryable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm15.TypeRef("System.Linq.IQueryable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm15.TypeRef("System.Linq.IQueryable"), 
      /* 5 */ $asm15.TypeRef("System.Linq.IOrderedQueryable"), 
      /* 6 */ $asm15.TypeRef("System.Linq.IQueryProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableExecutor */ 

(function EnumerableExecutor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableExecutor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      JSIL.MethodSignature.Return($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableExecutor`1 */ 

(function EnumerableExecutor$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.EnumerableExecutor"), 
      Name: "System.Linq.EnumerableExecutor`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "func", $asm0F.TypeRef("System.Func`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.OldExpressionVisitor */ 

(function OldExpressionVisitor$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.OldExpressionVisitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBindingList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializer", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ElementInit"), [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializerList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExpressionList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAccess", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm15.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewExpression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeIs", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter */ 

(function EnumerableRewriter$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.OldExpressionVisitor"), 
      Name: "System.Linq.EnumerableRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgsMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindEnumerableMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])
        ])
    )
      .Parameter(2, "typeArgs", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Type"), $.String, 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), 
          $asm0F.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedArgs", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StripExpression", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:true , Public:false}, "_seqMethods", $asm15.TypeRef("System.Linq.ILookup`2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter+<>c__DisplayClass9_0 */ 

(function $l$gc__DisplayClass9_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c__DisplayClass9_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindEnumerableMethod$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "args", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EnumerableRewriter+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindEnumerableMethod$gb__9_0", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__9_0", $asm0F.TypeRef("System.Func`2", [$asm0F.TypeRef("System.Reflection.MethodInfo"), $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EnumerableRewriter+<>c__DisplayClass10_0 */ 

(function $l$gc__DisplayClass10_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c__DisplayClass10_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindMethod$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindMethod$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "args", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.TypeHelper */ 

(function TypeHelper$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Linq.TypeHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetElementType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEnumerableType", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKindOfGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Strings */ 

(function Strings$Members () {
  var $, $thisType;














































































  JSIL.MakeStaticClass("System.Linq.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidId", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidSerializedString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryBegin", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryEnd", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryFork", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryJoin", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesAmbiguousOverlap", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesInvalidOverlap", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesNoNulls", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesOutOfOrder", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlap", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_ConvertMismatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTicks", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTimeOfDay", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsInvalid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsNotAmbiguous", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeKindMustBeUnspecified", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeOffsetIsNotAmbiguous", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_InvalidREG_TZI_FORMAT", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_OutOfOrderDateTimes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeSpanHasSeconds", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoBadTZif", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoInvalidTZif", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TransitionTimesAreIdentical", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DateTimeBadTicks", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayOfWeek", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayParam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_MonthParam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffsetAndDaylightDelta", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_Week", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyEnumerable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncompatibleElementTypes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidTimeZone_InvalidWin32APIData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneElement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_BinaryOpMustUseAsParallel", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_ToArray_DimensionRequired", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithCancellation_TokenSourceDisposed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithMergeOptions_InvalidOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithQueryExecutionMode_InvalidMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_IncorretElementCount", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullElement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullReturn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateDOP", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateExecutionMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateMergeOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateTaskScheduler", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateWithCancellation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidAsOrderedCall", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidNonGenericAsOrderedCall", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_PartitionerNotOrderable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartition", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartitionList", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_WrongNumberOfPartitions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_CommonEnumerator_Current_NotStarted", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_DisposeRequested", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_EnumerationPreviouslyFailed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_ExternalCancellationRequested", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Security_CannotReadRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Serialization_CorruptField", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Property({Static:true , Public:false}, "OwningTeam", $.String);

    $.Property({Static:true , Public:false}, "IncompatibleElementTypes", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneElement", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneMatch", $.String);

    $.Property({Static:true , Public:false}, "NoElements", $.String);

    $.Property({Static:true , Public:false}, "NoMatch", $.String);

    $.Property({Static:true , Public:false}, "EmptyEnumerable", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_ConvertMismatch", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeIsInvalid", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeHasTicks", $.String);

    $.Property({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", $.String);

    $.Property({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoBadTZif", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoInvalidTZif", $.String);

    $.Property({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayParam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_MonthParam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_Week", $.String);

    $.Property({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DateTimeBadTicks", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_CommonEnumerator_Current_NotStarted", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_ExternalCancellationRequested", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_DisposeRequested", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_EnumerationPreviouslyFailed", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_NullReturn", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_NullElement", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_IncorretElementCount", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_ToArray_DimensionRequired", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithMergeOptions_InvalidOptions", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_BinaryOpMustUseAsParallel", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithCancellation_TokenSourceDisposed", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_InvalidAsOrderedCall", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_InvalidNonGenericAsOrderedCall", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_PartitionerNotOrderable", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateTaskScheduler", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateDOP", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateWithCancellation", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateExecutionMode", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateMergeOptions", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartitionList", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_WrongNumberOfPartitions", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartition", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Error */ 

(function Error$Members () {
  var $, $thisType;



















  JSIL.MakeStaticClass("System.Linq.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncompatibleElementTypes", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneElement", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneMatch", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoElements", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMatch", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.ParallelEnumerable */ 

(function ParallelEnumerable$Members () {
  var $, $thisType;



















































































































































































































  JSIL.MakeStaticClass("System.Linq.ParallelEnumerable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
      new JSIL.MethodSignature("!!0", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ]), 
          $asm15.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm15.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!1", 
              "!!1"
            ]), 
          $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!1", 
              "!!1"
            ]), 
          $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery"), [$asm15.TypeRef("System.Linq.ParallelQuery")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Concurrent.Partitioner`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery"), [$asm0F.TypeRef("System.Collections.IEnumerable")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsSequential", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsUnordered", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0", 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DisposeEnumerator", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!0"]), $asm15.TypeRef("System.Linq.Parallel.CancellationState")], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ForAll", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Action`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetOneWithPossibleDefault", 
      new JSIL.MethodSignature("!!0", [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", ["!!0"]), $.Boolean, 
          $.Boolean
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm15.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`3", [
              "!!1", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerformAggregation", 
      new JSIL.MethodSignature("!!0", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ]), 
          "!!0", $.Boolean, 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerformSequentialAggregation", 
      new JSIL.MethodSignature("!!1", [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $.Boolean, $asm0F.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int32]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Decimal")])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithCancellation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Threading.CancellationToken")], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithDegreeOfParallelism", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithExecutionMode", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelExecutionMode")], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithMergeOptions", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelMergeOptions")], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WithTaskScheduler", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler")], ["TSource"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Constant({Static:true , Public:false}, "RIGHT_SOURCE_NOT_PARALLEL_STR", $.String, "The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__10`1 */ 

(function $l$gc__10$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__10`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWithCancellation$gb__10_0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.ParallelEnumerable+<>c__10`1", [$.GenericParameter("TSource")]));

    $.Field({Static:true , Public:true }, "$l$g9__10_0", $asm0F.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass47_0`3 */ 

(function $l$gc__DisplayClass47_0$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass47_0`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TSource")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass48_0`3 */ 

(function $l$gc__DisplayClass48_0$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass48_0`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TSource")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass49_0`4 */ 

(function $l$gc__DisplayClass49_0$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass49_0`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass50_0`4 */ 

(function $l$gc__DisplayClass50_0$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass50_0`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__51`1 */ 

(function $l$gc__51$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__51`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPerformAggregation$gb__51_0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.GenericParameter("T")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.ParallelEnumerable+<>c__51`1", [$.GenericParameter("T")]));

    $.Field({Static:true , Public:true }, "$l$g9__51_0", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__149`1 */ 

(function $l$gc__149$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__149`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAny$gb__149_0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.ParallelEnumerable+<>c__149`1", [$.GenericParameter("TSource")]));

    $.Field({Static:true , Public:true }, "$l$g9__149_0", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum System.Linq.ParallelMergeOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.ParallelMergeOptions", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    NotBuffered: 1, 
    AutoBuffered: 2, 
    FullyBuffered: 3, 
  }
);

/* enum System.Linq.ParallelExecutionMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.ParallelExecutionMode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    ForceParallelism: 1, 
  }
);

/* class System.Linq.AggregationMinMaxHelpers`1 */ 

(function AggregationMinMaxHelpers$b1$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Linq.AggregationMinMaxHelpers`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "MakeFinalReduceFunction", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`3", [
            $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), 
            $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])
          ]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeIntermediateReduceFunction", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`3", [
            $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T"), 
            $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])
          ]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeResultSelectorFunction", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "Reduce", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMax", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMin", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeIntermediateReduceFunction$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T")])
    );

    $.Field({Static:false, Public:true }, "comparer", $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeFinalReduceFunction$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:true }, "comparer", $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.AggregationMinMaxHelpers`1+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeResultSelectorFunction$gb__5_0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.AggregationMinMaxHelpers`1+<>c", [$.GenericParameter("T")]));

    $.Field({Static:true , Public:true }, "$l$g9__5_0", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelQuery */ 

(function ParallelQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cast", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SpecifiedQuerySettings", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OfType", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_specifiedSettings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Property({Static:false, Public:false}, "SpecifiedQuerySettings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.ParallelQuery`1 */ 

(function ParallelQuery$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery"), 
      Name: "System.Linq.ParallelQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cast", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OfType", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ImplementInterfaces(
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.ParallelQuery`1+<>c__1`1 */ 

(function $l$gc__1$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelQuery`1+<>c__1`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCastTo"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCast$gb__1_0", 
      new JSIL.MethodSignature($.GenericParameter("TCastTo"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.ParallelQuery`1+<>c__1`1", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));

    $.Field({Static:true , Public:true }, "$l$g9__1_0", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelQuery`1+<>c__2`1 */ 

(function $l$gc__2$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelQuery`1+<>c__2`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCastTo"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOfType$gb__2_0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOfType$gb__2_1", 
      new JSIL.MethodSignature($.GenericParameter("TCastTo"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.ParallelQuery`1+<>c__2`1", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));

    $.Field({Static:true , Public:true }, "$l$g9__2_0", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__2_1", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.OrderedParallelQuery`1 */ 

(function OrderedParallelQuery$b1$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), 
      Name: "System.Linq.OrderedParallelQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OrderedEnumerable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SortOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    );

    $.Field({Static:false, Public:false}, "m_sortOp", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false}, "SortOperator", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false}, "OrderedEnumerable", $asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0F.System.AttributeTargets.All]; });

})();

/* class System.Linq.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0F.System.AttributeTargets.All]; });

})();

/* class System.Linq.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0F.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm0F.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq.Parallel");
/* class System.Linq.Parallel.AsynchronousChannel`1 */ 

(function AsynchronousChannel$b1$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.AsynchronousChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken"), $asm15.TypeRef("System.Linq.Parallel.IntValueEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken"), 
          $asm15.TypeRef("System.Linq.Parallel.IntValueEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoneWithDequeueWait", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueChunk", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushCachedChunk", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChunkBufferEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDone", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDequeueChunk", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitUntilNonFull", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_buffer", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_index", $.Int32);

    $.Field({Static:false, Public:false}, "m_producerBufferIndex", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_consumerBufferIndex", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_done", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "m_producerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_producerChunkIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_consumerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_consumerChunkIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_chunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_producerEvent", $asm0F.TypeRef("System.Threading.ManualResetEventSlim"));

    $.Field({Static:false, Public:false}, "m_consumerEvent", $asm15.TypeRef("System.Linq.Parallel.IntValueEvent"));

    $.Field({Static:false, Public:false}, "m_producerIsWaiting", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_consumerIsWaiting", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Property({Static:false, Public:false}, "IsFull", $.Boolean);

    $.Property({Static:false, Public:false}, "IsChunkBufferEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDone", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SynchronousChannel`1 */ 

(function SynchronousChannel$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SynchronousChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDone", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_queue", $asm12.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EmptyEnumerable`1 */ 

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerable`1")]), 
      Name: "System.Linq.Parallel.EmptyEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.EmptyEnumerable`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:true , Public:false}, "s_instance", $asm15.TypeRef("System.Linq.Parallel.EmptyEnumerable`1"));

    $.Field({Static:true , Public:false}, "s_enumeratorInstance", $asm15.TypeRef("System.Linq.Parallel.EmptyEnumerator`1"));

    $.GenericProperty({Static:true , Public:false}, "Instance", $asm15.TypeRef("System.Linq.Parallel.EmptyEnumerable`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperatorEnumerator`2 */ 

(function QueryOperatorEnumerator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AsClassicEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TElement")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperatorEnumerator`2+QueryOperatorClassicEnumerator */ 

(function QueryOperatorClassicEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOperatorEnumerator`2+QueryOperatorClassicEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "m_operatorEnumerator", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EmptyEnumerator`1 */ 

(function EmptyEnumerator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.EmptyEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EnumerableWrapperWeakToStrong */ 

(function EnumerableWrapperWeakToStrong$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.EnumerableWrapperWeakToStrong", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EnumerableWrapperWeakToStrong+WrapperEnumeratorWeakToStrong */ 

(function WrapperEnumeratorWeakToStrong$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.EnumerableWrapperWeakToStrong+WrapperEnumeratorWeakToStrong", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "m_wrappedEnumerator", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IParallelPartitionable`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IParallelPartitionable`1", false, ["T"], function ($) {
    $.Method({}, "GetPartitions", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("T"), $.Int32])]), [$.Int32]));
  }, []);

/* class System.Linq.Parallel.ParallelEnumerableWrapper */ 

(function ParallelEnumerableWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Object")]), 
      Name: "System.Linq.Parallel.ParallelEnumerableWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ParallelEnumerableWrapper`1 */ 

(function ParallelEnumerableWrapper$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), 
      Name: "System.Linq.Parallel.ParallelEnumerableWrapper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WrappedEnumerable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false}, "WrappedEnumerable", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Parallel.QueryAggregationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Parallel.QueryAggregationOptions", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Associative: 1, 
    Commutative: 2, 
    AssociativeCommutative: 3, 
  }
);

/* class System.Linq.Parallel.RangeEnumerable */ 

(function RangeEnumerable$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery`1", [$asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RangeEnumerable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32])]), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "m_from", $.Int32);

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm15.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [$.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RangeEnumerable+RangeEnumerator */ 

(function RangeEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RangeEnumerable+RangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_from", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_initialIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RepeatEnumerable`1 */ 

(function RepeatEnumerable$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")]), 
      Name: "System.Linq.Parallel.RepeatEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TResult"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.Int32])]), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "m_element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm15.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [$.GenericParameter("TResult")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RepeatEnumerable`1+RepeatEnumerator */ 

(function RepeatEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1+RepeatEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RepeatEnumerable`1+RepeatEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("TResult"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TResult")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexOffset", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentIndex", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.MergeEnumerator`1 */ 

(function MergeEnumerator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.MergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TInputOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TInputOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1 */ 

(function AsynchronousChannelMergeEnumerator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1")]), 
      Name: "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("T")])]), 
          $asm15.TypeRef("System.Linq.Parallel.IntValueEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "m_consumerEvent", $asm15.TypeRef("System.Linq.Parallel.IntValueEvent"));

    $.Field({Static:false, Public:false}, "m_done", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ArrayMergeHelper`1 */ 

(function ArrayMergeHelper$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ArrayMergeHelper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArrayElement", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_queryResults", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_outputArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultMergeHelper`2 */ 

(function DefaultMergeHelper$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.DefaultMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.ParallelMergeOptions"), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm15.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.Execute", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    )
      .Overrides($asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false}, "m_partitions", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_asyncChannels", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_syncChannels", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_channelEnumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false}, "m_ignoreOutput", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IMergeHelper`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IMergeHelper`1", false, ["TInputOutput"], function ($) {
    $.Method({}, "Execute", JSIL.MethodSignature.Void);
    $.Method({}, "GetEnumerator", new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null));
    $.Method({}, "GetResultsAsArray", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null));
  }, []);

/* class System.Linq.Parallel.MergeExecutor`1 */ 

(function MergeExecutor$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.MergeExecutor`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Execute", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TInputOutput")]), [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $.Boolean, 
          $asm15.TypeRef("System.Linq.ParallelMergeOptions"), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.CancellationState"), 
          $.Int32
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeAsynchronousChannels", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])]), [
          $.Int32, $asm15.TypeRef("System.Linq.ParallelMergeOptions"), 
          $asm15.TypeRef("System.Linq.Parallel.IntValueEvent"), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeSynchronousChannels", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_mergeHelper", $asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingMergeHelper`2 */ 

(function OrderPreservingMergeHelper$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm15.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.Execute", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    )
      .Overrides($asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false}, "m_partitions", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_results", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2 */ 

(function OrderPreservingPipeliningMergeHelper$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm15.TypeRef("System.Linq.Parallel.CancellationState"), $.Boolean, 
          $.Int32, $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTOutput$g.Execute", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TOutput")]), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), null)
    )
      .Overrides($asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TOutput")]), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitions", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "m_producerComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])]));

    $.Constant({Static:true , Public:false}, "INITIAL_BUFFER_SIZE", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "STEAL_BUFFER_SIZE", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "MAX_BUFFER_SIZE", $.Int32, 8192);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+ProducerComparer */ 

(function ProducerComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+ProducerComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")]), $asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+OrderedPipeliningMergeEnumerator */ 

(function OrderedPipeliningMergeEnumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+OrderedPipeliningMergeEnumerator")]), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+OrderedPipeliningMergeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfInTearDown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetPrivateElement", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWaitForElement", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])])
    );

    $.Field({Static:false, Public:false}, "m_mergeHelper", $asm15.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerHeap", $asm15.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerNextElement", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_privateBuffer", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:false}, "m_initialized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TOutput"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.Producer`1 */ 

(function Producer$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Producer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.Int32])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "MaxKey", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ProducerIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ProducerComparerInt */ 

(function ProducerComparerInt$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ProducerComparerInt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.Int32]), $asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.Int32])])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.Producer`1", [$.Int32])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SynchronousChannelMergeEnumerator`1 */ 

(function SynchronousChannelMergeEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1")]), 
      Name: "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("T")])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashRepartitionEnumerator`3 */ 

(function HashRepartitionEnumerator$b3$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.HashRepartitionEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm15.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
              $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
              $.Int32
            ]), $asm0F.TypeRef("System.Threading.CountdownEvent"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", $.Int32, -1);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm15.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.Int32
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_barrier", $asm0F.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.HashRepartitionEnumerator`3+Mutables", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TIgnoreKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashRepartitionEnumerator`3+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashRepartitionEnumerator`3+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentBuffer", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]));

    $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedStream`2 */ 

(function PartitionedStream$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedStream`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PartitionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "m_partitions", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false}, "Item", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true }, "PartitionCount", $.Int32);

    $.Property({Static:false, Public:false}, "KeyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false}, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashRepartitionStream`3 */ 

(function HashRepartitionStream$b3$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.HashRepartitionStream`3")]), 
      Name: "System.Linq.Parallel.HashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TInputOutput")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("THashKey")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_distributionMod", $.Int32);

    $.Constant({Static:true , Public:false}, "NULL_ELEMENT_HASH_CODE", $.Int32, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IPartitionedStreamRecipient`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IPartitionedStreamRecipient`1", false, ["TElement"], function ($) {
    $.Method({}, "Receive", new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TElement"), "!!0"])], ["TKey"]));
  }, []);

/* class System.Linq.Parallel.OrderedHashRepartitionEnumerator`3 */ 

(function OrderedHashRepartitionEnumerator$b3$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm15.TypeRef("System.Linq.Parallel.OrderedHashRepartitionStream`3", [
              $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
              $.GenericParameter("TOrderKey")
            ]), $asm0F.TypeRef("System.Threading.CountdownEvent"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")]), JSIL.ArrayDimensionParameter(2)]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOrderKey")])])
    );

    $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", $.Int32, -1);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm15.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOrderKey")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")]), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false}, "m_barrier", $asm0F.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.OrderedHashRepartitionEnumerator`3+Mutables", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOrderKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedHashRepartitionEnumerator`3+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentBuffer", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]));

    $.Field({Static:false, Public:false}, "m_currentKeyBuffer", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedHashRepartitionStream`3 */ 

(function OrderedHashRepartitionStream$b3$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), 
          new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")
        ]), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1 */ 

(function PartitionedDataSource$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializePartitions", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakePartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("T"), $.Int32])]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator */ 

(function ArrayIndexRangeEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator+Mutables", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentSection", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator */ 

(function ArrayContiguousIndexRangeEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentIndex", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator */ 

(function ListIndexRangeEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator+Mutables", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentSection", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator */ 

(function ListContiguousIndexRangeEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentIndex", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator */ 

(function ContiguousChunkLazyEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), 
          $.Object, $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Constant({Static:true , Public:false}, "chunksPerChunkSize", $.Int32, 7);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sourceSyncLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_currentIndex", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_activeEnumeratorsCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_exceptionTracker", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator+Mutables", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_chunkBuffer", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_nextChunkMaxSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_chunkBaseIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_chunkCounter", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnorderedHashRepartitionStream`3 */ 

(function UnorderedHashRepartitionStream$b3$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), 
          $asm0F.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.UnorderedHashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperator`1 */ 

(function QueryOperator$b1$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), 
      Name: "System.Linq.Parallel.QueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsQueryOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExecuteAndCollectResults", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.ListQueryResults`1", [$.GenericParameter("TOutput")]), [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), "!!0"]), $.Int32, 
          $.Boolean, $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteAndGetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutputOrdered", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenedEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), [
          $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean, 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQueryResults", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_outputOrdered", $.Boolean);

    $.Property({Static:false, Public:false}, "OutputOrdered", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2 */ 

(function UnaryQueryOperator$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2")]), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Child", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndexState", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_child", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false}, "Child", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryResults`1 */ 

(function QueryResults$b1$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryResults`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryResults`1+<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__21 */ 

(function $lSystem$daCollections$daGeneric$daIEnumerable$lT$g$daGetEnumerator$gd__21$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryResults`1+<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__21", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults */ 

(function UnaryQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])])
    );

    $.Field({Static:false, Public:false}, "m_childQueryResults", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults+ChildResultsRecipient */ 

(function ChildResultsRecipient$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults+ChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AssociativeAggregationOperator`3 */ 

(function AssociativeAggregationOperator$b3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), 
      Name: "System.Linq.Parallel.AssociativeAggregationOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TIntermediate", "TOutput"], 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.GenericParameter("TIntermediate"), 
          $asm0F.TypeRef("System.Func`1", [$.GenericParameter("TIntermediate")]), $.Boolean, 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TIntermediate"), $.GenericParameter("TInput"), 
              $.GenericParameter("TIntermediate")
            ]), $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TIntermediate"), $.GenericParameter("TIntermediate"), 
              $.GenericParameter("TIntermediate")
            ]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TIntermediate"), $.GenericParameter("TOutput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TIntermediate")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TIntermediate")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TIntermediate")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_seed", $.GenericParameter("TIntermediate"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_seedIsSpecified", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_throwIfEmpty", $.Boolean);

    $.Field({Static:false, Public:false}, "m_intermediateReduce", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TIntermediate"), $.GenericParameter("TInput"), 
          $.GenericParameter("TIntermediate")
        ]));

    $.Field({Static:false, Public:false}, "m_finalReduce", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TIntermediate"), $.GenericParameter("TIntermediate"), 
          $.GenericParameter("TIntermediate")
        ]));

    $.Field({Static:false, Public:false}, "m_resultSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TIntermediate"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_seedFactory", $asm0F.TypeRef("System.Func`1", [$.GenericParameter("TIntermediate")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AssociativeAggregationOperator`3+AssociativeAggregationOperatorEnumerator`1 */ 

(function AssociativeAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3+AssociativeAggregationOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.AssociativeAggregationOperator`3+AssociativeAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TIntermediate", "TOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $asm15.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
              $.GenericParameter("TInput"), $.GenericParameter("TIntermediate"), 
              $.GenericParameter("TOutput")
            ]), 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TIntermediate")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_reduceOperator", $asm15.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
          $.GenericParameter("TInput"), $.GenericParameter("TIntermediate"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_accumulated", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1 */ 

(function PartitionerQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Orderable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOrdinalIndexState", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm0F.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TElement")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_partitioner", $asm0F.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false}, "Orderable", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerQueryOperatorResults */ 

(function PartitionerQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")]), $asm15.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:false}, "m_partitioner", $asm0F.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+OrderablePartitionerEnumerator */ 

(function OrderablePartitionerEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1+OrderablePartitionerEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+OrderablePartitionerEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, $.GenericParameter("TElement")])])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TElement")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, $.GenericParameter("TElement")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerEnumerator */ 

(function PartitionerEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TElement")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+<AsSequentialQuery>d__5 */ 

(function $lAsSequentialQuery$gd__5$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+<AsSequentialQuery>d__5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.PartitionerQueryOperator`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lenumerator$g5__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ScanQueryOperator`1 */ 

(function ScanQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ScanQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), [$asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TElement")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:true }, "Data", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ScanQueryOperator`1+ScanEnumerableQueryOperatorResults */ 

(function ScanEnumerableQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1+ScanEnumerableQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ScanQueryOperator`1+ScanEnumerableQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm15.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:false}, "m_data", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3 */ 

(function BinaryQueryOperator$b3$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3")]), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TRightInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LeftChild", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RightChild", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndex", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false}, "LeftChild", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]));

    $.Property({Static:false, Public:false}, "RightChild", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults */ 

(function BinaryQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]), $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]), 
          $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])])
    );

    $.Field({Static:false, Public:false}, "m_leftChildQueryResults", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false}, "m_rightChildQueryResults", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+LeftChildResultsRecipient */ 

(function LeftChildResultsRecipient$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+LeftChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"])], ["TLeftKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_results", $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TLeftInput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+RightChildResultsRecipient`1 */ 

(function RightChildResultsRecipient$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+RightChildResultsRecipient`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!0"])], ["TRightKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_leftPartitionedStream", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_op", $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TRightInput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1 */ 

(function ExceptQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1+ExceptQueryOperatorEnumerator`1 */ 

(function ExceptQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1+ExceptQueryOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1+ExceptQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1 */ 

(function OrderedExceptQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TLeftKey")])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])])]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupJoinQueryOperator`4 */ 

(function GroupJoinQueryOperator$b4$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")
        ]), 
      Name: "System.Linq.Parallel.GroupJoinQueryOperator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TKey", "TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TRightInput")]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
              $.GenericParameter("TOutput")
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5 */ 

(function HashJoinQueryOperatorEnumerator$b5$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), 
      Name: "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
        "TOutput"
      ], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("THashKey")]), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $.GenericParameter("THashKey")]), $.Int32]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
              $.GenericParameter("TOutput")
            ]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TLeftKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("THashKey")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $.GenericParameter("THashKey")]), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_singleResultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_groupResultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5+Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey"), 
          $.GenericParameter("TRightInput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOutput")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
        "TOutput"
      ], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentLeft", $.GenericParameter("TLeftInput"));

    $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey"));

    $.Field({Static:false, Public:false}, "m_rightHashLookup", $asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$.GenericParameter("THashKey"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")])])]));

    $.Field({Static:false, Public:false}, "m_currentRightMatches", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_currentRightMatchesIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1 */ 

(function IntersectQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1+IntersectQueryOperatorEnumerator`1 */ 

(function IntersectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1+IntersectQueryOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1+IntersectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1 */ 

(function OrderedIntersectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TLeftKey")])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.JoinQueryOperator`4 */ 

(function JoinQueryOperator$b4$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")
        ]), 
      Name: "System.Linq.Parallel.JoinQueryOperator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TKey", "TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TRightInput")]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1 */ 

(function UnionQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedBothTypes", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedLeftType", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1+UnionQueryOperatorEnumerator`2 */ 

(function UnionQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1+UnionQueryOperatorEnumerator`2"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1+UnionQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]), 
          $.Int32, $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2 */ 

(function OrderedUnionQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2"), $asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2")])]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]), 
          $.Boolean, $.Boolean, 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])]));

    $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])]));

    $.Field({Static:false, Public:false}, "m_leftOrdered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_rightOrdered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3 */ 

(function ZipQueryOperator$b3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults */ 

(function ZipQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]), $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChildResults", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildResults", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_preferStriping", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3+<AsSequentialQuery>d__9 */ 

(function $lAsSequentialQuery$gd__9$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3+<AsSequentialQuery>d__9", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTOutput$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TOutput"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.ZipQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "token", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g3__token", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "$lleftEnumerator$g5__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false}, "$lrightEnumerator$g5__2", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTOutput$g.Current", $.GenericParameter("TOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.PartitionedStreamMerger`1 */ 

(function PartitionedStreamMerger$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedStreamMerger`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.ParallelMergeOptions"), 
          $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergeExecutor", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_forEffectMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_mergeOptions", $asm15.TypeRef("System.Linq.ParallelMergeOptions"));

    $.Field({Static:false, Public:false}, "m_isOrdered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_mergeExecutor", $asm15.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false}, "m_queryId", $.Int32);

    $.Field({Static:false, Public:false}, "m_cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "MergeExecutor", $asm15.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")]));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOpeningEnumerator`1 */ 

(function QueryOpeningEnumerator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOpeningEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")]), $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenQuery", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_queryOperator", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_openedQueryEnumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_querySettings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_mergeOptions", $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_suppressOrderPreservation", $.Boolean);

    $.Field({Static:false, Public:false}, "m_moveNextIteration", $.Int32);

    $.Field({Static:false, Public:false}, "m_hasQueryOpeningFailed", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelDisposedFlag", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelCancellationTokenSource", $asm0F.TypeRef("System.Threading.CancellationTokenSource"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.InlinedAggregationOperator`3 */ 

(function InlinedAggregationOperator$b3$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), 
      Name: "System.Linq.Parallel.InlinedAggregationOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TIntermediate", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TIntermediate")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TIntermediate"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TIntermediate")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TIntermediate")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CountAggregationOperator`1 */ 

(function CountAggregationOperator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1"), $asm0F.TypeRef("System.Int32"), 
          $asm0F.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.CountAggregationOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1 */ 

(function InlinedAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TIntermediate"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TIntermediate")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TIntermediate")])])
    );

    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_done", $.Boolean);

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CountAggregationOperator`1+CountAggregationOperatorEnumerator`1 */ 

(function CountAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.CountAggregationOperator`1+CountAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongCountAggregationOperator`1 */ 

(function LongCountAggregationOperator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1"), $asm0F.TypeRef("System.Int64"), 
          $asm0F.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongCountAggregationOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongCountAggregationOperator`1+LongCountAggregationOperatorEnumerator`1 */ 

(function LongCountAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongCountAggregationOperator`1+LongCountAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalAverageAggregationOperator */ 

(function DecimalAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Decimal"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalAverageAggregationOperator+DecimalAverageAggregationOperatorEnumerator`1 */ 

(function DecimalAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.DecimalAverageAggregationOperator+DecimalAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalMinMaxAggregationOperator */ 

(function DecimalMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Decimal"), $asm0F.TypeRef("System.Decimal"), 
          $asm0F.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Decimal")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalMinMaxAggregationOperator+DecimalMinMaxAggregationOperatorEnumerator`1 */ 

(function DecimalMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Decimal")]), 
      Name: "System.Linq.Parallel.DecimalMinMaxAggregationOperator+DecimalMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Decimal")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalSumAggregationOperator */ 

(function DecimalSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Decimal"), $asm0F.TypeRef("System.Decimal"), 
          $asm0F.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalSumAggregationOperator+DecimalSumAggregationOperatorEnumerator`1 */ 

(function DecimalSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Decimal")]), 
      Name: "System.Linq.Parallel.DecimalSumAggregationOperator+DecimalSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Decimal")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Decimal"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleAverageAggregationOperator */ 

(function DoubleAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Double"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleAverageAggregationOperator+DoubleAverageAggregationOperatorEnumerator`1 */ 

(function DoubleAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.DoubleAverageAggregationOperator+DoubleAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleMinMaxAggregationOperator */ 

(function DoubleMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Double"), 
          $asm0F.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleMinMaxAggregationOperator+DoubleMinMaxAggregationOperatorEnumerator`1 */ 

(function DoubleMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.DoubleMinMaxAggregationOperator+DoubleMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleSumAggregationOperator */ 

(function DoubleSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Double"), 
          $asm0F.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleSumAggregationOperator+DoubleSumAggregationOperatorEnumerator`1 */ 

(function DoubleSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.DoubleSumAggregationOperator+DoubleSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatAverageAggregationOperator */ 

(function FloatAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Single"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatAverageAggregationOperator+FloatAverageAggregationOperatorEnumerator`1 */ 

(function FloatAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.FloatAverageAggregationOperator+FloatAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatMinMaxAggregationOperator */ 

(function FloatMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Single"), $asm0F.TypeRef("System.Single"), 
          $asm0F.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatMinMaxAggregationOperator+FloatMinMaxAggregationOperatorEnumerator`1 */ 

(function FloatMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Single")]), 
      Name: "System.Linq.Parallel.FloatMinMaxAggregationOperator+FloatMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatSumAggregationOperator */ 

(function FloatSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Single"), $asm0F.TypeRef("System.Double"), 
          $asm0F.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatSumAggregationOperator+FloatSumAggregationOperatorEnumerator`1 */ 

(function FloatSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.FloatSumAggregationOperator+FloatSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntAverageAggregationOperator */ 

(function IntAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Int32"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.IntAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntAverageAggregationOperator+IntAverageAggregationOperatorEnumerator`1 */ 

(function IntAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.IntAverageAggregationOperator+IntAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntMinMaxAggregationOperator */ 

(function IntMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Int32"), 
          $asm0F.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.IntMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntMinMaxAggregationOperator+IntMinMaxAggregationOperatorEnumerator`1 */ 

(function IntMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntMinMaxAggregationOperator+IntMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntSumAggregationOperator */ 

(function IntSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Int32"), 
          $asm0F.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.IntSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntSumAggregationOperator+IntSumAggregationOperatorEnumerator`1 */ 

(function IntSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntSumAggregationOperator+IntSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongAverageAggregationOperator */ 

(function LongAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Int64"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.LongAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongAverageAggregationOperator+LongAverageAggregationOperatorEnumerator`1 */ 

(function LongAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.LongAverageAggregationOperator+LongAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongMinMaxAggregationOperator */ 

(function LongMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64"), 
          $asm0F.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongMinMaxAggregationOperator+LongMinMaxAggregationOperatorEnumerator`1 */ 

(function LongMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongMinMaxAggregationOperator+LongMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongSumAggregationOperator */ 

(function LongSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64"), 
          $asm0F.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongSumAggregationOperator+LongSumAggregationOperatorEnumerator`1 */ 

(function LongSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongSumAggregationOperator+LongSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalAverageAggregationOperator */ 

(function NullableDecimalAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalAverageAggregationOperator+NullableDecimalAverageAggregationOperatorEnumerator`1 */ 

(function NullableDecimalAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableDecimalAverageAggregationOperator+NullableDecimalAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Decimal"), $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator */ 

(function NullableDecimalMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator+NullableDecimalMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableDecimalMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])]), 
      Name: "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator+NullableDecimalMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalSumAggregationOperator */ 

(function NullableDecimalSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalSumAggregationOperator+NullableDecimalSumAggregationOperatorEnumerator`1 */ 

(function NullableDecimalSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])]), 
      Name: "System.Linq.Parallel.NullableDecimalSumAggregationOperator+NullableDecimalSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleAverageAggregationOperator */ 

(function NullableDoubleAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleAverageAggregationOperator+NullableDoubleAverageAggregationOperatorEnumerator`1 */ 

(function NullableDoubleAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableDoubleAverageAggregationOperator+NullableDoubleAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator */ 

(function NullableDoubleMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator+NullableDoubleMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableDoubleMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator+NullableDoubleMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleSumAggregationOperator */ 

(function NullableDoubleSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Double])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleSumAggregationOperator+NullableDoubleSumAggregationOperatorEnumerator`1 */ 

(function NullableDoubleSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableDoubleSumAggregationOperator+NullableDoubleSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatAverageAggregationOperator */ 

(function NullableFloatAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatAverageAggregationOperator+NullableFloatAverageAggregationOperatorEnumerator`1 */ 

(function NullableFloatAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Double"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableFloatAverageAggregationOperator+NullableFloatAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatMinMaxAggregationOperator */ 

(function NullableFloatMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatMinMaxAggregationOperator+NullableFloatMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableFloatMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")])]), 
      Name: "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator+NullableFloatMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Single])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatSumAggregationOperator */ 

(function NullableFloatSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Single])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatSumAggregationOperator+NullableFloatSumAggregationOperatorEnumerator`1 */ 

(function NullableFloatSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableFloatSumAggregationOperator+NullableFloatSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Double])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntAverageAggregationOperator */ 

(function NullableIntAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntAverageAggregationOperator+NullableIntAverageAggregationOperatorEnumerator`1 */ 

(function NullableIntAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableIntAverageAggregationOperator+NullableIntAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntMinMaxAggregationOperator */ 

(function NullableIntMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntMinMaxAggregationOperator+NullableIntMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableIntMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.NullableIntMinMaxAggregationOperator+NullableIntMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntSumAggregationOperator */ 

(function NullableIntSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntSumAggregationOperator+NullableIntSumAggregationOperatorEnumerator`1 */ 

(function NullableIntSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.NullableIntSumAggregationOperator+NullableIntSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Int32])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongAverageAggregationOperator */ 

(function NullableLongAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongAverageAggregationOperator+NullableLongAverageAggregationOperatorEnumerator`1 */ 

(function NullableLongAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int64"), $asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongAverageAggregationOperator+NullableLongAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongMinMaxAggregationOperator */ 

(function NullableLongMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongMinMaxAggregationOperator+NullableLongMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableLongMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongMinMaxAggregationOperator+NullableLongMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongSumAggregationOperator */ 

(function NullableLongSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")]), $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongSumAggregationOperator+NullableLongSumAggregationOperatorEnumerator`1 */ 

(function NullableLongSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0F.TypeRef("System.Nullable`1", [$asm0F.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongSumAggregationOperator+NullableLongSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]), $.Int32, 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Nullable`1", [$.Int64])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListQueryResults`1 */ 

(function ListQueryResults$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")]), 
      Name: "System.Linq.Parallel.ListQueryResults`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPartitionedStream", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("T"), $.Int32]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_useStriping", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Parallel.OrdinalIndexState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Parallel.OrdinalIndexState", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Indexible: 0, 
    Correct: 1, 
    Increasing: 2, 
    Shuffled: 3, 
  }
);

/* struct System.Linq.Parallel.QuerySettings */ 

(function QuerySettings$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.QuerySettings", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm0F.TypeRef("System.Nullable`1", [$.Int32]), 
          $asm0F.TypeRef("System.Threading.CancellationToken"), $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelExecutionMode")]), 
          $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CleanStateAtQueryEnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.CancellationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DegreeOfParallelism", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExecutionMode", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelExecutionMode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergeOptions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TaskScheduler", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CancellationState", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Parallel.CancellationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DegreeOfParallelism", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ExecutionMode", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelExecutionMode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MergeOptions", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TaskScheduler", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WithDefaults", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Threading.CancellationTokenSource"), $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])])
    );

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false}, "m_degreeOfParallelism", $asm0F.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:false}, "m_executionMode", $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelExecutionMode")]));

    $.Field({Static:false, Public:false}, "m_mergeOptions", $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]));

    $.Field({Static:false, Public:false}, "m_queryId", $.Int32);

    $.Property({Static:false, Public:false}, "CancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "TaskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:false, Public:false}, "DegreeOfParallelism", $asm0F.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:false}, "ExecutionMode", $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelExecutionMode")]));

    $.Property({Static:false, Public:false}, "MergeOptions", $asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]));

    $.Property({Static:false, Public:false}, "QueryId", $.Int32);

    $.Property({Static:true , Public:false}, "Empty", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderingQueryOperator`1 */ 

(function OrderingQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), 
      Name: "System.Linq.Parallel.OrderingQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Nullable`1", [$asm15.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_orderOn", $.Boolean);

    $.Field({Static:false, Public:false}, "m_child", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "m_ordinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryExecutionOption`1 */ 

(function QueryExecutionOption$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), 
      Name: "System.Linq.Parallel.QueryExecutionOption`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_child", $asm15.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AnyAllSearchOperator`1 */ 

(function AnyAllSearchOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), $asm0F.TypeRef("System.Boolean")]), 
      Name: "System.Linq.Parallel.AnyAllSearchOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.Boolean, 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AnyAllSearchOperator`1+AnyAllSearchOperatorEnumerator`1 */ 

(function AnyAllSearchOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Boolean"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.AnyAllSearchOperator`1+AnyAllSearchOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $.Boolean, 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean]), $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1 */ 

(function ConcatQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper2", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")])
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!1"]), 
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2 */ 

(function ConcatQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2"), $asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2")])]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TRightKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])
    );

    $.Field({Static:false, Public:false}, "m_firstSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_secondSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TRightKey")]));

    $.Field({Static:false, Public:false}, "m_begunSecond", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults */ 

(function ConcatQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults")
        ]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), 
          $asm15.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), 
          $asm15.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_concatOp", $asm15.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "m_leftChildCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_rightChildCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.ConcatKey`2 */ 

(function ConcatKey$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.ConcatKey`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeComparer", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])]), [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeLeft", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")]), [$.GenericParameter("TLeftKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeRight", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")]), [$.GenericParameter("TRightKey")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKey", $.GenericParameter("TLeftKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKey", $.GenericParameter("TRightKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_isLeft", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatKey`2+ConcatKeyComparer */ 

(function ConcatKeyComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ConcatKey`2+ConcatKeyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")]), $asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])
    );

    $.Field({Static:false, Public:false}, "m_leftComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ContainsSearchOperator`1 */ 

(function ContainsSearchOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), $asm0F.TypeRef("System.Boolean")]), 
      Name: "System.Linq.Parallel.ContainsSearchOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.GenericParameter("TInput"), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ContainsSearchOperator`1+ContainsSearchOperatorEnumerator`1 */ 

(function ContainsSearchOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0F.TypeRef("System.Boolean"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ContainsSearchOperator`1+ContainsSearchOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $.GenericParameter("TInput"), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")]), $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultIfEmptyQueryOperator`1 */ 

(function DefaultIfEmptyQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), 
      Name: "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_defaultValue", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1 */ 

(function DefaultIfEmptyQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $.GenericParameter("TSource"), 
          $.Int32, $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm0F.TypeRef("System.Threading.CountdownEvent"), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_lookedForEmpty", $.Boolean);

    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_defaultValue", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "m_sharedEmptyCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_sharedLatch", $asm0F.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false}, "m_cancelToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1 */ 

(function DistinctQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1+DistinctQueryOperatorEnumerator`1 */ 

(function DistinctQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1+DistinctQueryOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1+DistinctQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1 */ 

(function OrderedDistinctQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm15.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookupEnumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ElementAtQueryOperator`1 */ 

(function ElementAtQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ElementAtQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_index", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ElementAtQueryOperator`1+ElementAtQueryOperatorEnumerator */ 

(function ElementAtQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1+ElementAtQueryOperatorEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ElementAtQueryOperator`1+ElementAtQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32]), $.Int32, 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32]));

    $.Field({Static:false, Public:false}, "m_index", $.Int32);

    $.Field({Static:false, Public:false}, "m_resultFoundFlag", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1 */ 

(function FirstQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorEnumerator`1 */ 

(function FirstQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm15.TypeRef("System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.CountdownEvent"), 
          $asm0F.TypeRef("System.Threading.CancellationToken"), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean);

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);

    $.Field({Static:false, Public:false}, "m_operatorState", $asm15.TypeRef("System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm0F.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1 */ 

(function FirstQueryOperatorState$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllOperator`1 */ 

(function ForAllOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1"), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), 
      Name: "System.Linq.Parallel.ForAllOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $asm0F.TypeRef("System.Action`1", [$.GenericParameter("TInput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm0F.TypeRef("System.Action`1", [$.GenericParameter("TInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllOperator`1+ForAllEnumerator`1 */ 

(function ForAllEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1+ForAllEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ForAllOperator`1+ForAllEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Action`1", [$.GenericParameter("TInput")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm0F.TypeRef("System.Action`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperator`3 */ 

(function GroupByQueryOperator$b3$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), $asm15.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
      Name: "System.Linq.Parallel.GroupByQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), "!!1"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TIgnoreKey", "TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelperOrdered", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperatorEnumerator`4 */ 

(function GroupByQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), 
      Name: "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOrderKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4+Mutables", [
          $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
          $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperatorEnumerator`4+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3 */ 

(function GroupByIdentityQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")
        ]), 
      Name: "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TSource")])]), null)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4 */ 

(function GroupByElementSelectorQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), 
          new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")
        ]), 
      Name: "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4 */ 

(function OrderedGroupByQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
              $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
              $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
            ])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOrderKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_orderComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+Mutables", [
          $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
          $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
            $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
            $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
          ])]));

    $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData */ 

(function GroupKeyData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("TOrderKey"), $.GenericParameter("TGroupKey"), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])
        ])
    );

    $.Field({Static:false, Public:false}, "m_orderKey", $.GenericParameter("TOrderKey"));

    $.Field({Static:false, Public:false}, "m_grouping", $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
          $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
          $.GenericParameter("TElement")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3 */ 

(function OrderedGroupByIdentityQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")
        ]), 
      Name: "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
              $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
              $.GenericParameter("TSource"), $.GenericParameter("TOrderKey")
            ])]), null)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4 */ 

(function OrderedGroupByElementSelectorQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), 
          new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")
        ]), 
      Name: "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
              $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
              $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
            ])]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByGrouping`2 */ 

(function GroupByGrouping$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GroupByGrouping`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TGroupKey"), null)
    )
      .Overrides($asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), "get_Key");

    $.Field({Static:false, Public:false}, "m_keyValues", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.Key", $.GenericParameter("TGroupKey"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByGrouping`3 */ 

(function OrderedGroupByGrouping$b3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByGrouping`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TOrderKey", "TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TGroupKey"), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement"), $.GenericParameter("TOrderKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoneAdding", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TGroupKey"), null)
    )
      .Overrides($asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), "get_Key");

    $.Field({Static:false, Public:false}, "m_groupKey", $.GenericParameter("TGroupKey"));

    $.Field({Static:false, Public:false}, "m_values", $asm15.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_orderKeys", $asm15.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false}, "m_orderComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.Key", $.GenericParameter("TGroupKey"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByGrouping`3+<System-Collections-Generic-IEnumerable<TElement>-GetEnumerator>d__7 */ 

(function $lSystem$daCollections$daGeneric$daIEnumerable$lTElement$g$daGetEnumerator$gd__7$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByGrouping`3+<System-Collections-Generic-IEnumerable<TElement>-GetEnumerator>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TOrderKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
          $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
          $.GenericParameter("TElement")
        ]));

    $.Field({Static:false, Public:false}, "$lvalueArray$g5__1", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$lvalueCount$g5__3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2 */ 

(function IndexedSelectQueryOperator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $asm0F.TypeRef("System.Func`3", [
            $.GenericParameter("TInput"), $.Int32, 
            $.GenericParameter("TOutput")
          ])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TInput"), $.Int32, 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorEnumerator */ 

(function IndexedSelectQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.Int32]), $asm0F.TypeRef("System.Func`3", [
            $.GenericParameter("TInput"), $.Int32, 
            $.GenericParameter("TOutput")
          ])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TInput"), $.Int32, 
          $.GenericParameter("TOutput")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults */ 

(function IndexedSelectQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm15.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm15.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_selectOp", $asm15.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_childCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedWhereQueryOperator`1 */ 

(function IndexedWhereQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), 
      Name: "System.Linq.Parallel.IndexedWhereQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Func`3", [
            $.GenericParameter("TInputOutput"), $.Int32, 
            $.Boolean
          ])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TInputOutput"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedWhereQueryOperator`1+IndexedWhereQueryOperatorEnumerator */ 

(function IndexedWhereQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1+IndexedWhereQueryOperatorEnumerator"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IndexedWhereQueryOperator`1+IndexedWhereQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.Int32]), $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TInputOutput"), $.Int32, 
              $.Boolean
            ]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TInputOutput"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1 */ 

(function LastQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), 
      Name: "System.Linq.Parallel.LastQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorEnumerator`1 */ 

(function LastQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm15.TypeRef("System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.CountdownEvent"), 
          $asm0F.TypeRef("System.Threading.CancellationToken"), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean);

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);

    $.Field({Static:false, Public:false}, "m_operatorState", $asm15.TypeRef("System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm0F.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1 */ 

(function LastQueryOperatorState$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1 */ 

(function ReverseQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1 */ 

(function ReverseQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_buffer", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults */ 

(function ReverseQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [$.GenericParameter("TSource")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm15.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [$.GenericParameter("TSource")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3 */ 

(function SelectManyQueryOperator$b3$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TLeftInput")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.Int32, 
              $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])
            ]), $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrderIndex", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamIndexed", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.Int32]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamNotIndexed", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildSelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedRightChildSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.Int32, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator */ 

(function IndexedSelectManyQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.Int32]), $asm15.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.Int32])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm15.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_currentRightSource", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator+Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput"));

    $.Field({Static:false, Public:false}, "m_currentLeftSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1 */ 

(function SelectManyQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1"), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]), $asm15.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftKey"), $.Int32])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm15.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_currentRightSource", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_mutables", $asm15.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1+Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput"), $.GenericParameter("TLeftKey")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput"));

    $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey"));

    $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2 */ 

(function SelectQueryOperator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1 */ 

(function SelectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults */ 

(function SelectQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm15.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm15.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_childCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SingleQueryOperator`1 */ 

(function SingleQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), 
      Name: "System.Linq.Parallel.SingleQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SingleQueryOperator`1+SingleQueryOperatorEnumerator`1 */ 

(function SingleQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1+SingleQueryOperatorEnumerator`1"), $asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.SingleQueryOperator`1+SingleQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean);

    $.Field({Static:false, Public:false}, "m_yieldExtra", $.Boolean);

    $.Field({Static:false, Public:false}, "m_totalElementCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperator`2 */ 

(function SortQueryOperator$b2$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
      Name: "System.Linq.Parallel.SortQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeySelector", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTInputOutput$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TInputOutput")]), [
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey2"])
    )
      .Overrides($asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TInputOutput")]), "CreateOrderedEnumerable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:false}, "KeySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:false}, "KeyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm15.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TInputOutput")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperator`2+<>c__DisplayClass3_0`1 */ 

(function $l$gc__DisplayClass3_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortQueryOperator`2+<>c__DisplayClass3_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey", "TKey2"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSystem.Linq.IOrderedEnumerable$lTInputOutput$g.CreateOrderedEnumerable$gb__0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSortKey"), $.GenericParameter("TKey2")]), [$.GenericParameter("TInputOutput")])
    );

    $.Field({Static:false, Public:true }, "key2Selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey2")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SortQueryOperatorResults`2 */ 

(function SortQueryOperatorResults$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")]), 
      Name: "System.Linq.Parallel.SortQueryOperatorResults`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")])])
    );

    $.Field({Static:false, Public:false}, "m_childQueryResults", $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm15.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperatorResults`2+ChildResultsRecipient */ 

(function ChildResultsRecipient$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortQueryOperatorResults`2+ChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $asm15.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm15.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm15.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperatorEnumerator`3 */ 

(function SortQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), 
      Name: "System.Linq.Parallel.SortQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey", "TSortKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyComparer", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSortKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:true }, "KeyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1 */ 

(function TakeOrSkipQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputOrdinalIndexState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1 */ 

(function TakeOrSkipQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.CountdownEvent"), 
          $asm0F.TypeRef("System.Threading.CancellationToken"), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TResult")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedIndices", $asm15.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm0F.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_buffer", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults */ 

(function TakeOrSkipQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), $asm15.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), [
          $asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), $asm15.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_takeOrSkipOp", $asm15.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "m_childCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1 */ 

(function TakeOrSkipWhileQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TResult"), $.Int32, 
              $.Boolean
            ]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrderIndexState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_indexedPredicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TResult"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1 */ 

(function TakeOrSkipWhileQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult", "TKey"], 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`3", [
              $.GenericParameter("TResult"), $.GenericParameter("TKey"), 
              $.Boolean
            ]), $.Boolean, 
          $asm15.TypeRef("System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Threading.CountdownEvent"), 
          $asm0F.TypeRef("System.Threading.CancellationToken"), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TResult")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedPredicate", $asm0F.TypeRef("System.Func`3", [
          $.GenericParameter("TResult"), $.GenericParameter("TKey"), 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_operatorState", $asm15.TypeRef("System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm0F.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_buffer", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_updatesSeen", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentLowKey", $.GenericParameter("TKey"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1 */ 

(function OperatorState$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_updatesDone", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_currentLowKey", $.GenericParameter("TKey"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.WhereQueryOperator`1 */ 

(function WhereQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), 
      Name: "System.Linq.Parallel.WhereQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm0F.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm15.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm15.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm15.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1 */ 

(function WhereQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellationState */ 

(function CancellationState$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.CancellationState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergedCancellationToken", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfCanceled", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowWithStandardMessageIfCanceled", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Threading.CancellationToken"))
    );

    $.Field({Static:false, Public:false}, "InternalCancellationTokenSource", $asm0F.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "ExternalCancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "MergedCancellationTokenSource", $asm0F.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "TopLevelDisposedFlag", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Constant({Static:true , Public:false}, "POLL_INTERVAL", $.Int32, 63);

    $.Property({Static:false, Public:false}, "MergedCancellationToken", $asm0F.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTask */ 

(function QueryTask$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTask", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseWork", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RunAsynchronously", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Threading.Tasks.Task"), [$asm0F.TypeRef("System.Threading.Tasks.TaskScheduler")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Threading.Tasks.Task"), [$asm0F.TypeRef("System.Threading.Tasks.TaskScheduler")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RunTaskSynchronously", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Work", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_taskIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_groupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:true , Public:false}, "s_runTaskSynchronouslyDelegate", $asm0F.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm0F.System.Action$b1.Of($asm0F.System.Object).New(null, null, new JSIL.MethodPointerInfo($thisType, "RunTaskSynchronously", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false}, "s_baseWorkDelegate", $asm0F.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm0F.System.Action$b1.Of($asm0F.System.Object).New($asm15.System.Linq.Parallel.QueryTask_$l$gc.$l$g9, null, new JSIL.MethodPointerInfo($asm15.System.Linq.Parallel.QueryTask_$l$gc, "$l_cctor$gb__10_0", JSIL.MethodSignature.Action($.Object), false, false));
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTask+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTask+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__10_0", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTaskBase */ 

(function SpoolingTaskBase$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.QueryTask"), 
      Name: "System.Linq.Parallel.SpoolingTaskBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Work", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingSpoolingTask`2 */ 

(function OrderPreservingSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.OrderPreservingSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]), $asm15.TypeRef("System.Linq.Parallel.SortHelper`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Spool", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), 
          $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_results", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_sortHelper", $asm15.TypeRef("System.Linq.Parallel.SortHelper`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingSpoolingTask`2+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingSpoolingTask`2+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpool$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "groupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "results", $asm15.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:true }, "sortHelpers", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SortHelper`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:true }, "maxToRunInParallel", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2 */ 

(function OrderPreservingPipeliningSpoolingTask$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]), $.Object, 
          $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Spool", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partition", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean);

    $.Constant({Static:true , Public:false}, "PRODUCER_BUFFER_AUTO_SIZE", $.Int32, 16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2+<>c__DisplayClass13_0 */ 

(function $l$gc__DisplayClass13_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2+<>c__DisplayClass13_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpool$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "partitions", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "groupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "buffers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:true }, "bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:true }, "autoBuffered", $.Boolean);

    $.Field({Static:false, Public:true }, "degreeOfParallelism", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.QueryLifecycle */ 

(function QueryLifecycle$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Linq.Parallel.QueryLifecycle", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionBegin", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionEnd", 
      JSIL.MethodSignature.Action($.Int32)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTaskGroupState */ 

(function QueryTaskGroupState$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTaskGroupState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Parallel.CancellationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAlreadyEnded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryBegin", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryEnd", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_rootTask", $asm0F.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "m_alreadyEnded", $.Int32);

    $.Field({Static:false, Public:false}, "m_cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:false}, "m_queryId", $.Int32);

    $.Property({Static:false, Public:false}, "IsAlreadyEnded", $.Boolean);

    $.Property({Static:false, Public:false}, "CancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "QueryId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Scheduling */ 

(function Scheduling$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Linq.Parallel.Scheduling", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultChunkSize", 
      new JSIL.MethodSignature($.Int32, null, ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultDegreeOfParallelism", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Constant({Static:true , Public:false}, "DefaultPreserveOrder", $.Boolean, false);

    $.Field({Static:true , Public:false}, "DefaultDegreeOfParallelism", $.Int32);

    $.Constant({Static:true , Public:false}, "DEFAULT_BOUNDED_BUFFER_CAPACITY", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "DEFAULT_BYTES_PER_CHUNK", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "ZOMBIED_PRODUCER_TIMEOUT", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "MAX_SUPPORTED_DOP", $.Int32, 512);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SpoolingTask */ 

(function SpoolingTask$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Linq.Parallel.SpoolingTask", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "SpoolForAll", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpoolPipeline", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", ["!!0"])]), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpoolStopAndGo", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", ["!!0"])]), $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SpoolingTask+<>c__DisplayClass0_0`2 */ 

(function $l$gc__DisplayClass0_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask+<>c__DisplayClass0_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpoolStopAndGo$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "partitions", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "groupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTask+<>c__DisplayClass1_0`2 */ 

(function $l$gc__DisplayClass1_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask+<>c__DisplayClass1_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpoolPipeline$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "groupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "partitions", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTask+<>c__DisplayClass2_0`2 */ 

(function $l$gc__DisplayClass2_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask+<>c__DisplayClass2_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpoolForAll$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "partitions", $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "groupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm0F.TypeRef("System.Threading.Tasks.TaskScheduler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.StopAndGoSpoolingTask`2 */ 

(function StopAndGoSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.StopAndGoSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_destination", $asm15.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PipelineSpoolingTask`2 */ 

(function PipelineSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.PipelineSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_destination", $asm15.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllSpoolingTask`2 */ 

(function ForAllSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.ForAllSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellableEnumerable */ 

(function CancellableEnumerable$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Parallel.CancellableEnumerable", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Wrap", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Threading.CancellationToken")], ["TElement"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellableEnumerable+<Wrap>d__0`1 */ 

(function $lWrap$gd__0$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.CancellableEnumerable+<Wrap>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lcount$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "token", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g3__token", $asm0F.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator */ 

(function ExceptionAggregator$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Linq.Parallel.ExceptionAggregator", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ThrowAnOCE", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Exception"), $asm15.TypeRef("System.Linq.Parallel.CancellationState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowOCEorAggregateException", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Exception"), $asm15.TypeRef("System.Linq.Parallel.CancellationState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapEnumerable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm15.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement"])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapFunc", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm15.TypeRef("System.Linq.Parallel.CancellationState")], ["T", "U"])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapQueryEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", ["!!0", "!!1"]), $asm15.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement", "TIgnoreKey"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptionAggregator+<WrapEnumerable>d__0`1 */ 

(function $lWrapEnumerable$gd__0$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator+<WrapEnumerable>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lenumerator$g5__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:true }, "$l$g3__cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator+<WrapQueryEnumerator>d__1`2 */ 

(function $lWrapQueryEnumerator$gd__1$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator+<WrapQueryEnumerator>d__1`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TIgnoreKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "$lelem$g5__1", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$lignoreKey$g5__2", $.GenericParameter("TIgnoreKey"));

    $.Field({Static:false, Public:false}, "cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:true }, "$l$g3__cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator+<>c__DisplayClass3_0`2 */ 

(function $l$gc__DisplayClass3_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator+<>c__DisplayClass3_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWrapFunc$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("U"), [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:true }, "f", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")]));

    $.Field({Static:false, Public:true }, "cancellationState", $asm15.TypeRef("System.Linq.Parallel.CancellationState"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExchangeUtilities */ 

(function ExchangeUtilities$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Linq.Parallel.ExchangeUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "HashRepartition", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), $.Int32]), [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TElement", "THashKey", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "HashRepartitionOrdered", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), "!!2"]), [
          $asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ], ["TElement", "THashKey", "TOrderKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWorseThan", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PartitionDataSource", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", $.Int32]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32, 
          $.Boolean
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Worse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* struct System.Linq.Parallel.NoKeyMemoizationRequired */ 

(function NoKeyMemoizationRequired$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.NoKeyMemoizationRequired", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      SizeBytes: 1, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FixedMaxHeap`1 */ 

(function FixedMaxHeap$b1$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.FixedMaxHeap`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxValue", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HeapifyLastLeaf", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "HeapifyRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveMax", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceMax", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Swap", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "m_elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Size", $.Int32);

    $.Property({Static:false, Public:false}, "MaxValue", $.GenericParameter("TElement"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GrowingArray`1 */ 

(function GrowingArray$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GrowingArray`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowArray", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Constant({Static:true , Public:false}, "DEFAULT_ARRAY_SIZE", $.Int32, 1024);

    $.Property({Static:false, Public:false}, "InternalArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashLookup`2 */ 

(function HashLookup$b2$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashLookup`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreKeysEqual", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [
          $.GenericParameter("TKey"), $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.HashLookup`2+Slot", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "freeList", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false}, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.HashLookup`2+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.HashLookup`2+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntValueEvent */ 

(function IntValueEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Threading.ManualResetEventSlim"), 
      Name: "System.Linq.Parallel.IntValueEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "Value", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListChunk`1 */ 

(function ListChunk$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ListChunk`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TInputOutput")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_chunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_chunkCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_nextChunk", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_tailChunk", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false}, "Next", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListChunk`1+<GetEnumerator>d__10 */ 

(function $lGetEnumerator$gd__10$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ListChunk`1+<GetEnumerator>d__10", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTInputOutput$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TInputOutput"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TInputOutput"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "$lcurr$g5__1", $asm15.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTInputOutput$g.Current", $.GenericParameter("TInputOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_dict", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_defaultKeyGrouping", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.ILookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Lookup`2+<GetEnumerator>d__10 */ 

(function $lGetEnumerator$gd__10$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2+<GetEnumerator>d__10", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Linq.Parallel.Pair`2 */ 

(function Pair$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Pair`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $.GenericParameter("U")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_First", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Second", 
      new JSIL.MethodSignature($.GenericParameter("U"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_First", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Second", 
      new JSIL.MethodSignature(null, [$.GenericParameter("U")])
    );

    $.Field({Static:false, Public:false}, "m_first", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "m_second", $.GenericParameter("U"));

    $.Property({Static:false, Public:true }, "First", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Second", $.GenericParameter("U"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PairComparer`2 */ 

(function PairComparer$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PairComparer`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("U")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("T"), $.GenericParameter("U")]), $asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("T"), $.GenericParameter("U")])])
    );

    $.Field({Static:false, Public:false}, "m_comparer1", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_comparer2", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("U")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm15.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("T"), $.GenericParameter("U")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PlinqEtwProvider */ 

(function PlinqEtwProvider$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Diagnostics.Tracing.EventSource"), 
      Name: "System.Linq.Parallel.PlinqEtwProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "NextQueryId", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryBegin", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryBegin", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [1]; });

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryEnd", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryEnd", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [2]; });

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryFork", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryFork", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [3]; });

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryJoin", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryJoin", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [4]; });

    $.Field({Static:true , Public:false}, "Log", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_defaultSchedulerId", $.Int32);

    $.Field({Static:true , Public:false}, "s_queryId", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ALL_KEYWORDS", $asm0F.TypeRef("System.Diagnostics.Tracing.EventKeywords"), -1);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYBEGIN_EVENTID", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYEND_EVENTID", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYFORK_EVENTID", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYJOIN_EVENTID", $.Int32, 4);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventSourceAttribute"));

})();

/* class System.Linq.Parallel.PlinqEtwProvider+Tasks */ 

(function Tasks$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PlinqEtwProvider+Tasks", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "Query", $asm0F.TypeRef("System.Diagnostics.Tracing.EventTask"), 1);

    $.Constant({Static:true , Public:true }, "ForkJoin", $asm0F.TypeRef("System.Diagnostics.Tracing.EventTask"), 2);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseComparer`1 */ 

(function ReverseComparer$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ReverseComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Shared`1 */ 

(function Shared$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Shared`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortHelper`1 */ 

(function SortHelper$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortHelper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortHelper`2 */ 

(function SortHelper$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Parallel.SortHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), 
      Name: "System.Linq.Parallel.SortHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"), 
          $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])]), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Threading.Barrier"), JSIL.ArrayDimensionParameter(2)])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildKeysFromSource", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TInputOutput")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputePartnerIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateSortHelpers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.SortHelper`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])]), [$asm15.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeSortCooperatively", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $asm0F.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSortIndicesInPlace", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")]), $asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TInputOutput")]), 
          $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.Field({Static:false, Public:false}, "m_source", $asm15.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_groupState", $asm15.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false}, "m_sharedIndices", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]));

    $.Field({Static:false, Public:false}, "m_sharedKeys", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_sharedValues", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_sharedBarriers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Threading.Barrier"), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm15.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TraceHelpers */ 

(function TraceHelpers$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Linq.Parallel.TraceHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetVerbose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "TraceInfo", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "TraceWarning", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util */ 

(function Util$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Linq.Parallel.Util", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultComparer", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Comparer`1", ["!!0"]), null, ["TKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "s_fastIntComparer", $asm15.TypeRef("System.Linq.Parallel.Util+FastIntComparer"));

    $.Field({Static:true , Public:false}, "s_fastLongComparer", $asm15.TypeRef("System.Linq.Parallel.Util+FastLongComparer"));

    $.Field({Static:true , Public:false}, "s_fastFloatComparer", $asm15.TypeRef("System.Linq.Parallel.Util+FastFloatComparer"));

    $.Field({Static:true , Public:false}, "s_fastDoubleComparer", $asm15.TypeRef("System.Linq.Parallel.Util+FastDoubleComparer"));

    $.Field({Static:true , Public:false}, "s_fastDateTimeComparer", $asm15.TypeRef("System.Linq.Parallel.Util+FastDateTimeComparer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastIntComparer */ 

(function FastIntComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$asm0F.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.Util+FastIntComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastLongComparer */ 

(function FastLongComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$asm0F.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.Util+FastLongComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $.Int64])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastFloatComparer */ 

(function FastFloatComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$asm0F.TypeRef("System.Single")]), 
      Name: "System.Linq.Parallel.Util+FastFloatComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Single, $.Single])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastDoubleComparer */ 

(function FastDoubleComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$asm0F.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.Util+FastDoubleComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Double, $.Double])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastDateTimeComparer */ 

(function FastDateTimeComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$asm0F.TypeRef("System.DateTime")]), 
      Name: "System.Linq.Parallel.Util+FastDateTimeComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.Wrapper`1 */ 

(function Wrapper$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Wrapper`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.WrapperEqualityComparer`1 */ 

(function WrapperEqualityComparer$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.WrapperEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")]), $asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm15.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions */ 

(function ReadOnlyCollectionExtensions$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions+DefaultReadOnlyCollection`1 */ 

(function DefaultReadOnlyCollection$b1$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions+DefaultReadOnlyCollection`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:true , Public:false}, "_defaultCollection", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1"));

    $.GenericProperty({Static:true , Public:false}, "Empty", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Strings */ 

(function Strings$Members () {
  var $, $thisType;

























































































































































































  JSIL.MakeStaticClass("System.Linq.Expressions.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveByRefArgs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveVarArgs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllCaseBodiesMustHaveSameType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllTestValuesMustHaveSameType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgCntMustBeGreaterThanNameCnt", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentCannotBeOfTypeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArray", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArrayIndexType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeBoolean", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInstanceMember", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInteger", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeSingleDimensionalArrayType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustNotHaveValueType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypesMustMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayTypeMustBeArray", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindingCannotBeNull", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BothAccessorsMustBeStatic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BoundsCannotBeLessThanOne", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotCompileDynamic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CoalesceUsedOnNonNullType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionModifiedWhileEnumerating", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionReadOnly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterExpression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterTry", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFilterTest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFinally", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConversionIsNotSupportedForArithmeticTypes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CountCannotBeNegative", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultBodyMustBeSupplied", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodNotAdd", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodStatic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodWithZeroArgs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnumerationIsDone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeReadable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeWriteable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionNotReduced", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FaultCannotHaveCatchOrFinally", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FirstArgumentMustBeCallSite", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_HomogenousAppDomainRequired", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfArgumentsForMembers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfConstructorArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfIndexes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaDeclarationParameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfMembersForGivenConstructor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForFunc", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IndexesOfSetGetMustMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidArgumentValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAsmNameOrExtension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidOutputDir", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidUnboxType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LabelMustBeVoidOrHaveExpression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LabelTypeMustBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LambdaTypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ListInitializerWithZeroMembers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodBuilderDoesNotHaveTypeBuilder", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodPreconditionViolated", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBeReducible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustReduceToDifferent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NonEmptyCollectionRequired", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoOrInvalidRuleProduced", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticFieldsHaveNullInstance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticMethodsHaveNullInstance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticPropertiesHaveNullInstance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PdbGeneratorNeedsExpressionCompiler", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyCannotHaveRefType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyTyepMustMatchSetter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_QueueEmpty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_QuotedExpressionMustBeLambda", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducedNotCompatible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducibleMustOverrideReduce", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RethrowRequiresCatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SetterHasNoParams", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SetterMustBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StartEndMustBeOrdered", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TryMustHaveCatchFinallyOrFault", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TryNotAllowedInFilter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeDoesNotHaveConstructorForTheSignature", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeMustNotBeByRef", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedCoalesceOperator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnhandledBinding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownBindingType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidNullValue", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidObjectType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.Property({Static:true , Public:false}, "MethodPreconditionViolated", $.String);

    $.Property({Static:true , Public:false}, "InvalidArgumentValue", $.String);

    $.Property({Static:true , Public:false}, "NonEmptyCollectionRequired", $.String);

    $.Property({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", $.String);

    $.Property({Static:true , Public:false}, "ReducibleMustOverrideReduce", $.String);

    $.Property({Static:true , Public:false}, "MustReduceToDifferent", $.String);

    $.Property({Static:true , Public:false}, "ReducedNotCompatible", $.String);

    $.Property({Static:true , Public:false}, "SetterHasNoParams", $.String);

    $.Property({Static:true , Public:false}, "PropertyCannotHaveRefType", $.String);

    $.Property({Static:true , Public:false}, "IndexesOfSetGetMustMatch", $.String);

    $.Property({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", $.String);

    $.Property({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", $.String);

    $.Property({Static:true , Public:false}, "BoundsCannotBeLessThanOne", $.String);

    $.Property({Static:true , Public:false}, "TypeMustNotBeByRef", $.String);

    $.Property({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", $.String);

    $.Property({Static:true , Public:false}, "CountCannotBeNegative", $.String);

    $.Property({Static:true , Public:false}, "ArrayTypeMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "SetterMustBeVoid", $.String);

    $.Property({Static:true , Public:false}, "PropertyTyepMustMatchSetter", $.String);

    $.Property({Static:true , Public:false}, "BothAccessorsMustBeStatic", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticFieldsHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticPropertiesHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "PropertyTypeCannotBeVoid", $.String);

    $.Property({Static:true , Public:false}, "InvalidUnboxType", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMustBeReadable", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMustBeWriteable", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustNotHaveValueType", $.String);

    $.Property({Static:true , Public:false}, "MustBeReducible", $.String);

    $.Property({Static:true , Public:false}, "AllTestValuesMustHaveSameType", $.String);

    $.Property({Static:true , Public:false}, "AllCaseBodiesMustHaveSameType", $.String);

    $.Property({Static:true , Public:false}, "DefaultBodyMustBeSupplied", $.String);

    $.Property({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", $.String);

    $.Property({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", $.String);

    $.Property({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", $.String);

    $.Property({Static:true , Public:false}, "LabelTypeMustBeVoid", $.String);

    $.Property({Static:true , Public:false}, "QuotedExpressionMustBeLambda", $.String);

    $.Property({Static:true , Public:false}, "StartEndMustBeOrdered", $.String);

    $.Property({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", $.String);

    $.Property({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", $.String);

    $.Property({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", $.String);

    $.Property({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInteger", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String);

    $.Property({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String);

    $.Property({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String);

    $.Property({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String);

    $.Property({Static:true , Public:false}, "UnhandledBinding", $.String);

    $.Property({Static:true , Public:false}, "UnknownBindingType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String);

    $.Property({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String);

    $.Property({Static:true , Public:false}, "NoOrInvalidRuleProduced", $.String);

    $.Property({Static:true , Public:false}, "FirstArgumentMustBeCallSite", $.String);

    $.Property({Static:true , Public:false}, "BindingCannotBeNull", $.String);

    $.Property({Static:true , Public:false}, "QueueEmpty", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotLeaveFinally", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotLeaveFilterTest", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotEnterTry", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotEnterExpression", $.String);

    $.Property({Static:true , Public:false}, "ExtensionNotReduced", $.String);

    $.Property({Static:true , Public:false}, "CannotCompileDynamic", $.String);

    $.Property({Static:true , Public:false}, "InvalidOutputDir", $.String);

    $.Property({Static:true , Public:false}, "InvalidAsmNameOrExtension", $.String);

    $.Property({Static:true , Public:false}, "CollectionReadOnly", $.String);

    $.Property({Static:true , Public:false}, "RethrowRequiresCatch", $.String);

    $.Property({Static:true , Public:false}, "TryNotAllowedInFilter", $.String);

    $.Property({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", $.String);

    $.Property({Static:true , Public:false}, "EnumerationIsDone", $.String);

    $.Property({Static:true , Public:false}, "HomogenousAppDomainRequired", $.String);

    $.Property({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Error */ 

(function Error$Members () {
  var $, $thisType;


















































































































































































  JSIL.MakeStaticClass("System.Linq.Expressions.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArray", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeBoolean", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInstanceMember", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInteger", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustNotHaveValueType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypesMustMatch", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArrayTypeMustBeArray", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindingCannotBeNull", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BothAccessorsMustBeStatic", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BoundsCannotBeLessThanOne", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileDynamic", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CoalesceUsedOnNonNullType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionReadOnly", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterExpression", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterTry", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFilterTest", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFinally", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CountCannotBeNegative", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DefaultBodyMustBeSupplied", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNotAdd", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodStatic", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerationIsDone", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNotReduced", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FirstArgumentMustBeCallSite", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "HomogenousAppDomainRequired", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfIndexes", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexesOfSetGetMustMatch", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAsmNameOrExtension", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOutputDir", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUnboxType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTypeMustBeVoid", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ListInitializerWithZeroMembers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustBeReducible", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustReduceToDifferent", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoOrInvalidRuleProduced", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyCannotHaveRefType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyTyepMustMatchSetter", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueueEmpty", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "QuotedExpressionMustBeLambda", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducedNotCompatible", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducibleMustOverrideReduce", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "RethrowRequiresCatch", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetterHasNoParams", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetterMustBeVoid", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "StartEndMustBeOrdered", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotAllowedInFilter", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMustNotBeByRef", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedCoalesceOperator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinding", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownBindingType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object, $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression */ 

(function Expression$Members () {
  var $, $thisType;















































































































































































































































































































































































































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyTypeArgs", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "indexes", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "indexes", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayLength", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Assign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm0F.TypeRef("System.Reflection.MemberInfo"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(0, "expressions", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "expressions", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "expressions", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "expressions", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(3, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm0F.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(3, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm0F.TypeRef("System.Type"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearDebugInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [$asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type, $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Continue", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Continue", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.String, $.Boolean, 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DebugInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Decrement", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Decrement", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Default", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DefaultExpression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ElementInit"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ElementInit"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.DefaultExpression"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [
          $.Type, $asm0F.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestMethod", 
      new JSIL.MethodSignature($.Int32, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestProperty", 
      new JSIL.MethodSignature($.Int32, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Reflection.PropertyInfo")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Reflection.PropertyInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindInstanceProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.PropertyInfo"), [
          $asm0F.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $asm0F.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.PropertyInfo"), [
          $asm0F.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type]), $asm0F.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetActionType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    )
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetArgTypesString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComparisonOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDelegateType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    )
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityComparisonOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFuncType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    )
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetInvokeMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedAssignOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedBinaryOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedCoercionOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedUnaryOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParametersForValidation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")]), [$asm0F.TypeRef("System.Reflection.MethodBase"), $asm15.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.PropertyInfo"), [$asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResultTypeOfShift", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedAssignOperatorOrThrow", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercion", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionOrThrow", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValidMethodForDynamic", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IfThen", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ConditionalExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "IfThenElse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Increment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Increment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.PropertyInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLiftingConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.ExpressionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullComparison", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleShift", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidLiftedConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelTarget"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    )
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    )
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.Boolean, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.String, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.String, 
          $.Boolean, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.Boolean, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Parameter(3, "parameters", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.Boolean, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.String, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.String, 
          $.Boolean, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.String, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.String, $.Boolean, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0F.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "initializers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type, $asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LoopExpression"), [
          $.Type, $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeCatchBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeGoto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $.Type, $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm0F.TypeRef("System.Reflection.PropertyInfo"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeMemberAccess", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeOpAssignUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeTry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.TryExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0F.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewExpression"), [$asm0F.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewExpression"), [$asm0F.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewExpression"), [$asm0F.TypeRef("System.Reflection.ConstructorInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm0F.TypeRef("System.Reflection.ConstructorInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm0F.TypeRef("System.Reflection.ConstructorInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.MemberInfo")])
        ])
    )
      .Parameter(2, "members", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewExpression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "bounds", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterIsAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.ParameterInfo"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm0F.TypeRef("System.Reflection.PropertyInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm0F.TypeRef("System.Reflection.PropertyInfo"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [
          $.Type, $asm0F.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PropertyOrField", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReduceAndCheck", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReduceExtensions", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "ReferenceEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReferenceNotEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanWrite", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnObject", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"])])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [$asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Parameter(0, "variables", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])])
    )
      .Parameter(1, "cases", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Parameter(2, "cases", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Parameter(3, "cases", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Parameter(4, "cases", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "testValues", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String, $asm0F.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
          $.String, $asm0F.TypeRef("System.Guid"), 
          $asm0F.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
          $.String, $asm0F.TypeRef("System.Guid"), 
          $asm0F.TypeRef("System.Guid"), $asm0F.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Throw", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Throw", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCatch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])])
    )
      .Parameter(1, "handlers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TryCatchFinally", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.TryExpression"), [
          $.Type, $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    )
      .Parameter(2, "handlers", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TryFault", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryFinally", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetActionType", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetFuncType", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryQuote", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeAs", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeIs", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Unbox", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAccessor", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAccessorArgumentTypes", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAnonymousTypeMember", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentCount", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodBase"), $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentTypes", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodBase"), $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCallInstanceType", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCoalesceArgTypes", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateDynamicArgument", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateElementInitAddMethodInfo", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGoto", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGotoType", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIndexedProperty", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm0F.TypeRef("System.Reflection.PropertyInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLambdaArgs", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateListInitArgs", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMemberInitArgs", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodAndGetParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.ParameterInfo")]), [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodInfo", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOneArgument", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Reflection.MethodBase"), $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $.Type, $asm0F.TypeRef("System.Reflection.ParameterInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOpAssignConversionLambda", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Type, 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.ExpressionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOperator", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateParamswithOperandsOrThrow", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSpan", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateStaticOrInstanceMethod", 
      new JSIL.MethodSignature(null, [$.Type, $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSwitchCaseType", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Boolean, 
          $asm0F.TypeRef("System.Type"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTryAndCatchHaveSameType", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $.Type, 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTryGetFuncActionArgs", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUserDefinedConditionalLogicOperator", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateVariables", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Variable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Variable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyOpTrueFalse", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitChildren", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_LambdaDelegateCache", $asm15.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:true , Public:false}, "_legacyCtorSupportTable", $asm0F.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$.Type, $asm15.TypeRef("System.Linq.Expressions.Expression+ExtensionInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:false}, "DebugView", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Linq.Expressions.Expression+LambdaFactory */ 

JSIL.MakeDelegate("System.Linq.Expressions.Expression+LambdaFactory", false, [], 
  new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
      $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.String"), 
      $asm0F.TypeRef("System.Boolean"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    ]));

/* class System.Linq.Expressions.Expression+ExtensionInfo */ 

(function ExtensionInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ExtensionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+BinaryExpressionProxy */ 

(function BinaryExpressionProxy$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+BinaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Conversion", $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Left", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Right", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+BlockExpressionProxy */ 

(function BlockExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+BlockExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BlockExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.BlockExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expressions", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Result", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variables", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+CatchBlockProxy */ 

(function CatchBlockProxy$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+CatchBlockProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.CatchBlock"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.CatchBlock"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Filter", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Test", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variable", $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ConditionalExpressionProxy */ 

(function ConditionalExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ConditionalExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ConditionalExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.ConditionalExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IfFalse", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Test", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ConstantExpressionProxy */ 

(function ConstantExpressionProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ConstantExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ConstantExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.ConstantExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+DebugInfoExpressionProxy */ 

(function DebugInfoExpressionProxy$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+DebugInfoExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Document", $asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

    $.Property({Static:false, Public:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true }, "IsClear", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+DefaultExpressionProxy */ 

(function DefaultExpressionProxy$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+DefaultExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.DefaultExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.DefaultExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+DynamicExpressionProxy */ 

(function DynamicExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+DynamicExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelegateType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.DynamicExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Binder", $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DelegateType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+GotoExpressionProxy */ 

(function GotoExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+GotoExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.GotoExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.GotoExpressionKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.GotoExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Kind", $asm15.TypeRef("System.Linq.Expressions.GotoExpressionKind"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Value", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+IndexExpressionProxy */ 

(function IndexExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+IndexExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.IndexExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.IndexExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Indexer", $asm0F.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Object", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+InvocationExpressionProxy */ 

(function InvocationExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+InvocationExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.InvocationExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.InvocationExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+LabelExpressionProxy */ 

(function LabelExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+LabelExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LabelExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.LabelExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DefaultValue", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+LambdaExpressionProxy */ 

(function LambdaExpressionProxy$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+LambdaExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Parameters", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TailCall", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ListInitExpressionProxy */ 

(function ListInitExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ListInitExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.ListInitExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Initializers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true }, "NewExpression", $asm15.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+LoopExpressionProxy */ 

(function LoopExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+LoopExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LoopExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.LoopExpression"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "BreakLabel", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "ContinueLabel", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+MemberExpressionProxy */ 

(function MemberExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+MemberExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MemberExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.MemberExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Member", $asm0F.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+MemberInitExpressionProxy */ 

(function MemberInitExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+MemberInitExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MemberInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.MemberInitExpression"));

    $.Property({Static:false, Public:true }, "Bindings", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NewExpression", $asm15.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+MethodCallExpressionProxy */ 

(function MethodCallExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+MethodCallExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Object", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+NewArrayExpressionProxy */ 

(function NewArrayExpressionProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+NewArrayExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expressions", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+NewExpressionProxy */ 

(function NewExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+NewExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Constructor", $asm0F.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Members", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ParameterExpressionProxy */ 

(function ParameterExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ParameterExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+RuntimeVariablesExpressionProxy */ 

(function RuntimeVariablesExpressionProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+RuntimeVariablesExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variables", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+SwitchCaseProxy */ 

(function SwitchCaseProxy$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+SwitchCaseProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.SwitchCase"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.SwitchCase"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TestValues", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+SwitchExpressionProxy */ 

(function SwitchExpressionProxy$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+SwitchExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.SwitchExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.SwitchExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Cases", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")]));

    $.Property({Static:false, Public:true }, "Comparison", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DefaultBody", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "SwitchValue", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+TryExpressionProxy */ 

(function TryExpressionProxy$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+TryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.TryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.TryExpression"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Fault", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Finally", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Handlers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+TypeBinaryExpressionProxy */ 

(function TypeBinaryExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+TypeBinaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+UnaryExpressionProxy */ 

(function UnaryExpressionProxy$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+UnaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.UnaryExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Operand", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindMethod$gb__342_0", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [$asm0F.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindProperty$gb__241_0", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.PropertyInfo"), [$asm0F.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetArgTypesString$gb__240_0", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__342_0", $asm0F.TypeRef("System.Func`2", [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Reflection.MethodInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.BinaryExpression */ 

(function BinaryExpression$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.BinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLiftedLogical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReferenceComparison", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBinaryOpFromAssignmentOp", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ExpressionType"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethod", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOpAssignment", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceUserdefinedLifted", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_left", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_right", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Right", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Left", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Conversion", $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLiftedLogical", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReferenceComparison", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LogicalBinaryExpression */ 

(function LogicalBinaryExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.LogicalBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.AssignBinaryExpression */ 

(function AssignBinaryExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.AssignBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.CoalesceConversionBinaryExpression */ 

(function CoalesceConversionBinaryExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.CoalesceConversionBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SimpleBinaryExpression */ 

(function SimpleBinaryExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.SimpleBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodBinaryExpression */ 

(function MethodBinaryExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.SimpleBinaryExpression"), 
      Name: "System.Linq.Expressions.MethodBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethod", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm0F.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.OpAssignMethodConversionBinaryExpression */ 

(function OpAssignMethodConversionBinaryExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodBinaryExpression"), 
      Name: "System.Linq.Expressions.OpAssignMethodConversionBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockExpression */ 

(function BlockExpression$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.BlockExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VariableCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeVariables", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnlyExpressions", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Property({Static:false, Public:true }, "Expressions", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Variables", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "Result", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block2 */ 

(function Block2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block3 */ 

(function Block3$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block4 */ 

(function Block4$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block5 */ 

(function Block5$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockN */ 

(function BlockN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.BlockN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeExpression */ 

(function ScopeExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.ScopeExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VariableCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VariablesList", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeVariables", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReuseOrValidateVariables", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.Field({Static:false, Public:false}, "_variables", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);

    $.Property({Static:false, Public:false}, "VariablesList", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Scope1 */ 

(function Scope1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ScopeExpression"), 
      Name: "System.Linq.Expressions.Scope1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_body", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeN */ 

(function ScopeN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ScopeExpression"), 
      Name: "System.Linq.Expressions.ScopeN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_body", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeWithType */ 

(function ScopeWithType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ScopeN"), 
      Name: "System.Linq.Expressions.ScopeWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockExpressionList */ 

(function BlockExpressionList$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BlockExpression"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_block", $asm15.TypeRef("System.Linq.Expressions.BlockExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockExpressionList+<GetEnumerator>d__18 */ 

(function $lGetEnumerator$gd__18$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList+<GetEnumerator>d__18", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.get_Current", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Expressions.BlockExpressionList"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.Current", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.BlockExpressionList+<System-Collections-IEnumerable-GetEnumerator>d__19 */ 

(function $lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__19$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList+<System-Collections-IEnumerable-GetEnumerator>d__19", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Expressions.BlockExpressionList"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.CatchBlock */ 

(function CatchBlock$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.CatchBlock", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_var", $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_filter", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Variable", $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Property({Static:false, Public:true }, "Test", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Filter", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ConditionalExpression */ 

(function ConditionalExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConditionalExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFalse", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_true", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Test", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfFalse", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.FullConditionalExpression */ 

(function FullConditionalExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ConditionalExpression"), 
      Name: "System.Linq.Expressions.FullConditionalExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFalse", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_false", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.FullConditionalExpressionWithType */ 

(function FullConditionalExpressionWithType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.FullConditionalExpression"), 
      Name: "System.Linq.Expressions.FullConditionalExpressionWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ConstantExpression */ 

(function ConstantExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConstantExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedConstantExpression */ 

(function TypedConstantExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ConstantExpression"), 
      Name: "System.Linq.Expressions.TypedConstantExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DebugInfoExpression */ 

(function DebugInfoExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DebugInfoExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true }, "Document", $asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SpanDebugInfoExpression */ 

(function SpanDebugInfoExpression$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression"), 
      Name: "System.Linq.Expressions.SpanDebugInfoExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_startLine", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_startColumn", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_endLine", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_endColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ClearDebugInfoExpression */ 

(function ClearDebugInfoExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression"), 
      Name: "System.Linq.Expressions.ClearDebugInfoExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DebugViewWriter */ 

(function DebugViewWriter$Members () {
  var $, $thisType;














































































  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.DebugViewWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lVisitDeclarations$gb__39_0", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitExpressions$gb__38_0", 
      new JSIL.MethodSignature(null, ["!!0"], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitListInit$gb__60_0", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ElementInit"))
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitMemberInit$gb__64_0", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MemberBinding"))
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitMemberListBinding$gb__62_0", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ElementInit"))
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitMemberMemberBinding$gb__63_0", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MemberBinding"))
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckBreak", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), [$asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dedent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Base", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Delta", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstantValueSuffix", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDisplayName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlow", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), [$asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, ["!!0", $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $.Int32])])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetId", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetName", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaId", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaName", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOperatorPrecedence", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Indent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleExpression", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NeedsParentheses", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewLine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$.String, $asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), $.String, 
          $asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutMember", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0F.TypeRef("System.Reflection.MemberInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParenthesizedVisit", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitDeclarations", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DefaultExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DynamicExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ElementInit"), [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [$.Char, $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm0F.TypeRef("System.Action`1", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.GotoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.IndexExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LabelExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LoopExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm15.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.TryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLambda", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.IO.TextWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTo", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Constant({Static:true , Public:false}, "Tab", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "MaxColumn", $.Int32, 120);

    $.Field({Static:false, Public:false}, "_out", $asm0F.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "_column", $.Int32);

    $.Field({Static:false, Public:false}, "_stack", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "_delta", $.Int32);

    $.Field({Static:false, Public:false}, "_flow", $asm15.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"));

    $.Field({Static:false, Public:false}, "_lambdas", $asm12.TypeRef("System.Collections.Generic.Queue`1", [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")]));

    $.Field({Static:false, Public:false}, "_lambdaIds", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32]));

    $.Field({Static:false, Public:false}, "_paramIds", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]));

    $.Field({Static:false, Public:false}, "_labelIds", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $.Int32]));

    $.Property({Static:false, Public:false}, "Base", $.Int32);

    $.Property({Static:false, Public:false}, "Delta", $.Int32);

    $.Property({Static:false, Public:false}, "Depth", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.DebugViewWriter+Flow */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.DebugViewWriter+Flow", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Space: 1, 
    NewLine: 2, 
    Break: 32768, 
  }
);

/* class System.Linq.Expressions.DefaultExpression */ 

(function DefaultExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DefaultExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression */ 

(function DynamicExpression$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DynamicExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DelegateType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IDynamicExpression.CreateCallSite", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IDynamicExpression"), "CreateCallSite");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IDynamicExpression.Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IDynamicExpression"), "Rewrite");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_binder", $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Binder", $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    $.Property({Static:false, Public:true , Virtual:true }, "DelegateType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpressionN */ 

(function DynamicExpressionN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpressionN */ 

(function TypedDynamicExpressionN$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpressionN"), 
      Name: "System.Linq.Expressions.TypedDynamicExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_returnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression1 */ 

(function DynamicExpression1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression1 */ 

(function TypedDynamicExpression1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression1"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression2 */ 

(function DynamicExpression2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression2 */ 

(function TypedDynamicExpression2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression2"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression3 */ 

(function DynamicExpression3$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression3 */ 

(function TypedDynamicExpression3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression3"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression4 */ 

(function DynamicExpression4$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression4 */ 

(function TypedDynamicExpression4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.DynamicExpression4"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ElementInit */ 

(function ElementInit$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ElementInit", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddMethod", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_addMethod", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "_arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "AddMethod", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionStringBuilder */ 

(function ExpressionStringBuilder$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.ExpressionStringBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLabel", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParam", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CatchBlockToString", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitBindingToString", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionToString", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelId", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberBindingToString", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "OutMember", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchCaseToString", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DebugInfoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DefaultExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DynamicExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ElementInit"), [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Char
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Char, $.String
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.GotoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.IndexExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LabelExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.LoopExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm15.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.TryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.Field({Static:false, Public:false}, "_out", $asm0F.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "_ids", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.ExpressionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.ExpressionType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    AddChecked: 1, 
    And: 2, 
    AndAlso: 3, 
    ArrayLength: 4, 
    ArrayIndex: 5, 
    Call: 6, 
    Coalesce: 7, 
    Conditional: 8, 
    Constant: 9, 
    Convert: 10, 
    ConvertChecked: 11, 
    Divide: 12, 
    Equal: 13, 
    ExclusiveOr: 14, 
    GreaterThan: 15, 
    GreaterThanOrEqual: 16, 
    Invoke: 17, 
    Lambda: 18, 
    LeftShift: 19, 
    LessThan: 20, 
    LessThanOrEqual: 21, 
    ListInit: 22, 
    MemberAccess: 23, 
    MemberInit: 24, 
    Modulo: 25, 
    Multiply: 26, 
    MultiplyChecked: 27, 
    Negate: 28, 
    UnaryPlus: 29, 
    NegateChecked: 30, 
    New: 31, 
    NewArrayInit: 32, 
    NewArrayBounds: 33, 
    Not: 34, 
    NotEqual: 35, 
    Or: 36, 
    OrElse: 37, 
    Parameter: 38, 
    Power: 39, 
    Quote: 40, 
    RightShift: 41, 
    Subtract: 42, 
    SubtractChecked: 43, 
    TypeAs: 44, 
    TypeIs: 45, 
    Assign: 46, 
    Block: 47, 
    DebugInfo: 48, 
    Decrement: 49, 
    Dynamic: 50, 
    Default: 51, 
    Extension: 52, 
    Goto: 53, 
    Increment: 54, 
    Index: 55, 
    Label: 56, 
    RuntimeVariables: 57, 
    Loop: 58, 
    Switch: 59, 
    Throw: 60, 
    Try: 61, 
    Unbox: 62, 
    AddAssign: 63, 
    AndAssign: 64, 
    DivideAssign: 65, 
    ExclusiveOrAssign: 66, 
    LeftShiftAssign: 67, 
    ModuloAssign: 68, 
    MultiplyAssign: 69, 
    OrAssign: 70, 
    PowerAssign: 71, 
    RightShiftAssign: 72, 
    SubtractAssign: 73, 
    AddAssignChecked: 74, 
    MultiplyAssignChecked: 75, 
    SubtractAssignChecked: 76, 
    PreIncrementAssign: 77, 
    PreDecrementAssign: 78, 
    PostIncrementAssign: 79, 
    PostDecrementAssign: 80, 
    TypeEqual: 81, 
    OnesComplement: 82, 
    IsTrue: 83, 
    IsFalse: 84, 
  }
);

/* class System.Linq.Expressions.DynamicExpressionVisitor */ 

(function DynamicExpressionVisitor$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.DynamicExpressionVisitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.DynamicExpression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.GotoExpressionKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.GotoExpressionKind", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Goto: 0, 
    Return: 1, 
    Break: 2, 
    Continue: 3, 
  }
);

/* class System.Linq.Expressions.GotoExpression */ 

(function GotoExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.GotoExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.GotoExpressionKind"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Value", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Target", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Kind", $asm15.TypeRef("System.Linq.Expressions.GotoExpressionKind"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Expressions.IArgumentProvider */ 

JSIL.MakeInterface(
  "System.Linq.Expressions.IArgumentProvider", true, [], function ($) {
    $.Method({}, "GetArgument", new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32]));
    $.Method({}, "get_ArgumentCount", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "ArgumentCount");
  }, []);

/* class System.Linq.Expressions.ArgumentProviderOps */ 

(function ArgumentProviderOps$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ArgumentProviderOps", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Map", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.Expression"), "!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* interface System.Linq.Expressions.IDynamicExpression */ 

JSIL.MakeInterface(
  "System.Linq.Expressions.IDynamicExpression", true, [], function ($) {
    $.Method({}, "get_DelegateType", JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type")));
    $.Method({}, "Rewrite", new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])]));
    $.Method({}, "CreateCallSite", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "DelegateType");
  }, [$asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")]);

/* class System.Linq.Expressions.IndexExpression */ 

(function IndexExpression$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.IndexExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.PropertyInfo"), 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexer", $asm0F.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:false}, "_arguments", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Object", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Indexer", $asm0F.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InvocationExpression */ 

(function InvocationExpression$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.InvocationExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LambdaOperand", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arguments", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.Property({Static:false, Public:false}, "LambdaOperand", $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LabelExpression */ 

(function LabelExpression$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LabelExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultValue", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "DefaultValue", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LabelTarget */ 

(function LabelTarget$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.LabelTarget", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LambdaExpression */ 

(function LambdaExpression$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LambdaExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $.String, 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $.Boolean, 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Delegate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Delegate"), [$asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Delegate"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.MethodBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileToMethodInternal", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tailCall", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Parameters", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "ReturnType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TailCall", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression`1 */ 

(function Expression$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), 
      Name: "System.Linq.Expressions.Expression`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TDelegate"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $.Boolean, $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("TDelegate"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("TDelegate"), [$asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("TDelegate"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $.Boolean, $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", [$.GenericParameter("TDelegate")]), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ListArgumentProvider */ 

(function ListArgumentProvider$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_provider", $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ListArgumentProvider+<GetEnumerator>d__18 */ 

(function $lGetEnumerator$gd__18$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider+<GetEnumerator>d__18", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.get_Current", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Expressions.ListArgumentProvider"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.Current", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.ListArgumentProvider+<System-Collections-IEnumerable-GetEnumerator>d__19 */ 

(function $lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__19$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider+<System-Collections-IEnumerable-GetEnumerator>d__19", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Expressions.ListArgumentProvider"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.ListInitExpression */ 

(function ListInitExpression$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ListInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm15.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_initializers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "NewExpression", $asm15.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Initializers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LoopExpression */ 

(function LoopExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LoopExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_break", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_continue", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "BreakLabel", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "ContinueLabel", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberBinding */ 

(function MemberBinding$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.MemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.MemberBindingType"), $asm0F.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BindingType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.MemberBindingType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_type", $asm15.TypeRef("System.Linq.Expressions.MemberBindingType"));

    $.Field({Static:false, Public:false}, "_member", $asm0F.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "BindingType", $asm15.TypeRef("System.Linq.Expressions.MemberBindingType"));

    $.Property({Static:false, Public:true }, "Member", $asm0F.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberAssignment */ 

(function MemberAssignment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberAssignment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false}, "_expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.MemberBindingType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.MemberBindingType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Assignment: 0, 
    MemberBinding: 1, 
    ListBinding: 2, 
  }
);

/* class System.Linq.Expressions.MemberExpression */ 

(function MemberExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Member", $asm0F.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.FieldExpression */ 

(function FieldExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MemberExpression"), 
      Name: "System.Linq.Expressions.FieldExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MemberInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.PropertyExpression */ 

(function PropertyExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MemberExpression"), 
      Name: "System.Linq.Expressions.PropertyExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MemberInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_property", $asm0F.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberInitExpression */ 

(function MemberInitExpression$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceListInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMemberBinding", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm15.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMemberInit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.NewExpression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm15.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindings", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "NewExpression", $asm15.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Bindings", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberListBinding */ 

(function MemberListBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberListBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.Field({Static:false, Public:false}, "_initializers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true }, "Initializers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberMemberBinding */ 

(function MemberMemberBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberMemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.Field({Static:false, Public:false}, "_bindings", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true }, "Bindings", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression */ 

(function MethodCallExpression$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MethodCallExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Object", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpressionN */ 

(function MethodCallExpressionN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpressionN */ 

(function InstanceMethodCallExpressionN$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression1 */ 

(function MethodCallExpression1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression2 */ 

(function MethodCallExpression2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression3 */ 

(function MethodCallExpression3$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression4 */ 

(function MethodCallExpression4$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression5 */ 

(function MethodCallExpression5$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpression2 */ 

(function InstanceMethodCallExpression2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpression3 */ 

(function InstanceMethodCallExpression3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayExpression */ 

(function NewArrayExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewArrayExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Expressions", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayInitExpression */ 

(function NewArrayInitExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"), 
      Name: "System.Linq.Expressions.NewArrayInitExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayBoundsExpression */ 

(function NewArrayBoundsExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"), 
      Name: "System.Linq.Expressions.NewArrayBoundsExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewExpression */ 

(function NewExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.ConstructorInfo"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_constructor", $asm0F.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "_arguments", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_members", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Constructor", $asm0F.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.Property({Static:false, Public:true }, "Members", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")]));

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewValueTypeExpression */ 

(function NewValueTypeExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.NewExpression"), 
      Name: "System.Linq.Expressions.NewValueTypeExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0F.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_valueType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ParameterExpression */ 

(function ParameterExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ParameterExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedParameterExpression */ 

(function TypedParameterExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), 
      Name: "System.Linq.Expressions.TypedParameterExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_paramType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ByRefParameterExpression */ 

(function ByRefParameterExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.TypedParameterExpression"), 
      Name: "System.Linq.Expressions.ByRefParameterExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.PrimitiveParameterExpression`1 */ 

(function PrimitiveParameterExpression$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), 
      Name: "System.Linq.Expressions.PrimitiveParameterExpression`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.RuntimeVariablesExpression */ 

(function RuntimeVariablesExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.RuntimeVariablesExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_variables", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Variables", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SwitchCase */ 

(function SwitchCase$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SwitchCase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_testValues", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TestValues", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SwitchExpression */ 

(function SwitchExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.SwitchExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_switchValue", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cases", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultBody", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_comparison", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "SwitchValue", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Cases", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")]));

    $.Property({Static:false, Public:true }, "DefaultBody", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Comparison", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "IsLifted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SymbolDocumentInfo */ 

(function SymbolDocumentInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SymbolDocumentInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Language", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LanguageVendor", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.Property({Static:false, Public:true }, "FileName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm0F.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm0F.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm0F.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SymbolDocumentWithGuids */ 

(function SymbolDocumentWithGuids$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), 
      Name: "System.Linq.Expressions.SymbolDocumentWithGuids", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Language", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LanguageVendor", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_language", $asm0F.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_vendor", $asm0F.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_documentType", $asm0F.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm0F.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm0F.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm0F.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TryExpression */ 

(function TryExpression$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.TryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")]), 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_handlers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_finally", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fault", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Handlers", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")]));

    $.Property({Static:false, Public:true }, "Finally", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Fault", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypeBinaryExpression */ 

(function TypeBinaryExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.TypeBinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ByValParameterTypeEqual", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceConstantTypeEqual", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceTypeEqual", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeOperand", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Expression", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.StackGuard */ 

(function StackGuard$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.StackGuard", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RunOnEmptyStack", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Action`2", ["!!0", "!!1"]), "!!0", 
          "!!1"
        ], ["T1", "T2"])
    );

    $.ExternalMethod({Static:false, Public:true }, "RunOnEmptyStack", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Action`3", [
              "!!0", "!!1", 
              "!!2"
            ]), "!!0", 
          "!!1", "!!2"
        ], ["T1", "T2", "T3"])
    );

    $.ExternalMethod({Static:false, Public:true }, "RunOnEmptyStack", 
      new JSIL.MethodSignature("!!2", [
          $asm0F.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ]), "!!0", 
          "!!1"
        ], ["T1", "T2", "R"])
    );

    $.ExternalMethod({Static:false, Public:true }, "RunOnEmptyStack", 
      new JSIL.MethodSignature("!!3", [
          $asm0F.TypeRef("System.Func`4", [
              "!!0", "!!1", 
              "!!2", "!!3"
            ]), "!!0", 
          "!!1", "!!2"
        ], ["T1", "T2", "T3", "R"])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunOnEmptyStackCore", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Func`2", [$.Object, "!!0"]), $.Object], ["R"])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterOnCurrentStack", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_executionStackCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.StackGuard+<>c__3`2 */ 

(function $l$gc__3$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.StackGuard+<>c__3`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunOnEmptyStack$gb__3_0", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.Expressions.StackGuard+<>c__3`2", [$.GenericParameter("T1"), $.GenericParameter("T2")]));

    $.Field({Static:true , Public:true }, "$l$g9__3_0", $asm0F.TypeRef("System.Func`2", [$.Object, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.StackGuard+<>c__4`3 */ 

(function $l$gc__4$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.StackGuard+<>c__4`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2", "T3"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunOnEmptyStack$gb__4_0", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.Expressions.StackGuard+<>c__4`3", [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__4_0", $asm0F.TypeRef("System.Func`2", [$.Object, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.StackGuard+<>c__5`3 */ 

(function $l$gc__5$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.StackGuard+<>c__5`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2", "R"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunOnEmptyStack$gb__5_0", 
      new JSIL.MethodSignature($.GenericParameter("R"), [$.Object])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.Expressions.StackGuard+<>c__5`3", [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("R")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__5_0", $asm0F.TypeRef("System.Func`2", [$.Object, $.GenericParameter("R")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.StackGuard+<>c__6`4 */ 

(function $l$gc__6$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.StackGuard+<>c__6`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2", "T3", "R"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunOnEmptyStack$gb__6_0", 
      new JSIL.MethodSignature($.GenericParameter("R"), [$.Object])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.Expressions.StackGuard+<>c__6`4", [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3"), $.GenericParameter("R")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__6_0", $asm0F.TypeRef("System.Func`2", [$.Object, $.GenericParameter("R")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.UnaryExpression */ 

(function UnaryExpression$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.UnaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FunctionalOp", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrefix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_operand", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Operand", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrefix", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.AnalyzeTypeIsResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.AnalyzeTypeIsResult", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    KnownFalse: 0, 
    KnownTrue: 1, 
    KnownAssignable: 2, 
    Unknown: 3, 
  }
);

/* class System.Linq.Expressions.ConstantCheck */ 

(function ConstantCheck$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Linq.Expressions.ConstantCheck", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm15.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $.Object]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.Expressions.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0F.System.AttributeTargets.All]; });

})();

/* class System.Linq.Expressions.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.Expressions.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0F.System.AttributeTargets.All]; });

})();

/* class System.Linq.Expressions.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0F.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm0F.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq.Expressions.Compiler");
/* class System.Linq.Expressions.Compiler.AnalyzedTree */ 

(function AnalyzedTree$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Runtime.CompilerServices.DebugInfoGenerator)) ();
  };



  function AnalyzedTree_get_DebugInfoGenerator () {
    return this.AnalyzedTree$DebugInfoGenerator$value;
  }; 

  function AnalyzedTree_set_DebugInfoGenerator (value) {
    this.AnalyzedTree$DebugInfoGenerator$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.AnalyzedTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_DebugInfoGenerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")), 
      AnalyzedTree_get_DebugInfoGenerator
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DebugInfoGenerator", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")), 
      AnalyzedTree_set_DebugInfoGenerator
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Scopes", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Constants", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")]));

    $.Field({Static:false, Public:false}, "AnalyzedTree$DebugInfoGenerator$value", $asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "DebugInfoGenerator", $asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.AssemblyGen */ 

(function AssemblyGen$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.AssemblyGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DefineDelegateType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.Emit.TypeBuilder"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.Emit.TypeBuilder"), [
          $.String, $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Reflection.TypeAttributes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Assembly", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "_assembly", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_myAssembly", $asm0F.TypeRef("System.Reflection.Emit.AssemblyBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_myModule", $asm0F.TypeRef("System.Reflection.Emit.ModuleBuilder"));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Property({Static:true , Public:false}, "Assembly", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.SymbolGuids */ 

(function SymbolGuids$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.SymbolGuids", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "DocumentType_Text", $asm0F.TypeRef("System.Guid"));


    function SymbolGuids__cctor () {
      $thisType.DocumentType_Text = new $asm0F.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SymbolGuids__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.BoundConstants */ 

(function BoundConstants$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.BoundConstants", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReference", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCacheConstants", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantFromArray", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitConstantsArray", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_values", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.Compiler.BoundConstants+TypedConstant"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cache", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.Compiler.BoundConstants+TypedConstant"), $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Expressions.Compiler.BoundConstants+TypedConstant */ 

(function TypedConstant$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Expressions.Compiler.BoundConstants+TypedConstant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.Compiler.VariableStorageKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.VariableStorageKind", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Local: 0, 
    Hoisted: 1, 
  }
);

/* class System.Linq.Expressions.Compiler.CompilerScope */ 

(function CompilerScope$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSetParent$gb__22_0", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddLocal", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateLocals", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheBoxToLocal", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddressOf", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCachedVariables", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureAccess", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureToVariable", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGet", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewHoistedLocals", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSet", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitVariableAccess", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enter", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "Exit", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NearestHoistedLocals", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetVariables", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVariables", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:false, Public:false}, "_parent", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsMethod", $.Boolean);

    $.Field({Static:false, Public:false}, "NeedsClosure", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Definitions", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")]));

    $.Field({Static:false, Public:false}, "ReferenceCount", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]));

    $.Field({Static:false, Public:false}, "MergedScopes", $asm15.TypeRef("System.Linq.Expressions.Set`1", [$.Object]));

    $.Field({Static:false, Public:false}, "_hoistedLocals", $asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Field({Static:false, Public:false}, "_closureHoistedLocals", $asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage")]));

    $.Property({Static:false, Public:false}, "NearestHoistedLocals", $asm15.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+Storage */ 

(function Storage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FreeLocal", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Compiler", $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Variable", $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+LocalStorage */ 

(function LocalStorage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+LocalStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_local", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+ArgumentStorage */ 

(function ArgumentStorage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+ArgumentStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_argument", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+ElementBoxStorage */ 

(function ElementBoxStorage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+ElementBoxStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), $.Int32, 
          $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLoadBox", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_array", $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm0F.TypeRef("System.Reflection.FieldInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+LocalBoxStorage */ 

(function LocalBoxStorage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+LocalBoxStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitStoreBox", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxLocal", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm0F.TypeRef("System.Reflection.FieldInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers */ 

(function DelegateHelpers$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.DelegateHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetActionType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFuncType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextTypeInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"), [$asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsByRef", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeCallSiteDelegate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDeferredSiteDelegate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDelegateType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeNewCustomDelegate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeNewDelegate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"), [$asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo")])
    );

    $.Constant({Static:true , Public:false}, "CtorAttributes", $asm0F.TypeRef("System.Reflection.MethodAttributes"), 4230);

    $.Constant({Static:true , Public:false}, "ImplAttributes", $asm0F.TypeRef("System.Reflection.MethodImplAttributes"), 3);

    $.Constant({Static:true , Public:false}, "InvokeAttributes", $asm0F.TypeRef("System.Reflection.MethodAttributes"), 454);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_DelegateCtorSignature", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "_DelegateCache", $asm15.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"));

    $.Constant({Static:true , Public:false}, "MaximumArity", $.Int32, 17);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo */ 

(function TypeInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:true }, "DelegateType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "TypeChain", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0F.TypeRef("System.Type"), $.Type]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.DelegateHelpers+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeNewDelegate$gb__15_0", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__15_0", $asm0F.TypeRef("System.Func`2", [$asm0F.TypeRef("System.Type"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.HoistedLocals */ 

(function HoistedLocals$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.HoistedLocals", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentVariable", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParent", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Indexes", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$asm15.TypeRef("System.Linq.Expressions.Expression"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Variables", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SelfVariable", $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Property({Static:false, Public:false}, "ParentVariable", $asm15.TypeRef("System.Linq.Expressions.ParameterExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.ILGen */ 

(function ILGen$Members () {
  var $, $thisType;






















































  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.ILGen", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CanEmitConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanEmitILConstant", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Reflection.Emit.OpCode"), 
          $asm0F.TypeRef("System.Reflection.MethodBase")
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $.Int32, $asm0F.TypeRef("System.Action`1", [$.Int32])
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitBoolean", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitByte", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Byte])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitCastToType", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type")
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitChar", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Char])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
          $asm0F.TypeRef("System.Type")
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConvertToType", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDecimal", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Decimal")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDecimalBits", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Decimal")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDefault", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDouble", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Double])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldAddress", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Reflection.FieldInfo")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldGet", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Reflection.FieldInfo")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldSet", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Reflection.FieldInfo")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitGetValue", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitGetValueOrDefault", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitHasValue", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitInt", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadArg", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadArgAddress", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadElement", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadValueIndirect", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLong", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int64])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Reflection.ConstructorInfo")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNonNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNull", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.ILGenerator"))
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableStructConversion", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToReferenceConversion", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNumericConversion", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitSByte", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.SByte])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitShort", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int16])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitSingle", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Single])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreArg", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreElement", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreValueIndirect", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitString", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.String])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitType", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0F.TypeRef("System.Type")])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitUInt", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt32])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitULong", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt64])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitUShort", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt16])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryEmitILConstant", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
          $asm0F.TypeRef("System.Type")
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.Compiler.KeyedQueue`2 */ 

(function KeyedQueue$b2$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.KeyedQueue`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCount", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Peek", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $asm12.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("V")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LabelInfo */ 

(function LabelInfo$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"), $asm15.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Define", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitJump", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLabelAndValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBranch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Label", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkWithEmptyStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reference", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFinish", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateJump", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm15.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Field({Static:false, Public:false}, "_label", $asm0F.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "_labelDefined", $.Boolean);

    $.Field({Static:false, Public:false}, "_value", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_definitions", $asm15.TypeRef("System.Linq.Expressions.Set`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_canReturn", $.Boolean);

    $.Field({Static:false, Public:false}, "_acrossBlockJump", $.Boolean);

    $.Field({Static:false, Public:false}, "_opCode", $asm0F.TypeRef("System.Reflection.Emit.OpCode"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Property({Static:false, Public:false}, "Label", $asm0F.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "CanReturn", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBranch", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LabelInfo+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelInfo+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lValidateJump$gb__19_0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"), [$asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__19_0", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum System.Linq.Expressions.Compiler.LabelScopeKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.LabelScopeKind", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Statement: 0, 
    Block: 1, 
    Switch: 2, 
    Lambda: 3, 
    Try: 4, 
    Catch: 5, 
    Finally: 6, 
    Filter: 7, 
    Expression: 8, 
  }
);

/* class System.Linq.Expressions.Compiler.LabelScopeInfo */ 

(function LabelScopeInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelScopeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLabelInfo", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsTarget", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanJumpInto", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetLabelInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])])
    );

    $.Field({Static:false, Public:false}, "Labels", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Kind", $asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type);

    $.Property({Static:false, Public:false}, "CanJumpInto", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler */ 

(function LambdaCompiler$Members () {
  var $, $thisType;




























































































































































































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm0F.TypeRef("System.Reflection.Emit.MethodBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.MemberExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.IndexExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack"), [$asm15.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack"), [$asm15.TypeRef("System.Linq.Expressions.IndexExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReturnLabel", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToBuckets", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])]), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanOptimizeSwitchType", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRethrow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTry", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Delegate"), [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm0F.TypeRef("System.Reflection.Emit.MethodBuilder"), 
          $asm15.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertSwitchValue", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDelegate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Delegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateLazyInitializedField", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.MemberExpression"), [$.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStaticField", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.Emit.FieldBuilder"), [$.String, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineBlockLabels", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineLabel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineSwitchCaseLabel", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.SwitchCase"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Reflection.Emit.Label")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BlockExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddressWriteBack", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAndAlsoBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack")]), [$asm0F.TypeRef("System.Reflection.MethodBase"), $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack")]), [
          $asm0F.TypeRef("System.Reflection.MethodBase"), $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAssign", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAssignBinaryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryMethod", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryOperator", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinding", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.MemberBinding"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBlockExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchAnd", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchBlock", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.Expressions.BlockExpression"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchComparison", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchLogical", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchNot", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchOp", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0F.TypeRef("System.Reflection.Emit.Label")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchOr", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCall", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCatchStart", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.CatchBlock"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureArgument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureCreation", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCoalesceBinaryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConditionalExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantOne", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvert", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvertArithmeticResult", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvertUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDebugInfoExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDefaultExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDynamicExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAddress", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAndBranch", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsType", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionEnd", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionStart", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitExtensionExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGetIndexCall", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.IndexExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGotoExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitIndexAssignment", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitIndexExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInlinedInvoke", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.InvocationExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInstance", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInvocationExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLabelExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaArgument", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope"), $.Boolean, 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaReferenceCoalesce", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLift", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm15.TypeRef("System.Linq.Expressions.MethodCallExpression"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedAndAlso", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryArithmetic", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryOp", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanAnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanOr", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedOrElse", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedRelational", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ListInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]), $.Boolean, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInitExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLoopExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAddress", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberGet", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.MemberInfo"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MemberInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]), $.Boolean, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInitExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberListBinding", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MemberListBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberMemberBinding", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodAndAlso", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Reflection.MethodInfo"), 
          $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.MethodInfo"), $asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodOrElse", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewArrayExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNullableCoalesce", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNullEquality", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitOrElseBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitParameterExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitQuote", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.UnaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitQuoteUnaryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitReferenceCoalesceWithoutConversion", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitRuntimeVariablesExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSaveExceptionOrPop", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.CatchBlock"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSetIndexCall", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.IndexExpression"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBucket", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo"), $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBuckets", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo"), $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchCases", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.Emit.Label")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm0F.TypeRef("System.Reflection.Emit.Label"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitThrow", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitThrowUnaryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitTryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitTypeBinaryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnary", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryMethod", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryOperator", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnboxUnaryExpression", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedAndAlso", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedBinaryOp", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedEquality", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedOrElse", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnreachable", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitVariableAssignment", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitWriteBack", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLabel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "FitsInBucket", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")]), $asm0F.TypeRef("System.Decimal"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeLocal", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanEmitBoundConstants", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmitDebugSymbols", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IL", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityOperand", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaArgument", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocal", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamedLocal", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm0F.TypeRef("System.Type"), $asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParameterTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTestValueType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm15.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUniqueMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "HasVariables", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeMethod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsChecked", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MergeBuckets", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])]))
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodHasByRefParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopLabelBlock", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PushLabelBlock", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferenceLabel", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm15.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Significant", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEmitHashtableSwitch", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEmitSwitchInstruction", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryPushLabelBlock", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTailCallFlag", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTypeFlag", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitExpressionStartFlag", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UseVirtual", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLift", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm15.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeBuilder", $asm0F.TypeRef("System.Reflection.Emit.TypeBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "_labelBlock", $asm15.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_labelInfo", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Linq.Expressions.LabelTarget"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")]));

    $.Field({Static:false, Public:false}, "_scope", $asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasClosureArgument", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boundConstants", $asm15.TypeRef("System.Linq.Expressions.Compiler.BoundConstants"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_freeLocals", $asm15.TypeRef("System.Linq.Expressions.Compiler.KeyedQueue`2", [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder")]));

    $.Field({Static:false, Public:false}, "_sequencePointCleared", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_guard", $asm15.TypeRef("System.Linq.Expressions.StackGuard"));

    $.Field({Static:true , Public:false}, "_Counter", $.Int32);

    $.Property({Static:false, Public:false}, "EmitDebugSymbols", $.Boolean);

    $.Property({Static:false, Public:false}, "IL", $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Property({Static:false, Public:false}, "Parameters", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:false}, "CanEmitBoundConstants", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack */ 

JSIL.MakeDelegate("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack", false, [], 
  JSIL.MethodSignature.Void);

/* enum System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EmitExpressionStart: 1, 
    EmitNoExpressionStart: 2, 
    EmitExpressionStartMask: 15, 
    EmitAsDefaultType: 16, 
    EmitAsVoidType: 32, 
    EmitAsTypeMask: 240, 
    EmitAsTail: 256, 
    EmitAsMiddle: 512, 
    EmitAsNoTail: 1024, 
    EmitAsTailCallMask: 3840, 
  }
);

/* class System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel */ 

(function SwitchLabel$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Decimal"), $.Object, 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Key", $asm0F.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Label", $asm0F.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Constant", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo */ 

(function SwitchInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm0F.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $asm15.TypeRef("System.Linq.Expressions.SwitchExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Default", $asm0F.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsUnsigned", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Is64BitSwitch", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass11_0 */ 

(function $l$gc__DisplayClass11_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass11_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddressOfWriteBack$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "instanceLocal", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "valueLocal", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "instanceType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "pi", $asm0F.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass12_0 */ 

(function $l$gc__DisplayClass12_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass12_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddressOfWriteBack$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "instanceLocal", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "args", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Reflection.Emit.LocalBuilder")]));

    $.Field({Static:false, Public:true }, "valueLocal", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "node", $asm15.TypeRef("System.Linq.Expressions.IndexExpression"));

    $.Field({Static:false, Public:true }, "instanceType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__53_0", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lEmitExpression$gb__135_0", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lEmitMethodCall$gb__96_0", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetParameterTypes$gb__142_0", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryEmitSwitchInstruction$gb__185_0", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryEmitSwitchInstruction$gb__185_1", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryEmitSwitchInstruction$gb__185_2", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel"), $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__53_0", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__96_0", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Type")]));

    $.Field({Static:true , Public:true }, "$l$g9__135_0", $asm0F.TypeRef("System.Action`3", [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__142_0", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0F.TypeRef("System.Type")]));

    $.Field({Static:true , Public:true }, "$l$g9__185_1", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__185_0", $asm0F.TypeRef("System.Func`2", [$asm15.TypeRef("System.Linq.Expressions.SwitchCase"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__185_2", $asm0F.TypeRef("System.Comparison`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass118_0 */ 

(function $l$gc__DisplayClass118_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass118_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lEmitNewArrayExpression$gb__0", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:true }, "node", $asm15.TypeRef("System.Linq.Expressions.NewArrayExpression"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.StackSpiller */ 

(function StackSpiller$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Clone", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Parameter(0, "expressions", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeTemp", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "RequireNoRefArgs", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.MethodBase"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RequireNotRefInstance", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteAssignBinaryExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteBinaryExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteBlockExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteConditionalExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteDynamicExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExpressionFreeTemps", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteGotoExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteIndexAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteIndexExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteInvocationExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLabelExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RewriteLambdaExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteListInitExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLogicalBinaryExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLoopExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberInitExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMethodCallExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteNewArrayExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteNewExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteReducibleExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteSwitchExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteThrowUnaryExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteTryExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteTypeBinaryExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteUnaryExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteVariableAssignment", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToTemp", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyRewrite", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tm", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+TempMaker"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_startingStack", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_guard", $asm15.TypeRef("System.Linq.Expressions.StackGuard"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter */ 

(function BindingRewriter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.MemberBinding"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.Linq.Expressions.MemberBinding"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Action", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"))
    );

    $.Field({Static:false, Public:false}, "_binding", $asm15.TypeRef("System.Linq.Expressions.MemberBinding"));

    $.Field({Static:false, Public:false}, "_action", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));

    $.Field({Static:false, Public:false}, "_spiller", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"));

    $.Property({Static:false, Public:false}, "Action", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+MemberMemberBindingRewriter */ 

(function MemberMemberBindingRewriter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+MemberMemberBindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.MemberMemberBinding"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false}, "_bindings", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Field({Static:false, Public:false}, "_bindingRewriters", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+ListBindingRewriter */ 

(function ListBindingRewriter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+ListBindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.MemberListBinding"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false}, "_inits", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Field({Static:false, Public:false}, "_childRewriters", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+ChildRewriter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+MemberAssignmentRewriter */ 

(function MemberAssignmentRewriter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+MemberAssignmentRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false}, "_rhs", $asm15.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.Compiler.StackSpiller+Stack */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.StackSpiller+Stack", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    NonEmpty: 1, 
  }
);

/* enum System.Linq.Expressions.Compiler.StackSpiller+RewriteAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.StackSpiller+RewriteAction", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Copy: 1, 
    SpillStack: 3, 
  }
);

/* struct System.Linq.Expressions.Compiler.StackSpiller+Result */ 

(function Result$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+Result", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+TempMaker */ 

(function TempMaker$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+TempMaker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeTemp", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Temps", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Temp", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UseTemp", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_temps", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:false}, "Temps", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+ChildRewriter */ 

(function ChildRewriter$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+ChildRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddArguments", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.IArgumentProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Finish", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Action", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Rewrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_self", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "_expressionsCount", $.Int32);

    $.Field({Static:false, Public:false}, "_comma", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "_action", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));

    $.Field({Static:false, Public:false}, "_stack", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"));

    $.Field({Static:false, Public:false}, "_done", $.Boolean);

    $.Property({Static:false, Public:false}, "Rewrite", $.Boolean);

    $.Property({Static:false, Public:false}, "Action", $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));

    $.Property({Static:false, Public:false}, "Item", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false}, "Item", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRequireNoRefArgs$gb__45_0", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRewriteExpression$gb__48_0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__45_0", $asm0F.TypeRef("System.Func`2", [$asm0F.TypeRef("System.Reflection.ParameterInfo"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__48_0", $asm0F.TypeRef("System.Func`4", [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"), $asm15.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.SpilledExpressionBlock */ 

(function SpilledExpressionBlock$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.BlockN"), 
      Name: "System.Linq.Expressions.Compiler.SpilledExpressionBlock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Expressions.Expression")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.VariableBinder */ 

(function VariableBinder$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.Compiler.VariableBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$asm15.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeScopes", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.Expression")]), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reference", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm15.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm15.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm15.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_scopes", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_constants", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm15.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_guard", $asm15.TypeRef("System.Linq.Expressions.StackGuard"));

    $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.VariableBinder+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.VariableBinder+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lVisit$gb__7_0", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Compiler.VariableBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__7_0", $asm0F.TypeRef("System.Func`3", [
          $asm15.TypeRef("System.Linq.Expressions.Compiler.VariableBinder"), $asm15.TypeRef("System.Linq.Expressions.Expression"), 
          $asm15.TypeRef("System.Linq.Expressions.Expression")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

