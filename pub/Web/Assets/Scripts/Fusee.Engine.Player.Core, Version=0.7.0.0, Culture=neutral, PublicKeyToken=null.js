/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
var $asm07 = JSIL.DeclareAssembly("Fusee.Engine.Player.Core, Version=0.7.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
JSIL.DeclareNamespace("Fusee.Engine.Player");
JSIL.DeclareNamespace("Fusee.Engine.Player.Core");
/* class Fusee.Engine.Player.Core.Player */ 

(function Player$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.CodeComponent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Predicate$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.Fusee.Engine.Player.Core.Player_$l$gc)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectComponent)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0D.Fusee.Xene.ContainerExtensions)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0D.Fusee.Xene.SceneFinderExtensions)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIButton)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.CodeComponent_InteractionHandler)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Fusee.Base.Core.ImageData)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm05.Fusee.Engine.GUI.TextureNodeContainer)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Fusee.Base.Core.Font)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Fusee.Engine.Core.FontMap)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm05.Fusee.Engine.GUI.TextNodeContainer)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Fusee.Base.Common.ColorUint)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm05.Fusee.Engine.GUI.CanvasNodeContainer)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0B.Fusee.Serialization.CanvasRenderMode)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0B.Fusee.Serialization.SceneContainer)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.NotImplementedException)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm05.Fusee.Engine.GUI.SceneInteractionHandler)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.Fusee.Engine.Core.AABBCalculator)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0A.Fusee.Math.Core.AABBf)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm04.Fusee.Engine.Core.KeyboardDevice)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm04.Fusee.Engine.Core.Time)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm04.Fusee.Engine.Core.TouchDevice)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm03.Fusee.Engine.Common.TouchPoints)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm0A.Fusee.Math.Core.M)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0B.Fusee.Serialization.SceneNodeContainer]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), $asm0F.System.Predicate$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer)]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float4, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0B.Fusee.Serialization.SceneNodeContainer]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.Texture, [$asm00.Fusee.Base.Common.IImageData]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.Fusee.Engine.GUI.TextureNodeContainer, [
        $asm0F.System.String, $asm0F.System.String, 
        $asm0F.System.String, $asm04.Fusee.Engine.Core.Texture, 
        $asm0A.Fusee.Math.Core.MinMaxRect, $asm0A.Fusee.Math.Core.MinMaxRect
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotImplementedException, null))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.AABBCalculator, [$asm0B.Fusee.Serialization.SceneContainer]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0F.System.Single]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.SceneRenderer, [$asm0B.Fusee.Serialization.SceneContainer]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [$asm0A.Fusee.Math.Core.float2, $asm0F.System.Single]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };


  function Player__ctor () {
    this.ModelFile = "Model.fus";
    $T00().prototype._ctor.call(this);
  }; 

  function Player_BtnLogoDown (sender) {
    this.OpenLink("http://fusee3d.org");
  }; 

  function Player_BtnLogoEnter (sender) {
    var arg_2B_1 = null;
    if ((arg_2B_1 = $T03().$l$g9__30_0) === null) {
      arg_2B_1 = $T03().$l$g9__30_0 = $T02().New($T03().$l$g9, null, new JSIL.MethodPointerInfo($asm07.Fusee.Engine.Player.Core.Player_$l$gc, "$lBtnLogoEnter$gb__30_0", $S00(), false, false));
    }
    ($T06().GetComponent$b1($T05())($S01().CallStatic($T08(), "First$b1", [$asm0B.Fusee.Serialization.SceneNodeContainer], $S02().CallStatic($T09(), "FindNodes", null, this._gui.Children, arg_2B_1)), 0).ShaderEffectComponent$Effect$value).SetEffectParam("DiffuseColor", $S03().Construct(0.8, 0.8, 0.8, 1));
  }; 

  function Player_BtnLogoExit (sender) {
    var arg_2B_1 = null;
    if ((arg_2B_1 = $T03().$l$g9__31_0) === null) {
      arg_2B_1 = $T03().$l$g9__31_0 = $T02().New($T03().$l$g9, null, new JSIL.MethodPointerInfo($asm07.Fusee.Engine.Player.Core.Player_$l$gc, "$lBtnLogoExit$gb__31_0", $S04(), false, false));
    }
    ($T06().GetComponent$b1($T05())($S01().CallStatic($T08(), "First$b1", [$asm0B.Fusee.Serialization.SceneNodeContainer], $S02().CallStatic($T09(), "FindNodes", null, this._gui.Children, arg_2B_1)), 0).ShaderEffectComponent$Effect$value).SetEffectParam("DiffuseColor", $T0A().One.MemberwiseClone());
  }; 

  function Player_CreateGui () {
    var text = $T0C().Get$b1($T0B())("texture.vert");
    var text2 = $T0C().Get$b1($T0B())("texture.frag");
    var expr_1C = new ($T0D())();
    expr_1C.Name = "Canvas_Button";
    var gUIButton = expr_1C;
    gUIButton.add_OnMouseEnter($T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "BtnLogoEnter", $S05(), false, false)));
    gUIButton.add_OnMouseExit($T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "BtnLogoExit", $S06(), false, false)));
    gUIButton.add_OnMouseDown($T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "BtnLogoDown", $S07(), false, false)));
    var texture = $S08().Construct($T0C().Get$b1($T10())("FuseeText.png"));
    var arg_E5_1 = text;
    var arg_E5_2 = text2;
    var arg_E5_3 = texture;
    var minMaxRect = new ($T11())();
    minMaxRect.Min = $S09().Construct(0, 1);
    minMaxRect.Max = $S09().Construct(0, 1);
    var arg_E5_4 = minMaxRect.MemberwiseClone();
    minMaxRect = new ($T11())();
    minMaxRect.Min = $S09().Construct(0, -0.5);
    minMaxRect.Max = $S09().Construct(1.75, 0);
    var textureNodeContainer = $S0A().Construct("fuseeLogo", arg_E5_1, arg_E5_2, arg_E5_3, arg_E5_4.MemberwiseClone(), minMaxRect.MemberwiseClone());
    $T06().AddComponent(textureNodeContainer, gUIButton);
    var font = $T0C().Get$b1($T14())("Lato-Black.ttf");
    this._guiLatoBlack = new ($T15())(font, 36, true, null);
    var text3 = "FUSEE 3D Scene";
    if ((this._scene.Header.CreatedBy !== null) || (this._scene.Header.CreationDate !== null)) {
      text3 = (JSIL.ConcatString(text3, " created"));
      if (this._scene.Header.CreatedBy !== null) {
        text3 = ((text3 + " by " + this._scene.Header.CreatedBy));
      }
      if (this._scene.Header.CreationDate !== null) {
        text3 = ((text3 + " on " + this._scene.Header.CreationDate));
      }
    }
    var arg_24F_0 = text3;
    var arg_24F_2 = text;
    var arg_24F_3 = text2;
    minMaxRect = new ($T11())();
    minMaxRect.Min = $S09().Construct(0, 0);
    minMaxRect.Max = $S09().Construct(1, 0);
    var arg_24F_4 = minMaxRect.MemberwiseClone();
    minMaxRect = new ($T11())();
    minMaxRect.Min = $S09().Construct(4, 0);
    minMaxRect.Max = $S09().Construct(-4, 0.5);
    var item = new ($T16())(arg_24F_0, "ButtonText", arg_24F_2, arg_24F_3, arg_24F_4.MemberwiseClone(), minMaxRect.MemberwiseClone(), this._guiLatoBlack, $T17().Tofloat4($T17().Greenery.MemberwiseClone()).MemberwiseClone(), 0.25);
    minMaxRect = new ($T11())();
    minMaxRect.Min = $S09().Construct(-8, -4.5);
    minMaxRect.Max = $S09().Construct(8, 4.5);
    var expr_29C = new ($T18())("Canvas", $T19().SCREEN, minMaxRect.MemberwiseClone(), 0.1);
    var expr_2A2 = $S0B().Construct();
    expr_2A2.Add(textureNodeContainer);
    expr_2A2.Add(item);
    expr_29C.Children = expr_2A2;
    var expr_2C0 = new ($T1B())();
    var expr_2C6 = $S0B().Construct();
    expr_2C6.Add(expr_29C);
    expr_2C0.Children = expr_2C6;
    return expr_2C0;
  }; 

  function Player_Creator (device) {
    throw $S0C().Construct();
  }; 

  function Player_Init () {
    $thisType._zoom = 400;
    $thisType._angleRoll = 0;
    $thisType._angleRollInit = 0;
    this._twoTouchRepeated = false;
    $thisType._offset = $T12().Zero.MemberwiseClone();
    $thisType._offsetInit = $T12().Zero.MemberwiseClone();
    (this.RenderCanvas$RC$value.ClearColor = $S03().Construct(1, 1, 1, 1));
    this._scene = $T0C().Get$b1($T1B())(this.ModelFile);
    this._gui = this.CreateGui();
    this._sih = new ($T1F())(this._gui);
    var aABBCalculator = $S0D().Construct(this._scene);
    var box = aABBCalculator.GetBox();
    var hasValue = box !== null;
    if (hasValue) {
      var center = (JSIL.Nullable_Value(box)).get_Center().MemberwiseClone();
      var size = (JSIL.Nullable_Value(box)).get_Size();
      var zero = $T22().Zero.MemberwiseClone();
      var flag = Math.abs(center.x) > (size.x * 0.3);
      if (flag) {
        zero.x = +center.x;
      }
      var flag2 = Math.abs(center.y) > (size.y * 0.3);
      if (flag2) {
        zero.y = +center.y;
      }
      var flag3 = Math.abs(center.z) > (size.z * 0.3);
      if (flag3) {
        zero.z = +center.z;
      }
      this._sceneCenter = $T26().CreateTranslation($T22().op_UnaryNegation(zero.MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
      var num = +$T24().Max(size.x, $T24().Max(size.y, size.z));
      if (num !== 0) {
        this._sceneScale = $S0E().CallStatic($T26(), "CreateScale", null, +((200 / num))).MemberwiseClone();
      } else {
        this._sceneScale = $T26().Identity.MemberwiseClone();
      }
    }
    this._sceneRenderer = $S0F().Construct(this._scene);
    this._guiRenderer = $S0F().Construct(this._gui);
  }; 

  function Player_RenderAFrame () {
    (this.RenderCanvas$RC$value).Clear($T28().$Flags("Color", "Depth"));
    var flag = (+$T2A().get_Keyboard().get_LeftRightAxis() !== 0) || 
    (+$T2A().get_Keyboard().get_UpDownAxis() !== 0);
    if (flag) {
      this._keys = true;
    }
    var num = Math.fround($T24().Exp(-0.8 * +$T2B().get_DeltaTime()));
    var twoPoint = $T2A().get_Touch().get_TwoPoint();
    if (twoPoint) {
      if (!this._twoTouchRepeated) {
        this._twoTouchRepeated = true;
        $thisType._angleRollInit = +$T2A().get_Touch().get_TwoPointAngle() - +$thisType._angleRoll;
        $thisType._offsetInit = $T12().op_Subtraction($T2A().get_Touch().get_TwoPointMidPoint().MemberwiseClone(), $thisType._offset);
        this._maxPinchSpeed = 0;
      }
      $thisType._zoomVel = +$T2A().get_Touch().get_TwoPointDistanceVel() * -0.01;
      $thisType._angleRoll = +$T2A().get_Touch().get_TwoPointAngle() - +$thisType._angleRollInit;
      $thisType._offset = $T12().op_Subtraction($T2A().get_Touch().get_TwoPointMidPoint().MemberwiseClone(), $thisType._offsetInit);
      var twoPointDistanceVel = +$T2A().get_Touch().get_TwoPointDistanceVel();
      var flag3 = twoPointDistanceVel > +this._maxPinchSpeed;
      if (flag3) {
        this._maxPinchSpeed = twoPointDistanceVel;
      }
    } else {
      this._twoTouchRepeated = false;
      $thisType._zoomVel = +$T2A().get_Mouse().get_WheelVel() * -0.5;
      $thisType._angleRoll = +$thisType._angleRoll * (num * 0.8);
      $thisType._offset = $S10().CallStatic($T12(), "op_Multiply", null, $thisType._offset.MemberwiseClone(), num * 0.8);
    }
    var leftButton = $T2A().get_Mouse().get_LeftButton();
    if (leftButton) {
      this._keys = false;
      $thisType._angleVelHorz = ((-7 * +$T2A().get_Mouse().get_XVel()) * +$T2B().get_DeltaTime()) * 0.0005;
      $thisType._angleVelVert = ((-7 * +$T2A().get_Mouse().get_YVel()) * +$T2B().get_DeltaTime()) * 0.0005;
    } else {
      var flag4 = $T2A().get_Touch().GetTouchActive($T2E().Touchpoint_0) && 
      !$T2A().get_Touch().get_TwoPoint();
      if (flag4) {
        this._keys = false;
        var velocity = $T2A().get_Touch().GetVelocity($T2E().Touchpoint_0);
        $thisType._angleVelHorz = ((-7 * +velocity.x) * +$T2B().get_DeltaTime()) * 0.0005;
        $thisType._angleVelVert = ((-7 * +velocity.y) * +$T2B().get_DeltaTime()) * 0.0005;
      } else {
        var keys = this._keys;
        if (keys) {
          $thisType._angleVelHorz = (-7 * +$T2A().get_Keyboard().get_LeftRightAxis()) * +$T2B().get_DeltaTime();
          $thisType._angleVelVert = (-7 * +$T2A().get_Keyboard().get_UpDownAxis()) * +$T2B().get_DeltaTime();
        } else {
          $thisType._angleVelHorz = +$thisType._angleVelHorz * num;
          $thisType._angleVelVert = +$thisType._angleVelVert * num;
        }
      }
    }
    $thisType._zoom = +$thisType._zoom + +$thisType._zoomVel;
    if (+$thisType._zoom < 80) {
      $thisType._zoom = 80;
    }
    if (+$thisType._zoom > 2000) {
      $thisType._zoom = 2000;
    }
    $thisType._angleHorz = +$thisType._angleHorz + +$thisType._angleVelHorz;
    $thisType._angleHorz = +$S11().CallStatic($T2F(), "MinAngle", null, $thisType._angleHorz);
    $thisType._angleVert = +$thisType._angleVert + +$thisType._angleVelVert;
    $thisType._angleVert = +$S12().CallStatic($T2F(), "Clamp", null, $thisType._angleVert, -1.57079637, 1.57079637);
    $thisType._angleRoll = +$S11().CallStatic($T2F(), "MinAngle", null, $thisType._angleRoll);
    var right = $S13().CallStatic($T26(), "op_Multiply", null, 
      $T26().CreateRotationX($thisType._angleVert).MemberwiseClone(), 
      $T26().CreateRotationY($thisType._angleHorz).MemberwiseClone()
    ).MemberwiseClone();
    var left = $T26().LookAt(
      0, 
      20, 
      -$thisType._zoom, 
      0, 
      0, 
      0, 
      0, 
      1, 
      0
    );
    (this.RenderCanvas$RC$value.ModelView = $S13().CallStatic($T26(), "op_Multiply", null, $S13().CallStatic($T26(), "op_Multiply", null, $S13().CallStatic($T26(), "op_Multiply", null, left.MemberwiseClone(), right.MemberwiseClone()).MemberwiseClone(), this._sceneScale.MemberwiseClone()).MemberwiseClone(), this._sceneCenter.MemberwiseClone()).MemberwiseClone());
    var left2 = $T26().CreateTranslation(
      +(((2 * +$thisType._offset.x) / +(this.get_Width()))), 
      +(((-2 * +$thisType._offset.y) / +(this.get_Height()))), 
      0
    ).MemberwiseClone();
    (this.RenderCanvas$RC$value.Projection = $S13().CallStatic($T26(), "op_Multiply", null, left2.MemberwiseClone(), this._projection.MemberwiseClone()).MemberwiseClone());
    this._sih.View = (this.RenderCanvas$RC$value).get_ModelView().MemberwiseClone();
    this._sih.Projection = (this.RenderCanvas$RC$value).get_Projection().MemberwiseClone();
    (this._sih).CheckForInteractiveObjects(
      $T2A().get_Mouse().get_Position().MemberwiseClone(), 
      this.get_Width(), 
      this.get_Height()
    );
    var flag7 = $T2A().get_Touch().GetTouchActive($T2E().Touchpoint_0) && 
    !$T2A().get_Touch().get_TwoPoint();
    if (flag7) {
      (this._sih).CheckForInteractiveObjects(
        $T2A().get_Touch().GetPosition($T2E().Touchpoint_0).MemberwiseClone(), 
        this.get_Width(), 
        this.get_Height()
      );
    }
    (this._sceneRenderer).Animate();
    (this._sceneRenderer).Render(this.RenderCanvas$RC$value);
    (this._guiRenderer).Render(this.RenderCanvas$RC$value);
    this.Present();
  }; 

  function Player_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspect = +((+(this.get_Width()) / +(this.get_Height())));
    this._projection = $T26().CreatePerspectiveFieldOfView(0.7853982, aspect, 1, 20000).MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.RenderCanvas"), 
      Name: "Fusee.Engine.Player.Core.Player", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Player__ctor
    );

    $.Method({Static:false, Public:true }, "BtnLogoDown", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent")), 
      Player_BtnLogoDown
    );

    $.Method({Static:false, Public:true }, "BtnLogoEnter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent")), 
      Player_BtnLogoEnter
    );

    $.Method({Static:false, Public:true }, "BtnLogoExit", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent")), 
      Player_BtnLogoExit
    );

    $.Method({Static:false, Public:false}, "CreateGui", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("Fusee.Serialization.SceneContainer")), 
      Player_CreateGui
    );

    $.Method({Static:false, Public:false}, "Creator", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.InputDevice"), [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      Player_Creator
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Player_Init
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      Player_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      Player_Resize
    );

    $.Field({Static:false, Public:true }, "ModelFile", $.String);

    $.Field({Static:true , Public:false}, "_angleHorz", $.Single, 1.04719758);

    $.Field({Static:true , Public:false}, "_angleVert", $.Single, -0.2617994);

    $.Field({Static:true , Public:false}, "_angleVelHorz", $.Single);

    $.Field({Static:true , Public:false}, "_angleVelVert", $.Single);

    $.Field({Static:true , Public:false}, "_angleRoll", $.Single);

    $.Field({Static:true , Public:false}, "_angleRollInit", $.Single);

    $.Field({Static:true , Public:false}, "_zoomVel", $.Single);

    $.Field({Static:true , Public:false}, "_zoom", $.Single);

    $.Field({Static:true , Public:false}, "_offset", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Field({Static:true , Public:false}, "_offsetInit", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Constant({Static:true , Public:false}, "RotationSpeed", $.Single, 7);

    $.Constant({Static:true , Public:false}, "Damping", $.Single, 0.8);

    $.Field({Static:false, Public:false}, "_scene", $asm0B.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_sceneRenderer", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_sceneCenter", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_sceneScale", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_projection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_twoTouchRepeated", $.Boolean);

    $.Field({Static:false, Public:false}, "_keys", $.Boolean);

    $.Field({Static:false, Public:false}, "_gui", $asm0B.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_guiRenderer", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_sih", $asm05.TypeRef("Fusee.Engine.GUI.SceneInteractionHandler"));

    $.Field({Static:false, Public:false}, "_guiLatoBlack", $asm04.TypeRef("Fusee.Engine.Core.FontMap"));

    $.Field({Static:false, Public:false}, "_maxPinchSpeed", $.Single);


    function Player__cctor () {
      $thisType._offset = new $asm0A.Fusee.Math.Core.float2();
      $thisType._offsetInit = new $asm0A.Fusee.Math.Core.float2();
      $thisType._angleHorz = 1.04719758;
      $thisType._angleVert = -0.2617994;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Player__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("Fusee.Engine.Common.FuseeApplicationAttribute"));

})();

/* class Fusee.Engine.Player.Core.Player+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.String)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lBtnLogoEnter$gb__30_0 (node) {
    return node.Name == "fuseeLogo";
  }; 

  function $l$gc_$lBtnLogoExit$gb__31_0 (node) {
    return node.Name == "fuseeLogo";
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Player.Core.Player+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lBtnLogoEnter$gb__30_0", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]), 
      $l$gc_$lBtnLogoEnter$gb__30_0
    );

    $.Method({Static:false, Public:false}, "$lBtnLogoExit$gb__31_0", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]), 
      $l$gc_$lBtnLogoExit$gb__31_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__30_0", $asm0F.TypeRef("System.Predicate`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]));

    $.Field({Static:true , Public:true }, "$l$g9__31_0", $asm0F.TypeRef("System.Predicate`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

