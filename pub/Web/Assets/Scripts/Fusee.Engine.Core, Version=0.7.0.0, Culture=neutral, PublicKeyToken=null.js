/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
var $asm04 = JSIL.DeclareAssembly("Fusee.Engine.Core, Version=0.7.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
JSIL.DeclareNamespace("Fusee.Engine.Common");
/* class Fusee.Engine.Common.ResizeEventArgs */ 

(function ResizeEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.EventArgs)) ();
  };


  function ResizeEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.ResizeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ResizeEventArgs__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Fusee.Engine.Core");
/* class Fusee.Engine.Core.Audio */ 

(function Audio$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Base.Core.Diagnostics)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.DummyAudioImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp.CloseDevice)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp.GetVolume)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp.LoadFile)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp.OpenDevice)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp.SetPanning)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp.SetVolume)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp.Stop)) ();
  };


  function Audio__ctor () {
  }; 

  function Audio_CloseDevice () {
    $IM00().Call(this._audioImp, null);
  }; 

  function Audio_Dispose () {
    $thisType._instance = null;
  }; 

  function Audio_get_Instance () {
    var arg_15_0 = null;
    if ((arg_15_0 = $thisType._instance) === null) {
      arg_15_0 = $thisType._instance = new $thisType();
    }
    return arg_15_0;
  }; 

  function Audio_GetVolume () {
    return $IM01().Call(this._audioImp, null);
  }; 

  function Audio_LoadFile (fileName, streaming) {
    return $IM02().Call(this._audioImp, null, fileName, streaming);
  }; 

  function Audio_set_AudioImp (value) {
    if (value === null) {
      $T03().Log("WARNING: No Audio implementation set. To enable Audio functionality inject an appropriate implementation of IAudioImp in your platform specific application main module.");
      this._audioImp = new ($T04())();
    } else {
      this._audioImp = value;
      $IM03().Call(this._audioImp, null);
    }
  }; 

  function Audio_SetPanning (val) {
    $IM04().Call(this._audioImp, null, val);
  }; 

  function Audio_SetVolume (val) {
    $IM05().Call(this._audioImp, null, val);
  }; 

  function Audio_Stop () {
    $IM06().Call(this._audioImp, null);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Audio", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Audio__ctor
    );

    $.Method({Static:false, Public:false}, "CloseDevice", 
      JSIL.MethodSignature.Void, 
      Audio_CloseDevice
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void, 
      Audio_Dispose
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      Audio_get_Instance
    );

    $.Method({Static:false, Public:true }, "GetVolume", 
      JSIL.MethodSignature.Return($.Single), 
      Audio_GetVolume
    );

    $.Method({Static:false, Public:true }, "LoadFile", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IAudioStreamImp"), [$.String, $.Boolean]), 
      Audio_LoadFile
    );

    $.Method({Static:false, Public:false}, "set_AudioImp", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IAudioImp")), 
      Audio_set_AudioImp
    );

    $.Method({Static:false, Public:true }, "SetPanning", 
      JSIL.MethodSignature.Action($.Single), 
      Audio_SetPanning
    );

    $.Method({Static:false, Public:true }, "SetVolume", 
      JSIL.MethodSignature.Action($.Single), 
      Audio_SetVolume
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      Audio_Stop
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type);

    $.Field({Static:false, Public:false}, "_audioImp", $asm03.TypeRef("Fusee.Engine.Common.IAudioImp"));

    $.Property({Static:false, Public:false}, "AudioImp", $asm03.TypeRef("Fusee.Engine.Common.IAudioImp"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.DummyAudioImp */ 

(function DummyAudioImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.DummyAudioStreamImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Single)) ();
  };


  function DummyAudioImp__ctor () {
  }; 

  function DummyAudioImp_CloseDevice () {
  }; 

  function DummyAudioImp_GetVolume () {
    return 0;
  }; 

  function DummyAudioImp_LoadFile (fileName, streaming) {
    return new ($T02())();
  }; 

  function DummyAudioImp_OpenDevice () {
  }; 

  function DummyAudioImp_SetPanning (val) {
  }; 

  function DummyAudioImp_SetVolume (volume) {
  }; 

  function DummyAudioImp_Stop () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.DummyAudioImp", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DummyAudioImp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CloseDevice", 
      JSIL.MethodSignature.Void, 
      DummyAudioImp_CloseDevice
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetVolume", 
      JSIL.MethodSignature.Return($.Single), 
      DummyAudioImp_GetVolume
    );

    $.Method({Static:false, Public:true , Virtual:true }, "LoadFile", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IAudioStreamImp"), [$.String, $.Boolean]), 
      DummyAudioImp_LoadFile
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OpenDevice", 
      JSIL.MethodSignature.Void, 
      DummyAudioImp_OpenDevice
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetPanning", 
      JSIL.MethodSignature.Action($.Single), 
      DummyAudioImp_SetPanning
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetVolume", 
      JSIL.MethodSignature.Action($.Single), 
      DummyAudioImp_SetVolume
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      DummyAudioImp_Stop
    );

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IAudioImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.DummyAudioStreamImp */ 

(function DummyAudioStreamImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Single)) ();
  };


  function DummyAudioStreamImp__ctor () {
  }; 

  function DummyAudioStreamImp_get_Loop () {
    return this.DummyAudioStreamImp$Loop$value;
  }; 

  function DummyAudioStreamImp_get_Panning () {
    return this.DummyAudioStreamImp$Panning$value;
  }; 

  function DummyAudioStreamImp_get_Volume () {
    return this.DummyAudioStreamImp$Volume$value;
  }; 

  function DummyAudioStreamImp_Pause () {
  }; 

  function DummyAudioStreamImp_Play$00 () {
  }; 

  function DummyAudioStreamImp_Play$01 (loop) {
  }; 

  function DummyAudioStreamImp_set_Loop (value) {
    this.DummyAudioStreamImp$Loop$value = value;
  }; 

  function DummyAudioStreamImp_set_Panning (value) {
    this.DummyAudioStreamImp$Panning$value = +value;
  }; 

  function DummyAudioStreamImp_set_Volume (value) {
    this.DummyAudioStreamImp$Volume$value = +value;
  }; 

  function DummyAudioStreamImp_Stop () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.DummyAudioStreamImp", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DummyAudioStreamImp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Loop", 
      JSIL.MethodSignature.Return($.Boolean), 
      DummyAudioStreamImp_get_Loop
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Panning", 
      JSIL.MethodSignature.Return($.Single), 
      DummyAudioStreamImp_get_Panning
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Volume", 
      JSIL.MethodSignature.Return($.Single), 
      DummyAudioStreamImp_get_Volume
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      DummyAudioStreamImp_Pause
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Play", 
      JSIL.MethodSignature.Void, 
      DummyAudioStreamImp_Play$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Play", 
      JSIL.MethodSignature.Action($.Boolean), 
      DummyAudioStreamImp_Play$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Loop", 
      JSIL.MethodSignature.Action($.Boolean), 
      DummyAudioStreamImp_set_Loop
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Panning", 
      JSIL.MethodSignature.Action($.Single), 
      DummyAudioStreamImp_set_Panning
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Volume", 
      JSIL.MethodSignature.Action($.Single), 
      DummyAudioStreamImp_set_Volume
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      DummyAudioStreamImp_Stop
    );

    $.Field({Static:false, Public:false}, "DummyAudioStreamImp$Volume$value", $.Single);

    $.Field({Static:false, Public:false}, "DummyAudioStreamImp$Loop$value", $.Boolean);

    $.Field({Static:false, Public:false}, "DummyAudioStreamImp$Panning$value", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "Volume", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "Loop", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Panning", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IAudioStreamImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.AudioStream */ 

(function AudioStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Void)) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.Boolean")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.get_Loop)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.get_Panning)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.get_Volume)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.Pause)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.Play)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.set_Loop)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.set_Panning)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.set_Volume)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioStreamImp.Stop)) ();
  };


  function AudioStream__ctor () {
  }; 

  function AudioStream_get_Loop () {
    return $IM00().Call(this._asImp, null);
  }; 

  function AudioStream_get_Panning () {
    return $IM01().Call(this._asImp, null);
  }; 

  function AudioStream_get_Volume () {
    return $IM02().Call(this._asImp, null);
  }; 

  function AudioStream_Pause () {
    $IM03().Call(this._asImp, null);
  }; 

  function AudioStream_Play$00 () {
    $S00().CallVirtual($IM04(), null, this._asImp);
  }; 

  function AudioStream_Play$01 (loop) {
    $S01().CallVirtual($IM04(), null, this._asImp, loop);
  }; 

  function AudioStream_set_Loop (value) {
    $IM05().Call(this._asImp, null, value);
  }; 

  function AudioStream_set_Panning (value) {
    $IM06().Call(this._asImp, null, value);
  }; 

  function AudioStream_set_Volume (value) {
    $IM07().Call(this._asImp, null, value);
  }; 

  function AudioStream_Stop () {
    $IM08().Call(this._asImp, null);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.AudioStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AudioStream__ctor
    );

    $.Method({Static:false, Public:true }, "get_Loop", 
      JSIL.MethodSignature.Return($.Boolean), 
      AudioStream_get_Loop
    );

    $.Method({Static:false, Public:true }, "get_Panning", 
      JSIL.MethodSignature.Return($.Single), 
      AudioStream_get_Panning
    );

    $.Method({Static:false, Public:true }, "get_Volume", 
      JSIL.MethodSignature.Return($.Single), 
      AudioStream_get_Volume
    );

    $.Method({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      AudioStream_Pause
    );

    $.Method({Static:false, Public:true }, "Play", 
      JSIL.MethodSignature.Void, 
      AudioStream_Play$00
    );

    $.Method({Static:false, Public:false}, "Play", 
      JSIL.MethodSignature.Action($.Boolean), 
      AudioStream_Play$01
    );

    $.Method({Static:false, Public:true }, "set_Loop", 
      JSIL.MethodSignature.Action($.Boolean), 
      AudioStream_set_Loop
    );

    $.Method({Static:false, Public:true }, "set_Panning", 
      JSIL.MethodSignature.Action($.Single), 
      AudioStream_set_Panning
    );

    $.Method({Static:false, Public:true }, "set_Volume", 
      JSIL.MethodSignature.Action($.Single), 
      AudioStream_set_Volume
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      AudioStream_Stop
    );

    $.Field({Static:false, Public:true }, "_asImp", $asm03.TypeRef("Fusee.Engine.Common.IAudioStreamImp"));

    $.Property({Static:false, Public:true }, "Volume", $.Single);

    $.Property({Static:false, Public:true }, "Loop", $.Boolean);

    $.Property({Static:false, Public:true }, "Panning", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.CollisionShape */ 

(function CollisionShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function CollisionShape__ctor () {
  }; 

  function CollisionShape_get_LocalScaling () {
    return $IM00().Call(this._collisionShapeImp, null);
  }; 

  function CollisionShape_get_Margin () {
    return $IM01().Call(this._collisionShapeImp, null);
  }; 

  function CollisionShape_set_LocalScaling (value) {
    var collisionShape = $thisType.$Cast($IM02().Call(this._collisionShapeImp, null));
    (collisionShape._collisionShapeImp.LocalScaling = value.MemberwiseClone());
  }; 

  function CollisionShape_set_Margin (value) {
    var collisionShape = $thisType.$Cast($IM02().Call(this._collisionShapeImp, null));
    $IM03().Call(collisionShape._collisionShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.CollisionShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CollisionShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LocalScaling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      CollisionShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      CollisionShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LocalScaling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      CollisionShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      CollisionShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_collisionShapeImp", $asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalScaling", $asm0A.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.BoxShape */ 

(function BoxShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IBoxShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IBoxShapeImp.get_HalfExtents)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function BoxShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function BoxShape_get_HalfExtents () {
    return $IM00().Call(this._boxShapeImp, null);
  }; 

  function BoxShape_get_LocalScaling () {
    return $IM01().Call(this._boxShapeImp, null);
  }; 

  function BoxShape_get_Margin () {
    return $IM02().Call(this._boxShapeImp, null);
  }; 

  function BoxShape_set_LocalScaling (value) {
    var boxShape = $thisType.$Cast($IM03().Call(this._boxShapeImp, null));
    (boxShape._boxShapeImp.LocalScaling = value.MemberwiseClone());
  }; 

  function BoxShape_set_Margin (value) {
    var boxShape = $thisType.$Cast($IM03().Call(this._boxShapeImp, null));
    $IM04().Call(boxShape._boxShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.BoxShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BoxShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_HalfExtents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      BoxShape_get_HalfExtents
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LocalScaling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      BoxShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      BoxShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LocalScaling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      BoxShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      BoxShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_boxShapeImp", $asm03.TypeRef("Fusee.Engine.Common.IBoxShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalScaling", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "HalfExtents", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.CapsuleShape */ 

(function CapsuleShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICapsuleShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICapsuleShapeImp.get_HalfHeight)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICapsuleShapeImp.get_Radius)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICapsuleShapeImp.get_UpAxis)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function CapsuleShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function CapsuleShape_get_HalfHeight () {
    return $IM00().Call(this._capsuleShapeImp, null);
  }; 

  function CapsuleShape_get_LocalScaling () {
    return $IM01().Call(this._capsuleShapeImp, null);
  }; 

  function CapsuleShape_get_Margin () {
    return $IM02().Call(this._capsuleShapeImp, null);
  }; 

  function CapsuleShape_get_Radius () {
    return $IM03().Call(this._capsuleShapeImp, null);
  }; 

  function CapsuleShape_get_UpAxis () {
    var upAxis = ($IM04().Call(this._capsuleShapeImp, null) | 0);
    return +upAxis;
  }; 

  function CapsuleShape_set_LocalScaling (value) {
    var capsuleShape = $thisType.$Cast($IM05().Call(this._capsuleShapeImp, null));
    (capsuleShape._capsuleShapeImp.LocalScaling = value.MemberwiseClone());
  }; 

  function CapsuleShape_set_Margin (value) {
    var capsuleShape = $thisType.$Cast($IM05().Call(this._capsuleShapeImp, null));
    $IM06().Call(capsuleShape._capsuleShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.CapsuleShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CapsuleShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_HalfHeight", 
      JSIL.MethodSignature.Return($.Single), 
      CapsuleShape_get_HalfHeight
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LocalScaling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      CapsuleShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      CapsuleShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      JSIL.MethodSignature.Return($.Single), 
      CapsuleShape_get_Radius
    );

    $.Method({Static:false, Public:true }, "get_UpAxis", 
      JSIL.MethodSignature.Return($.Single), 
      CapsuleShape_get_UpAxis
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LocalScaling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      CapsuleShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      CapsuleShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_capsuleShapeImp", $asm03.TypeRef("Fusee.Engine.Common.ICapsuleShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalScaling", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "HalfHeight", $.Single);

    $.Property({Static:false, Public:true }, "Radius", $.Single);

    $.Property({Static:false, Public:true }, "UpAxis", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.CodeComponent */ 

(function CodeComponent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneComponentContainer)) ();
  };


  function CodeComponent__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.SceneComponentContainer"), 
      Name: "Fusee.Engine.Core.CodeComponent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CodeComponent__ctor
    );

    $.Field({Static:false, Public:true }, "IsMouseOver", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Engine.Core.CodeComponent+InteractionHandler */ 

JSIL.MakeDelegate("Fusee.Engine.Core.CodeComponent+InteractionHandler", false, [], 
  JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CodeComponent")));

/* class Fusee.Engine.Core.CompoundShape */ 

(function CompoundShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.BoxShape)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICompoundShapeImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.SphereShape)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.CapsuleShape)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.ConeShape)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Engine.Core.CylinderShape)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Engine.Core.MultiSphereShape)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Engine.Core.EmptyShape)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm0F.System.Single))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm03.Fusee.Engine.Common.IBoxShapeImp]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm03.Fusee.Engine.Common.ISphereShapeImp]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm03.Fusee.Engine.Common.ICapsuleShapeImp]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm03.Fusee.Engine.Common.IConeShapeImp]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm03.Fusee.Engine.Common.ICylinderShapeImp]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm03.Fusee.Engine.Common.IMultiSphereShapeImp]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm03.Fusee.Engine.Common.IEmptyShapeImp]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICompoundShapeImp.AddChildShape)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICompoundShapeImp.CalculatePrincipalAxisTransform)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function CompoundShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function CompoundShape_AddChildShape$00 (localTransform, childShape) {
    $S00().CallVirtual($IM00(), null, this._compoundShapeImp, localTransform.MemberwiseClone(), childShape._boxShapeImp);
  }; 

  function CompoundShape_AddChildShape$01 (localTransform, childShape) {
    $S01().CallVirtual($IM00(), null, this._compoundShapeImp, localTransform.MemberwiseClone(), childShape._sphereShapeImp);
  }; 

  function CompoundShape_AddChildShape$02 (localTransform, childShape) {
    $S02().CallVirtual($IM00(), null, this._compoundShapeImp, localTransform.MemberwiseClone(), childShape._capsuleShapeImp);
  }; 

  function CompoundShape_AddChildShape$03 (localTransform, childShape) {
    $S03().CallVirtual($IM00(), null, this._compoundShapeImp, localTransform.MemberwiseClone(), childShape._coneShapeImp);
  }; 

  function CompoundShape_AddChildShape$04 (localTransform, childShape) {
    $S04().CallVirtual($IM00(), null, this._compoundShapeImp, localTransform.MemberwiseClone(), childShape._cylinderShapeImp);
  }; 

  function CompoundShape_AddChildShape$05 (localTransform, childShape) {
    $S05().CallVirtual($IM00(), null, this._compoundShapeImp, localTransform.MemberwiseClone(), childShape._multiSphereShapeImp);
  }; 

  function CompoundShape_AddChildShape$06 (localTransform, childShape) {
    $S06().CallVirtual($IM00(), null, this._compoundShapeImp, localTransform.MemberwiseClone(), childShape._emtyShapeImp);
  }; 

  function CompoundShape_CalculatePrincipalAxisTransform (masses, principal, inertia) {
    $IM01().Call(this._compoundShapeImp, null, masses, principal.MemberwiseClone(), inertia.MemberwiseClone());
  }; 

  function CompoundShape_get_Margin () {
    return $IM02().Call(this._compoundShapeImp, null);
  }; 

  function CompoundShape_set_Margin (value) {
    var boxShape = $T02().$Cast($IM03().Call(this._compoundShapeImp, null));
    $IM04().Call(boxShape._boxShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.CompoundShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CompoundShape__ctor
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm04.TypeRef("Fusee.Engine.Core.BoxShape")]), 
      CompoundShape_AddChildShape$00
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm04.TypeRef("Fusee.Engine.Core.SphereShape")]), 
      CompoundShape_AddChildShape$01
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm04.TypeRef("Fusee.Engine.Core.CapsuleShape")]), 
      CompoundShape_AddChildShape$02
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm04.TypeRef("Fusee.Engine.Core.ConeShape")]), 
      CompoundShape_AddChildShape$03
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm04.TypeRef("Fusee.Engine.Core.CylinderShape")]), 
      CompoundShape_AddChildShape$04
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm04.TypeRef("Fusee.Engine.Core.MultiSphereShape")]), 
      CompoundShape_AddChildShape$05
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm04.TypeRef("Fusee.Engine.Core.EmptyShape")]), 
      CompoundShape_AddChildShape$06
    );

    $.Method({Static:false, Public:true }, "CalculatePrincipalAxisTransform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3")
        ]), 
      CompoundShape_CalculatePrincipalAxisTransform
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      CompoundShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      CompoundShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_compoundShapeImp", $asm03.TypeRef("Fusee.Engine.Common.ICompoundShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ConeShape */ 

(function ConeShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeShapeImp.get_ConeUpIndex)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeShapeImp.get_Height)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeShapeImp.get_Radius)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeShapeImp.set_ConeUpIndex)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function ConeShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ConeShape_get_ConeUpIndex () {
    return $IM00().Call(this._coneShapeImp, null);
  }; 

  function ConeShape_get_Height () {
    return $IM01().Call(this._coneShapeImp, null);
  }; 

  function ConeShape_get_LocalScaling () {
    return $IM02().Call(this._coneShapeImp, null);
  }; 

  function ConeShape_get_Margin () {
    return $IM03().Call(this._coneShapeImp, null);
  }; 

  function ConeShape_get_Radius () {
    return $IM04().Call(this._coneShapeImp, null);
  }; 

  function ConeShape_set_ConeUpIndex (value) {
    var coneShape = $thisType.$Cast($IM05().Call(this._coneShapeImp, null));
    $IM06().Call(coneShape._coneShapeImp, null, value);
  }; 

  function ConeShape_set_LocalScaling (value) {
    var coneShape = $thisType.$Cast($IM05().Call(this._coneShapeImp, null));
    (coneShape._coneShapeImp.LocalScaling = value.MemberwiseClone());
  }; 

  function ConeShape_set_Margin (value) {
    var coneShape = $thisType.$Cast($IM05().Call(this._coneShapeImp, null));
    $IM07().Call(coneShape._coneShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.ConeShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ConeShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_ConeUpIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      ConeShape_get_ConeUpIndex
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Single), 
      ConeShape_get_Height
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LocalScaling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      ConeShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      ConeShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      JSIL.MethodSignature.Return($.Single), 
      ConeShape_get_Radius
    );

    $.Method({Static:false, Public:true }, "set_ConeUpIndex", 
      JSIL.MethodSignature.Action($.Int32), 
      ConeShape_set_ConeUpIndex
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LocalScaling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      ConeShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      ConeShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_coneShapeImp", $asm03.TypeRef("Fusee.Engine.Common.IConeShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalScaling", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "ConeUpIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Single);

    $.Property({Static:false, Public:true }, "Radius", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ConeTwistConstraint */ 

(function ConeTwistConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.Fusee.Math.Core.Quaternion)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0F.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.CalcAngleInfo)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.CalcAngleInfo2)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.EnableMotor)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_AFrame)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_BFrame)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_FixThresh)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_FrameOffsetA)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_FrameOffsetB)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_IsPastSwingLimit)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_SolveSwingLimit)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_SolveTwistLimit)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_SwingSpan1)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_SwingSpan2)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_TwistAngle)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_TwistLimitSign)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.get_TwistSpan)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.GetPointForAngle)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.GetUid)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_UserObject)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.set_FixThresh)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.SetAngularOnly)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.SetDamping)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.SetLimit)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.SetMaxMotorImpulse)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.SetMaxMotorImpulseNormalized)) ();
  };
  var $IM1C = function () {
    return ($IM1C = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.SetMotorTarget)) ();
  };
  var $IM1D = function () {
    return ($IM1D = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.SetMotorTargetInConstraintSpace)) ();
  };
  var $IM1E = function () {
    return ($IM1E = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp.UpdateRhs)) ();
  };


  function ConeTwistConstraint__ctor () {
  }; 

  function ConeTwistConstraint_CalcAngleInfo () {
    $IM00().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_CalcAngleInfo2 (transA, transB, invInertiaWorldA, invInertiaWorldB) {
    $IM01().Call(this._iCTConstraintImp, null, transA.MemberwiseClone(), transB.MemberwiseClone(), invInertiaWorldA.MemberwiseClone(), invInertiaWorldB.MemberwiseClone());
  }; 

  function ConeTwistConstraint_EnableMotor (b) {
    $IM02().Call(this._iCTConstraintImp, null, b);
  }; 

  function ConeTwistConstraint_get_AFrame () {
    return $IM03().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_BFrame () {
    return $IM04().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_FixThresh () {
    return $IM05().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_FrameOffsetA () {
    return $IM06().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_FrameOffsetB () {
    return $IM07().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_IsPastSwingLimit () {
    return $IM08().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_RigidBodyA () {
    var userObject = $IM09().Call($IM0A().Call(this._iCTConstraintImp, null), null);
    return $T06().$Cast(userObject);
  }; 

  function ConeTwistConstraint_get_RigidBodyB () {
    var userObject = $IM09().Call($IM0B().Call(this._iCTConstraintImp, null), null);
    return $T06().$Cast(userObject);
  }; 

  function ConeTwistConstraint_get_SolveSwingLimit () {
    return $IM0C().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_SolveTwistLimit () {
    return $IM0D().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_SwingSpan1 () {
    return $IM0E().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_SwingSpan2 () {
    return $IM0F().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_TwistAngle () {
    return $IM10().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_TwistLimitSign () {
    return $IM11().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_get_TwistSpan () {
    return $IM12().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_GetPointForAngle (fAngleInRadius, fLength) {
    return $IM13().Call(this._iCTConstraintImp, null, fAngleInRadius, fLength);
  }; 

  function ConeTwistConstraint_GetUid () {
    return $IM14().Call(this._iCTConstraintImp, null);
  }; 

  function ConeTwistConstraint_set_FixThresh (value) {
    var coneTwistConstraint = $thisType.$Cast($IM15().Call(this._iCTConstraintImp, null));
    $IM16().Call(coneTwistConstraint._iCTConstraintImp, null, value);
  }; 

  function ConeTwistConstraint_SetAngularOnly (angularOnly) {
    $IM17().Call(this._iCTConstraintImp, null, angularOnly);
  }; 

  function ConeTwistConstraint_SetDamping (damping) {
    $IM18().Call(this._iCTConstraintImp, null, damping);
  }; 

  function ConeTwistConstraint_SetLimit$00 (limitIndex, limitValue) {
    $S00().CallVirtual($IM19(), null, this._iCTConstraintImp, limitIndex, limitValue);
  }; 

  function ConeTwistConstraint_SetLimit$01 (swingSpan1, swingSpan2, twistSpan, softness, biasFactor, relaxationFactor) {
    $S01().CallVirtual($IM19(), null, this._iCTConstraintImp, 
      swingSpan1, 
      swingSpan2, 
      twistSpan, 
      softness, 
      biasFactor, 
      relaxationFactor
    );
  }; 

  function ConeTwistConstraint_SetMaxMotorImpulse (maxMotorImpulse) {
    $IM1A().Call(this._iCTConstraintImp, null, maxMotorImpulse);
  }; 

  function ConeTwistConstraint_SetMaxMotorImpulseNormalized (maxMotorImpulse) {
    $IM1B().Call(this._iCTConstraintImp, null, maxMotorImpulse);
  }; 

  function ConeTwistConstraint_SetMotorTarget (q) {
    $IM1C().Call(this._iCTConstraintImp, null, q.MemberwiseClone());
  }; 

  function ConeTwistConstraint_SetMotorTargetInConstraintSpace (q) {
    $IM1D().Call(this._iCTConstraintImp, null, q.MemberwiseClone());
  }; 

  function ConeTwistConstraint_UpdateRhs (timeStep) {
    $IM1E().Call(this._iCTConstraintImp, null, timeStep);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ConeTwistConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ConeTwistConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "CalcAngleInfo", 
      JSIL.MethodSignature.Void, 
      ConeTwistConstraint_CalcAngleInfo
    );

    $.Method({Static:false, Public:true }, "CalcAngleInfo2", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")
        ]), 
      ConeTwistConstraint_CalcAngleInfo2
    );

    $.Method({Static:false, Public:true }, "EnableMotor", 
      JSIL.MethodSignature.Action($.Boolean), 
      ConeTwistConstraint_EnableMotor
    );

    $.Method({Static:false, Public:true }, "get_AFrame", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      ConeTwistConstraint_get_AFrame
    );

    $.Method({Static:false, Public:true }, "get_BFrame", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      ConeTwistConstraint_get_BFrame
    );

    $.Method({Static:false, Public:true }, "get_FixThresh", 
      JSIL.MethodSignature.Return($.Single), 
      ConeTwistConstraint_get_FixThresh
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetA", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      ConeTwistConstraint_get_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetB", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      ConeTwistConstraint_get_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "get_IsPastSwingLimit", 
      JSIL.MethodSignature.Return($.Boolean), 
      ConeTwistConstraint_get_IsPastSwingLimit
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      ConeTwistConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      ConeTwistConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_SolveSwingLimit", 
      JSIL.MethodSignature.Return($.Int32), 
      ConeTwistConstraint_get_SolveSwingLimit
    );

    $.Method({Static:false, Public:true }, "get_SolveTwistLimit", 
      JSIL.MethodSignature.Return($.Int32), 
      ConeTwistConstraint_get_SolveTwistLimit
    );

    $.Method({Static:false, Public:true }, "get_SwingSpan1", 
      JSIL.MethodSignature.Return($.Single), 
      ConeTwistConstraint_get_SwingSpan1
    );

    $.Method({Static:false, Public:true }, "get_SwingSpan2", 
      JSIL.MethodSignature.Return($.Single), 
      ConeTwistConstraint_get_SwingSpan2
    );

    $.Method({Static:false, Public:true }, "get_TwistAngle", 
      JSIL.MethodSignature.Return($.Single), 
      ConeTwistConstraint_get_TwistAngle
    );

    $.Method({Static:false, Public:true }, "get_TwistLimitSign", 
      JSIL.MethodSignature.Return($.Single), 
      ConeTwistConstraint_get_TwistLimitSign
    );

    $.Method({Static:false, Public:true }, "get_TwistSpan", 
      JSIL.MethodSignature.Return($.Single), 
      ConeTwistConstraint_get_TwistSpan
    );

    $.Method({Static:false, Public:true }, "GetPointForAngle", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$.Single, $.Single]), 
      ConeTwistConstraint_GetPointForAngle
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      JSIL.MethodSignature.Return($.Int32), 
      ConeTwistConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_FixThresh", 
      JSIL.MethodSignature.Action($.Single), 
      ConeTwistConstraint_set_FixThresh
    );

    $.Method({Static:false, Public:true }, "SetAngularOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      ConeTwistConstraint_SetAngularOnly
    );

    $.Method({Static:false, Public:true }, "SetDamping", 
      JSIL.MethodSignature.Action($.Single), 
      ConeTwistConstraint_SetDamping
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      ConeTwistConstraint_SetLimit$00
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      ConeTwistConstraint_SetLimit$01
    );

    $.Method({Static:false, Public:true }, "SetMaxMotorImpulse", 
      JSIL.MethodSignature.Action($.Single), 
      ConeTwistConstraint_SetMaxMotorImpulse
    );

    $.Method({Static:false, Public:true }, "SetMaxMotorImpulseNormalized", 
      JSIL.MethodSignature.Action($.Single), 
      ConeTwistConstraint_SetMaxMotorImpulseNormalized
    );

    $.Method({Static:false, Public:true }, "SetMotorTarget", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.Quaternion")), 
      ConeTwistConstraint_SetMotorTarget
    );

    $.Method({Static:false, Public:true }, "SetMotorTargetInConstraintSpace", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.Quaternion")), 
      ConeTwistConstraint_SetMotorTargetInConstraintSpace
    );

    $.Method({Static:false, Public:true }, "UpdateRhs", 
      JSIL.MethodSignature.Action($.Single), 
      ConeTwistConstraint_UpdateRhs
    );

    $.Field({Static:false, Public:false}, "_iCTConstraintImp", $asm03.TypeRef("Fusee.Engine.Common.IConeTwistConstraintImp"));

    $.Property({Static:false, Public:true }, "AFrame", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "BFrame", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "FixThresh", $.Single);

    $.Property({Static:false, Public:true }, "FrameOffsetA", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetB", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "IsPastSwingLimit", $.Boolean);

    $.Property({Static:false, Public:true }, "SolveSwingLimit", $.Int32);

    $.Property({Static:false, Public:true }, "SolveTwistLimit", $.Int32);

    $.Property({Static:false, Public:true }, "SwingSpan1", $.Single);

    $.Property({Static:false, Public:true }, "SwingSpan2", $.Single);

    $.Property({Static:false, Public:true }, "TwistAngle", $.Single);

    $.Property({Static:false, Public:true }, "TwistLimitSign", $.Single);

    $.Property({Static:false, Public:true }, "TwistSpan", $.Single);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ConvertSceneGraph */ 

(function ConvertSceneGraph$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0D.Fusee.Xene.SceneVisitor)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.Fusee.Serialization.BoneComponent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm12.System.Collections.Generic.Stack$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneContainer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.MaterialComponent, $asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.MaterialLightComponent, $asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.MaterialPBRComponent, $asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.Fusee.Serialization.LightComponent)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectComponent)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialLightComponent)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialPBRComponent)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0D.Fusee.Xene.ContainerExtensions)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderCodeBuilder)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.Fusee.Jometri.TangentSpaceCalulator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0B.Fusee.Serialization.ShaderComponent)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0B.Fusee.Serialization.TransformComponent)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0B.Fusee.Serialization.WeightComponent)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm12.System.Collections.Generic.Stack$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.MaterialComponent, $asm04.Fusee.Engine.Core.ShaderEffect), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.MaterialLightComponent, $asm04.Fusee.Engine.Core.ShaderEffect), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.MaterialPBRComponent, $asm04.Fusee.Engine.Core.ShaderEffect), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")])))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm04.Fusee.Engine.Core.ShaderEffect, [$asm0B.Fusee.Serialization.MaterialComponent]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm04.Fusee.Engine.Core.ShaderEffect, [$asm0B.Fusee.Serialization.MaterialLightComponent]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm04.Fusee.Engine.Core.ShaderEffect, [$asm0B.Fusee.Serialization.MaterialPBRComponent]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), null))) ();
  };


  function ConvertSceneGraph__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ConvertSceneGraph_ConvBone (bone) {
    if (this._currentNode.Components === null) {
      this._currentNode.Components = $S00().Construct();
    }
    (this._currentNode.Components).Add(bone);
    $T03().prototype.Push.call(this._boneContainers, this._currentNode);
  }; 

  function ConvertSceneGraph_Convert (sc) {
    this._predecessors = $S01().Construct();
    this._convertedScene = new ($T04())();
    this._matMap = $S02().Construct();
    this._lightMatMap = $S03().Construct();
    this._pbrComponent = $S04().Construct();
    this._boneContainers = $S01().Construct();
    $S05().CallVirtual("Traverse", null, this, sc.Children);
    return this._convertedScene;
  }; 

  function ConvertSceneGraph_ConvLight (lightComponent) {
    (this._currentNode.Components).Add(lightComponent);
  }; 

  function ConvertSceneGraph_ConvMaterial$00 (matComp) {
    var effect = $S06().CallVirtual("LookupMaterial", null, this, matComp);
    var expr_19 = new ($T0B())();
    expr_19.ShaderEffectComponent$Effect$value = effect;
    (this._currentNode.Components).Add(expr_19);
  }; 

  function ConvertSceneGraph_ConvMaterial$01 (matComp) {
    var effect = $S07().CallVirtual("LookupMaterial", null, this, matComp);
    var expr_19 = new ($T0B())();
    expr_19.ShaderEffectComponent$Effect$value = effect;
    (this._currentNode.Components).Add(expr_19);
  }; 

  function ConvertSceneGraph_ConvMaterial$02 (matComp) {
    var effect = $S08().CallVirtual("LookupMaterial", null, this, matComp);
    var expr_19 = new ($T0B())();
    expr_19.ShaderEffectComponent$Effect$value = effect;
    (this._currentNode.Components).Add(expr_19);
  }; 

  function ConvertSceneGraph_ConvMesh (mesh) {
    if (this._currentNode.Components === null) {
      this._currentNode.Components = $S00().Construct();
    }
    var component = $T0F().GetComponent$b1($T0B())(this._currentNode, 0);
    var flag2 = (
      (component !== null)
         ? (component.ShaderEffectComponent$Effect$value).GetEffectParam($T11().ShaderCodeBuilder$BumpTextureName$value)
         : null)
     !== null;
    if (flag2) {
      mesh.set_Tangents($T12().CalculateTangents(mesh));
      mesh.set_BiTangents($T12().CalculateBiTangents(mesh));
    }
    (this._currentNode.Components).Add(mesh);
  }; 

  function ConvertSceneGraph_ConvSceneNodeContainer (snc) {
    var flag = ((this._predecessors).get_Count() >>> 0) > (0 >>> 0);
    if (flag) {
      var sceneNodeContainer = $T03().prototype.Peek.call(this._predecessors);
      var flag2 = sceneNodeContainer.Children === null;
      if (flag2) {
        sceneNodeContainer.Children = $S09().Construct();
      }
      var expr_3E = new ($T13())();
      expr_3E.Name = snc.Name;
      this._currentNode = expr_3E;
      (sceneNodeContainer.Children).Add(this._currentNode);
      $T03().prototype.Push.call(this._predecessors, this._currentNode);
    } else {
      var arg_93_0 = this._predecessors;
      var expr_82 = new ($T13())();
      expr_82.Name = this.SceneVisitor$CurrentNode$value.Name;
      $T03().prototype.Push.call(arg_93_0, expr_82);
      this._currentNode = $T03().prototype.Peek.call(this._predecessors);
      if (this._convertedScene.Children !== null) {
        (this._convertedScene.Children).Add(this._currentNode);
      } else {
        var arg_ED_0 = this._convertedScene;
        var expr_E0 = $S09().Construct();
        expr_E0.Add(this._currentNode);
        arg_ED_0.Children = expr_E0;
      }
    }
  }; 

  function ConvertSceneGraph_ConvShader (shaderComponent) {
  }; 

  function ConvertSceneGraph_ConvShaderEffect (shaderComponent) {
  }; 

  function ConvertSceneGraph_ConvTransform (transform) {
    if (this._currentNode.Components === null) {
      this._currentNode.Components = $S00().Construct();
    }
    (this._currentNode.Components).Add(transform);
  }; 

  function ConvertSceneGraph_ConVWeight (weight) {
    var flag = ((this._boneContainers).get_Count() | 0) > 1;
    if (flag) {
      var flag2 = weight.Joints === null;
      if (flag2) {
        weight.Joints = $S09().Construct();
      }

      while (((this._boneContainers).get_Count() >>> 0) > (0 >>> 0)) {
        (weight.Joints).Add($T03().prototype.Pop.call(this._boneContainers));
      }
    }
    (this._currentNode.Components).Add(weight);
  }; 

  function ConvertSceneGraph_LookupMaterial$03 (mc) {
    var shaderEffect = new JSIL.BoxedVariable(null);
    var flag = (this._matMap).TryGetValue(mc, /* ref */ shaderEffect);
    if (flag) {
      var result = shaderEffect.get();
    } else {
      shaderEffect.set($T11().MakeShaderEffectFromMatComp(mc, $T0F().GetWeights(this._currentNode, 0)));
      (this._matMap).Add(mc, shaderEffect.get());
      result = shaderEffect.get();
    }
    return result;
  }; 

  function ConvertSceneGraph_LookupMaterial$04 (mc) {
    var shaderEffect = new JSIL.BoxedVariable(null);
    var flag = (this._lightMatMap).TryGetValue(mc, /* ref */ shaderEffect);
    if (flag) {
      var result = shaderEffect.get();
    } else {
      shaderEffect.set($T11().MakeShaderEffectFromMatComp(mc, $T0F().GetWeights(this._currentNode, 0)));
      (this._lightMatMap).Add(mc, shaderEffect.get());
      result = shaderEffect.get();
    }
    return result;
  }; 

  function ConvertSceneGraph_LookupMaterial$05 (mc) {
    var shaderEffect = new JSIL.BoxedVariable(null);
    var flag = (this._pbrComponent).TryGetValue(mc, /* ref */ shaderEffect);
    if (flag) {
      var result = shaderEffect.get();
    } else {
      shaderEffect.set($T11().MakeShaderEffectFromMatComp(mc, $T0F().GetWeights(this._currentNode, 0)));
      (this._pbrComponent).Add(mc, shaderEffect.get());
      result = shaderEffect.get();
    }
    return result;
  }; 

  function ConvertSceneGraph_PopState () {
    $T03().prototype.Pop.call(this._predecessors);
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.SceneVisitor"), 
      Name: "Fusee.Engine.Core.ConvertSceneGraph", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ConvertSceneGraph__ctor
    );

    $.Method({Static:false, Public:true }, "ConvBone", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.BoneComponent")), 
      ConvertSceneGraph_ConvBone
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "Convert", 
      new JSIL.MethodSignature($asm0B.TypeRef("Fusee.Serialization.SceneContainer"), [$asm0B.TypeRef("Fusee.Serialization.SceneContainer")]), 
      ConvertSceneGraph_Convert
    );

    $.Method({Static:false, Public:true }, "ConvLight", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.LightComponent")), 
      ConvertSceneGraph_ConvLight
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvMaterial", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialComponent")), 
      ConvertSceneGraph_ConvMaterial$00
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvMaterial", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent")), 
      ConvertSceneGraph_ConvMaterial$01
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvMaterial", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent")), 
      ConvertSceneGraph_ConvMaterial$02
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvMesh", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      ConvertSceneGraph_ConvMesh
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvSceneNodeContainer", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")), 
      ConvertSceneGraph_ConvSceneNodeContainer
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvShader", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.ShaderComponent")), 
      ConvertSceneGraph_ConvShader
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvShaderEffect", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffectComponent")), 
      ConvertSceneGraph_ConvShaderEffect
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConvTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.TransformComponent")), 
      ConvertSceneGraph_ConvTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "ConVWeight", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.WeightComponent")), 
      ConvertSceneGraph_ConVWeight
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false}, "LookupMaterial", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [$asm0B.TypeRef("Fusee.Serialization.MaterialComponent")]), 
      ConvertSceneGraph_LookupMaterial$03
    );

    $.Method({Static:false, Public:false}, "LookupMaterial", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [$asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent")]), 
      ConvertSceneGraph_LookupMaterial$04
    );

    $.Method({Static:false, Public:false}, "LookupMaterial", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [$asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent")]), 
      ConvertSceneGraph_LookupMaterial$05
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PopState", 
      JSIL.MethodSignature.Void, 
      ConvertSceneGraph_PopState
    );

    $.Field({Static:false, Public:false}, "_convertedScene", $asm0B.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_predecessors", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]));

    $.Field({Static:false, Public:false}, "_currentNode", $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"));

    $.Field({Static:false, Public:false}, "_matMap", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.MaterialComponent"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));

    $.Field({Static:false, Public:false}, "_lightMatMap", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));

    $.Field({Static:false, Public:false}, "_pbrComponent", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));

    $.Field({Static:false, Public:false}, "_boneContainers", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ConvexHullShape */ 

(function ConvexHullShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConvexHullShapeImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConvexHullShapeImp.AddPoint)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConvexHullShapeImp.GetNumPoints)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConvexHullShapeImp.GetScaledPoint)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConvexHullShapeImp.GetUnscaledPoints)) ();
  };


  function ConvexHullShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ConvexHullShape_AddPoint (point) {
    var convexHullShape = $thisType.$Cast($IM00().Call(this._convexHullShapeImp, null));
    $IM01().Call(convexHullShape._convexHullShapeImp, null, point.MemberwiseClone());
  }; 

  function ConvexHullShape_GetNumPoints () {
    return $IM02().Call(this._convexHullShapeImp, null);
  }; 

  function ConvexHullShape_GetScaledPoint (index) {
    return $IM03().Call(this._convexHullShapeImp, null, index);
  }; 

  function ConvexHullShape_GetUnscaledPoints () {
    return $IM04().Call(this._convexHullShapeImp, null);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.ConvexHullShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ConvexHullShape__ctor
    );

    $.Method({Static:false, Public:true }, "AddPoint", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      ConvexHullShape_AddPoint
    );

    $.Method({Static:false, Public:true }, "GetNumPoints", 
      JSIL.MethodSignature.Return($.Int32), 
      ConvexHullShape_GetNumPoints
    );

    $.Method({Static:false, Public:true }, "GetScaledPoint", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$.Int32]), 
      ConvexHullShape_GetScaledPoint
    );

    $.Method({Static:false, Public:true }, "GetUnscaledPoints", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")])), 
      ConvexHullShape_GetUnscaledPoints
    );

    $.Field({Static:false, Public:false}, "_convexHullShapeImp", $asm03.TypeRef("Fusee.Engine.Common.IConvexHullShapeImp"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Cube */ 

(function Cube$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function Cube__ctor () {
    $T00().prototype._ctor.call(this);
    var expr_10 = JSIL.Array.New($T02(), 24);
    var float = new ($T02())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = 0.5;
    expr_10[0] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = 0.5;
    expr_10[1] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = 0.5;
    expr_10[2] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = 0.5;
    expr_10[3] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = -0.5;
    expr_10[4] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = -0.5;
    expr_10[5] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = 0.5;
    expr_10[6] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = 0.5;
    expr_10[7] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = -0.5;
    expr_10[8] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = -0.5;
    expr_10[9] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = -0.5;
    expr_10[10] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = -0.5;
    expr_10[11] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = 0.5;
    expr_10[12] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = 0.5;
    expr_10[13] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = -0.5;
    expr_10[14] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = -0.5;
    expr_10[15] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = 0.5;
    expr_10[16] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = -0.5;
    expr_10[17] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = -0.5;
    expr_10[18] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = 0.5;
    expr_10[19] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = -0.5;
    expr_10[20] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = 0.5;
    expr_10[21] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = 0.5;
    expr_10[22] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = -0.5;
    expr_10[23] = float.MemberwiseClone();
    this.set_Vertices(expr_10);
    this.set_Triangles(JSIL.Array.New($T03(), [0, 2, 1, 0, 3, 2, 4, 6, 5, 4, 7, 6, 8, 10, 9, 8, 11, 10, 12, 14, 13, 12, 15, 14, 16, 18, 17, 16, 19, 18, 20, 22, 21, 20, 23, 22]));
    this.set_Normals(JSIL.Array.New($T02(), [$S00().Construct(0, 0, 1), $S00().Construct(0, 0, 1), $S00().Construct(0, 0, 1), $S00().Construct(0, 0, 1), $S00().Construct(1, 0, 0), $S00().Construct(1, 0, 0), $S00().Construct(1, 0, 0), $S00().Construct(1, 0, 0), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(-1, 0, 0), $S00().Construct(-1, 0, 0), $S00().Construct(-1, 0, 0), $S00().Construct(-1, 0, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, -1, 0), $S00().Construct(0, -1, 0), $S00().Construct(0, -1, 0), $S00().Construct(0, -1, 0)]));
    this.set_UVs(JSIL.Array.New($T04(), [$S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0)]));
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
      Name: "Fusee.Engine.Core.Cube", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Cube__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.CylinderShape */ 

(function CylinderShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICylinderShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICylinderShapeImp.get_HalfExtents)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICylinderShapeImp.get_Radius)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICylinderShapeImp.get_UpAxis)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function CylinderShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function CylinderShape_get_HalfExtents () {
    return $IM00().Call(this._cylinderShapeImp, null);
  }; 

  function CylinderShape_get_LocalScaling () {
    return $IM01().Call(this._cylinderShapeImp, null);
  }; 

  function CylinderShape_get_Margin () {
    return $IM02().Call(this._cylinderShapeImp, null);
  }; 

  function CylinderShape_get_Radius () {
    return $IM03().Call(this._cylinderShapeImp, null);
  }; 

  function CylinderShape_get_UpAxis () {
    var upAxis = ($IM04().Call(this._cylinderShapeImp, null) | 0);
    return +upAxis;
  }; 

  function CylinderShape_set_LocalScaling (value) {
    var cylinderShape = $thisType.$Cast($IM05().Call(this._cylinderShapeImp, null));
    (cylinderShape._cylinderShapeImp.LocalScaling = value.MemberwiseClone());
  }; 

  function CylinderShape_set_Margin (value) {
    var cylinderShape = $thisType.$Cast($IM05().Call(this._cylinderShapeImp, null));
    $IM06().Call(cylinderShape._cylinderShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.CylinderShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CylinderShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_HalfExtents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      CylinderShape_get_HalfExtents
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LocalScaling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      CylinderShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      CylinderShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      JSIL.MethodSignature.Return($.Single), 
      CylinderShape_get_Radius
    );

    $.Method({Static:false, Public:true }, "get_UpAxis", 
      JSIL.MethodSignature.Return($.Single), 
      CylinderShape_get_UpAxis
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LocalScaling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      CylinderShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      CylinderShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_cylinderShapeImp", $asm03.TypeRef("Fusee.Engine.Common.ICylinderShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalScaling", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "HalfExtents", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "Radius", $.Single);

    $.Property({Static:false, Public:true }, "UpAxis", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.DynamicWorld */ 

(function DynamicWorld$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IBoxShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.BoxShape)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICapsuleShapeImp)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Engine.Core.CapsuleShape)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICompoundShapeImp)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Engine.Core.CompoundShape)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeShapeImp)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.ConeShape)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeTwistConstraintImp)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.ConeTwistConstraint)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConvexHullShapeImp)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Fusee.Engine.Core.ConvexHullShape)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICylinderShapeImp)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Engine.Core.CylinderShape)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm03.Fusee.Engine.Common.IEmptyShapeImp)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm04.Fusee.Engine.Core.EmptyShape)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGearConstraintImp)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm04.Fusee.Engine.Core.GearConstraint)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm04.Fusee.Engine.Core.Generic6DofConstraint)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Convert)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGImpactMeshShapeImp)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm04.Fusee.Engine.Core.GImpactMeshShape)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm04.Fusee.Engine.Core.HingeConstraint)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize(System.Array.Of($asm0F.System.Single))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMultiSphereShapeImp)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm04.Fusee.Engine.Core.MultiSphereShape)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm04.Fusee.Engine.Core.Point2PointConstraint)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm04.$lPrivateImplementationDetails$g)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm04.Fusee.Engine.Core.StaticPlaneShape)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm04.Fusee.Engine.Core.SphereShape)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm12.System.Diagnostics.Debug)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm04.Fusee.Engine.Core.SliderConstraint)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISphereShapeImp)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm03.Fusee.Engine.Common.IStaticPlaneShapeImp)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IBoxShapeImp, [$asm0F.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IBoxShapeImp, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IBoxShapeImp, [$asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IConeTwistConstraintImp, [$asm03.Fusee.Engine.Common.IRigidBodyImp, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IConeTwistConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm03.Fusee.Engine.Common.IRigidBodyImp, 
        $asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IConvexHullShapeImp")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IConvexHullShapeImp, [System.Array.Of($asm0A.Fusee.Math.Core.float3), $asm0F.System.Boolean]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.ICylinderShapeImp, [$asm0F.System.Single]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.ICylinderShapeImp, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.ICylinderShapeImp, [$asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm0A.Fusee.Math.Core.float4x4, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm03.Fusee.Engine.Common.IRigidBodyImp, 
        $asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.System.UInt16]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IHingeConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm0A.Fusee.Math.Core.float4x4, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IHingeConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm0A.Fusee.Math.Core.float3, 
        $asm0A.Fusee.Math.Core.float3, $asm0F.System.Boolean
      ]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IHingeConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm03.Fusee.Engine.Common.IRigidBodyImp, 
        $asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float3, 
        $asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float3, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IHingeConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm03.Fusee.Engine.Common.IRigidBodyImp, 
        $asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp, [$asm03.Fusee.Engine.Common.IRigidBodyImp, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm03.Fusee.Engine.Common.IRigidBodyImp, 
        $asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float3
      ]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.String")))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.ISliderConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm03.Fusee.Engine.Common.IRigidBodyImp, 
        $asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm03.Fusee.Engine.Common.ISliderConstraintImp, [
        $asm03.Fusee.Engine.Common.IRigidBodyImp, $asm0A.Fusee.Math.Core.float4x4, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddBoxShape)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_UserObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddCapsuleShape)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddCompoundShape)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddConeShape)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddConeTwistConstraint)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.set_UserObject)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddConvexHullShape)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddCylinderShape)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddEmptyShape)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddGearConstraint)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddGeneric6DofConstraint)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddGImpactMeshShape)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddHingeConstraint)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddMultiSphereShape)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddPoint2PointConstraint)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddRigidBody)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.set_UserObject)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddSliderConstraint)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddSphereShape)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.AddStaticPlaneShape)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.Dispose)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.get_Gravity)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.GetRigidBody)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.NumberConstraints)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.NumberRigidBodies)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm03.Fusee.Engine.Common.IDynamicWorldImp.StepSimulation)) ();
  };


  function DynamicWorld__ctor (dynamicWorld) {
    this._dwi = dynamicWorld;
  }; 

  function DynamicWorld_AddBoxShape$00 (boxHalfExtents) {
    var boxShapeImp = $S00().CallVirtual($IM00(), null, this._dwi, boxHalfExtents);
    var boxShape = new ($T03())();
    boxShape._boxShapeImp = boxShapeImp;
    $IM01().Call(boxShapeImp, null, boxShape);
    return boxShape;
  }; 

  function DynamicWorld_AddBoxShape$01 (boxHalfExtentsX, boxHalfExtentsY, boxHalfExtentsZ) {
    var boxShapeImp = $S01().CallVirtual($IM00(), null, this._dwi, boxHalfExtentsX, boxHalfExtentsY, boxHalfExtentsZ);
    var boxShape = new ($T03())();
    boxShape._boxShapeImp = boxShapeImp;
    $IM01().Call(boxShapeImp, null, boxShape);
    return boxShape;
  }; 

  function DynamicWorld_AddBoxShape$02 (boxHalfExtents) {
    var boxShapeImp = $S02().CallVirtual($IM00(), null, this._dwi, boxHalfExtents.MemberwiseClone());
    var boxShape = new ($T03())();
    boxShape._boxShapeImp = boxShapeImp;
    $IM01().Call(boxShapeImp, null, boxShape);
    return boxShape;
  }; 

  function DynamicWorld_AddCapsuleShape (radius, height) {
    var capsuleShapeImp = $IM02().Call(this._dwi, null, radius, height);
    var capsuleShape = new ($T07())();
    capsuleShape._capsuleShapeImp = capsuleShapeImp;
    $IM01().Call(capsuleShapeImp, null, capsuleShape);
    return capsuleShape;
  }; 

  function DynamicWorld_AddCompoundShape (enableDynamicAabbTree) {
    var compoundShapeImp = $IM03().Call(this._dwi, null, enableDynamicAabbTree);
    var compoundShape = new ($T0A())();
    compoundShape._compoundShapeImp = compoundShapeImp;
    $IM01().Call(compoundShapeImp, null, compoundShape);
    return compoundShape;
  }; 

  function DynamicWorld_AddConeShape (radius, height) {
    var coneShapeImp = $IM04().Call(this._dwi, null, radius, height);
    var coneShape = new ($T0C())();
    coneShape._coneShapeImp = coneShapeImp;
    $IM01().Call(coneShapeImp, null, coneShape);
    return coneShape;
  }; 

  function DynamicWorld_AddConeTwistConstraint$03 (rigidBodyA, rbAFrame) {
    var coneTwistConstraintImp = $S03().CallVirtual($IM05(), null, this._dwi, rigidBodyA._iRigidBodyImp, rbAFrame.MemberwiseClone());
    var coneTwistConstraint = new ($T10())();
    coneTwistConstraint._iCTConstraintImp = coneTwistConstraintImp;
    $IM06().Call(coneTwistConstraintImp, null, coneTwistConstraint);
    return coneTwistConstraint;
  }; 

  function DynamicWorld_AddConeTwistConstraint$04 (rigidBodyA, rigidBodyB, rbAFrame, rbBFrame) {
    var coneTwistConstraintImp = $S04().CallVirtual($IM05(), null, this._dwi, rigidBodyA._iRigidBodyImp, rigidBodyB._iRigidBodyImp, rbAFrame.MemberwiseClone(), rbBFrame.MemberwiseClone());
    var coneTwistConstraint = new ($T10())();
    coneTwistConstraint._iCTConstraintImp = coneTwistConstraintImp;
    $IM06().Call(coneTwistConstraintImp, null, coneTwistConstraint);
    return coneTwistConstraint;
  }; 

  function DynamicWorld_AddConvexHullShape$05 () {
    var convexHullShapeImp = $S05().CallVirtual($IM07(), null, this._dwi);
    var convexHullShape = new ($T13())();
    convexHullShape._convexHullShapeImp = convexHullShapeImp;
    $IM01().Call(convexHullShapeImp, null, convexHullShape);
    return convexHullShape;
  }; 

  function DynamicWorld_AddConvexHullShape$06 (points, optimized) {
    var convexHullShapeImp = $S06().CallVirtual($IM07(), null, this._dwi, points, optimized);
    var convexHullShape = new ($T13())();
    convexHullShape._convexHullShapeImp = convexHullShapeImp;
    $IM01().Call(convexHullShapeImp, null, convexHullShape);
    return convexHullShape;
  }; 

  function DynamicWorld_AddCylinderShape$07 (halfExtents) {
    var cylinderShapeImp = $S07().CallVirtual($IM08(), null, this._dwi, halfExtents);
    var cylinderShape = new ($T16())();
    cylinderShape._cylinderShapeImp = cylinderShapeImp;
    $IM01().Call(cylinderShapeImp, null, cylinderShape);
    return cylinderShape;
  }; 

  function DynamicWorld_AddCylinderShape$08 (halfExtentsX, halfExtentsY, halfExtentsZ) {
    var cylinderShapeImp = $S08().CallVirtual($IM08(), null, this._dwi, halfExtentsX, halfExtentsY, halfExtentsZ);
    var cylinderShape = new ($T16())();
    cylinderShape._cylinderShapeImp = cylinderShapeImp;
    $IM01().Call(cylinderShapeImp, null, cylinderShape);
    return cylinderShape;
  }; 

  function DynamicWorld_AddCylinderShape$09 (halfExtents) {
    var cylinderShapeImp = $S09().CallVirtual($IM08(), null, this._dwi, halfExtents.MemberwiseClone());
    var cylinderShape = new ($T16())();
    cylinderShape._cylinderShapeImp = cylinderShapeImp;
    $IM01().Call(cylinderShapeImp, null, cylinderShape);
    return cylinderShape;
  }; 

  function DynamicWorld_AddEmptyShape () {
    var emptyShapeImp = $IM09().Call(this._dwi, null);
    var emptyShape = new ($T18())();
    emptyShape._emtyShapeImp = emptyShapeImp;
    $IM01().Call(emptyShapeImp, null, emptyShape);
    return emptyShape;
  }; 

  function DynamicWorld_AddGearConstraint (rigidBodyA, rigidBodyB, axisInA, axisInB, ratio) {
    var gearConstraintImp = $IM0A().Call(this._dwi, null, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      axisInA.MemberwiseClone(), 
      axisInB.MemberwiseClone(), 
      ratio
    );
    var gearConstraint = new ($T1A())();
    gearConstraint._iGearConstraintImp = gearConstraintImp;
    $IM06().Call(gearConstraintImp, null, gearConstraint);
    return gearConstraint;
  }; 

  function DynamicWorld_AddGeneric6DofConstraint$0A (rigidBodyA, frameInA, useReferenceFrameA) {
    var generic6DofConstraintImp = $S0A().CallVirtual($IM0B(), null, this._dwi, rigidBodyA._iRigidBodyImp, frameInA.MemberwiseClone(), useReferenceFrameA);
    var generic6DofConstraint = new ($T1C())();
    generic6DofConstraint._IG6DofConstraintImp = generic6DofConstraintImp;
    $IM06().Call(generic6DofConstraintImp, null, generic6DofConstraint);
    return generic6DofConstraint;
  }; 

  function DynamicWorld_AddGeneric6DofConstraint$0B (rigidBodyA, rigidBodyB, frameInA, frameInB, useReferenceFrameA) {
    var generic6DofConstraintImp = $S0B().CallVirtual($IM0B(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      frameInA.MemberwiseClone(), 
      frameInB.MemberwiseClone(), 
      useReferenceFrameA
    );
    var generic6DofConstraint = new ($T1C())();
    generic6DofConstraint._IG6DofConstraintImp = generic6DofConstraintImp;
    $IM06().Call(generic6DofConstraintImp, null, generic6DofConstraint);
    return generic6DofConstraint;
  }; 

  function DynamicWorld_AddGImpactMeshShape (mesh) {
    var array = JSIL.Array.New($T1F(), mesh.get_Triangles().length);

    for (var i = 0; i < (mesh.get_Triangles().length | 0); i = ((i + 1) | 0)) {
      array[i] = ($S0C().CallStatic($T21(), "ToInt32", null, mesh.get_Triangles()[i]) | 0);
    }
    var num = (mesh.get_Vertices().length | 0);
    var array2 = JSIL.Array.New($T05(), num);
    array2 = mesh.get_Vertices();
    var iGImpactMeshShapeImp = $IM0C().Call(this._dwi, null, array, mesh.get_Vertices());
    var gImpactMeshShape = new ($T23())();
    gImpactMeshShape._gImpactMeshShapeImp = iGImpactMeshShapeImp;
    $IM01().Call(iGImpactMeshShapeImp, null, gImpactMeshShape);
    return gImpactMeshShape;
  }; 

  function DynamicWorld_AddHingeConstraint$0C (rigidBodyA, frameInA, useReferenceFrameA) {
    var hingeConstraintImp = $S0D().CallVirtual($IM0D(), null, this._dwi, rigidBodyA._iRigidBodyImp, frameInA.MemberwiseClone(), useReferenceFrameA);
    var hingeConstraint = new ($T25())();
    hingeConstraint._iHConstraintImp = hingeConstraintImp;
    $IM06().Call(hingeConstraintImp, null, hingeConstraint);
    return hingeConstraint;
  }; 

  function DynamicWorld_AddHingeConstraint$0D (rigidBodyA, pivotInA, axisInA, useReferenceFrameA) {
    var hingeConstraintImp = $S0E().CallVirtual($IM0D(), null, this._dwi, rigidBodyA._iRigidBodyImp, pivotInA.MemberwiseClone(), axisInA.MemberwiseClone(), useReferenceFrameA);
    var hingeConstraint = new ($T25())();
    hingeConstraint._iHConstraintImp = hingeConstraintImp;
    $IM06().Call(hingeConstraintImp, null, hingeConstraint);
    return hingeConstraint;
  }; 

  function DynamicWorld_AddHingeConstraint$0E (rigidBodyA, rigidBodyB, pivotInA, pivotInB, axisInA, axisInB, useReferenceFrameA) {
    var hingeConstraintImp = $S0F().CallVirtual($IM0D(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      pivotInA.MemberwiseClone(), 
      pivotInB.MemberwiseClone(), 
      axisInA.MemberwiseClone(), 
      axisInB.MemberwiseClone(), 
      useReferenceFrameA
    );
    var hingeConstraint = new ($T25())();
    hingeConstraint._iHConstraintImp = hingeConstraintImp;
    $IM06().Call(hingeConstraintImp, null, hingeConstraint);
    return hingeConstraint;
  }; 

  function DynamicWorld_AddHingeConstraint$0F (rigidBodyA, rigidBodyB, brAFrame, brBFrame, useReferenceFrameA) {
    var hingeConstraintImp = $S10().CallVirtual($IM0D(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      brAFrame.MemberwiseClone(), 
      brBFrame.MemberwiseClone(), 
      useReferenceFrameA
    );
    var hingeConstraint = new ($T25())();
    hingeConstraint._iHConstraintImp = hingeConstraintImp;
    $IM06().Call(hingeConstraintImp, null, hingeConstraint);
    return hingeConstraint;
  }; 

  function DynamicWorld_AddMultiSphereShape (positions, radi) {
    var multiSphereShapeImp = $IM0E().Call(this._dwi, null, positions, radi);
    var multiSphereShape = new ($T28())();
    multiSphereShape._multiSphereShapeImp = multiSphereShapeImp;
    $IM01().Call(multiSphereShapeImp, null, multiSphereShape);
    return multiSphereShape;
  }; 

  function DynamicWorld_AddPoint2PointConstraint$10 (rigidBodyA, pivotInA) {
    var point2PointConstraintImp = $S11().CallVirtual($IM0F(), null, this._dwi, rigidBodyA._iRigidBodyImp, pivotInA.MemberwiseClone());
    var point2PointConstraint = new ($T2A())();
    point2PointConstraint._iP2PConstraintImp = point2PointConstraintImp;
    $IM06().Call(point2PointConstraintImp, null, point2PointConstraint);
    return point2PointConstraint;
  }; 

  function DynamicWorld_AddPoint2PointConstraint$11 (rigidBodyA, rigidBodyB, pivotInA, pivotInB) {
    var point2PointConstraintImp = $S12().CallVirtual($IM0F(), null, this._dwi, rigidBodyA._iRigidBodyImp, rigidBodyB._iRigidBodyImp, pivotInA.MemberwiseClone(), pivotInB.MemberwiseClone());
    var point2PointConstraint = new ($T2A())();
    point2PointConstraint._iP2PConstraintImp = point2PointConstraintImp;
    $IM06().Call(point2PointConstraintImp, null, point2PointConstraint);
    return point2PointConstraint;
  }; 

  function DynamicWorld_AddRigidBody (mass, position, orientation, colShape) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var text = (JSIL.GetType(colShape)).toString();
          var text2 = text;
          var num = ($T2F().ComputeStringHash(text2) >>> 0);
          if (num <= 1844105875) {
            if (num <= 1319428916) {
              if (num !== 505077084) {
                if (num === 1319428916) {
                  if (text2 == "Fusee.Engine.MultiSphereShape") {
                    var multiSphereShape = $T28().$Cast(colShape);
                    var rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), multiSphereShape._multiSphereShapeImp);
                    break $labelgroup0;
                  }
                }
              } else if (text2 == "Fusee.Engine.CylinderShape") {
                var cylinderShape = $T16().$Cast(colShape);
                rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), cylinderShape._cylinderShapeImp);
                break $labelgroup0;
              }
            } else if (num !== 1574939861) {
              if (num !== 1681802816) {
                if (num === 1844105875) {
                  if (text2 == "Fusee.Engine.BoxShape") {
                    var boxShape = $T03().$Cast(colShape);
                    rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), boxShape._boxShapeImp);
                    break $labelgroup0;
                  }
                }
              } else if (text2 == "Fusee.Engine.StaticPlaneShape") {
                var staticPlaneShape = $T31().$Cast(colShape);
                rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), staticPlaneShape._staticPlaneShapeImp);
                break $labelgroup0;
              }
            } else if (text2 == "Fusee.Engine.CompoundShape") {
              var compoundShape = $T0A().$Cast(colShape);
              rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), compoundShape._compoundShapeImp);
              break $labelgroup0;
            }
          } else if (num <= 2828003299) {
            if (num !== 2569625669) {
              if (num !== 2615718639) {
                if (num === 2828003299) {
                  if (text2 == "Fusee.Engine.ConeShape") {
                    var coneShape = $T0C().$Cast(colShape);
                    rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), coneShape._coneShapeImp);
                    break $labelgroup0;
                  }
                }
              } else if (text2 == "Fusee.Engine.EmptyShape") {
                var emptyShape = $T18().$Cast(colShape);
                rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), emptyShape._emtyShapeImp);
                break $labelgroup0;
              }
            } else if (text2 == "Fusee.Engine.CapsuleShape") {
              var capsuleShape = $T07().$Cast(colShape);
              rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), capsuleShape._capsuleShapeImp);
              break $labelgroup0;
            }
          } else if (num !== 3405169718) {
            if (num !== 3680950897) {
              if (num === 4129887654) {
                if (text2 == "Fusee.Engine.GImpactMeshShape") {
                  var gImpactMeshShape = $T23().$Cast(colShape);
                  rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), gImpactMeshShape._gImpactMeshShapeImp);
                  break $labelgroup0;
                }
              }
            } else if (text2 == "Fusee.Engine.SphereShape") {
              var sphereShape = $T32().$Cast(colShape);
              rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), sphereShape._sphereShapeImp);
              break $labelgroup0;
            }
          } else if (text2 == "Fusee.Engine.ConvexHullShape") {
            var convexHullShape = $T13().$Cast(colShape);
            rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), convexHullShape._convexHullShapeImp);
            break $labelgroup0;
          }
          var emptyShape2 = new ($T18())();
          $S13().CallStatic($T33(), "WriteLine", null, "default");
          rigidBodyImp = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), emptyShape2._emtyShapeImp);
          break $labelgroup0;

      }
    }
    /* Original label IL_361 */ 
    var rigidBody = new ($T0D())();
    rigidBody._iRigidBodyImp = rigidBodyImp;
    $IM11().Call(rigidBodyImp, null, rigidBody);
    return rigidBody;
  }; 

  function DynamicWorld_AddSliderConstraint$12 (rigidBodyA, rigidBodyB, frameInA, frameInB, useLinearReferenceFrameA) {
    var sliderConstraintImp = $S14().CallVirtual($IM12(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      frameInA.MemberwiseClone(), 
      frameInB.MemberwiseClone(), 
      useLinearReferenceFrameA
    );
    var sliderConstraint = new ($T35())();
    sliderConstraint._iSliderConstraintImp = sliderConstraintImp;
    $IM06().Call(sliderConstraintImp, null, sliderConstraint);
    return sliderConstraint;
  }; 

  function DynamicWorld_AddSliderConstraint$13 (rigidBodyA, frameInA, useLinearReferenceFrameA) {
    var sliderConstraintImp = $S15().CallVirtual($IM12(), null, this._dwi, rigidBodyA._iRigidBodyImp, frameInA.MemberwiseClone(), useLinearReferenceFrameA);
    var sliderConstraint = new ($T35())();
    sliderConstraint._iSliderConstraintImp = sliderConstraintImp;
    $IM06().Call(sliderConstraintImp, null, sliderConstraint);
    return sliderConstraint;
  }; 

  function DynamicWorld_AddSphereShape (radius) {
    var sphereShapeImp = $IM13().Call(this._dwi, null, radius);
    var sphereShape = new ($T32())();
    sphereShape._sphereShapeImp = sphereShapeImp;
    $IM01().Call(sphereShapeImp, null, sphereShape);
    return sphereShape;
  }; 

  function DynamicWorld_AddStaticPlaneShape (planeNormal, planeConstant) {
    var staticPlaneShapeImp = $IM14().Call(this._dwi, null, planeNormal.MemberwiseClone(), planeConstant);
    var staticPlaneShape = new ($T31())();
    staticPlaneShape._staticPlaneShapeImp = staticPlaneShapeImp;
    $IM01().Call(staticPlaneShapeImp, null, staticPlaneShape);
    return staticPlaneShape;
  }; 

  function DynamicWorld_Dispose () {
    $IM15().Call(this._dwi, null);
  }; 

  function DynamicWorld_get_Gravity () {
    return $IM16().Call(this._dwi, null);
  }; 

  function DynamicWorld_GetRigidBody (i) {
    var rigidBody = $IM17().Call(this._dwi, null, i);
    return $T0D().$Cast($IM18().Call(rigidBody, null));
  }; 

  function DynamicWorld_NumberConstraints () {
    return $IM19().Call(this._dwi, null);
  }; 

  function DynamicWorld_NumberRigidBodies () {
    return $IM1A().Call(this._dwi, null);
  }; 

  function DynamicWorld_set_Gravity (value) {
    (this._dwi.Gravity = value.MemberwiseClone());
  }; 

  function DynamicWorld_StepSimulation (timeSteps, maxSubSteps, fixedTimeSteps) {
    return $IM1B().Call(this._dwi, null, timeSteps, maxSubSteps, fixedTimeSteps);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.DynamicWorld", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IDynamicWorldImp")), 
      DynamicWorld__ctor
    )
      .Parameter(0, "dynamicWorld", function (_) {
          _.Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"))
        });

    $.Method({Static:false, Public:true }, "AddBoxShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.BoxShape"), [$.Single]), 
      DynamicWorld_AddBoxShape$00
    );

    $.Method({Static:false, Public:true }, "AddBoxShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.BoxShape"), [
          $.Single, $.Single, 
          $.Single
        ]), 
      DynamicWorld_AddBoxShape$01
    );

    $.Method({Static:false, Public:true }, "AddBoxShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.BoxShape"), [$asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      DynamicWorld_AddBoxShape$02
    );

    $.Method({Static:false, Public:true }, "AddCapsuleShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.CapsuleShape"), [$.Single, $.Single]), 
      DynamicWorld_AddCapsuleShape
    );

    $.Method({Static:false, Public:true }, "AddCompoundShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.CompoundShape"), [$.Boolean]), 
      DynamicWorld_AddCompoundShape
    );

    $.Method({Static:false, Public:true }, "AddConeShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ConeShape"), [$.Single, $.Single]), 
      DynamicWorld_AddConeShape
    );

    $.Method({Static:false, Public:true }, "AddConeTwistConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ConeTwistConstraint"), [$asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]), 
      DynamicWorld_AddConeTwistConstraint$03
    );

    $.Method({Static:false, Public:true }, "AddConeTwistConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ConeTwistConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), 
          $asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")
        ]), 
      DynamicWorld_AddConeTwistConstraint$04
    );

    $.Method({Static:false, Public:true }, "AddConvexHullShape", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.ConvexHullShape")), 
      DynamicWorld_AddConvexHullShape$05
    );

    $.Method({Static:false, Public:true }, "AddConvexHullShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ConvexHullShape"), [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $.Boolean]), 
      DynamicWorld_AddConvexHullShape$06
    );

    $.Method({Static:false, Public:true }, "AddCylinderShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.CylinderShape"), [$.Single]), 
      DynamicWorld_AddCylinderShape$07
    );

    $.Method({Static:false, Public:true }, "AddCylinderShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.CylinderShape"), [
          $.Single, $.Single, 
          $.Single
        ]), 
      DynamicWorld_AddCylinderShape$08
    );

    $.Method({Static:false, Public:true }, "AddCylinderShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.CylinderShape"), [$asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      DynamicWorld_AddCylinderShape$09
    );

    $.Method({Static:false, Public:true }, "AddEmptyShape", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.EmptyShape")), 
      DynamicWorld_AddEmptyShape
    );

    $.Method({Static:false, Public:true }, "AddGearConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.GearConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $.Single
        ]), 
      DynamicWorld_AddGearConstraint
    );

    $.Method({Static:false, Public:true }, "AddGeneric6DofConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Generic6DofConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]), 
      DynamicWorld_AddGeneric6DofConstraint$0A
    );

    $.Method({Static:false, Public:true }, "AddGeneric6DofConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Generic6DofConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), 
          $asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]), 
      DynamicWorld_AddGeneric6DofConstraint$0B
    );

    $.Method({Static:false, Public:true }, "AddGImpactMeshShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.GImpactMeshShape"), [$asm0B.TypeRef("Fusee.Serialization.Mesh")]), 
      DynamicWorld_AddGImpactMeshShape
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.HingeConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]), 
      DynamicWorld_AddHingeConstraint$0C
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.HingeConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $.Boolean
        ]), 
      DynamicWorld_AddHingeConstraint$0D
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.HingeConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $.Boolean
        ]), 
      DynamicWorld_AddHingeConstraint$0E
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.HingeConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), 
          $asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]), 
      DynamicWorld_AddHingeConstraint$0F
    );

    $.Method({Static:false, Public:true }, "AddMultiSphereShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.MultiSphereShape"), [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $jsilcore.TypeRef("System.Array", [$.Single])]), 
      DynamicWorld_AddMultiSphereShape
    );

    $.Method({Static:false, Public:true }, "AddPoint2PointConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Point2PointConstraint"), [$asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      DynamicWorld_AddPoint2PointConstraint$10
    );

    $.Method({Static:false, Public:true }, "AddPoint2PointConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Point2PointConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3")
        ]), 
      DynamicWorld_AddPoint2PointConstraint$11
    );

    $.Method({Static:false, Public:true }, "AddRigidBody", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.RigidBody"), [
          $.Single, $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm04.TypeRef("Fusee.Engine.Core.CollisionShape")
        ]), 
      DynamicWorld_AddRigidBody
    );

    $.Method({Static:false, Public:true }, "AddSliderConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.SliderConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), 
          $asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]), 
      DynamicWorld_AddSliderConstraint$12
    );

    $.Method({Static:false, Public:true }, "AddSliderConstraint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.SliderConstraint"), [
          $asm04.TypeRef("Fusee.Engine.Core.RigidBody"), $asm0A.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]), 
      DynamicWorld_AddSliderConstraint$13
    );

    $.Method({Static:false, Public:true }, "AddSphereShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.SphereShape"), [$.Single]), 
      DynamicWorld_AddSphereShape
    );

    $.Method({Static:false, Public:true }, "AddStaticPlaneShape", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.StaticPlaneShape"), [$asm0A.TypeRef("Fusee.Math.Core.float3"), $.Single]), 
      DynamicWorld_AddStaticPlaneShape
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      DynamicWorld_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Gravity", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      DynamicWorld_get_Gravity
    );

    $.Method({Static:false, Public:true }, "GetRigidBody", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.RigidBody"), [$.Int32]), 
      DynamicWorld_GetRigidBody
    );

    $.Method({Static:false, Public:true }, "NumberConstraints", 
      JSIL.MethodSignature.Return($.Int32), 
      DynamicWorld_NumberConstraints
    );

    $.Method({Static:false, Public:true }, "NumberRigidBodies", 
      JSIL.MethodSignature.Return($.Int32), 
      DynamicWorld_NumberRigidBodies
    );

    $.Method({Static:false, Public:true }, "set_Gravity", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      DynamicWorld_set_Gravity
    );

    $.Method({Static:false, Public:true }, "StepSimulation", 
      new JSIL.MethodSignature($.Int32, [
          $.Single, $.Int32, 
          $.Single
        ]), 
      DynamicWorld_StepSimulation
    );

    $.Field({Static:false, Public:false}, "_dwi", $asm03.TypeRef("Fusee.Engine.Common.IDynamicWorldImp"));

    $.Property({Static:false, Public:true }, "Gravity", $asm0A.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.EmptyShape */ 

(function EmptyShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.BoxShape)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function EmptyShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function EmptyShape_get_Margin () {
    return $IM00().Call(this._emtyShapeImp, null);
  }; 

  function EmptyShape_set_Margin (value) {
    var boxShape = $T03().$Cast($IM01().Call(this._emtyShapeImp, null));
    $IM02().Call(boxShape._boxShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.EmptyShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EmptyShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      EmptyShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      EmptyShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_emtyShapeImp", $asm03.TypeRef("Fusee.Engine.Common.IEmptyShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Core.GlyphOnMap */ 

(function GlyphOnMap$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Core.GlyphOnMap", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "BitmapW", $.Single);

    $.Field({Static:false, Public:true }, "BitmapH", $.Single);

    $.Field({Static:false, Public:true }, "BitmapL", $.Single);

    $.Field({Static:false, Public:true }, "BitmapT", $.Single);

    $.Field({Static:false, Public:true }, "TexOffX", $.Single);

    $.Field({Static:false, Public:true }, "TexOffY", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.FontMap */ 

(function FontMap$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Base.Core.Font)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm04.Fusee.Engine.Core.GlyphOnMap))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Char)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Fusee.Base.Common.GlyphInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm0F.System.Char))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm12.System.Diagnostics.Debug)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Fusee.Base.Common.ImagePixelFormat)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Fusee.Base.Common.ColorFormat)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Fusee.Engine.Core.GlyphOnMap)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Text.StringBuilder)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm04.Fusee.Engine.Core.GlyphOnMap), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.String")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.Texture, [
        System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32, 
        $asm0F.System.Int32, $asm00.Fusee.Base.Common.ImagePixelFormat
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Text.StringBuilder, [$asm0F.System.Int32]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Text.StringBuilder, [$asm0F.System.Char]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_Width)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_IsEmpty)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_Height)) ();
  };


  function FontMap__ctor (font, pixelHeight, optimizeFontTexRes, alphabet) {
    if (font === null) {
      throw $S00().Construct("font");
    }
    if ((pixelHeight >>> 0) <= 0) {
      throw $S01().Construct("pixelHeight");
    }
    this._optimizeFontTexRes = optimizeFontTexRes;
    this._font = font;
    this._pixelHeight = (pixelHeight >>> 0);
    this._glyphOnMapCache = $S02().Construct();
    this.set_Alphabet(alphabet);
  }; 

  function FontMap_FixTextKerning (vertices, text, scaleX) {
    var $temp00, $temp01, $temp02, $temp03;
    var flag = !(this.get_Font()).get_UseKerning();
    if (flag) {
      var result = vertices;
    } else {
      var num = 0;
      var num2 = 4;

      for (var i = 0; i < (((text.length | 0) - 1) | 0); i = ((i + 1) | 0)) {
        num += +((((this.get_Font()).GetKerning(
              (text[i]).charCodeAt(0), 
              (text[((i + 1) | 0)]).charCodeAt(0)
            )) | 0)) * +scaleX;
        var expr_51 = (($temp00 = num2, 
          num2 = ((num2 + 1) | 0), 
          $temp00) | 0);
        vertices[expr_51].x = +vertices[expr_51].x + num;
        var expr_66 = (($temp01 = num2, 
          num2 = ((num2 + 1) | 0), 
          $temp01) | 0);
        vertices[expr_66].x = +vertices[expr_66].x + num;
        var expr_7B = (($temp02 = num2, 
          num2 = ((num2 + 1) | 0), 
          $temp02) | 0);
        vertices[expr_7B].x = +vertices[expr_7B].x + num;
        var expr_90 = (($temp03 = num2, 
          num2 = ((num2 + 1) | 0), 
          $temp03) | 0);
        vertices[expr_90].x = +vertices[expr_90].x + num;
      }
      result = vertices;
    }
    return result;
  }; 

  function FontMap_get_Alphabet () {
    return this._alphabet;
  }; 

  function FontMap_get_Font () {
    return this._font;
  }; 

  function FontMap_get_Image () {
    var num9 = new JSIL.BoxedVariable(0);
    var num10 = new JSIL.BoxedVariable(0);
    var uptodate = this._uptodate;
    if (uptodate) {
      var image = this._image;
    } else {
      (this._font).set_PixelHeight(this._pixelHeight);
      var num = 0;
      var num2 = 0;
      var alphabet = this._alphabet;

      for (var i = 0; i < (alphabet.length | 0); i = ((i + 1) | 0)) {
        var c = (alphabet[i]);
        var glyphInfo = (this._font).GetGlyphInfo(c.charCodeAt(0)).MemberwiseClone();
        num += +glyphInfo.AdvanceX + 1;
        num2 += 1;
      }
      num = +((num / num2));
      var num3 = (Math.sqrt((+(JSIL.StringToCharArray(this._alphabet).length) * num) * Math.fround(+(this._pixelHeight))));
      var num4 = ((Math.pow(2, +(((Math.ceil((Math.log(num3) / Math.log(2)))) | 0)))) | 0);
      var flag = num4 > 4096;
      if (flag) {
        num4 = 4096;
        $S03().CallStatic($T10(), "WriteLine", null, "Font texture resolution automatically set to 4096 - consider to choose a lower font size");
      }
      if (this._optimizeFontTexRes) {
        var num5 = +((+num4 / num3));
        (this._font).set_PixelHeight(((+(this._pixelHeight) * num5) | 0));
      }
      this._image = $S04().Construct(JSIL.Array.New($T11(), Math.imul(num4, num4)), num4, num4, new ($T12())($T13().Intensity));
      var num6 = 0;
      var num7 = 0;
      var num8 = 0;
      var alphabet2 = this._alphabet;

      for (var j = 0; j < (alphabet2.length | 0); j = ((j + 1) | 0)) {
        var c2 = (alphabet2[j]);
        var imageData = (this._font).RenderGlyph(c2.charCodeAt(0), /* ref */ num9, /* ref */ num10);
        var flag2 = ((((num6 + ($IM00().Call(imageData, null) | 0)) | 0) + 1) | 0) >= num4;
        if (flag2) {
          num7 = ((num7 + num8) | 0);
          num8 = 0;
          num6 = 0;
        }
        var flag3 = !$IM01().Call(imageData, null);
        if (flag3) {
          (this._image).Blt(
            num6, 
            num7, 
            imageData, 
            0, 
            0, 
            0, 
            0
          );
        }
        var glyphOnMap = new ($T15())();
        glyphOnMap.BitmapW = +($IM00().Call(imageData, null));
        glyphOnMap.BitmapH = +($IM02().Call(imageData, null));
        glyphOnMap.BitmapL = +(num9.get());
        glyphOnMap.BitmapT = +(num10.get());
        glyphOnMap.TexOffX = +((+num6 / +num4));
        glyphOnMap.TexOffY = +((+num7 / +num4));
        var value = glyphOnMap;
        (this._glyphOnMapCache).set_Item(c2.charCodeAt(0), value.MemberwiseClone());
        num8 = ($T0E().Max(num8, $IM02().Call(imageData, null)) | 0);
        num6 = ((num6 + ((($IM00().Call(imageData, null) | 0) + 1) | 0)) | 0);
      }
      this._uptodate = true;
      image = this._image;
    }
    return image;
  }; 

  function FontMap_get_PixelHeight () {
    return this._pixelHeight;
  }; 

  function FontMap_get_Uptodate () {
    return this._uptodate;
  }; 

  function FontMap_GetGlyphOnMap (c) {
    return (this._glyphOnMapCache).get_Item(c);
  }; 

  function FontMap_Invalidate () {
    (this._glyphOnMapCache).Clear();
    this._uptodate = false;
  }; 

  function FontMap_set_Alphabet (value) {
    if (value === null) {
      var stringBuilder = $S05().Construct(224);

      for (var i = 32; i < 256; i = ((i + 1) | 0)) {
        $S06().CallVirtual("Append", null, stringBuilder, String.fromCharCode(i));
      }
      this._alphabet = stringBuilder.toString();
    } else {
      this._alphabet = value;
    }
    this.Invalidate();
  }; 

  function FontMap_set_Font (value) {
    this._font = value;
    this.Invalidate();
  }; 

  function FontMap_set_PixelHeight (value) {
    this._pixelHeight = (value >>> 0);
    this.Invalidate();
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.FontMap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Fusee.Base.Core.Font"), $.UInt32, 
          $.Boolean, $.String
        ]), 
      FontMap__ctor
    );

    $.Method({Static:false, Public:true }, "FixTextKerning", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), [
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $.String, 
          $.Single
        ]), 
      FontMap_FixTextKerning
    );

    $.Method({Static:false, Public:true }, "get_Alphabet", 
      JSIL.MethodSignature.Return($.String), 
      FontMap_get_Alphabet
    );

    $.Method({Static:false, Public:true }, "get_Font", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Fusee.Base.Core.Font")), 
      FontMap_get_Font
    );

    $.Method({Static:false, Public:true }, "get_Image", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.Texture")), 
      FontMap_get_Image
    );

    $.Method({Static:false, Public:true }, "get_PixelHeight", 
      JSIL.MethodSignature.Return($.UInt32), 
      FontMap_get_PixelHeight
    );

    $.Method({Static:false, Public:true }, "get_Uptodate", 
      JSIL.MethodSignature.Return($.Boolean), 
      FontMap_get_Uptodate
    );

    $.Method({Static:false, Public:true }, "GetGlyphOnMap", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.GlyphOnMap"), [$.UInt32]), 
      FontMap_GetGlyphOnMap
    );

    $.Method({Static:false, Public:false}, "Invalidate", 
      JSIL.MethodSignature.Void, 
      FontMap_Invalidate
    );

    $.Method({Static:false, Public:true }, "set_Alphabet", 
      JSIL.MethodSignature.Action($.String), 
      FontMap_set_Alphabet
    );

    $.Method({Static:false, Public:true }, "set_Font", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Fusee.Base.Core.Font")), 
      FontMap_set_Font
    );

    $.Method({Static:false, Public:true }, "set_PixelHeight", 
      JSIL.MethodSignature.Action($.UInt32), 
      FontMap_set_PixelHeight
    );

    $.Field({Static:false, Public:false}, "_font", $asm01.TypeRef("Fusee.Base.Core.Font"));

    $.Field({Static:false, Public:false}, "_image", $asm04.TypeRef("Fusee.Engine.Core.Texture"));

    $.Field({Static:false, Public:false}, "_pixelHeight", $.UInt32);

    $.Field({Static:false, Public:false}, "_alphabet", $.String);

    $.Field({Static:false, Public:false}, "_uptodate", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_glyphOnMapCache", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm04.TypeRef("Fusee.Engine.Core.GlyphOnMap")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_optimizeFontTexRes", $.Boolean);

    $.Property({Static:false, Public:true }, "Image", $asm04.TypeRef("Fusee.Engine.Core.Texture"));

    $.Property({Static:false, Public:true }, "Font", $asm01.TypeRef("Fusee.Base.Core.Font"));

    $.Property({Static:false, Public:true }, "PixelHeight", $.UInt32);

    $.Property({Static:false, Public:true }, "Alphabet", $.String);

    $.Property({Static:false, Public:true }, "Uptodate", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.GearConstraint */ 

(function GearConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.GetUid)) ();
  };


  function GearConstraint__ctor () {
  }; 

  function GearConstraint_get_RigidBodyA () {
    var userObject = $IM00().Call($IM01().Call(this._iGearConstraintImp, null), null);
    return $T03().$Cast(userObject);
  }; 

  function GearConstraint_get_RigidBodyB () {
    var userObject = $IM00().Call($IM02().Call(this._iGearConstraintImp, null), null);
    return $T03().$Cast(userObject);
  }; 

  function GearConstraint_GetUid () {
    return $IM03().Call(this._iGearConstraintImp, null);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.GearConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GearConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      GearConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      GearConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      JSIL.MethodSignature.Return($.Int32), 
      GearConstraint_GetUid
    );

    $.Field({Static:false, Public:false}, "_iGearConstraintImp", $asm03.TypeRef("Fusee.Engine.Common.IGearConstraintImp"));

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Generic6DofConstraint */ 

(function Generic6DofConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Void)) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.CalcAnchorPos)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.CalculateTransforms)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_AngularLowerLimit)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_AngularUpperLimit)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_CalculatedTransformA)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_CalculatedTransformB)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_FrameOffsetA)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_FrameOffsetB)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_LinearLowerLimit)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_LinearUpperLimit)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.get_UseFrameOffset)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.GetAngle)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.GetAxis)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.GetRelativePivotPosition)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.GetUid)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.IsLimited)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_UserObject)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.set_UseFrameOffset)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.SetAxis)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.SetFrames)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.SetLimit)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.TestAngularLimitMotor)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGeneric6DofConstraintImp.UpdateRhs)) ();
  };


  function Generic6DofConstraint__ctor () {
  }; 

  function Generic6DofConstraint_CalcAnchorPos () {
    $IM00().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_CalculateTransforms$00 () {
    $S00().CallVirtual($IM01(), null, this._IG6DofConstraintImp);
  }; 

  function Generic6DofConstraint_CalculateTransforms$01 (transA, transB) {
    $S01().CallVirtual($IM01(), null, this._IG6DofConstraintImp, transA.MemberwiseClone(), transB.MemberwiseClone());
  }; 

  function Generic6DofConstraint_get_AngularLowerLimit () {
    return $IM02().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_AngularUpperLimit () {
    return $IM03().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_CalculatedTransformA () {
    return $IM04().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_CalculatedTransformB () {
    return $IM05().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_FrameOffsetA () {
    return $IM06().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_FrameOffsetB () {
    return $IM07().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_LinearLowerLimit () {
    return $IM08().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_LinearUpperLimit () {
    return $IM09().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_get_RigidBodyA () {
    var userObject = $IM0A().Call($IM0B().Call(this._IG6DofConstraintImp, null), null);
    return $T05().$Cast(userObject);
  }; 

  function Generic6DofConstraint_get_RigidBodyB () {
    var userObject = $IM0A().Call($IM0C().Call(this._IG6DofConstraintImp, null), null);
    return $T05().$Cast(userObject);
  }; 

  function Generic6DofConstraint_get_UseFrameOffset () {
    return $IM0D().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_GetAngle (axisIndex) {
    return $IM0E().Call(this._IG6DofConstraintImp, null, axisIndex);
  }; 

  function Generic6DofConstraint_GetAxis (axisIndex) {
    return $IM0F().Call(this._IG6DofConstraintImp, null, axisIndex);
  }; 

  function Generic6DofConstraint_GetRelativePivotPosition (axisIndex) {
    return $IM10().Call(this._IG6DofConstraintImp, null, axisIndex);
  }; 

  function Generic6DofConstraint_GetUid () {
    return $IM11().Call(this._IG6DofConstraintImp, null);
  }; 

  function Generic6DofConstraint_IsLimited (limitIndex) {
    return $IM12().Call(this._IG6DofConstraintImp, null, limitIndex);
  }; 

  function Generic6DofConstraint_set_AngularLowerLimit (value) {
    var generic6DofConstraint = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (generic6DofConstraint._IG6DofConstraintImp.AngularLowerLimit = value.MemberwiseClone());
  }; 

  function Generic6DofConstraint_set_AngularUpperLimit (value) {
    var generic6DofConstraint = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (generic6DofConstraint._IG6DofConstraintImp.AngularUpperLimit = value.MemberwiseClone());
  }; 

  function Generic6DofConstraint_set_FrameOffsetA (value) {
    var generic6DofConstraint = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (generic6DofConstraint._IG6DofConstraintImp.FrameOffsetA = value.MemberwiseClone());
  }; 

  function Generic6DofConstraint_set_FrameOffsetB (value) {
    var generic6DofConstraint = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (generic6DofConstraint._IG6DofConstraintImp.FrameOffsetB = value.MemberwiseClone());
  }; 

  function Generic6DofConstraint_set_LinearLowerLimit (value) {
    var generic6DofConstraint = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (generic6DofConstraint._IG6DofConstraintImp.LinearLowerLimit = value.MemberwiseClone());
  }; 

  function Generic6DofConstraint_set_LinearUpperLimit (value) {
    var generic6DofConstraint = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (generic6DofConstraint._IG6DofConstraintImp.LinearUpperLimit = value.MemberwiseClone());
  }; 

  function Generic6DofConstraint_set_UseFrameOffset (value) {
    var generic6DofConstraint = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    $IM14().Call(generic6DofConstraint._IG6DofConstraintImp, null, value);
  }; 

  function Generic6DofConstraint_SetAxis (axis1, axis2) {
    $IM15().Call(this._IG6DofConstraintImp, null, axis1.MemberwiseClone(), axis2.MemberwiseClone());
  }; 

  function Generic6DofConstraint_SetFrames (frameA, frameB) {
    $IM16().Call(this._IG6DofConstraintImp, null, frameA.MemberwiseClone(), frameB.MemberwiseClone());
  }; 

  function Generic6DofConstraint_SetLimit (axis, lo, hi) {
    $IM17().Call(this._IG6DofConstraintImp, null, axis, lo, hi);
  }; 

  function Generic6DofConstraint_TestAngularLimitMotor (axisIndex) {
    return $IM18().Call(this._IG6DofConstraintImp, null, axisIndex);
  }; 

  function Generic6DofConstraint_UpdateRhs (timeStep) {
    $IM19().Call(this._IG6DofConstraintImp, null, timeStep);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Generic6DofConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Generic6DofConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "CalcAnchorPos", 
      JSIL.MethodSignature.Void, 
      Generic6DofConstraint_CalcAnchorPos
    );

    $.Method({Static:false, Public:true }, "CalculateTransforms", 
      JSIL.MethodSignature.Void, 
      Generic6DofConstraint_CalculateTransforms$00
    );

    $.Method({Static:false, Public:true }, "CalculateTransforms", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]), 
      Generic6DofConstraint_CalculateTransforms$01
    );

    $.Method({Static:false, Public:true }, "get_AngularLowerLimit", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_get_AngularLowerLimit
    );

    $.Method({Static:false, Public:true }, "get_AngularUpperLimit", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_get_AngularUpperLimit
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformA", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      Generic6DofConstraint_get_CalculatedTransformA
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformB", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      Generic6DofConstraint_get_CalculatedTransformB
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetA", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      Generic6DofConstraint_get_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetB", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      Generic6DofConstraint_get_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "get_LinearLowerLimit", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_get_LinearLowerLimit
    );

    $.Method({Static:false, Public:true }, "get_LinearUpperLimit", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_get_LinearUpperLimit
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      Generic6DofConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      Generic6DofConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_UseFrameOffset", 
      JSIL.MethodSignature.Return($.Boolean), 
      Generic6DofConstraint_get_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "GetAngle", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      Generic6DofConstraint_GetAngle
    );

    $.Method({Static:false, Public:true }, "GetAxis", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$.Int32]), 
      Generic6DofConstraint_GetAxis
    );

    $.Method({Static:false, Public:true }, "GetRelativePivotPosition", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      Generic6DofConstraint_GetRelativePivotPosition
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      JSIL.MethodSignature.Return($.Int32), 
      Generic6DofConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "IsLimited", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      Generic6DofConstraint_IsLimited
    );

    $.Method({Static:false, Public:true }, "set_AngularLowerLimit", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_set_AngularLowerLimit
    );

    $.Method({Static:false, Public:true }, "set_AngularUpperLimit", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_set_AngularUpperLimit
    );

    $.Method({Static:false, Public:true }, "set_FrameOffsetA", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      Generic6DofConstraint_set_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "set_FrameOffsetB", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      Generic6DofConstraint_set_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "set_LinearLowerLimit", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_set_LinearLowerLimit
    );

    $.Method({Static:false, Public:true }, "set_LinearUpperLimit", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Generic6DofConstraint_set_LinearUpperLimit
    );

    $.Method({Static:false, Public:true }, "set_UseFrameOffset", 
      JSIL.MethodSignature.Action($.Boolean), 
      Generic6DofConstraint_set_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "SetAxis", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      Generic6DofConstraint_SetAxis
    );

    $.Method({Static:false, Public:true }, "SetFrames", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]), 
      Generic6DofConstraint_SetFrames
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ]), 
      Generic6DofConstraint_SetLimit
    );

    $.Method({Static:false, Public:true }, "TestAngularLimitMotor", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      Generic6DofConstraint_TestAngularLimitMotor
    );

    $.Method({Static:false, Public:true }, "UpdateRhs", 
      JSIL.MethodSignature.Action($.Single), 
      Generic6DofConstraint_UpdateRhs
    );

    $.Field({Static:false, Public:false}, "_IG6DofConstraintImp", $asm03.TypeRef("Fusee.Engine.Common.IGeneric6DofConstraintImp"));

    $.Property({Static:false, Public:true }, "AngularLowerLimit", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "AngularUpperLimit", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "CalculatedTransformA", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "CalculatedTransformB", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetA", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetB", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "LinearLowerLimit", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "LinearUpperLimit", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "UseFrameOffset", $.Boolean);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Face */ 

(function Face$Members () {
  var $, $thisType;

  function Face__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Face", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Face__ctor
    );

    $.Field({Static:false, Public:true }, "InxVert", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "InxNormal", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "InxTexCoord", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Geometry */ 

(function Geometry$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.double3))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.Face)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.double2))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.Face))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Fusee.Math.Core.double3)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.Fusee.Math.Core.double2)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.FormatException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0F.System.Int32))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Int32))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Int32))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0F.System.Int32))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm04.Fusee.Engine.Core.Face))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0A.Fusee.Math.Core.double3))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0A.Fusee.Math.Core.double2))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm04.Fusee.Engine.Core.Geometry_TripleInx, $asm0F.System.Int32))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm04.Fusee.Engine.Core.Geometry_TripleInx)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.UInt16))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.double3), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String, $asm0F.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.Face), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.double2), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.FormatException, [$asm0F.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.Face), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.Face")])]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.double3), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.double2), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0A.TypeRef("Fusee.Math.Core.double2")])]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm04.Fusee.Engine.Core.Geometry_TripleInx, $asm0F.System.Int32), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16), null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float2), null))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Int32).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Int32).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0F.System.Int32).get_Count)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0F.System.Int32).get_Item)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0F.System.Int32).Add)) ();
  };


  function Geometry__ctor () {
    this._vertices = $S00().Construct();
  }; 

  function Geometry_AddFace (vertInx, texCoordInx, normalInx) {
    var face = new ($T02())();
    if (vertInx === null) {
      throw $S01().Construct("vertInx");
    }
    face.InxVert = JSIL.Array.New($T04(), vertInx.length);

    for (var i = 0; i < (vertInx.length | 0); i = ((i + 1) | 0)) {
      var num = (vertInx[i] | 0);
      var flag2 = (0 > num) || 
      (num >= ((this._vertices).get_Count() | 0));
      if (flag2) {
        throw $S02().Construct(JSIL.ConcatString("Vertex index out of range: ", $T04().$Box(num)), JSIL.ConcatString("vertInx[", $T04().$Box(i), "]"));
      }
      face.InxVert[i] = num;
    }
    if (texCoordInx !== null) {
      var flag4 = (texCoordInx.length | 0) !== (vertInx.length | 0);
      if (flag4) {
        throw $S02().Construct("Number of texture coordinate indices must match number of vertex indices", "texCoordInx");
      }
      face.InxTexCoord = JSIL.Array.New($T04(), texCoordInx.length);

      for (i = 0; i < (texCoordInx.length | 0); i = ((i + 1) | 0)) {
        var num2 = (texCoordInx[i] | 0);
        var flag5 = (0 > num2) || 
        (num2 >= ((this._texCoords).get_Count() | 0));
        if (flag5) {
          throw $S02().Construct(JSIL.ConcatString("Texture coordinate index out of range: ", $T04().$Box(num2)), JSIL.ConcatString("texCoordInx[", $T04().$Box(i), "]"));
        }
        face.InxTexCoord[i] = num2;
      }
    }
    if (normalInx !== null) {
      var flag7 = (normalInx.length | 0) !== (vertInx.length | 0);
      if (flag7) {
        throw $S02().Construct("Number of normal indices must match number of vertex indices", "normalInx");
      }
      face.InxNormal = JSIL.Array.New($T04(), normalInx.length);

      for (i = 0; i < (normalInx.length | 0); i = ((i + 1) | 0)) {
        var num3 = (normalInx[i] | 0);
        var flag8 = (0 > num3) || 
        (num3 >= ((this._normals).get_Count() | 0));
        if (flag8) {
          throw $S02().Construct(JSIL.ConcatString("Normal index out of range: ", $T04().$Box(num3)), JSIL.ConcatString("normalInx[", $T04().$Box(i), "]"));
        }
        face.InxNormal[i] = num3;
      }
    }
    if (this._faces === null) {
      this._faces = $S03().Construct();
    }
    (this._faces).Add(face);
    return ((((this._faces).get_Count() | 0) - 1) | 0);
  }; 

  function Geometry_AddNormal (normal) {
    if (this._normals === null) {
      this._normals = $S00().Construct();
    }
    (this._normals).Add(normal.MemberwiseClone());
    return ((((this._normals).get_Count() | 0) - 1) | 0);
  }; 

  function Geometry_AddTexCoord (uv) {
    if (this._texCoords === null) {
      this._texCoords = $S04().Construct();
    }
    (this._texCoords).Add(uv.MemberwiseClone());
    return ((((this._texCoords).get_Count() | 0) - 1) | 0);
  }; 

  function Geometry_AddVertex (v) {
    (this._vertices).Add(v.MemberwiseClone());
    return ((((this._vertices).get_Count() | 0) - 1) | 0);
  }; 

  function Geometry_CalcFaceNormal (f) {
    var flag = (f.InxVert.length | 0) < 3;
    if (flag) {
      throw $S05().Construct(JSIL.ConcatString("Cannot calculate normal of degenerate face with only ", $T04().$Box(f.InxVert.length), " vertices."));
    }
    var index = (f.InxVert[0] | 0);
    var left = $T0A().op_Subtraction(
      (this._vertices).get_Item(index).MemberwiseClone(), 
      (this._vertices).get_Item(f.InxVert[2])
    );
    var right = $T0A().op_Subtraction(
      (this._vertices).get_Item(index).MemberwiseClone(), 
      (this._vertices).get_Item(f.InxVert[1])
    );
    return $T0A().Normalize($T0A().Cross(left.MemberwiseClone(), right.MemberwiseClone()).MemberwiseClone());
  }; 

  function Geometry_CreateNormals (smoothingAngle) {
    var $temp00;
    var list = new JSIL.BoxedVariable(null);
    var num = (Math.cos(smoothingAngle));
    this._normals = $S00().Construct();

    for (var i = 0; i < ((this._vertices).get_Count() | 0); i = ((i + 1) | 0)) {
      var allFacesContainingVertex = this.GetAllFacesContainingVertex(i, /* ref */ list);
      var list2 = $S00().Construct();
      var enumerator = $IM00().Call(allFacesContainingVertex, null);
      try {

        while ($IM01().Call(enumerator, null)) {
          var current = ($IM02().Call(enumerator, null) | 0);
          list2.Add(this.CalcFaceNormal((this._faces).get_Item(current)).MemberwiseClone());
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
      var flag = true;

    $loop2: 
      for (var j = 0; j < (list2.get_Count() | 0); j = ((j + 1) | 0)) {

      $loop3: 
        for (var k = ((j + 1) | 0); k < (list2.get_Count() | 0); k = ((k + 1) | 0)) {
          var flag2 = +$T0A().Dot(
            list2.get_Item(j), 
            list2.get_Item(k)
          ) < num;
          if (flag2) {
            flag = false;
            break $loop3;
          }
        }
        var flag3 = !flag;
        if (flag3) {
          break $loop2;
        }
      }
      var flag4 = flag;
      if (flag4) {
        var double = new ($T0A())();
        double.x = 0;
        double.y = 0;
        double.z = 0;
        var double2 = double;

        for (var a$0 = list2._items, i$0 = 0, l$0 = (list2._size | 0); i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var current2 = a$0[i$0];
          double2 = $T0A().op_Addition(double2.MemberwiseClone(), current2);
        }
        double2 = $T0A().op_Division(double2.MemberwiseClone(), +(list2.get_Count()));
        var num2 = (this.AddNormal(double2.MemberwiseClone()) | 0);

        for (var l = 0; l < ($IM04().Call(allFacesContainingVertex, null) | 0); l = ((l + 1) | 0)) {
          var flag5 = (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, l)).InxNormal === null;
          if (flag5) {
            (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, l)).InxNormal = JSIL.Array.New($T04(), (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, l)).InxVert.length);
          }
          (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, l)).InxNormal[$IM05().Call(list.get(), null, l)] = num2;
        }
      } else {

        for (var m = 0; m < (list2.get_Count() | 0); m = ((m + 1) | 0)) {
          var num3 = (this.AddNormal(list2.get_Item(m).MemberwiseClone()) | 0);
          var flag6 = (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, m)).InxNormal === null;
          if (flag6) {
            (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, m)).InxNormal = JSIL.Array.New($T04(), (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, m)).InxVert.length);
          }
          (this._faces).get_Item($IM05().Call(allFacesContainingVertex, null, m)).InxNormal[$IM05().Call(list.get(), null, m)] = num3;
        }
      }
    }
  }; 

  function Geometry_get_Faces () {
    return this._faces;
  }; 

  function Geometry_get_HasNormals () {
    return (this._normals !== null);
  }; 

  function Geometry_get_HasTexCoords () {
    return (this._texCoords !== null);
  }; 

  function Geometry_get_Normals () {
    return this._normals;
  }; 

  function Geometry_get_TexCoords () {
    return this._texCoords;
  }; 

  function Geometry_get_Vertices () {
    return this._vertices;
  }; 

  function Geometry_GetAllFacesContainingVertex (iV, /* ref */ vertInFace) {
    var list = $S06().Construct();
    vertInFace.set($S06().Construct());

    for (var i = 0; i < ((this._faces).get_Count() | 0); i = ((i + 1) | 0)) {
      var inxVert = (this._faces).get_Item(i).InxVert;

    $loop1: 
      for (var j = 0; j < (inxVert.length | 0); j = ((j + 1) | 0)) {
        var flag = (iV | 0) === (inxVert[j] | 0);
        if (flag) {
          list.Add(i);
          $IM06().Call(vertInFace.get(), null, j);
          break $loop1;
        }
      }
    }
    return list;
  }; 

  function Geometry_set_Faces (value) {
    this._faces = $S07().Construct(value);
  }; 

  function Geometry_set_Normals (value) {
    this._normals = $S08().Construct(value);
  }; 

  function Geometry_set_TexCoords (value) {
    this._texCoords = $S09().Construct(value);
  }; 

  function Geometry_set_Vertices (value) {
    this._vertices = $S08().Construct(value);
  }; 

  function Geometry_ToMesh () {
    var $temp00;
    var num = new JSIL.BoxedVariable(0);
    var dictionary = $S0A().Construct();
    var list = $S0B().Construct();
    var list2 = $S0C().Construct();
    var list3 = (
      this.get_HasTexCoords()
         ? $S0D().Construct()
         : null)
    ;
    var list4 = (
      this.get_HasNormals()
         ? $S0C().Construct()
         : null)
    ;

    for (var a$0 = this._faces._items, i$0 = 0, l$0 = (this._faces._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current = a$0[i$0];
      var array = JSIL.Array.New($T04(), current.InxVert.length);

      for (var i = 0; i < (current.InxVert.length | 0); i = ((i + 1) | 0)) {
        var tripleInx = new ($T1D())();
        tripleInx.iV = (current.InxVert[i] | 0);
        tripleInx.iT = ((
          this.get_HasTexCoords()
             ? current.InxTexCoord[i]
             : 0)
         | 0);
        tripleInx.iN = ((
          this.get_HasNormals()
             ? current.InxNormal[i]
             : 0)
         | 0);
        var key = tripleInx;
        var flag = !dictionary.TryGetValue(key.MemberwiseClone(), /* ref */ num);
        if (flag) {
          var index = (current.InxVert[i] | 0);
          list2.Add($S0E().Construct(Math.fround((this._vertices).get_Item(index).x), Math.fround((this._vertices).get_Item(index).y), Math.fround((this._vertices).get_Item(index).z)));
          var hasTexCoords = this.get_HasTexCoords();
          if (hasTexCoords) {
            var index2 = (current.InxTexCoord[i] | 0);
            list3.Add($S0F().Construct(Math.fround((this._texCoords).get_Item(index2).x), Math.fround((this._texCoords).get_Item(index2).y)));
          }
          var hasNormals = this.get_HasNormals();
          if (hasNormals) {
            var index3 = (current.InxNormal[i] | 0);
            list4.Add($S0E().Construct(Math.fround((this._normals).get_Item(index3).x), Math.fround((this._normals).get_Item(index3).y), Math.fround((this._normals).get_Item(index3).z)));
          }
          num.set((((list2.get_Count() | 0) - 1) | 0));
          dictionary.Add(key.MemberwiseClone(), num.get());
        }
        array[i] = (num.get() | 0);
      }
      $T1A().prototype.AddRange.call(list, this.Triangulate(current, array));
    }
    var mesh = new ($T20())();
    mesh.set_Vertices($T1B().prototype.ToArray.call(list2));
    var hasNormals2 = this.get_HasNormals();
    if (hasNormals2) {
      mesh.set_Normals($T1B().prototype.ToArray.call(list4));
    }
    var hasTexCoords2 = this.get_HasTexCoords();
    if (hasTexCoords2) {
      mesh.set_UVs($T1C().prototype.ToArray.call(list3));
    }
    mesh.set_Triangles($T1A().prototype.ToArray.call(list));
    return mesh;
  }; 

  function Geometry_Triangulate (f, indices) {
    var flag = (f.InxVert.length | 0) < 3;
    if (flag) {
      var result = null;
    } else {
      var flag2 = indices === null;
      if (flag2) {
        indices = f.InxVert;
      }
      var array = JSIL.Array.New($T23(), Math.imul(3, (((f.InxVert.length | 0) - 2) | 0)));

      for (var i = 2; i < (f.InxVert.length | 0); i = ((i + 1) | 0)) {
        array[Math.imul(((i - 2) | 0), 3)] = (indices[0] & 0xFFFF);
        array[((Math.imul(((i - 2) | 0), 3) + 1) | 0)] = (indices[((i - 1) | 0)] & 0xFFFF);
        array[((Math.imul(((i - 2) | 0), 3) + 2) | 0)] = (indices[i] & 0xFFFF);
      }
      result = $T21().$Cast(array);
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Geometry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Geometry__ctor
    );

    $.Method({Static:false, Public:true }, "AddFace", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      Geometry_AddFace
    );

    $.Method({Static:false, Public:true }, "AddNormal", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Fusee.Math.Core.double3")]), 
      Geometry_AddNormal
    );

    $.Method({Static:false, Public:true }, "AddTexCoord", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Fusee.Math.Core.double2")]), 
      Geometry_AddTexCoord
    );

    $.Method({Static:false, Public:true }, "AddVertex", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Fusee.Math.Core.double3")]), 
      Geometry_AddVertex
    );

    $.Method({Static:false, Public:true }, "CalcFaceNormal", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.double3"), [$asm04.TypeRef("Fusee.Engine.Core.Face")]), 
      Geometry_CalcFaceNormal
    );

    $.Method({Static:false, Public:true }, "CreateNormals", 
      JSIL.MethodSignature.Action($.Double), 
      Geometry_CreateNormals
    );

    $.Method({Static:false, Public:true }, "get_Faces", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Engine.Core.Face")])), 
      Geometry_get_Faces
    );

    $.Method({Static:false, Public:true }, "get_HasNormals", 
      JSIL.MethodSignature.Return($.Boolean), 
      Geometry_get_HasNormals
    );

    $.Method({Static:false, Public:true }, "get_HasTexCoords", 
      JSIL.MethodSignature.Return($.Boolean), 
      Geometry_get_HasTexCoords
    );

    $.Method({Static:false, Public:true }, "get_Normals", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")])), 
      Geometry_get_Normals
    );

    $.Method({Static:false, Public:true }, "get_TexCoords", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double2")])), 
      Geometry_get_TexCoords
    );

    $.Method({Static:false, Public:true }, "get_Vertices", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")])), 
      Geometry_get_Vertices
    );

    $.Method({Static:false, Public:true }, "GetAllFacesContainingVertex", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.Int32]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.Int32])])]), 
      Geometry_GetAllFacesContainingVertex
    );

    $.Method({Static:false, Public:true }, "set_Faces", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Engine.Core.Face")])), 
      Geometry_set_Faces
    );

    $.Method({Static:false, Public:true }, "set_Normals", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")])), 
      Geometry_set_Normals
    );

    $.Method({Static:false, Public:true }, "set_TexCoords", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double2")])), 
      Geometry_set_TexCoords
    );

    $.Method({Static:false, Public:true }, "set_Vertices", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")])), 
      Geometry_set_Vertices
    );

    $.Method({Static:false, Public:true }, "ToMesh", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      Geometry_ToMesh
    );

    $.Method({Static:false, Public:false}, "Triangulate", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.UInt16]), [$asm04.TypeRef("Fusee.Engine.Core.Face"), $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Geometry_Triangulate
    );

    $.Field({Static:false, Public:false}, "_vertices", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")]));

    $.Field({Static:false, Public:false}, "_normals", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")]));

    $.Field({Static:false, Public:false}, "_texCoords", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("Fusee.Math.Core.double2")]));

    $.Field({Static:false, Public:false}, "_faces", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Engine.Core.Face")]));

    $.Property({Static:false, Public:true }, "Vertices", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")]));

    $.Property({Static:false, Public:true }, "Normals", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double3")]));

    $.Property({Static:false, Public:true }, "TexCoords", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.double2")]));

    $.Property({Static:false, Public:true }, "Faces", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Engine.Core.Face")]));

    $.Property({Static:false, Public:true }, "HasNormals", $.Boolean);

    $.Property({Static:false, Public:true }, "HasTexCoords", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Core.Geometry+TripleInx */ 

(function TripleInx$Members () {
  var $, $thisType;

  function TripleInx_GetHashCode () {
    return (((this.iV | 0) ^ (this.iT | 0)) ^ (this.iN | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Core.Geometry+TripleInx", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      TripleInx_GetHashCode
    );

    $.Field({Static:false, Public:true }, "iV", $.Int32);

    $.Field({Static:false, Public:true }, "iT", $.Int32);

    $.Field({Static:false, Public:true }, "iN", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.GImpactMeshShape */ 

(function GImpactMeshShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function GImpactMeshShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function GImpactMeshShape_get_Margin () {
    return $IM00().Call(this._gImpactMeshShapeImp, null);
  }; 

  function GImpactMeshShape_set_Margin (value) {
    var gImpactMeshShape = $thisType.$Cast($IM01().Call(this._gImpactMeshShapeImp, null));
    $IM02().Call(gImpactMeshShape._gImpactMeshShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.GImpactMeshShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GImpactMeshShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      GImpactMeshShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      GImpactMeshShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_gImpactMeshShapeImp", $asm03.TypeRef("Fusee.Engine.Common.IGImpactMeshShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.HingeConstraint */ 

(function HingeConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.Fusee.Math.Core.Quaternion)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Return($asm0F.TypeRef("System.Single")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.Fusee.Math.Core.Quaternion, $asm0F.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.EnableAngularMotor)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_FrameA)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_AngularOnly)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_FrameB)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_EnableMotor)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_LowerLimit)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_MaxMotorImpulse)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_MotorTargetVelocity)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.get_SolverLimit)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.GetHingeAngle)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.GetUid)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.set_AngularOnly)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.set_EnableMotor)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.set_MaxMotorImpulse)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.SetAxis)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.SetLimit)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.IHingeConstraintImp.SetMotorTarget)) ();
  };


  function HingeConstraint__ctor () {
  }; 

  function HingeConstraint_EnableAngularMotor (enableMotor, targetVelocity, maxMotorImpulse) {
    var hingeConstraint = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM01().Call(hingeConstraint._iHConstraintImp, null, enableMotor, targetVelocity, maxMotorImpulse);
  }; 

  function HingeConstraint_get_AFrame () {
    return $IM02().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_AngularOnly () {
    return $IM03().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_BFrame () {
    return $IM04().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_EnableMotor () {
    return $IM05().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_GetLowerLimit () {
    return $IM06().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_GetUpperLimit () {
    return $IM06().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_MaxMotorImpulse () {
    return $IM07().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_MotorTargetVelocity () {
    return $IM08().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_get_RigidBodyA () {
    var userObject = $IM09().Call($IM0A().Call(this._iHConstraintImp, null), null);
    return $T06().$Cast(userObject);
  }; 

  function HingeConstraint_get_RigidBodyB () {
    var userObject = $IM09().Call($IM0B().Call(this._iHConstraintImp, null), null);
    return $T06().$Cast(userObject);
  }; 

  function HingeConstraint_get_SolverLimit () {
    return $IM0C().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_GetHingeAngle$00 () {
    return $S00().CallVirtual($IM0D(), null, this._iHConstraintImp);
  }; 

  function HingeConstraint_GetHingeAngle$01 (transA, transB) {
    return $S01().CallVirtual($IM0D(), null, this._iHConstraintImp, transA.MemberwiseClone(), transB.MemberwiseClone());
  }; 

  function HingeConstraint_GetUid () {
    return $IM0E().Call(this._iHConstraintImp, null);
  }; 

  function HingeConstraint_set_AngularOnly (value) {
    var hingeConstraint = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM0F().Call(hingeConstraint._iHConstraintImp, null, value);
  }; 

  function HingeConstraint_set_EnableMotor (value) {
    var hingeConstraint = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM10().Call(hingeConstraint._iHConstraintImp, null, value);
  }; 

  function HingeConstraint_set_MaxMotorImpulse (value) {
    var hingeConstraint = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM11().Call(hingeConstraint._iHConstraintImp, null, value);
  }; 

  function HingeConstraint_SetAxis (axisInA) {
    var hingeConstraint = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM12().Call(this._iHConstraintImp, null, axisInA.MemberwiseClone());
  }; 

  function HingeConstraint_SetLimit (low, high, softness, biasFactor, relaxationFactor) {
    $IM13().Call(this._iHConstraintImp, null, 
      low, 
      high, 
      softness, 
      biasFactor, 
      relaxationFactor
    );
  }; 

  function HingeConstraint_SetMotorTarget$02 (qAinB, dt) {
    var hingeConstraint = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $S02().CallVirtual($IM14(), null, hingeConstraint._iHConstraintImp, qAinB.MemberwiseClone(), dt);
  }; 

  function HingeConstraint_SetMotorTarget$03 (targetAngle, dt) {
    var hingeConstraint = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $S03().CallVirtual($IM14(), null, hingeConstraint._iHConstraintImp, targetAngle, dt);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.HingeConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      HingeConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "EnableAngularMotor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Single, 
          $.Single
        ]), 
      HingeConstraint_EnableAngularMotor
    );

    $.Method({Static:false, Public:true }, "get_AFrame", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      HingeConstraint_get_AFrame
    );

    $.Method({Static:false, Public:true }, "get_AngularOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      HingeConstraint_get_AngularOnly
    );

    $.Method({Static:false, Public:true }, "get_BFrame", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      HingeConstraint_get_BFrame
    );

    $.Method({Static:false, Public:true }, "get_EnableMotor", 
      JSIL.MethodSignature.Return($.Boolean), 
      HingeConstraint_get_EnableMotor
    );

    $.Method({Static:false, Public:true }, "get_GetLowerLimit", 
      JSIL.MethodSignature.Return($.Single), 
      HingeConstraint_get_GetLowerLimit
    );

    $.Method({Static:false, Public:true }, "get_GetUpperLimit", 
      JSIL.MethodSignature.Return($.Single), 
      HingeConstraint_get_GetUpperLimit
    );

    $.Method({Static:false, Public:true }, "get_MaxMotorImpulse", 
      JSIL.MethodSignature.Return($.Single), 
      HingeConstraint_get_MaxMotorImpulse
    );

    $.Method({Static:false, Public:true }, "get_MotorTargetVelocity", 
      JSIL.MethodSignature.Return($.Single), 
      HingeConstraint_get_MotorTargetVelocity
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      HingeConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      HingeConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_SolverLimit", 
      JSIL.MethodSignature.Return($.Int32), 
      HingeConstraint_get_SolverLimit
    );

    $.Method({Static:false, Public:true }, "GetHingeAngle", 
      JSIL.MethodSignature.Return($.Single), 
      HingeConstraint_GetHingeAngle$00
    );

    $.Method({Static:false, Public:true }, "GetHingeAngle", 
      new JSIL.MethodSignature($.Single, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]), 
      HingeConstraint_GetHingeAngle$01
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      JSIL.MethodSignature.Return($.Int32), 
      HingeConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_AngularOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      HingeConstraint_set_AngularOnly
    );

    $.Method({Static:false, Public:true }, "set_EnableMotor", 
      JSIL.MethodSignature.Action($.Boolean), 
      HingeConstraint_set_EnableMotor
    );

    $.Method({Static:false, Public:true }, "set_MaxMotorImpulse", 
      JSIL.MethodSignature.Action($.Single), 
      HingeConstraint_set_MaxMotorImpulse
    );

    $.Method({Static:false, Public:true }, "SetAxis", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      HingeConstraint_SetAxis
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ]), 
      HingeConstraint_SetLimit
    );

    $.Method({Static:false, Public:true }, "SetMotorTarget", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.Quaternion"), $.Single]), 
      HingeConstraint_SetMotorTarget$02
    );

    $.Method({Static:false, Public:true }, "SetMotorTarget", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      HingeConstraint_SetMotorTarget$03
    );

    $.Field({Static:false, Public:false}, "_iHConstraintImp", $asm03.TypeRef("Fusee.Engine.Common.IHingeConstraintImp"));

    $.Property({Static:false, Public:true }, "AngularOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxMotorImpulse", $.Single);

    $.Property({Static:false, Public:true }, "MotorTargetVelocity", $.Single);

    $.Property({Static:false, Public:true }, "AFrame", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "BFrame", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "SolverLimit", $.Int32);

    $.Property({Static:false, Public:true }, "GetLowerLimit", $.Single);

    $.Property({Static:false, Public:true }, "GetUpperLimit", $.Single);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Icosahedron */ 

(function Icosahedron$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Engine.Core.NormalAndUvHelper)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function Icosahedron__ctor () {
    $T00().prototype._ctor.call(this);
    var num = +((Math.fround(1 + (Math.sqrt(5))) / 2));
    var expr_2D = $S00().Construct();
    expr_2D.Add($S01().Construct(-1, num, 0));
    expr_2D.Add($S01().Construct(1, num, 0));
    expr_2D.Add($S01().Construct(-1, -num, 0));
    expr_2D.Add($S01().Construct(1, -num, 0));
    expr_2D.Add($S01().Construct(0, -1, num));
    expr_2D.Add($S01().Construct(0, 1, num));
    expr_2D.Add($S01().Construct(0, -1, -num));
    expr_2D.Add($S01().Construct(0, 1, -num));
    expr_2D.Add($S01().Construct(num, 0, -1));
    expr_2D.Add($S01().Construct(num, 0, 1));
    expr_2D.Add($S01().Construct(-num, 0, -1));
    expr_2D.Add($S01().Construct(-num, 0, 1));
    var list = expr_2D;

    for (var i = 0; i < (list.get_Count() | 0); i = ((i + 1) | 0)) {
      var value = list.get_Item(i).MemberwiseClone();
      value.Normalize();
      list.set_Item(i, value.MemberwiseClone());
    }
    this.set_Vertices($T04().prototype.ToArray.call(list));
    this.set_Triangles(JSIL.Array.New($T07(), [5, 11, 0, 1, 5, 0, 7, 1, 0, 10, 7, 0, 11, 10, 0, 9, 5, 1, 4, 11, 5, 2, 10, 11, 6, 7, 10, 8, 1, 7, 4, 9, 3, 2, 4, 3, 6, 2, 3, 8, 6, 3, 9, 8, 3, 5, 9, 4, 11, 4, 2, 10, 2, 6, 7, 6, 8, 1, 8, 9]));
    this.set_Normals(JSIL.Array.New($T05(), 0));
    $T08().CreateVertexNormals(this);
    this.set_UVs($thisType.CreateUVs());

    for (var j = 0; j < (this.get_Vertices().length | 0); j = ((j + 1) | 0)) {
      this.Mesh$UVs[j] = $S02().Construct((0.5 + +((Math.fround(Math.atan2(this.get_Vertices()[j].z, this.get_Vertices()[j].x)) / 6.28318548))), (0.5 - +((Math.fround(Math.asin(this.get_Vertices()[j].y)) / 3.14159274))));
    }
  }; 

  function Icosahedron_CreateUVs () {
    return JSIL.Array.New($T0A(), [$S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0.727272749, 1), $S02().Construct(0.909090936, 1), $S02().Construct(0.09090909, 0.6666667), $S02().Construct(0.272727281, 0.6666667), $S02().Construct(0.454545468, 0.6666667), $S02().Construct(0.6363636, 0.6666667), $S02().Construct(0.8181818, 0.6666667), $S02().Construct(1, 0.6666667), $S02().Construct(0, 0.333333343), $S02().Construct(0.181818187, 0.333333343), $S02().Construct(0.363636374, 0.333333343), $S02().Construct(0.545454562, 0.333333343), $S02().Construct(0.727272749, 0.333333343), $S02().Construct(0.909090936, 0.333333343), $S02().Construct(0.09090909, 0), $S02().Construct(0.272727281, 0), $S02().Construct(0.454545468, 0), $S02().Construct(0.6363636, 0), $S02().Construct(0.8181818, 0)]);
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
      Name: "Fusee.Engine.Core.Icosahedron", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Icosahedron__ctor
    );

    $.Method({Static:true , Public:false}, "CreateUVs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float2")])), 
      Icosahedron_CreateUVs
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Icosphere */ 

(function Icosphere$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int64, $asm0F.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Engine.Core.Icosahedron)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.NormalAndUvHelper)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int64, $asm0F.System.Int32), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function Icosphere__ctor (subdivLevel) {
    $T01().prototype._ctor.call(this);
    var flag = (subdivLevel | 0) > 6;
    if (flag) {
      subdivLevel = 6;
    }
    this._sphereVertices = $S00().Construct();
    this._middlePointIndexCache = $S01().Construct();
    var mesh = this.CreateIcosphere(subdivLevel);
    this.set_Vertices(mesh.get_Vertices());
    this.set_Triangles(mesh.get_Triangles());
    this.set_Normals(mesh.get_Normals());
    this.set_UVs(mesh.get_UVs());
  }; 

  function Icosphere_AddNormalizedVertex (p) {
    p.Normalize();
    (this._sphereVertices).Add(p.MemberwiseClone());
    var newVertIndex = (this._newVertIndex | 0);
    this._newVertIndex = (((newVertIndex + 1) >>> 0) & 0xFFFF);
    return newVertIndex;
  }; 

  function Icosphere_CreateIcosphere (recursionLevel) {
    var mesh = new ($T07())();
    if ((recursionLevel | 0) === 0) {
      var result = mesh;
    } else {
      var vertices = mesh.get_Vertices();

      for (var i = 0; i < (vertices.length | 0); i = ((i + 1) | 0)) {
        var p = vertices[i].MemberwiseClone();
        this.AddNormalizedVertex(p.MemberwiseClone());
      }

      for (var j = 0; j < (recursionLevel | 0); j = ((j + 1) | 0)) {
        var list = $S02().Construct();
        var list2 = $S02().Construct();

        for (var k = 0; k < (mesh.get_Triangles().length | 0); k = ((k + 1) | 0)) {
          list2.Add(mesh.get_Triangles()[k]);
          var flag2 = (list2.get_Count() | 0) !== 3;
          if (!flag2) {
            var item = (this.MiddlePoint(
              list2.get_Item(0), 
              list2.get_Item(1)
            ) | 0);
            var item2 = (this.MiddlePoint(
              list2.get_Item(1), 
              list2.get_Item(2)
            ) | 0);
            var item3 = (this.MiddlePoint(
              list2.get_Item(2), 
              list2.get_Item(0)
            ) | 0);
            var expr_DB = $S02().Construct();
            expr_DB.Add(list2.get_Item(0));
            expr_DB.Add(item);
            expr_DB.Add(item3);
            expr_DB.Add(list2.get_Item(1));
            expr_DB.Add(item2);
            expr_DB.Add(item);
            expr_DB.Add(list2.get_Item(2));
            expr_DB.Add(item3);
            expr_DB.Add(item2);
            expr_DB.Add(item);
            expr_DB.Add(item2);
            expr_DB.Add(item3);
            var collection = expr_DB;
            $T09().prototype.AddRange.call(list, collection);
            list2 = $S02().Construct();
          }
        }
        mesh.set_Triangles($T09().prototype.ToArray.call(list));
      }
      mesh.set_Vertices($T03().prototype.ToArray.call(this._sphereVertices));
      $T0B().CreateVertexNormals(mesh);
      mesh.set_UVs(JSIL.Array.New($T0C(), mesh.get_Vertices().length));

      for (var l = 0; l < (mesh.get_Vertices().length | 0); l = ((l + 1) | 0)) {
        mesh.UVs[l] = $S03().Construct((0.5 + +((Math.fround(Math.atan2(mesh.get_Vertices()[l].z, mesh.get_Vertices()[l].x)) / 6.28318548))), (0.5 - +((Math.fround(Math.asin(mesh.get_Vertices()[l].y)) / 3.14159274))));
      }
      result = mesh;
    }
    return result;
  }; 

  function Icosphere_MiddlePoint (p1, p2) {
    var num3 = new JSIL.BoxedVariable(0);
    var p3 = new ($T05())();
    var flag = (p1 | 0) < (p2 | 0);
    var num = $T0F().FromNumber((
        flag
           ? p1
           : p2)
    );
    var num2 = $T0F().FromNumber((
        flag
           ? p2
           : p1)
    );
    var key = $T0F().op_Addition($T0F().op_LeftShift(num, 32), num2);
    var flag2 = (this._middlePointIndexCache).TryGetValue(key, /* ref */ num3);
    if (flag2) {
      var result = (num3.get() & 0xFFFF);
    } else {
      var float = (this._sphereVertices).get_Item(p1).MemberwiseClone();
      var float2 = (this._sphereVertices).get_Item(p2).MemberwiseClone();
      (p3 = p3.MemberwiseClone(), 
        $T05().prototype._ctor.call(p3, +(((+float.x + +float2.x) / 2)), +(((+float.y + +float2.y) / 2)), +(((+float.z + +float2.z) / 2))));
      var num4 = (this.AddNormalizedVertex(p3.MemberwiseClone()) | 0);
      (this._middlePointIndexCache).Add(key, num4);
      result = num4;
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
      Name: "Fusee.Engine.Core.Icosphere", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      Icosphere__ctor
    );

    $.Method({Static:false, Public:false}, "AddNormalizedVertex", 
      new JSIL.MethodSignature($.UInt16, [$asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      Icosphere_AddNormalizedVertex
    );

    $.Method({Static:false, Public:false}, "CreateIcosphere", 
      new JSIL.MethodSignature($asm0B.TypeRef("Fusee.Serialization.Mesh"), [$.Int32]), 
      Icosphere_CreateIcosphere
    );

    $.Method({Static:false, Public:false}, "MiddlePoint", 
      new JSIL.MethodSignature($.UInt16, [$.Int32, $.Int32]), 
      Icosphere_MiddlePoint
    );

    $.Field({Static:false, Public:false}, "_newVertIndex", $.UInt16);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_middlePointIndexCache", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int64, $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sphereVertices", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("Fusee.Math.Core.float3")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.NormalAndUvHelper */ 

(function NormalAndUvHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.UInt16), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0A.Fusee.Math.Core.float3).get_Item)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0A.Fusee.Math.Core.float3).set_Item)) ();
  };


  function NormalAndUvHelper_CalcAverageNormal (normals, triNormal, triIndex) {
    var flag = $T01().op_Equality($IM00().Call(normals, null, triIndex).MemberwiseClone(), $T01().Zero.MemberwiseClone());
    if (flag) {
      $IM01().Call(normals, null, triIndex, triNormal.MemberwiseClone());
    } else {
      var value = $T01().op_Division($T01().op_Addition(triNormal.MemberwiseClone(), $IM00().Call(normals, null, triIndex)).MemberwiseClone(), 2).MemberwiseClone();
      value.Normalize();
      $IM01().Call(normals, null, triIndex, value.MemberwiseClone());
    }
  }; 

  function NormalAndUvHelper_CalculateTriNormal (triVerts) {
    var right = $T01().op_Subtraction(
      $IM00().Call(triVerts, null, 1).MemberwiseClone(), 
      $IM00().Call(triVerts, null, 0)
    );
    var left = $T01().op_Subtraction(
      $IM00().Call(triVerts, null, 2).MemberwiseClone(), 
      $IM00().Call(triVerts, null, 1)
    );
    var result = $T01().Cross(left.MemberwiseClone(), right.MemberwiseClone()).MemberwiseClone();
    result.Normalize();
    return result;
  }; 

  function NormalAndUvHelper_CreateVertexNormals (mesh) {
    mesh.set_Normals(JSIL.Array.New($T01(), mesh.get_Vertices().length));
    var list = $S00().Construct();
    var list2 = $S01().Construct();
    var triangles = mesh.get_Triangles();

    for (var i = 0; i < (triangles.length | 0); i = ((i + 1) | 0)) {
      var num = (triangles[i] | 0);
      list.Add(mesh.get_Vertices()[num].MemberwiseClone());
      list2.Add(num);
      var flag = (list.get_Count() | 0) !== 3;
      if (!flag) {
        var triNormal = $thisType.CalculateTriNormal(list).MemberwiseClone();
        $thisType.CalcAverageNormal(
          $T00().$Cast(mesh.get_Normals()), 
          triNormal.MemberwiseClone(), 
          list2.get_Item(0)
        );
        $thisType.CalcAverageNormal(
          $T00().$Cast(mesh.get_Normals()), 
          triNormal.MemberwiseClone(), 
          list2.get_Item(1)
        );
        $thisType.CalcAverageNormal(
          $T00().$Cast(mesh.get_Normals()), 
          triNormal.MemberwiseClone(), 
          list2.get_Item(2)
        );
        list = $S00().Construct();
        list2 = $S01().Construct();
      }
    }
  }; 

  JSIL.MakeStaticClass("Fusee.Engine.Core.NormalAndUvHelper", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "CalcAverageNormal", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $.UInt16
        ]), 
      NormalAndUvHelper_CalcAverageNormal
    );

    $.Method({Static:true , Public:false}, "CalculateTriNormal", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.float3")])]), 
      NormalAndUvHelper_CalculateTriNormal
    );

    $.Method({Static:true , Public:false}, "CreateVertexNormals", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      NormalAndUvHelper_CreateVertexNormals
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.DeviceConnectionArgs */ 

(function DeviceConnectionArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.EventArgs)) ();
  };


  function DeviceConnectionArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Core.DeviceConnectionArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DeviceConnectionArgs__ctor
    );

    $.Field({Static:false, Public:true }, "InputDevice", $asm04.TypeRef("Fusee.Engine.Core.InputDevice"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Engine.Core.MatchFunc */ 

JSIL.MakeDelegate("Fusee.Engine.Core.MatchFunc", true, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]));

/* delegate Fusee.Engine.Core.CreatorFunc */ 

JSIL.MakeDelegate("Fusee.Engine.Core.CreatorFunc", true, [], 
  new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.InputDevice"), [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]));

/* class Fusee.Engine.Core.SpecialDeviceCreator */ 

(function SpecialDeviceCreator$Members () {
  var $, $thisType;

  function SpecialDeviceCreator__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.SpecialDeviceCreator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SpecialDeviceCreator__ctor
    );

    $.Field({Static:false, Public:true }, "Match", $asm04.TypeRef("Fusee.Engine.Core.MatchFunc"));

    $.Field({Static:false, Public:true }, "Creator", $asm04.TypeRef("Fusee.Engine.Core.CreatorFunc"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Input */ 

(function Input$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.MatchFunc)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.CreatorFunc)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm03.Fusee.Engine.Common.IInputDriverImp))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm04.Fusee.Engine.Core.InputDevice))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.SpecialDeviceCreator))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.Input_$l$gc)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm04.Fusee.Engine.Core.DeviceConnectionArgs))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Threading.Monitor)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDriverImp)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.IInputDeviceImp))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.IInputDeviceImp))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.DeviceImpDisconnectedArgs))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.NewDeviceImpConnectedArgs))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Engine.Core.SpecialDeviceCreator)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($asm0F.System.String, $asm04.Fusee.Engine.Core.InputDevice))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm0F.System.String, $asm04.Fusee.Engine.Core.InputDevice))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm04.Fusee.Engine.Core.DeviceConnectionArgs)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($asm0F.System.String, $asm03.Fusee.Engine.Common.IInputDriverImp))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm0F.System.String, $asm03.Fusee.Engine.Common.IInputDriverImp))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm04.Fusee.Engine.Core.KeyboardDevice)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm04.Fusee.Engine.Core.TouchDevice)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm03.Fusee.Engine.Common.DeviceImpDisconnectedArgs)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm03.Fusee.Engine.Common.NewDeviceImpConnectedArgs)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm04.Fusee.Engine.Core.InputDevice))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.InputDevice))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm03.Fusee.Engine.Common.IInputDriverImp), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm04.Fusee.Engine.Core.InputDevice), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.SpecialDeviceCreator), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm03.Fusee.Engine.Common.IInputDeviceImp]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm04.Fusee.Engine.Core.InputDevice, [$asm03.Fusee.Engine.Common.IInputDeviceImp]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm03.Fusee.Engine.Common.IInputDeviceImp]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm04.Fusee.Engine.Core.InputDevice, [$asm03.Fusee.Engine.Common.IInputDeviceImp]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm03.Fusee.Engine.Common.IInputDeviceImp]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm04.Fusee.Engine.Core.InputDevice, [$asm03.Fusee.Engine.Common.IInputDeviceImp]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.DeviceImpDisconnectedArgs]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.NewDeviceImpConnectedArgs]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String, $asm0F.System.String]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.IInputDeviceImp).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDriverImp.get_Devices)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.IInputDeviceImp).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDriverImp.get_DriverId)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.get_Id)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDriverImp.add_DeviceDisconnected)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDriverImp.add_NewDeviceConnected)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.InputDevice).GetEnumerator)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm04.Fusee.Engine.Core.InputDevice).get_Current)) ();
  };


  function Input__ctor () {
    var arg_68_1 = null, arg_68_2 = null, arg_AD_1 = null, arg_AD_2 = null, arg_F2_1 = null, arg_F2_2 = null;
    this._inputDrivers = $S00().Construct();
    this._inputDevices = $S01().Construct();
    this._specialDeviceCreators = $S02().Construct();
    if ((arg_68_1 = $T05().$l$g9__39_0) === null) {
      arg_68_1 = $T05().$l$g9__39_0 = $T00().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.Input_$l$gc, "$l_ctor$gb__39_0", $S03(), false, false));
    }
    if ((arg_68_2 = $T05().$l$g9__39_1) === null) {
      arg_68_2 = $T05().$l$g9__39_1 = $T01().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.Input_$l$gc, "$l_ctor$gb__39_1", $S04(), false, false));
    }
    this.RegisterInputDeviceType(arg_68_1, arg_68_2);
    if ((arg_AD_1 = $T05().$l$g9__39_2) === null) {
      arg_AD_1 = $T05().$l$g9__39_2 = $T00().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.Input_$l$gc, "$l_ctor$gb__39_2", $S05(), false, false));
    }
    if ((arg_AD_2 = $T05().$l$g9__39_3) === null) {
      arg_AD_2 = $T05().$l$g9__39_3 = $T01().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.Input_$l$gc, "$l_ctor$gb__39_3", $S06(), false, false));
    }
    this.RegisterInputDeviceType(arg_AD_1, arg_AD_2);
    if ((arg_F2_1 = $T05().$l$g9__39_4) === null) {
      arg_F2_1 = $T05().$l$g9__39_4 = $T00().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.Input_$l$gc, "$l_ctor$gb__39_4", $S07(), false, false));
    }
    if ((arg_F2_2 = $T05().$l$g9__39_5) === null) {
      arg_F2_2 = $T05().$l$g9__39_5 = $T01().New($T05().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.Input_$l$gc, "$l_ctor$gb__39_5", $S08(), false, false));
    }
    this.RegisterInputDeviceType(arg_F2_1, arg_F2_2);
  }; 

  function Input_add_DeviceConnected (value) {
    var inputDeviceConnected = $thisType.get_Instance().InputDeviceConnected;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T08().Enter(inputDeviceConnected, /* ref */ flag);
      $thisType.get_Instance().add_InputDeviceConnected(value);
    } finally {
      if (flag.get()) {
        $T08().Exit(inputDeviceConnected);
      }
    }
  }; 

  function Input_add_DeviceDisconnected (value) {
    var inputDeviceDisconnected = $thisType.get_Instance().InputDeviceDisconnected;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T08().Enter(inputDeviceDisconnected, /* ref */ flag);
      $thisType.get_Instance().add_InputDeviceDisconnected(value);
    } finally {
      if (flag.get()) {
        $T08().Exit(inputDeviceDisconnected);
      }
    }
  }; 

  function Input_add_InputDeviceConnected (value) {
    var eventHandler = this.InputDeviceConnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Combine(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "InputDeviceConnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function Input_add_InputDeviceDisconnected (value) {
    var eventHandler = this.InputDeviceDisconnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Combine(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "InputDeviceDisconnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function Input_AddDriverImp (inputDriver) {
    $thisType.get_Instance().AddInputDriverImp(inputDriver);
  }; 

  function Input_AddInputDriverImp (inputDriver) {
    var flag = inputDriver === null;
    if (flag) {
      throw $S09().Construct("inputDriver");
    }
    var enumerator = $IM00().Call($IM01().Call(inputDriver, null), null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var current = $IM03().Call(enumerator, null);
        (this._inputDevices).set_Item(
          ($IM04().Call(inputDriver, null) + "_" + $IM05().Call(current, null)), 
          this.CreateInputDevice(current)
        );
      }
    } finally {
      if (enumerator !== null) {
        $IM06().Call(enumerator, null);
      }
    }
    $IM07().Call(inputDriver, null, $T13().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnDeviceImpDisconnected", $S0A(), false, false)));
    $IM08().Call(inputDriver, null, $T14().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnNewDeviceImpConnected", $S0B(), false, false)));
    (this._inputDrivers).set_Item($IM04().Call(inputDriver, null), inputDriver);
  }; 

  function Input_CreateInputDevice (imp) {
    var $temp00;

    for (var a$0 = this._specialDeviceCreators._items, i$0 = 0, l$0 = (this._specialDeviceCreators._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current = a$0[i$0];
      var flag = current.Match(imp);
      if (flag) {
        var inputDevice = current.Creator(imp);
        if (inputDevice !== null) {
          var result = inputDevice;
          return result;
        }
      }
    }
    result = new ($T17())(imp);
    return result;
  }; 

  function Input_Dispose () {
    var enumerator = ((this._inputDevices).get_Values()).GetEnumerator();

    while ($T18().prototype.MoveNext.call(enumerator)) {
      var current = $T18().prototype.get_Current.call(enumerator);
      var expr_24 = this.InputDeviceDisconnected;
      if (expr_24 !== null) {
        var expr_30 = new ($T1A())();
        expr_30.InputDevice = current;
        expr_24(this, expr_30);
      }
      current.Disconnect();
    }
    (this._inputDevices).Clear();
    var enumerator2 = ((this._inputDrivers).get_Values()).GetEnumerator();

    while ($T1B().prototype.MoveNext.call(enumerator2)) {
      var current2 = $T1B().prototype.get_Current.call(enumerator2);
      $IM06().Call(current2, null);
    }
    (this._inputDrivers).Clear();
  }; 

  function Input_get_Devices () {
    return $thisType.get_Instance()._inputDevices.get_Values();
  }; 

  function Input_get_Drivers () {
    return $thisType.get_Instance()._inputDrivers.get_Values();
  }; 

  function Input_get_InputDevices () {
    return (this._inputDevices).get_Values();
  }; 

  function Input_get_InputDrivers () {
    return (this._inputDrivers).get_Values();
  }; 

  function Input_get_Instance () {
    var arg_14_0 = null;
    if ((arg_14_0 = $thisType._instance) === null) {
      arg_14_0 = $thisType._instance = new $thisType();
    }
    return arg_14_0;
  }; 

  function Input_get_Keyboard () {
    return $thisType.get_Instance().get_KeyboardInput();
  }; 

  function Input_get_KeyboardInput () {
    return this.GetInputDevice$b1($T1D())();
  }; 

  function Input_get_Mouse () {
    return $thisType.get_Instance().get_MouseInput();
  }; 

  function Input_get_MouseInput () {
    return this.GetInputDevice$b1($T1E())();
  }; 

  function Input_get_Touch () {
    return $thisType.get_Instance().get_TouchInput();
  }; 

  function Input_get_TouchInput () {
    return this.GetInputDevice$b1($T1F())();
  }; 

  function Input_GetDevice$b1 (TDevice) {
    return $thisType.get_Instance().GetInputDevice$b1(TDevice)();
  }; 

  function Input_GetDevices$b1 (TDevice) {
    return $thisType.get_Instance().GetInputDevices$b1(TDevice)();
  }; 

  function Input_GetInputDevice$b1 (TDevice) {
    return $S0C().CallStatic($T21(), "FirstOrDefault$b1", [TDevice], $T21().OfType$b1(TDevice)((this._inputDevices).get_Values()));
  }; 

  function Input_GetInputDevices$b1 (TDevice) {
    return $T21().OfType$b1(TDevice)((this._inputDevices).get_Values());
  }; 

  function Input_OnDeviceImpDisconnected (sender, args) {
    var inputDevice = new JSIL.BoxedVariable(null);
    if (sender === null) {
      throw $S09().Construct("sender");
    }
    var inputDriverImp = $T0B().$As(sender);
    var flag2 = inputDriverImp === null;
    if (flag2) {
      throw $S0D().Construct(JSIL.ConcatString("Device disconnecting from unknown driver ", sender.toString()));
    }
    var key = (($IM04().Call(inputDriverImp, null) + "_" + args.Id));
    var flag3 = (this._inputDevices).TryGetValue(key, /* ref */ inputDevice);
    if (flag3) {
      (inputDevice.get()).Disconnect();
      var expr_99 = this.InputDeviceDisconnected;
      if (expr_99 !== null) {
        var expr_A5 = new ($T1A())();
        expr_A5.InputDevice = inputDevice.get();
        expr_99(this, expr_A5);
      }
      return;
    }
    throw $S0D().Construct(("Driver " + $IM04().Call(inputDriverImp, null) + " trying to disconnect unknown device " + args.Id));
  }; 

  function Input_OnNewDeviceImpConnected (sender, args) {
    var inputDevice = new JSIL.BoxedVariable(null);
    if (sender === null) {
      throw $S09().Construct("sender");
    }
    var inputDriverImp = $T0B().$As(sender);
    if (inputDriverImp === null) {
      throw $S0D().Construct(JSIL.ConcatString("Device connecting from unknown driver ", sender.toString()));
    }
    var flag3 = (args === null) || 
    (args.InputDeviceImp === null);
    if (flag3) {
      throw $S0E().Construct("args", "Device or InputDeviceImp must not be null");
    }
    var key = (($IM04().Call(inputDriverImp, null) + "_" + $IM05().Call(args.InputDeviceImp, null)));
    var flag4 = (this._inputDevices).TryGetValue(key, /* ref */ inputDevice);
    if (flag4) {
      (inputDevice.get()).Reconnect(args.InputDeviceImp);
    } else {
      inputDevice.set(this.CreateInputDevice(args.InputDeviceImp));
      (this._inputDevices).set_Item(key, inputDevice.get());
    }
    var expr_C4 = this.InputDeviceConnected;
    if (expr_C4 !== null) {
      var expr_D0 = new ($T1A())();
      expr_D0.InputDevice = inputDevice.get();
      expr_C4(this, expr_D0);
    }
  }; 

  function Input_PostRender () {
    var enumerator = $IM09().Call(this.get_InputDevices(), null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var current = $IM0A().Call(enumerator, null);
        current.PostRender();
      }
    } finally {
      if (enumerator !== null) {
        $IM06().Call(enumerator, null);
      }
    }
  }; 

  function Input_PreRender () {
    var enumerator = $IM09().Call(this.get_InputDevices(), null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var current = $IM0A().Call(enumerator, null);
        current.PreRender();
      }
    } finally {
      if (enumerator !== null) {
        $IM06().Call(enumerator, null);
      }
    }
  }; 

  function Input_RegisterInputDeviceType (match, creator) {
    var $temp00;
    var flag = match === null;
    if (flag) {
      throw $S09().Construct("match");
    }
    var flag2 = creator === null;
    if (flag2) {
      throw $S09().Construct("creator");
    }
    var expr_32 = new ($T16())();
    expr_32.Match = match;
    expr_32.Creator = creator;
    (this._specialDeviceCreators).Add(expr_32);
    var list = $S0F().Construct();
    var enumerator = ((this._inputDevices).get_Values()).GetEnumerator();

    while ($T18().prototype.MoveNext.call(enumerator)) {
      var current = $T18().prototype.get_Current.call(enumerator);
      var flag3 = (current.get_DeviceImp() !== null) && 
      match(current.get_DeviceImp());
      if (flag3) {
        list.Add(current.get_Id());
      }
    }

    for (var a$0 = list._items, i$0 = 0, l$0 = (list._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current2 = a$0[i$0];
      var inputDevice = (this._inputDevices).get_Item(current2);
      inputDevice.Disconnect();
      var expr_E7 = this.InputDeviceDisconnected;
      if (expr_E7 !== null) {
        var expr_F3 = new ($T1A())();
        expr_F3.InputDevice = inputDevice;
        expr_E7(this, expr_F3);
      }
      var deviceImp = inputDevice.get_DeviceImp();
      (this._inputDevices).Remove(current2);
      inputDevice = creator(deviceImp);
      (this._inputDevices).set_Item(current2, inputDevice);
      var expr_138 = this.InputDeviceConnected;
      if (expr_138 !== null) {
        var expr_144 = new ($T1A())();
        expr_144.InputDevice = inputDevice;
        expr_138(this, expr_144);
      }
    }
  }; 

  function Input_remove_DeviceConnected (value) {
    var inputDeviceConnected = $thisType.get_Instance().InputDeviceConnected;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T08().Enter(inputDeviceConnected, /* ref */ flag);
      $thisType.get_Instance().remove_InputDeviceConnected(value);
    } finally {
      if (flag.get()) {
        $T08().Exit(inputDeviceConnected);
      }
    }
  }; 

  function Input_remove_DeviceDisconnected (value) {
    var inputDeviceDisconnected = $thisType.get_Instance().InputDeviceDisconnected;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T08().Enter(inputDeviceDisconnected, /* ref */ flag);
      $thisType.get_Instance().remove_InputDeviceDisconnected(value);
    } finally {
      if (flag.get()) {
        $T08().Exit(inputDeviceDisconnected);
      }
    }
  }; 

  function Input_remove_InputDeviceConnected (value) {
    var eventHandler = this.InputDeviceConnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Remove(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "InputDeviceConnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function Input_remove_InputDeviceDisconnected (value) {
    var eventHandler = this.InputDeviceDisconnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Remove(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "InputDeviceDisconnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Input", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Input__ctor
    );

    $.Method({Static:true , Public:true }, "add_DeviceConnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_add_DeviceConnected
    );

    $.Method({Static:true , Public:true }, "add_DeviceDisconnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_add_DeviceDisconnected
    );

    $.Method({Static:false, Public:true }, "add_InputDeviceConnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_add_InputDeviceConnected
    );

    $.Method({Static:false, Public:true }, "add_InputDeviceDisconnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_add_InputDeviceDisconnected
    );

    $.Method({Static:true , Public:true }, "AddDriverImp", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")), 
      Input_AddDriverImp
    );

    $.Method({Static:false, Public:true }, "AddInputDriverImp", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")), 
      Input_AddInputDriverImp
    );

    $.Method({Static:false, Public:false}, "CreateInputDevice", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.InputDevice"), [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      Input_CreateInputDevice
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Input_Dispose
    );

    $.Method({Static:true , Public:true }, "get_Devices", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.InputDevice")])), 
      Input_get_Devices
    );

    $.Method({Static:true , Public:true }, "get_Drivers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")])), 
      Input_get_Drivers
    );

    $.Method({Static:false, Public:true }, "get_InputDevices", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.InputDevice")])), 
      Input_get_InputDevices
    );

    $.Method({Static:false, Public:true }, "get_InputDrivers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")])), 
      Input_get_InputDrivers
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      Input_get_Instance
    );

    $.Method({Static:true , Public:true }, "get_Keyboard", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.KeyboardDevice")), 
      Input_get_Keyboard
    );

    $.Method({Static:false, Public:true }, "get_KeyboardInput", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.KeyboardDevice")), 
      Input_get_KeyboardInput
    );

    $.Method({Static:true , Public:true }, "get_Mouse", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.MouseDevice")), 
      Input_get_Mouse
    );

    $.Method({Static:false, Public:true }, "get_MouseInput", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.MouseDevice")), 
      Input_get_MouseInput
    );

    $.Method({Static:true , Public:true }, "get_Touch", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.TouchDevice")), 
      Input_get_Touch
    );

    $.Method({Static:false, Public:true }, "get_TouchInput", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.TouchDevice")), 
      Input_get_TouchInput
    );

    $.Method({Static:true , Public:true }, "GetDevice", 
      new JSIL.MethodSignature("!!0", null, ["TDevice"]), 
      Input_GetDevice$b1
    );

    $.Method({Static:true , Public:true }, "GetDevices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), null, ["TDevice"]), 
      Input_GetDevices$b1
    );

    $.Method({Static:false, Public:true }, "GetInputDevice", 
      new JSIL.MethodSignature("!!0", null, ["TDevice"]), 
      Input_GetInputDevice$b1
    );

    $.Method({Static:false, Public:true }, "GetInputDevices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), null, ["TDevice"]), 
      Input_GetInputDevices$b1
    );

    $.Method({Static:false, Public:false}, "OnDeviceImpDisconnected", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.DeviceImpDisconnectedArgs")]), 
      Input_OnDeviceImpDisconnected
    );

    $.Method({Static:false, Public:false}, "OnNewDeviceImpConnected", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.NewDeviceImpConnectedArgs")]), 
      Input_OnNewDeviceImpConnected
    );

    $.Method({Static:false, Public:true }, "PostRender", 
      JSIL.MethodSignature.Void, 
      Input_PostRender
    );

    $.Method({Static:false, Public:true }, "PreRender", 
      JSIL.MethodSignature.Void, 
      Input_PreRender
    );

    $.Method({Static:false, Public:true }, "RegisterInputDeviceType", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Engine.Core.MatchFunc"), $asm04.TypeRef("Fusee.Engine.Core.CreatorFunc")]), 
      Input_RegisterInputDeviceType
    );

    $.Method({Static:true , Public:true }, "remove_DeviceConnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_remove_DeviceConnected
    );

    $.Method({Static:true , Public:true }, "remove_DeviceDisconnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_remove_DeviceDisconnected
    );

    $.Method({Static:false, Public:true }, "remove_InputDeviceConnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_remove_InputDeviceConnected
    );

    $.Method({Static:false, Public:true }, "remove_InputDeviceDisconnected", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")])), 
      Input_remove_InputDeviceDisconnected
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_inputDrivers", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_inputDevices", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm04.TypeRef("Fusee.Engine.Core.InputDevice")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_specialDeviceCreators", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Engine.Core.SpecialDeviceCreator")]));

    $.Field({Static:false, Public:false}, "InputDeviceConnected", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")]));

    $.Field({Static:false, Public:false}, "InputDeviceDisconnected", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")]));

    $.Field({Static:true , Public:false}, "_instance", $.Type);

    $.Property({Static:false, Public:true }, "InputDrivers", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")]));

    $.Property({Static:true , Public:true }, "Drivers", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")]));

    $.Property({Static:false, Public:true }, "InputDevices", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.InputDevice")]));

    $.Property({Static:true , Public:true }, "Devices", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.InputDevice")]));

    $.Property({Static:false, Public:true }, "MouseInput", $asm04.TypeRef("Fusee.Engine.Core.MouseDevice"));

    $.Property({Static:true , Public:true }, "Mouse", $asm04.TypeRef("Fusee.Engine.Core.MouseDevice"));

    $.Property({Static:false, Public:true }, "KeyboardInput", $asm04.TypeRef("Fusee.Engine.Core.KeyboardDevice"));

    $.Property({Static:true , Public:true }, "Keyboard", $asm04.TypeRef("Fusee.Engine.Core.KeyboardDevice"));

    $.Property({Static:false, Public:true }, "TouchInput", $asm04.TypeRef("Fusee.Engine.Core.TouchDevice"));

    $.Property({Static:true , Public:true }, "Touch", $asm04.TypeRef("Fusee.Engine.Core.TouchDevice"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    $.Event({Static:false, Public:true }, "InputDeviceConnected", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")]));

    $.Event({Static:true , Public:true }, "DeviceConnected", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")]));

    $.Event({Static:false, Public:true }, "InputDeviceDisconnected", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")]));

    $.Event({Static:true , Public:true }, "DeviceDisconnected", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.DeviceConnectionArgs")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Input+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.DeviceCategory)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.KeyboardDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.TouchDevice)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.get_Category)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$l_ctor$gb__39_0 (imp) {
    return ($IM00().Call(imp, null) === $T01().Mouse);
  }; 

  function $l$gc_$l_ctor$gb__39_1 (imp) {
    return new ($T02())(imp);
  }; 

  function $l$gc_$l_ctor$gb__39_2 (imp) {
    return ($IM00().Call(imp, null) === $T01().Keyboard);
  }; 

  function $l$gc_$l_ctor$gb__39_3 (imp) {
    return new ($T03())(imp);
  }; 

  function $l$gc_$l_ctor$gb__39_4 (imp) {
    return ($IM00().Call(imp, null) === $T01().Touch);
  }; 

  function $l$gc_$l_ctor$gb__39_5 (imp) {
    return new ($T04())(imp);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Input+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__39_0", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      $l$gc_$l_ctor$gb__39_0
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__39_1", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.InputDevice"), [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      $l$gc_$l_ctor$gb__39_1
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__39_2", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      $l$gc_$l_ctor$gb__39_2
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__39_3", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.InputDevice"), [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      $l$gc_$l_ctor$gb__39_3
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__39_4", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      $l$gc_$l_ctor$gb__39_4
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__39_5", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.InputDevice"), [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      $l$gc_$l_ctor$gb__39_5
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__39_0", $asm04.TypeRef("Fusee.Engine.Core.MatchFunc"));

    $.Field({Static:true , Public:true }, "$l$g9__39_1", $asm04.TypeRef("Fusee.Engine.Core.CreatorFunc"));

    $.Field({Static:true , Public:true }, "$l$g9__39_2", $asm04.TypeRef("Fusee.Engine.Core.MatchFunc"));

    $.Field({Static:true , Public:true }, "$l$g9__39_3", $asm04.TypeRef("Fusee.Engine.Core.CreatorFunc"));

    $.Field({Static:true , Public:true }, "$l$g9__39_4", $asm04.TypeRef("Fusee.Engine.Core.MatchFunc"));

    $.Field({Static:true , Public:true }, "$l$g9__39_5", $asm04.TypeRef("Fusee.Engine.Core.CreatorFunc"));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.InputDevice */ 

(function InputDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm03.Fusee.Engine.Common.AxisDescription))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Single))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm04.Fusee.Engine.Core.InputDevice_CalculatedAxisDescription))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.AxisImpDescription))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.AxisImpDescription))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisImpDescription)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.AxisValueChangedArgs))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm03.Fusee.Engine.Common.ButtonDescription))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Boolean))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm15.System.Collections.Generic.HashSet$b1.Of($asm0F.System.Int32))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.ButtonImpDescription))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.ButtonImpDescription))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonImpDescription)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ButtonValueChangedArgs))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisValueChangedArgs)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonValueChangedArgs)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDescription)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonDescription)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.Fusee.Engine.Core.Time)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm04.Fusee.Engine.Core.InputDevice_CalculatedAxisDescription))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm04.Fusee.Engine.Core.InputDevice_CalculatedAxisDescription))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm0F.System.Boolean))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm0F.System.Boolean))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_AxisValueCalculator)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_CalculatedAxisDescription)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDirection)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass55_0)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisBoundedType)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisNature)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass56_0)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass54_0)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass54_1)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass54_2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm03.Fusee.Engine.Common.AxisDescription), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Single), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm04.Fusee.Engine.Core.InputDevice_CalculatedAxisDescription), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.AxisValueChangedArgs]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm03.Fusee.Engine.Common.ButtonDescription), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Boolean), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.System.Collections.Generic.HashSet$b1.Of($asm0F.System.Int32), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.ButtonValueChangedArgs]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.AxisImpDescription).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.get_AxisImpDesc)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.AxisImpDescription).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.GetAxis)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.add_AxisValueChanged)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.ButtonImpDescription).GetEnumerator)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.get_ButtonImpDesc)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.ButtonImpDescription).get_Current)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.GetButton)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.add_ButtonValueChanged)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.remove_AxisValueChanged)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.remove_ButtonValueChanged)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.get_Category)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.get_Desc)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp.get_Id)) ();
  };


  function InputDevice__ctor (inpDeviceImp) {
    if (inpDeviceImp === null) {
      throw $S00().Construct("inpDeviceImp");
    }
    this._inpDevImp = inpDeviceImp;
    this._isConnected = true;
    this._axes = $S01().Construct();
    this._axesToPoll = $S02().Construct();
    this._axesToListen = $S02().Construct();
    this._calculatedAxes = $S03().Construct();
    this._nextAxisId = 0;
    var enumerator = $IM00().Call($IM01().Call(this._inpDevImp, null), null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var current = $IM03().Call(enumerator, null);
        var id = (current.AxisDesc.Id | 0);
        var flag2 = id > (this._nextAxisId | 0);
        if (flag2) {
          this._nextAxisId = id;
        }
        (this._axes).set_Item(id, current.AxisDesc.MemberwiseClone());
        var pollAxis = current.PollAxis;
        if (pollAxis) {
          (this._axesToPoll).set_Item(id, $IM04().Call(this._inpDevImp, null, id));
        } else {
          (this._axesToListen).set_Item(id, 0);
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM05().Call(enumerator, null);
      }
    }
    this._nextAxisId = (((this._nextAxisId | 0) + 1) | 0);
    var flag3 = ((this._axesToListen).get_Count() | 0) > 0;
    if (flag3) {
      $IM06().Call(this._inpDevImp, null, $T0C().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnImpAxisValueChanged", $S04(), false, false)));
    }
    this._buttons = $S05().Construct();
    this._buttonsToPoll = $S06().Construct();
    this._buttonsToListen = $S06().Construct();
    this._buttonsUp = $S07().Construct();
    this._buttonsDown = $S07().Construct();
    this._buttonsToListenJustChanged = $S06().Construct();
    var enumerator2 = $IM07().Call($IM08().Call(this._inpDevImp, null), null);
    try {

      while ($IM02().Call(enumerator2, null)) {
        var current2 = $IM09().Call(enumerator2, null);
        var id2 = (current2.ButtonDesc.Id | 0);
        (this._buttons).set_Item(id2, current2.ButtonDesc.MemberwiseClone());
        var pollButton = current2.PollButton;
        if (pollButton) {
          (this._buttonsToPoll).set_Item(id2, $IM0A().Call(this._inpDevImp, null, id2));
        } else {
          (this._buttonsToListen).set_Item(id2, false);
        }
      }
    } finally {
      if (enumerator2 !== null) {
        $IM05().Call(enumerator2, null);
      }
    }
    var flag4 = ((this._buttonsToListen).get_Count() | 0) > 0;
    if (flag4) {
      $IM0B().Call(this._inpDevImp, null, $T13().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnImpButtonValueChanged", $S08(), false, false)));
    }
  }; 

  function InputDevice_add_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T14().Combine(eventHandler2, value);
      eventHandler = $T15().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function InputDevice_add_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T14().Combine(eventHandler2, value);
      eventHandler = $T15().CompareExchange$b1($T13())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function InputDevice_Disconnect () {
    var array = $T17().ToArray$b1($T09())((this._axesToListen).get_Keys());

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var key = (array[i] | 0);
      var flag = (this.AxisValueChanged !== null) && 
      (+(this._axesToListen).get_Item(key) !== 0);
      if (flag) {
        var arg_6B_0 = this.AxisValueChanged;
        var expr_4E = new ($T18())();
        expr_4E.Axis = (this._axes).get_Item(key).MemberwiseClone();
        expr_4E.Value = 0;
        arg_6B_0(this, expr_4E);
      }
      (this._axesToListen).set_Item(key, 0);
    }
    var array2 = $T17().ToArray$b1($T09())((this._axesToPoll).get_Keys());

    for (var j = 0; j < (array2.length | 0); j = ((j + 1) | 0)) {
      var key2 = (array2[j] | 0);
      (this._axesToPoll).set_Item(key2, 0);
    }
    var array3 = $T17().ToArray$b1($T09())((this._buttonsToListen).get_Keys());

    for (var k = 0; k < (array3.length | 0); k = ((k + 1) | 0)) {
      var key3 = (array3[k] | 0);
      var flag2 = (this.ButtonValueChanged !== null) && 
      (this._buttonsToListen).get_Item(key3);
      if (flag2) {
        var arg_136_0 = this.ButtonValueChanged;
        var expr_11C = new ($T19())();
        expr_11C.Button = (this._buttons).get_Item(key3).MemberwiseClone();
        expr_11C.Pressed = false;
        arg_136_0(this, expr_11C);
      }
      (this._buttonsToListen).set_Item(key3, false);
    }
    var array4 = $T17().ToArray$b1($T09())((this._buttonsToPoll).get_Keys());

    for (var l = 0; l < (array4.length | 0); l = ((l + 1) | 0)) {
      var key4 = (array4[l] | 0);
      (this._buttonsToPoll).set_Item(key4, false);
    }
    $IM0C().Call(this._inpDevImp, null, $T0C().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnImpAxisValueChanged", $S04(), false, false)));
    $IM0D().Call(this._inpDevImp, null, $T13().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnImpButtonValueChanged", $S08(), false, false)));
    this._inpDevImp = null;
    this._isConnected = false;
  }; 

  function InputDevice_get_AxesCount () {
    return (this._axes).get_Count();
  }; 

  function InputDevice_get_AxisDesc () {
    return (this._axes).get_Values();
  }; 

  function InputDevice_get_ButtonCount () {
    return (this._buttons).get_Count();
  }; 

  function InputDevice_get_ButtonDesc () {
    return (this._buttons).get_Values();
  }; 

  function InputDevice_get_Category () {
    return $IM0E().Call(this._inpDevImp, null);
  }; 

  function InputDevice_get_Desc () {
    return $IM0F().Call(this._inpDevImp, null);
  }; 

  function InputDevice_get_DeviceImp () {
    return this._inpDevImp;
  }; 

  function InputDevice_get_Id () {
    return $IM10().Call(this._inpDevImp, null);
  }; 

  function InputDevice_get_IsConnected () {
    return this._isConnected;
  }; 

  function InputDevice_get_NewAxisID () {
    return (((this._nextAxisId | 0) + 1) | 0);
  }; 

  function InputDevice_GetAxis (axisId) {
    var num = new JSIL.BoxedVariable(0);
    if (!this._isConnected) {
      var result = 0;
    } else {
      var flag2 = this.TryGetPolledAxis(axisId, /* ref */ num);
      if (flag2) {
        result = +num.get();
      } else {
        var flag3 = (this._axesToListen).TryGetValue(axisId, /* ref */ num);
        if (!flag3) {
          throw $S09().Construct($T1C().Format("Axis Id {0} not supported by device {1}.", $T09().$Box(axisId), $IM0F().Call(this._inpDevImp, null)));
        }
        result = +num.get();
      }
    }
    return result;
  }; 

  function InputDevice_GetAxisDescription (axisId) {
    var result = new JSIL.BoxedVariable(new ($T1D())());
    var flag = (this._axes).TryGetValue(axisId, /* ref */ result);
    if (flag) {
      return result.get();
    }
    throw $S09().Construct($T1C().Format("Cannot retrieve axis information for unknon axis {0}.", $T09().$Box(axisId)));
  }; 

  function InputDevice_GetButton (buttonId) {
    var flag3 = new JSIL.BoxedVariable(false);
    if (!this._isConnected) {
      var result = false;
    } else {
      var flag2 = (this._buttonsToListen).TryGetValue(buttonId, /* ref */ flag3);
      if (flag2) {
        result = flag3.get();
      } else {
        var flag4 = (this._buttonsToPoll).ContainsKey(buttonId);
        if (!flag4) {
          throw $S09().Construct($T1C().Format("Button Id {0} not supported by device {1}.", $T09().$Box(buttonId), $IM0F().Call(this._inpDevImp, null)));
        }
        var button = $IM0A().Call(this._inpDevImp, null, buttonId);
        (this._buttonsToPoll).set_Item(buttonId, button);
        result = button;
      }
    }
    return result;
  }; 

  function InputDevice_GetButtonDescription (buttonId) {
    var result = new JSIL.BoxedVariable(new ($T1E())());
    var flag = (this._buttons).TryGetValue(buttonId, /* ref */ result);
    if (flag) {
      return result.get();
    }
    throw $S09().Construct($T1C().Format("Cannot retrieve button information for unknon button {0}.", $T09().$Box(buttonId)));
  }; 

  function InputDevice_IsButtonDown (buttonId) {
    var flag = !(this._buttons).ContainsKey(buttonId);
    if (flag) {
      throw $S09().Construct($T1C().Format("IsButtonDown called for unknon button {0}.", $T09().$Box(buttonId)));
    }
    return (this._buttonsDown).Contains(buttonId);
  }; 

  function InputDevice_IsButtonUp (buttonId) {
    var flag = !(this._buttons).ContainsKey(buttonId);
    if (flag) {
      throw $S09().Construct($T1C().Format("IsButtonDown called for unknon button {0}.", $T09().$Box(buttonId)));
    }
    return (this._buttonsUp).Contains(buttonId);
  }; 

  function InputDevice_OnImpAxisValueChanged (sender, args) {
    var flag = !(this._axesToListen).ContainsKey(args.Axis.Id);
    if (flag) {
      throw $S09().Construct($T1C().Format("Unknown Axis {0} ({1})", args.Axis.Name, $T09().$Box(args.Axis.Id)));
    }
    (this._axesToListen).set_Item(args.Axis.Id, args.Value);
    var expr_6C = this.AxisValueChanged;
    if (expr_6C !== null) {
      expr_6C(this, args);
    }
  }; 

  function InputDevice_OnImpButtonValueChanged (sender, args) {
    var flag = !(this._buttonsToListen).ContainsKey(args.Button.Id);
    if (flag) {
      throw $S09().Construct($T1C().Format("Unknown Button {0} ({1})", args.Button.Name, $T09().$Box(args.Button.Id)));
    }
    (this._buttonsToListenJustChanged).set_Item(args.Button.Id, args.Pressed);
  }; 

  function InputDevice_PostRender () {
    (this._buttonsDown).Clear();
    (this._buttonsUp).Clear();
  }; 

  function InputDevice_PreRender () {
    var num2 = new JSIL.BoxedVariable(0);
    var flag = +$T20().get_DeltaTime() !== 0;
    if (flag) {
      var enumerator = $T04().prototype.GetEnumerator.call(this._calculatedAxes);

      while ($T21().prototype.MoveNext.call(enumerator)) {
        var current = $T21().prototype.get_Current.call(enumerator).MemberwiseClone();
        current.Value.CurrentAxisValue = +current.get_Value().Calculator($T20().get_DeltaTime());
      }
    }
    if (this.AxisValueChanged !== null) {
      var array = $T17().ToArray$b1($T09())((this._axesToPoll).get_Keys());

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        var num = (array[i] | 0);
        var flag3 = !this.TryGetPolledAxis(num, /* ref */ num2);
        if (flag3) {
          throw $S09().Construct($T1C().Format("Invalid axis Id {0} - should be polled or derived.", $T09().$Box(num)));
        }
        var flag4 = +(this._axesToPoll).get_Item(num) !== +num2.get();
        if (flag4) {
          var arg_10B_0 = this.AxisValueChanged;
          var expr_F0 = new ($T18())();
          expr_F0.Axis = (this._axes).get_Item(num).MemberwiseClone();
          expr_F0.Value = +num2.get();
          arg_10B_0(this, expr_F0);
          (this._axesToPoll).set_Item(num, num2.get());
        }
      }
    }
    var array2 = $T17().ToArray$b1($T09())((this._buttonsToPoll).get_Keys());

    for (var j = 0; j < (array2.length | 0); j = ((j + 1) | 0)) {
      var num3 = (array2[j] | 0);
      var button = $IM0A().Call(this._inpDevImp, null, num3);
      var flag5 = (this._buttonsToPoll).get_Item(num3) !== button;
      if (flag5) {
        if (button) {
          (this._buttonsDown).Add(num3);
        } else {
          (this._buttonsUp).Add(num3);
        }
        var expr_1AE = this.ButtonValueChanged;
        if (expr_1AE !== null) {
          var expr_1BA = new ($T19())();
          expr_1BA.Button = (this._buttons).get_Item(num3).MemberwiseClone();
          expr_1BA.Pressed = button;
          expr_1AE(this, expr_1BA);
        }
        (this._buttonsToPoll).set_Item(num3, button);
      }
    }
    var enumerator2 = $T0E().prototype.GetEnumerator.call(this._buttonsToListenJustChanged);

    while ($T23().prototype.MoveNext.call(enumerator2)) {
      var current2 = $T23().prototype.get_Current.call(enumerator2).MemberwiseClone();
      var flag7 = current2.get_Value() !== (this._buttonsToListen).get_Item(current2.get_Key());
      if (flag7) {
        var value = current2.get_Value();
        if (value) {
          (this._buttonsDown).Add(current2.get_Key());
        } else {
          (this._buttonsUp).Add(current2.get_Key());
        }
      }
      (this._buttonsToListen).set_Item(
        current2.get_Key(), 
        current2.get_Value()
      );
      var expr_296 = this.ButtonValueChanged;
      if (expr_296 !== null) {
        var expr_2A2 = new ($T19())();
        expr_2A2.Button = (this._buttons).get_Item(current2.get_Key()).MemberwiseClone();
        expr_2A2.Pressed = current2.get_Value();
        expr_296(this, expr_2A2);
      }
    }
    (this._buttonsToListenJustChanged).Clear();
  }; 

  function InputDevice_Reconnect (deviceImp) {
    var isConnected = this._isConnected;
    if (isConnected) {
      throw $S09().Construct(("Cannot reconnect already connected input device (connected to " + $IM0F().Call(this._inpDevImp, null) + "). Disconnect first."));
    }
    if (deviceImp === null) {
      throw $S00().Construct("deviceImp");
    }
    this._inpDevImp = deviceImp;
    $IM06().Call(this._inpDevImp, null, $T0C().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnImpAxisValueChanged", $S04(), false, false)));
    $IM0B().Call(this._inpDevImp, null, $T13().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnImpButtonValueChanged", $S08(), false, false)));
    this._isConnected = true;
  }; 

  function InputDevice_RegisterCalculatedAxis (calculatedAxisDescription, calculator, initialValue) {
    var flag = (calculatedAxisDescription.Id | 0) < (this._nextAxisId | 0);
    if (flag) {
      throw $S09().Construct($T1C().Format("Invalid Id for calculated axis '{0}'. Id must be bigger or equal to {1}.", calculatedAxisDescription.Name, $T09().$Box(this._nextAxisId)));
    }
    this._nextAxisId = (calculatedAxisDescription.Id | 0);
    var expr_45 = new ($T26())();
    expr_45.AxisDesc = calculatedAxisDescription.MemberwiseClone();
    expr_45.CurrentAxisValue = +initialValue;
    expr_45.Calculator = calculator;
    var calculatedAxisDescription2 = expr_45;
    (this._calculatedAxes).set_Item(calculatedAxisDescription.Id, calculatedAxisDescription2);
    (this._axesToPoll).set_Item(calculatedAxisDescription.Id, calculatedAxisDescription2.CurrentAxisValue);
    (this._axes).set_Item(calculatedAxisDescription.Id, calculatedAxisDescription.MemberwiseClone());
  }; 

  function InputDevice_RegisterSingleButtonAxis (origButtonId, direction, rampUpTime, rampDownTime, buttonAxisId, name) {
    var buttonDescription = new JSIL.BoxedVariable(new ($T1E())());
    var $closure0 = new ($T28())();
    $closure0.$l$g4__this = this;
    $closure0.origButtonId = (origButtonId | 0);
    $closure0.rampUpTime = +rampUpTime;
    $closure0.rampDownTime = +rampDownTime;
    var flag = !(this._buttons).TryGetValue($closure0.origButtonId, /* ref */ buttonDescription);
    if (flag) {
      throw $S09().Construct($T1C().Format("Button Id {0} is not known. Cannot register button axis based on unknown button.", $T09().$Box($closure0.origButtonId)));
    }
    var flag2 = +$closure0.rampUpTime <= -3.40282347E+38;
    if (flag2) {
      $closure0.rampUpTime = -Infinity;
    }
    var flag3 = +$closure0.rampDownTime <= -3.40282347E+38;
    if (flag3) {
      $closure0.rampDownTime = -Infinity;
    }
    $closure0.closureLastBtnState = this.GetButton($closure0.origButtonId);
    $closure0.closureLastAxisValue = 0;
    $closure0.closureAnimDirection = 0;
    var calculator = $T25().New($closure0, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass55_0, "$lRegisterSingleButtonAxis$gb__0", $S0A(), false, false));
    var num = (((this._nextAxisId | 0) + 1) | 0);
    var flag4 = (buttonAxisId | 0) > num;
    if (flag4) {
      num = (buttonAxisId | 0);
    }
    var axisDescription = new ($T1D())();
    axisDescription.Id = num;
    axisDescription.Name = JSIL.Coalesce(name, JSIL.ConcatString(buttonDescription.get().Name, " Axis"));
    axisDescription.Bounded = $T29().Constant;
    axisDescription.Direction = direction;
    axisDescription.Nature = $T2A().Speed;
    axisDescription.MaxValueOrAxis = 1;
    axisDescription.MinValueOrAxis = 0;
    var axisDescription2 = axisDescription;
    this.RegisterCalculatedAxis(axisDescription2.MemberwiseClone(), calculator, 0);
    return axisDescription2;
  }; 

  function InputDevice_RegisterTwoButtonAxis (origButtonIdNegative, origButtonIdPositive, direction, rampUpTime, rampDownTime, buttonAxisId, name) {
    var buttonDescription = new JSIL.BoxedVariable(new ($T1E())());
    var buttonDescription2 = new JSIL.BoxedVariable(new ($T1E())());
    var $closure0 = new ($T2B())();
    $closure0.$l$g4__this = this;
    $closure0.origButtonIdPositive = (origButtonIdPositive | 0);
    $closure0.origButtonIdNegative = (origButtonIdNegative | 0);
    $closure0.rampDownTime = +rampDownTime;
    $closure0.rampUpTime = +rampUpTime;
    var flag = !(this._buttons).TryGetValue($closure0.origButtonIdPositive, /* ref */ buttonDescription);
    if (flag) {
      throw $S09().Construct($T1C().Format("Button Id {0} is not known. Cannot register button axis based on unknown button.", $T09().$Box($closure0.origButtonIdPositive)));
    }
    var flag2 = !(this._buttons).TryGetValue($closure0.origButtonIdNegative, /* ref */ buttonDescription2);
    if (flag2) {
      throw $S09().Construct($T1C().Format("Button Id {0} is not known. Cannot register button axis based on unknown button.", $T09().$Box($closure0.origButtonIdNegative)));
    }
    var flag3 = +$closure0.rampUpTime <= -3.40282347E+38;
    if (flag3) {
      $closure0.rampUpTime = -Infinity;
    }
    var flag4 = +$closure0.rampDownTime <= -3.40282347E+38;
    if (flag4) {
      $closure0.rampDownTime = -Infinity;
    }
    $closure0.closureLastBtnStatePos = this.GetButton($closure0.origButtonIdPositive);
    $closure0.closureLastBtnStateNeg = this.GetButton($closure0.origButtonIdNegative);
    $closure0.closureLastAxisValue = 0;
    $closure0.closureAnimDirection = 0;
    var calculator = $T25().New($closure0, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass56_0, "$lRegisterTwoButtonAxis$gb__0", $S0B(), false, false));
    var num = (((this._nextAxisId | 0) + 1) | 0);
    var flag5 = (buttonAxisId | 0) > num;
    if (flag5) {
      num = (buttonAxisId | 0);
    }
    var axisDescription = new ($T1D())();
    axisDescription.Id = num;
    axisDescription.Name = JSIL.Coalesce(name, (buttonDescription.get().Name + " " + buttonDescription2.get().Name + " Axis"));
    axisDescription.Bounded = $T29().Constant;
    axisDescription.Direction = direction;
    axisDescription.Nature = $T2A().Speed;
    axisDescription.MaxValueOrAxis = 1;
    axisDescription.MinValueOrAxis = -1;
    var axisDescription2 = axisDescription;
    this.RegisterCalculatedAxis(axisDescription2.MemberwiseClone(), calculator, 0);
    return axisDescription2;
  }; 

  function InputDevice_RegisterVelocityAxis (origAxisId, triggerButtonId, velocityAxisId, name, direction) {
    var axisDescription = new JSIL.BoxedVariable(new ($T1D())());
    var buttonDescription = new JSIL.BoxedVariable(new ($T1E())());
    var $closure0 = new ($T2C())();
    $closure0.$l$g4__this = this;
    $closure0.triggerButtonId = (triggerButtonId | 0);
    $closure0.origAxisId = (origAxisId | 0);
    var flag = !(this._axes).TryGetValue($closure0.origAxisId, /* ref */ axisDescription);
    if (flag) {
      throw $S09().Construct($T1C().Format("Axis Id {0} is not known. Cannot register derived axis based on unknown axis.", $T09().$Box($closure0.origAxisId)));
    }
    var flag2 = ($closure0.triggerButtonId >>> 0) > (0 >>> 0);
    if (flag2) {
      var $closure1 = new ($T2E())();
      $closure1.CS$$l$g8__locals1 = $closure0;
      var flag3 = !(this._buttons).TryGetValue($closure1.CS$$l$g8__locals1.triggerButtonId, /* ref */ buttonDescription);
      if (flag3) {
        throw $S09().Construct($T1C().Format("Button Id {0} is not known. Cannot register derived axis based on unknown trigger button id.", $T09().$Box($closure1.CS$$l$g8__locals1.triggerButtonId)));
      }
      $closure1.closureLastValue = +this.GetAxis($closure1.CS$$l$g8__locals1.origAxisId);
      $closure1.closureOffLastTime = true;
      var calculator = $T25().New($closure1, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass54_1, "$lRegisterVelocityAxis$gb__0", $S0C(), false, false));
    } else {
      var $closure2 = new ($T2F())();
      $closure2.CS$$l$g8__locals2 = $closure0;
      $closure2.closureLastValue = +this.GetAxis($closure2.CS$$l$g8__locals2.origAxisId);
      calculator = $T25().New($closure2, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.InputDevice_$l$gc__DisplayClass54_2, "$lRegisterVelocityAxis$gb__1", $S0D(), false, false));
    }
    var num = (((this._nextAxisId | 0) + 1) | 0);
    var flag4 = (velocityAxisId | 0) > num;
    if (flag4) {
      num = (velocityAxisId | 0);
    }
    var axisDescription2 = new ($T1D())();
    axisDescription2.Id = num;
    axisDescription2.Name = JSIL.Coalesce(name, JSIL.ConcatString(axisDescription.get().Name, " Velocity"));
    axisDescription2.Direction = (
      (direction === $T27().Unknown)
         ? axisDescription.get().Direction
         : direction)
    ;
    axisDescription2.Nature = $T2A().Speed;
    axisDescription2.Bounded = $T29().Unbound;
    axisDescription2.MaxValueOrAxis = NaN;
    axisDescription2.MinValueOrAxis = NaN;
    var axisDescription3 = axisDescription2;
    this.RegisterCalculatedAxis(axisDescription3.MemberwiseClone(), calculator, 0);
    return axisDescription3;
  }; 

  function InputDevice_remove_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T14().Remove(eventHandler2, value);
      eventHandler = $T15().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function InputDevice_remove_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T14().Remove(eventHandler2, value);
      eventHandler = $T15().CompareExchange$b1($T13())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function InputDevice_TryGetPolledAxis (iAxisId, /* ref */ value) {
    var calculatedAxisDescription = new JSIL.BoxedVariable(null);
    var flag = (this._calculatedAxes).TryGetValue(iAxisId, /* ref */ calculatedAxisDescription);
    if (flag) {
      value.set(calculatedAxisDescription.get().CurrentAxisValue);
      var result = true;
    } else {
      var flag2 = (this._axesToPoll).ContainsKey(iAxisId);
      if (flag2) {
        value.set($IM04().Call(this._inpDevImp, null, iAxisId));
        result = true;
      } else {
        value.set(0);
        result = false;
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.InputDevice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")), 
      InputDevice__ctor
    );

    $.Method({Static:false, Public:true }, "add_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      InputDevice_add_AxisValueChanged
    );

    $.Method({Static:false, Public:true }, "add_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      InputDevice_add_ButtonValueChanged
    );

    $.Method({Static:false, Public:false}, "Disconnect", 
      JSIL.MethodSignature.Void, 
      InputDevice_Disconnect
    );

    $.Method({Static:false, Public:true }, "get_AxesCount", 
      JSIL.MethodSignature.Return($.Int32), 
      InputDevice_get_AxesCount
    );

    $.Method({Static:false, Public:true }, "get_AxisDesc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisDescription")])), 
      InputDevice_get_AxisDesc
    );

    $.Method({Static:false, Public:true }, "get_ButtonCount", 
      JSIL.MethodSignature.Return($.Int32), 
      InputDevice_get_ButtonCount
    );

    $.Method({Static:false, Public:true }, "get_ButtonDesc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")])), 
      InputDevice_get_ButtonDesc
    );

    $.Method({Static:false, Public:true }, "get_Category", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.DeviceCategory")), 
      InputDevice_get_Category
    );

    $.Method({Static:false, Public:true }, "get_Desc", 
      JSIL.MethodSignature.Return($.String), 
      InputDevice_get_Desc
    );

    $.Method({Static:false, Public:false}, "get_DeviceImp", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")), 
      InputDevice_get_DeviceImp
    );

    $.Method({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String), 
      InputDevice_get_Id
    );

    $.Method({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean), 
      InputDevice_get_IsConnected
    );

    $.Method({Static:false, Public:true }, "get_NewAxisID", 
      JSIL.MethodSignature.Return($.Int32), 
      InputDevice_get_NewAxisID
    );

    $.Method({Static:false, Public:true }, "GetAxis", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      InputDevice_GetAxis
    );

    $.Method({Static:false, Public:true }, "GetAxisDescription", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.AxisDescription"), [$.Int32]), 
      InputDevice_GetAxisDescription
    );

    $.Method({Static:false, Public:true }, "GetButton", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      InputDevice_GetButton
    );

    $.Method({Static:false, Public:true }, "GetButtonDescription", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ButtonDescription"), [$.Int32]), 
      InputDevice_GetButtonDescription
    );

    $.Method({Static:false, Public:true }, "IsButtonDown", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      InputDevice_IsButtonDown
    );

    $.Method({Static:false, Public:true }, "IsButtonUp", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      InputDevice_IsButtonUp
    );

    $.Method({Static:false, Public:false}, "OnImpAxisValueChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]), 
      InputDevice_OnImpAxisValueChanged
    );

    $.Method({Static:false, Public:false}, "OnImpButtonValueChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]), 
      InputDevice_OnImpButtonValueChanged
    );

    $.Method({Static:false, Public:true }, "PostRender", 
      JSIL.MethodSignature.Void, 
      InputDevice_PostRender
    );

    $.Method({Static:false, Public:false}, "PreRender", 
      JSIL.MethodSignature.Void, 
      InputDevice_PreRender
    );

    $.Method({Static:false, Public:false}, "Reconnect", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")), 
      InputDevice_Reconnect
    );

    $.Method({Static:false, Public:true }, "RegisterCalculatedAxis", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"), $asm04.TypeRef("Fusee.Engine.Core.InputDevice+AxisValueCalculator"), 
          $.Single
        ]), 
      InputDevice_RegisterCalculatedAxis
    );

    $.Method({Static:false, Public:true }, "RegisterSingleButtonAxis", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.AxisDescription"), [
          $.Int32, $asm03.TypeRef("Fusee.Engine.Common.AxisDirection"), 
          $.Single, $.Single, 
          $.Int32, $.String
        ]), 
      InputDevice_RegisterSingleButtonAxis
    );

    $.Method({Static:false, Public:true }, "RegisterTwoButtonAxis", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.AxisDescription"), [
          $.Int32, $.Int32, 
          $asm03.TypeRef("Fusee.Engine.Common.AxisDirection"), $.Single, 
          $.Single, $.Int32, 
          $.String
        ]), 
      InputDevice_RegisterTwoButtonAxis
    );

    $.Method({Static:false, Public:true }, "RegisterVelocityAxis", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.AxisDescription"), [
          $.Int32, $.Int32, 
          $.Int32, $.String, 
          $asm03.TypeRef("Fusee.Engine.Common.AxisDirection")
        ]), 
      InputDevice_RegisterVelocityAxis
    );

    $.Method({Static:false, Public:true }, "remove_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      InputDevice_remove_AxisValueChanged
    );

    $.Method({Static:false, Public:true }, "remove_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      InputDevice_remove_ButtonValueChanged
    );

    $.Method({Static:false, Public:false}, "TryGetPolledAxis", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single])]), 
      InputDevice_TryGetPolledAxis
    );

    $.Field({Static:false, Public:false}, "_inpDevImp", $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_axes", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm03.TypeRef("Fusee.Engine.Common.AxisDescription")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_axesToPoll", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Single]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_axesToListen", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Single]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buttons", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buttonsToPoll", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buttonsToListen", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buttonsToListenJustChanged", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buttonsUp", $asm15.TypeRef("System.Collections.Generic.HashSet`1", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buttonsDown", $asm15.TypeRef("System.Collections.Generic.HashSet`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "_nextAxisId", $.Int32);

    $.Field({Static:false, Public:false}, "_isConnected", $.Boolean);

    $.Field({Static:false, Public:false}, "AxisValueChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]));

    $.Field({Static:false, Public:false}, "ButtonValueChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]));

    $.Field({Static:false, Public:false}, "_calculatedAxes", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm04.TypeRef("Fusee.Engine.Core.InputDevice+CalculatedAxisDescription")]));

    $.Property({Static:false, Public:false}, "DeviceImp", $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp"));

    $.Property({Static:false, Public:true }, "NewAxisID", $.Int32);

    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "Desc", $.String);

    $.Property({Static:false, Public:true }, "Category", $asm03.TypeRef("Fusee.Engine.Common.DeviceCategory"));

    $.Property({Static:false, Public:true }, "AxesCount", $.Int32);

    $.Property({Static:false, Public:true }, "AxisDesc", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisDescription")]));

    $.Property({Static:false, Public:true }, "ButtonCount", $.Int32);

    $.Property({Static:false, Public:true }, "ButtonDesc", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")]));

    $.Event({Static:false, Public:true }, "AxisValueChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]));

    $.Event({Static:false, Public:true }, "ButtonValueChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Engine.Core.InputDevice+AxisValueCalculator */ 

JSIL.MakeDelegate("Fusee.Engine.Core.InputDevice+AxisValueCalculator", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Single"), [$asm0F.TypeRef("System.Single")]));

/* class Fusee.Engine.Core.InputDevice+CalculatedAxisDescription */ 

(function CalculatedAxisDescription$Members () {
  var $, $thisType;

  function CalculatedAxisDescription__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.InputDevice+CalculatedAxisDescription", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CalculatedAxisDescription__ctor
    );

    $.Field({Static:false, Public:true }, "AxisDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Field({Static:false, Public:true }, "CurrentAxisValue", $.Single);

    $.Field({Static:false, Public:true }, "Calculator", $asm04.TypeRef("Fusee.Engine.Core.InputDevice+AxisValueCalculator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_0 */ 

(function $l$gc__DisplayClass54_0$Members () {
  var $, $thisType;

  function $l$gc__DisplayClass54_0__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass54_0__ctor
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm04.TypeRef("Fusee.Engine.Core.InputDevice"));

    $.Field({Static:false, Public:true }, "triggerButtonId", $.Int32);

    $.Field({Static:false, Public:true }, "origAxisId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_1 */ 

(function $l$gc__DisplayClass54_1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };


  function $l$gc__DisplayClass54_1__ctor () {
  }; 

  function $l$gc__DisplayClass54_1_$lRegisterVelocityAxis$gb__0 (deltaTime) {
    var flag = +deltaTime <= 1.401298E-45;
    if (flag) {
      var result = 0;
    } else {
      var flag2 = !(this.CS$$l$g8__locals1.$l$g4__this).GetButton(this.CS$$l$g8__locals1.triggerButtonId);
      if (flag2) {
        this.closureOffLastTime = true;
        result = 0;
      } else {
        var flag3 = this.closureOffLastTime;
        if (flag3) {
          this.closureLastValue = +(this.CS$$l$g8__locals1.$l$g4__this).GetAxis(this.CS$$l$g8__locals1.origAxisId);
          this.closureOffLastTime = false;
        }
        var axis = +(this.CS$$l$g8__locals1.$l$g4__this).GetAxis(this.CS$$l$g8__locals1.origAxisId);
        var num = +(((axis - +this.closureLastValue) / +deltaTime));
        this.closureLastValue = axis;
        result = num;
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass54_1__ctor
    );

    $.Method({Static:false, Public:false}, "$lRegisterVelocityAxis$gb__0", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      $l$gc__DisplayClass54_1_$lRegisterVelocityAxis$gb__0
    );

    $.Field({Static:false, Public:true }, "closureOffLastTime", $.Boolean);

    $.Field({Static:false, Public:true }, "closureLastValue", $.Single);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm04.TypeRef("Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_2 */ 

(function $l$gc__DisplayClass54_2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };


  function $l$gc__DisplayClass54_2__ctor () {
  }; 

  function $l$gc__DisplayClass54_2_$lRegisterVelocityAxis$gb__1 (deltaTime) {
    var flag = +deltaTime <= 1.401298E-45;
    if (flag) {
      var result = 0;
    } else {
      var axis = +(this.CS$$l$g8__locals2.$l$g4__this).GetAxis(this.CS$$l$g8__locals2.origAxisId);
      var num = +(((axis - +this.closureLastValue) / +deltaTime));
      this.closureLastValue = axis;
      result = num;
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass54_2__ctor
    );

    $.Method({Static:false, Public:false}, "$lRegisterVelocityAxis$gb__1", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      $l$gc__DisplayClass54_2_$lRegisterVelocityAxis$gb__1
    );

    $.Field({Static:false, Public:true }, "closureLastValue", $.Single);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals2", $asm04.TypeRef("Fusee.Engine.Core.InputDevice+<>c__DisplayClass54_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.InputDevice+<>c__DisplayClass55_0 */ 

(function $l$gc__DisplayClass55_0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };


  function $l$gc__DisplayClass55_0__ctor () {
  }; 

  function $l$gc__DisplayClass55_0_$lRegisterSingleButtonAxis$gb__0 (deltaTime) {
    var button = (this.$l$g4__this).GetButton(this.origButtonId);
    var flag = button !== this.closureLastBtnState;
    if (flag) {
      this.closureAnimDirection = +(((
          button
             ? 0
             : 1)
         | 0) - ((
          this.closureLastBtnState
             ? 0
             : 1)
         | 0));
      this.closureLastBtnState = button;
    }
    if (+this.closureAnimDirection > 0) {
      var num = +this.closureLastAxisValue + +((+deltaTime / +this.rampUpTime));
      var flag3 = num >= 1;
      if (flag3) {
        this.closureAnimDirection = 0;
        num = 1;
      }
    } else {
      if (+this.closureAnimDirection < 0) {
        num = +this.closureLastAxisValue - +((+deltaTime / +this.rampDownTime));
        var flag5 = num < 0;
        if (flag5) {
          this.closureAnimDirection = 0;
          num = 0;
        }
      } else {
        num = +this.closureLastAxisValue;
      }
    }
    this.closureLastAxisValue = num;
    return num;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.InputDevice+<>c__DisplayClass55_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass55_0__ctor
    );

    $.Method({Static:false, Public:false}, "$lRegisterSingleButtonAxis$gb__0", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      $l$gc__DisplayClass55_0_$lRegisterSingleButtonAxis$gb__0
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm04.TypeRef("Fusee.Engine.Core.InputDevice"));

    $.Field({Static:false, Public:true }, "origButtonId", $.Int32);

    $.Field({Static:false, Public:true }, "closureLastBtnState", $.Boolean);

    $.Field({Static:false, Public:true }, "closureAnimDirection", $.Single);

    $.Field({Static:false, Public:true }, "closureLastAxisValue", $.Single);

    $.Field({Static:false, Public:true }, "rampUpTime", $.Single);

    $.Field({Static:false, Public:true }, "rampDownTime", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.InputDevice+<>c__DisplayClass56_0 */ 

(function $l$gc__DisplayClass56_0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };


  function $l$gc__DisplayClass56_0__ctor () {
  }; 

  function $l$gc__DisplayClass56_0_$lRegisterTwoButtonAxis$gb__0 (deltaTime) {
    var button = (this.$l$g4__this).GetButton(this.origButtonIdPositive);
    var flag = button !== this.closureLastBtnStatePos;
    if (flag) {
      this.closureAnimDirection = +(((
          button
             ? 1
             : 0)
         | 0) - ((
          this.closureLastBtnStatePos
             ? 1
             : 0)
         | 0));
      this.closureLastBtnStatePos = button;
    }
    var button2 = (this.$l$g4__this).GetButton(this.origButtonIdNegative);
    var flag2 = button2 !== this.closureLastBtnStateNeg;
    if (flag2) {
      this.closureAnimDirection = +(-+(((
            button2
               ? 1
               : 0)
           | 0) - ((
            this.closureLastBtnStateNeg
               ? 1
               : 0)
           | 0)));
      this.closureLastBtnStateNeg = button2;
    }
    var num = 0;
    var num2 = +this.rampDownTime;
    if (button | button2) {
      num = +this.closureAnimDirection;
      num2 = +this.rampUpTime;
    }
    if (+this.closureAnimDirection > 0) {
      var num3 = +this.closureLastAxisValue + +((+deltaTime / num2));
      var flag5 = num3 >= num;
      if (flag5) {
        this.closureAnimDirection = 0;
        num3 = num;
      }
    } else {
      if (+this.closureAnimDirection < 0) {
        num3 = +this.closureLastAxisValue - +((+deltaTime / num2));
        var flag7 = num3 <= num;
        if (flag7) {
          this.closureAnimDirection = 0;
          num3 = num;
        }
      } else {
        num3 = +this.closureLastAxisValue;
      }
    }
    this.closureLastAxisValue = num3;
    return num3;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.InputDevice+<>c__DisplayClass56_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass56_0__ctor
    );

    $.Method({Static:false, Public:false}, "$lRegisterTwoButtonAxis$gb__0", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      $l$gc__DisplayClass56_0_$lRegisterTwoButtonAxis$gb__0
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm04.TypeRef("Fusee.Engine.Core.InputDevice"));

    $.Field({Static:false, Public:true }, "origButtonIdPositive", $.Int32);

    $.Field({Static:false, Public:true }, "closureLastBtnStatePos", $.Boolean);

    $.Field({Static:false, Public:true }, "closureAnimDirection", $.Single);

    $.Field({Static:false, Public:true }, "origButtonIdNegative", $.Int32);

    $.Field({Static:false, Public:true }, "closureLastBtnStateNeg", $.Boolean);

    $.Field({Static:false, Public:true }, "rampDownTime", $.Single);

    $.Field({Static:false, Public:true }, "rampUpTime", $.Single);

    $.Field({Static:false, Public:true }, "closureLastAxisValue", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.JometriMesh */ 

(function JometriMesh$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Face))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };


  function JometriMesh__ctor (geometry) {
    var vertices = new JSIL.BoxedVariable(null);
    var triangles = new JSIL.BoxedVariable(null);
    var list = new JSIL.BoxedVariable(null);
    $T04().prototype._ctor.call(this);
    $thisType.ConvertToMesh(geometry, /* ref */ vertices, /* ref */ triangles, /* ref */ list);
    this.set_Vertices(vertices.get());
    this.set_Triangles(triangles.get());
    this.set_Normals($T03().prototype.ToArray.call(list.get()));
  }; 

  function JometriMesh_ConvertToMesh (geometry, /* ref */ vertices, /* ref */ triangles, /* ref */ normals) {
    var $temp00, $temp01;
    var list = $T07().ToList$b1($T06())(geometry.GetAllFaces());
    var flag = (list.get_Item(0).Handle | 0) === 1;
    if (flag) {
      list.RemoveAt(0);
    }
    var count = (list.get_Count() | 0);
    var num = Math.imul(count, 3);
    var list2 = $S00().Construct();
    vertices.set(JSIL.Array.New($T0A(), num));
    triangles.set(JSIL.Array.New($T0B(), num));
    normals.set($S00().Construct());

    for (var a$0 = list._items, i$0 = 0, l$0 = (list._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current = a$0[i$0].MemberwiseClone();
      if ((current.Handle | 0) !== 1) {
        var list3 = $T07().ToList$b1($T0D())(geometry.GetFaceVertices(current.Handle));
        var flag3 = (list3.get_Count() | 0) > 3;
        if (flag3) {
          throw $S01().Construct("Invalid triangle - face has more than 3 Vertices");
        }

        for (var a$1 = list3._items, i$1 = 0, l$1 = (list3._size | 0); i$1 < l$1; ($temp01 = i$1, 
            i$1 = ((i$1 + 1) | 0), 
            $temp01)) {
          var current2 = a$1[i$1].MemberwiseClone();
          list2.Add(current2.VertData.Pos.MemberwiseClone());
          var flag4 = $T0A().op_Equality(current.FaceData.FaceNormal.MemberwiseClone(), $T0A().Zero.MemberwiseClone());
          if (flag4) {
            geometry.SetFaceNormal($T07().ToList$b1($T0D())(geometry.GetFaceOuterVertices(current.Handle)), current);
          }
          (normals.get()).Add(current.FaceData.FaceNormal.MemberwiseClone());
        }
      }
    }

    for (var i = 0; i < (vertices.get().length | 0); i = ((i + 1) | 0)) {
      vertices.get()[i] = list2.get_Item(i).MemberwiseClone();
      triangles.get()[i] = (i & 0xFFFF);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
      Name: "Fusee.Engine.Core.JometriMesh", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Geometry")), 
      JometriMesh__ctor
    );

    $.Method({Static:true , Public:false}, "ConvertToMesh", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt16])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("Fusee.Math.Core.float3")])])
        ]), 
      JometriMesh_ConvertToMesh
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.KeyboardDevice */ 

(function KeyboardDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDirection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.KeyCodes)) ();
  };


  function KeyboardDevice__ctor (inpDeviceImp) {
    $T01().prototype._ctor.call(this, inpDeviceImp);
    this._leftRightAxis = (this.RegisterTwoButtonAxis(
      37, 
      39, 
      $T02().X, 
      0.15, 
      0.35, 
      0, 
      null
    ).Id | 0);
    this._upDownAxis = (this.RegisterTwoButtonAxis(
      40, 
      38, 
      $T02().Y, 
      0.15, 
      0.35, 
      0, 
      null
    ).Id | 0);
    this._adAxis = (this.RegisterTwoButtonAxis(
      65, 
      68, 
      $T02().X, 
      0.15, 
      0.35, 
      0, 
      null
    ).Id | 0);
    this._wsAxis = (this.RegisterTwoButtonAxis(
      83, 
      87, 
      $T02().Y, 
      0.15, 
      0.35, 
      0, 
      null
    ).Id | 0);
  }; 

  function KeyboardDevice_get_ADAxis () {
    return this.GetAxis(this._adAxis);
  }; 

  function KeyboardDevice_get_LeftRightAxis () {
    return this.GetAxis(this._leftRightAxis);
  }; 

  function KeyboardDevice_get_UpDownAxis () {
    return this.GetAxis(this._upDownAxis);
  }; 

  function KeyboardDevice_get_WSAxis () {
    return this.GetAxis(this._wsAxis);
  }; 

  function KeyboardDevice_GetKey (key) {
    return this.GetButton(key.valueOf());
  }; 

  function KeyboardDevice_IsKeyDown (key) {
    return this.IsButtonDown(key.valueOf());
  }; 

  function KeyboardDevice_IsKeyUp (key) {
    return this.IsButtonUp(key.valueOf());
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.InputDevice"), 
      Name: "Fusee.Engine.Core.KeyboardDevice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")), 
      KeyboardDevice__ctor
    );

    $.Method({Static:false, Public:true }, "get_ADAxis", 
      JSIL.MethodSignature.Return($.Single), 
      KeyboardDevice_get_ADAxis
    );

    $.Method({Static:false, Public:true }, "get_LeftRightAxis", 
      JSIL.MethodSignature.Return($.Single), 
      KeyboardDevice_get_LeftRightAxis
    );

    $.Method({Static:false, Public:true }, "get_UpDownAxis", 
      JSIL.MethodSignature.Return($.Single), 
      KeyboardDevice_get_UpDownAxis
    );

    $.Method({Static:false, Public:true }, "get_WSAxis", 
      JSIL.MethodSignature.Return($.Single), 
      KeyboardDevice_get_WSAxis
    );

    $.Method({Static:false, Public:true }, "GetKey", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Fusee.Engine.Common.KeyCodes")]), 
      KeyboardDevice_GetKey
    );

    $.Method({Static:false, Public:true }, "IsKeyDown", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Fusee.Engine.Common.KeyCodes")]), 
      KeyboardDevice_IsKeyDown
    );

    $.Method({Static:false, Public:true }, "IsKeyUp", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Fusee.Engine.Common.KeyCodes")]), 
      KeyboardDevice_IsKeyUp
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_leftRightAxis", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_upDownAxis", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_adAxis", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_wsAxis", $.Int32);

    $.Property({Static:false, Public:true }, "UpDownAxis", $.Single);

    $.Property({Static:false, Public:true }, "LeftRightAxis", $.Single);

    $.Property({Static:false, Public:true }, "ADAxis", $.Single);

    $.Property({Static:false, Public:true }, "WSAxis", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.LegacyShaderCodeBuilder */ 

(function LegacyShaderCodeBuilder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialPBRComponent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.Fusee.Serialization.WeightComponent)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.LightingCalculationMethod)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Text.StringBuilder)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialLightComponent)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Globalization.CultureInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.LightResult), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent")))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Text.StringBuilder, null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialComponent")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Text.StringBuilder, [$asm0F.System.String]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Text.StringBuilder, [$asm0F.System.String, $asm0F.System.Object]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };


  function LegacyShaderCodeBuilder__ctor$00 (pbrMaterialPbrComponent, mesh, wc) {
    this._lightingCalculationMethod = $T04().SIMPLE;
    if (wc !== null) {
      this._hasWeightMap = true;
      this._nBones = ((wc.Joints).get_Count() | 0);
    } else {
      this._nBones = 0;
    }
    this._normalizeNormals = true;
    var flag2 = mesh !== null;
    if (flag2) {
      this.AnalyzeMesh(mesh);
    } else {
      this._hasVertices = this._hasNormals = this._hasUVs = true;
    }
    $S01().CallVirtual("AnalyzeMaterial", null, this, pbrMaterialPbrComponent);
    var stringBuilder = $S02().Construct();
    this.MeshInputDeclarations(stringBuilder);
    this.MatrixDeclarations(stringBuilder);
    this.VSBody(stringBuilder);
    this._vs = stringBuilder.toString();
    var stringBuilder2 = $S02().Construct();
    this.PixelInputDeclarations(stringBuilder2);
    this.PSPBRBody(stringBuilder2, pbrMaterialPbrComponent);
    this._ps = stringBuilder2.toString();
  }; 

  function LegacyShaderCodeBuilder__ctor$01 (mlc, mesh, wc) {
    this._lightingCalculationMethod = $T04().SIMPLE;
    if (wc !== null) {
      this._hasWeightMap = true;
      this._nBones = ((wc.Joints).get_Count() | 0);
    } else {
      this._nBones = 0;
    }
    this._normalizeNormals = true;
    var flag2 = mesh !== null;
    if (flag2) {
      this.AnalyzeMesh(mesh);
    } else {
      this._hasVertices = this._hasNormals = this._hasUVs = true;
    }
    $S03().CallVirtual("AnalyzeMaterial", null, this, mlc);
    var stringBuilder = $S02().Construct();
    this.MeshInputDeclarations(stringBuilder);
    this.MatrixDeclarations(stringBuilder);
    this.VSBody(stringBuilder);
    this._vs = stringBuilder.toString();
    var stringBuilder2 = $S02().Construct();
    this.PixelInputDeclarations(stringBuilder2);
    this.PSCustomBody(stringBuilder2, mlc);
    this._ps = stringBuilder2.toString();
  }; 

  function LegacyShaderCodeBuilder__ctor$02 (mc, mesh, wc) {
    this._lightingCalculationMethod = $T04().SIMPLE;
    if (wc !== null) {
      this._hasWeightMap = true;
      this._nBones = ((wc.Joints).get_Count() | 0);
    } else {
      this._nBones = 0;
    }
    this._normalizeNormals = true;
    var flag2 = mesh !== null;
    if (flag2) {
      this.AnalyzeMesh(mesh);
    } else {
      this._hasVertices = this._hasNormals = this._hasUVs = true;
    }
    $S04().CallVirtual("AnalyzeMaterial", null, this, mc);
    var stringBuilder = $S02().Construct();
    this.MeshInputDeclarations(stringBuilder);
    this.MatrixDeclarations(stringBuilder);
    this.VSBody(stringBuilder);
    this._vs = stringBuilder.toString();
    var stringBuilder2 = $S02().Construct();
    this.PixelInputDeclarations(stringBuilder2);
    this.PSBody(stringBuilder2);
    this._ps = stringBuilder2.toString();
  }; 

  function LegacyShaderCodeBuilder_AddApplyLightCalculation (ps, mlc) {
    if (this._hasApplyLightString) {
      var flag2 = !$thisType.CheckApplyLightStringForErrors(mlc.ApplyLightString);
      if (flag2) {
        throw $S05().Construct(("Error while compiling ApplyLight(). Are you sure this:\n " + mlc.ApplyLightString + " \nis correct?\nPerhaps (re)consult the documentation of MaterialLightComponent class."));
      }
      $S06().CallVirtual("Append", null, ps, JSIL.ConcatString("\n\n", mlc.ApplyLightString));
    }
  }; 

  function LegacyShaderCodeBuilder_AddBlinnphongLightning (ps) {
    this.AddNormalVec(ps);
    this.AddCameraVec(ps);
    this.AddLightVec(ps);
    var hasEmissive = this._hasEmissive;
    if (hasEmissive) {
      $S06().CallVirtual("Append", null, ps, "\n\n    //*********** Emissive *********\n");
      this.AddChannelBaseColorCalculation(ps, this._hasEmissiveTexture, "Emissive");
    }
    $S06().CallVirtual("Append", null, ps, "\n\n    //*********** DIFFUSE *********\n");
    this.AddChannelBaseColorCalculation(ps, this._hasDiffuseTexture, "Diffuse");
    $S06().CallVirtual("Append", null, ps, "\n\n    //*********** Specular *********\n");
    this.AddChannelBaseColorCalculation(ps, this._hasSpecularTexture, "Specular");
    $S06().CallVirtual("Append", null, ps, "\n\n   varying vec4 surfacePos; \n");
    $S06().CallVirtual("Append", null, ps, "vec3 ApplyLight(Light light) { \n\n");
    $S06().CallVirtual("Append", null, ps, "// switch type: 0 = Point; 1 = Parallel; 2 = Spot;\n");
    $S06().CallVirtual("Append", null, ps, "////// POINTLIGHT \n\n");
    $S06().CallVirtual("Append", null, ps, "if(light.lightType == 0) { \n\n");
    $S06().CallVirtual("Append", null, ps, "vec3 result = vec3(0, 0, 0); \n\n");
    $S06().CallVirtual("Append", null, ps, "vec3 DiffuseBaseColor = DiffuseColor; \n\n");
    $S06().CallVirtual("Append", null, ps, "float diffFactor = dot(LDir, Normal); \n\n");
    $S06().CallVirtual("Append", null, ps, "  result += DiffuseBaseColor * light.intensities * light.ambientCoefficient * max(diffFactor, 0.0); \n\n");
    $S06().CallVirtual("Append", null, ps, "  if (diffFactor > 0.0) \n\n");
    $S06().CallVirtual("Append", null, ps, " { \n\n");
    $S06().CallVirtual("Append", null, ps, " vec3 SpecularBaseColor = SpecularColor; \n\n");
    $S06().CallVirtual("Append", null, ps, " vec3 h = normalize(light.coneDirection + Camera); \n\n");
    $S06().CallVirtual("Append", null, ps, " result += SpecularBaseColor * light.intensities * light.ambientCoefficient * SpecularIntensity * pow(max(0.0, dot(h, vNormal)), SpecularShininess); \n\n");
    $S06().CallVirtual("Append", null, ps, " } \n\n");
    $S06().CallVirtual("Append", null, ps, " return result; \n\n");
    $S06().CallVirtual("Append", null, ps, "     }\n\n");
    $S06().CallVirtual("Append", null, ps, "////// SPOTLIGHT \n\n");
    $S06().CallVirtual("Append", null, ps, "if(light.lightType == 2) { \n\n");
    $S06().CallVirtual("Append", null, ps, " vec3 surfaceToLight; \n");
    $S06().CallVirtual("Append", null, ps, "  float attenuation = 1.0; \n\n");
    $S06().CallVirtual("Append", null, ps, " surfaceToLight = normalize(light.position.xyz - surfacePos.xyz); \n");
    $S06().CallVirtual("Append", null, ps, " float distanceToLight = length(light.position.xyz - surfacePos.xyz); \n");
    $S06().CallVirtual("Append", null, ps, "  attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2.0)); \n\n");
    $S06().CallVirtual("Append", null, ps, " //cone restrictions (affects attenuation) \n");
    $S06().CallVirtual("Append", null, ps, " float lightToSurfaceAngle = degrees(acos(dot(-surfaceToLight, normalize(light.coneDirection)))); \n\n");
    $S06().CallVirtual("Append", null, ps, " if(lightToSurfaceAngle > light.coneAngle) { \n\n");
    $S06().CallVirtual("Append", null, ps, "  attenuation = 0.0; } \n\n");
    $S06().CallVirtual("Append", null, ps, "vec3 result = vec3(0, 0, 0); \n\n");
    $S06().CallVirtual("Append", null, ps, "vec3 DiffuseBaseColor = DiffuseColor; \n\n");
    $S06().CallVirtual("Append", null, ps, "float diffFactor = dot(LDir, Normal); \n\n");
    $S06().CallVirtual("Append", null, ps, "  result += attenuation * DiffuseBaseColor * light.intensities * light.ambientCoefficient * max(diffFactor, 0.0); \n\n");
    $S06().CallVirtual("Append", null, ps, "  if (diffFactor > 0.0) \n\n");
    $S06().CallVirtual("Append", null, ps, " { \n\n");
    $S06().CallVirtual("Append", null, ps, " vec3 SpecularBaseColor = SpecularColor; \n\n");
    $S06().CallVirtual("Append", null, ps, " vec3 h = normalize(light.coneDirection + Camera); \n\n");
    $S06().CallVirtual("Append", null, ps, " result += attenuation * SpecularBaseColor * light.intensities * light.ambientCoefficient * SpecularIntensity * pow(max(0.0, dot(h, Normal)), SpecularShininess); \n\n");
    $S06().CallVirtual("Append", null, ps, " } \n\n");
    $S06().CallVirtual("Append", null, ps, " return result; \n\n");
    $S06().CallVirtual("Append", null, ps, "     } \n\n");
    $S06().CallVirtual("Append", null, ps, "}\n\n");
  }; 

  function LegacyShaderCodeBuilder_AddCameraVec (ps) {
    if (this._hasSpecular) {
      $S06().CallVirtual("Append", null, ps, "    vec3 Camera = vViewDir;\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AddChannelBaseColorCalculation (ps, hasChannelTexture, channelName) {
    var flag = !hasChannelTexture || 
    !this._hasUVs;
    if (flag) {
      $S06().CallVirtual("Append", null, ps, "    vec3 ");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "BaseColor = ");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "Color;\n");
    } else {
      $S06().CallVirtual("Append", null, ps, "    vec3 ");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "BaseColor = ");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "Color * (1.0 - ");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "Mix) + texture2D(");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "Texture, vUV).rgb * ");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "Mix;\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AddcooktorranceLightning (ps) {
    $S06().CallVirtual("Append", null, ps, "\n\n vec3 ApplyLight() { return vec3(0.0, 1.0, 1.0); } \n\n");
  }; 

  function LegacyShaderCodeBuilder_AddcooktorrancePBRMat (ps, mpbr) {
    var hasEmissive = this._hasEmissive;
    if (hasEmissive) {
      $S06().CallVirtual("Append", null, ps, "\n\n    //*********** Emissive *********\n");
      this.AddChannelBaseColorCalculation(ps, this._hasEmissiveTexture, "Emissive");
    }
    $S06().CallVirtual("Append", null, ps, "\n\n    //*********** DIFFUSE *********\n");
    this.AddChannelBaseColorCalculation(ps, this._hasDiffuseTexture, "Diffuse");
    $S06().CallVirtual("Append", null, ps, "\n\n    //*********** Specular *********\n");
    this.AddChannelBaseColorCalculation(ps, this._hasSpecularTexture, "Specular");
    $S06().CallVirtual("Append", null, ps, "\n\n   varying vec4 surfacePos; \n");
    $S06().CallVirtual("Append", null, ps, "\n\n   varying mat4 FUSEE_ITMV; \n");
    $S06().CallVirtual("Append", null, ps, "\n\n   varying vec3 oNormal; \n");
    $S06().CallVirtual("Append", null, ps, "vec3 ApplyLight(Light light) { \n\n");
    $S06().CallVirtual("Append", null, ps, " \n\nfloat roughnessValue = ");
    $S07().CallVirtual("AppendFormat", null, ps, "{0} ;\n", $T0D().__Type__.__PublicInterface__.$ToString(mpbr.RoughnessValue, "00000.00", $T0E().get_InvariantCulture()));
    $S07().CallVirtual("AppendFormat", null, ps, "float F0 = {0};\n", $T0D().__Type__.__PublicInterface__.$ToString(mpbr.FresnelReflectance, "00000.00", $T0E().get_InvariantCulture()));
    $S07().CallVirtual("AppendFormat", null, ps, "float k = {0};\n", $T0D().__Type__.__PublicInterface__.$ToString(mpbr.DiffuseFraction, "00000.00", $T0E().get_InvariantCulture()));
    $S06().CallVirtual("Append", null, ps, "vec3 lightColor = light.intensities;\n\nvec3 normal = Normal;\n\n// do the lighting calculation for each fragment.\nfloat NdotL = max(dot(normal, normalize(Camera)), 0.0);\n\n float specular = 0.0;\n\nif(NdotL > 0.0) {\n\nvec3 eyeDir = vViewDir;\n// calculate intermediary values\nvec3 halfVector = normalize(eyeDir + Camera);\nfloat NdotH = max(dot(normal, halfVector), 0.0); \nfloat NdotV = max(dot(normal, eyeDir), 0.0); // note: this could also be NdotL, which is the same value\nfloat VdotH = max(dot(eyeDir, halfVector), 0.0);\nfloat mSquared = roughnessValue * roughnessValue;\n\n// geometric attenuation\nfloat NH2 = 2.0 * NdotH;\nfloat g1 = (NH2 * NdotV) / VdotH;\nfloat g2 = (NH2 * NdotL) / VdotH;\nfloat geoAtt = min(1.0, min(g1, g2));\n\n // roughness (or: microfacet distribution function)\n // beckmann distribution function\nfloat r1 = 1.0 / ( 4.0 * mSquared * pow(NdotH, 4.0));\nfloat r2 = (NdotH * NdotH - 1.0) / (mSquared * NdotH * NdotH);\nfloat roughness = r1 * exp(r2);\n\n// fresnel - Schlick approximation\nfloat fresnel = pow(1.0 - VdotH, 5.0);\nfresnel *= (1.0 - F0);\nfresnel += F0;\nspecular = SpecularBaseColor * ( (fresnel * geoAtt * roughness) / (NdotV * NdotL * 3.14));\n\n}\n\nreturn light.ambientCoefficient * DiffuseBaseColor * lightColor * NdotL * (k + specular * (1.0 - k));\n");
    $S06().CallVirtual("Append", null, ps, "} \n\n");
  }; 

  function LegacyShaderCodeBuilder_AddDiffuseChannel (ps) {
    if (this._hasDiffuse) {
      $S06().CallVirtual("Append", null, ps, "\n\n    //*********** DIFFUSE *********\n");
      this.AddChannelBaseColorCalculation(ps, this._hasDiffuseTexture, "Diffuse");
      $S06().CallVirtual("Append", null, ps, "    float diffFactor = dot(LDir, Normal);\n");
      $S06().CallVirtual("Append", null, ps, "    result += DiffuseBaseColor * LColor * LIntensity * max(diffFactor, 0.0);\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AddEmissiveChannel (ps) {
    if (this._hasEmissive) {
      $S06().CallVirtual("Append", null, ps, "\n\n    //*********** EMISSIVE *********\n");
      this.AddChannelBaseColorCalculation(ps, this._hasEmissiveTexture, "Emissive");
      $S06().CallVirtual("Append", null, ps, "    result += EmissiveBaseColor;\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AddLightVec (ps) {
    if (this._hasDiffuse || this._hasSpecular) {
      $S06().CallVirtual("Append", null, ps, "    vec3 LDir = ");
      $S06().CallVirtual("Append", null, ps, $thisType.get_LightDirectionName());
      $S06().CallVirtual("Append", null, ps, ";\n");
      $S06().CallVirtual("Append", null, ps, "    vec3 LColor = ");
      $S06().CallVirtual("Append", null, ps, $thisType.get_LightColorName());
      $S06().CallVirtual("Append", null, ps, ";\n");
      $S06().CallVirtual("Append", null, ps, "    float LIntensity = ");
      $S06().CallVirtual("Append", null, ps, $thisType.get_LightIntensityName());
      $S06().CallVirtual("Append", null, ps, ";\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AddNormalVec (ps) {
    var hasBump = this._hasBump;
    if (hasBump) {
      $S06().CallVirtual("Append", null, ps, "\n\n    //*********** BUMP *********\n");
      $S06().CallVirtual("Append", null, ps, "    vec3 bv =  normalize(texture2D(BumpTexture, vUV).xyz * 2.0 - 1.0);\n");
      $S06().CallVirtual("Append", null, ps, "    bv = vec3(bv.x, bv.y, -bv.z);\n");
      $S06().CallVirtual("Append", null, ps, "    vec3 Normal =  normalize(bv);\n\n");
    } else {
      $S06().CallVirtual("Append", null, ps, "    vec3 Normal = normalize(vNormal);\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AddSpecularChannel (ps) {
    if (this._hasSpecular) {
      $S06().CallVirtual("Append", null, ps, "\n\n    //*********** SPECULAR *********\n");
      if (!this._hasDiffuse) {
        $S06().CallVirtual("Append", null, ps, "    float diffFactor = dot(LDir, Normal);\n");
      }
      $S06().CallVirtual("Append", null, ps, "    if (diffFactor > 0.0) {\n  ");
      this.AddChannelBaseColorCalculation(ps, this._hasSpecularTexture, "Specular");
      $S06().CallVirtual("Append", null, ps, "      vec3 h = normalize(LDir + Camera);\n");
      $S06().CallVirtual("Append", null, ps, "      result += SpecularBaseColor * LColor * LIntensity * SpecularIntensity * pow(max(0.0, dot(h, Normal)), SpecularShininess);\n");
      $S06().CallVirtual("Append", null, ps, "    }\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AddStandardLightningCalculation (ps) {
    var hasApplyLightString = this._hasApplyLightString;
    if (!hasApplyLightString) {
      var lightingCalculationMethod = this._lightingCalculationMethod;
      if ((lightingCalculationMethod.valueOf() | 0) !== 0) {
        if (lightingCalculationMethod !== $T04().ADVANCED) {
          throw $S08().Construct($T0C().Format("Lightning calculation method: {0} not found!", this._lightingCalculationMethod));
        }
        $thisType.AddcooktorranceLightning(ps);
      } else {
        this.AddBlinnphongLightning(ps);
      }
      $S06().CallVirtual("Append", null, ps, "\n\n  void main()\n  {\n");
      $S06().CallVirtual("Append", null, ps, "    vec3 result = vec3(0, 0, 0);\n\n");
      $S06().CallVirtual("Append", null, ps, "\n   for(int i = 0; i < 3000; i++) { \n ");
      $S06().CallVirtual("Append", null, ps, "\n   if(i > MAX_LIGHTS) break; \n ");
      $S06().CallVirtual("Append", null, ps, "\n   result += ApplyLight(allLights[i]); \n ");
      $S06().CallVirtual("Append", null, ps, "\n   } \n ");
      $S06().CallVirtual("Append", null, ps, "\n   vec3 gamma = vec3(1.0/2.2);\n ");
      $S06().CallVirtual("Append", null, ps, "\n   vec3 final_light = pow(result, gamma); \n ");
      $S06().CallVirtual("Append", null, ps, "\n   gl_FragColor = vec4(final_light, 1.0);\n");
      $S06().CallVirtual("Append", null, ps, "  }\n\n");
    }
  }; 

  function LegacyShaderCodeBuilder_AnalyzeMaterial$03 (mc) {
    this._hasDiffuse = mc.get_HasDiffuse();
    var hasDiffuse = this._hasDiffuse;
    if (hasDiffuse) {
      this._hasDiffuseTexture = mc.Diffuse.Texture !== null;
    }
    this._hasSpecular = mc.get_HasSpecular();
    var hasSpecular = this._hasSpecular;
    if (hasSpecular) {
      this._hasSpecularTexture = mc.Specular.Texture !== null;
    }
    this._hasEmissive = mc.get_HasEmissive();
    var hasEmissive = this._hasEmissive;
    if (hasEmissive) {
      this._hasEmissiveTexture = mc.Emissive.Texture !== null;
    }
    this._hasBump = mc.get_HasBump();
  }; 

  function LegacyShaderCodeBuilder_AnalyzeMaterial$04 (mlc) {
    this._hasDiffuse = mlc.get_HasDiffuse();
    var hasDiffuse = this._hasDiffuse;
    if (hasDiffuse) {
      this._hasDiffuseTexture = mlc.Diffuse.Texture !== null;
    }
    this._hasSpecular = mlc.get_HasSpecular();
    var hasSpecular = this._hasSpecular;
    if (hasSpecular) {
      this._hasSpecularTexture = mlc.Specular.Texture !== null;
    }
    this._hasEmissive = mlc.get_HasEmissive();
    var hasEmissive = this._hasEmissive;
    if (hasEmissive) {
      this._hasEmissiveTexture = mlc.Emissive.Texture !== null;
    }
    this._hasBump = mlc.get_HasBump();
    this._hasApplyLightString = mlc.ApplyLightString !== null;
    this._hasFragmentString = mlc.FragmentShaderString !== null;
  }; 

  function LegacyShaderCodeBuilder_AnalyzeMaterial$05 (mlc) {
    this._hasDiffuse = mlc.get_HasDiffuse();
    var hasDiffuse = this._hasDiffuse;
    if (hasDiffuse) {
      this._hasDiffuseTexture = mlc.Diffuse.Texture !== null;
    }
    this._hasSpecular = mlc.get_HasSpecular();
    var hasSpecular = this._hasSpecular;
    if (hasSpecular) {
      this._hasSpecularTexture = mlc.Specular.Texture !== null;
    }
    this._hasEmissive = mlc.get_HasEmissive();
    var hasEmissive = this._hasEmissive;
    if (hasEmissive) {
      this._hasEmissiveTexture = mlc.Emissive.Texture !== null;
    }
    this._hasBump = mlc.get_HasBump();
  }; 

  function LegacyShaderCodeBuilder_AnalyzeMesh (mesh) {
    this._hasVertices = (mesh.get_Vertices() !== null) && 
    ((mesh.get_Vertices().length >>> 0) > (0 >>> 0));
    this._hasNormals = (mesh.get_Normals() !== null) && 
    ((mesh.get_Normals().length >>> 0) > (0 >>> 0));
    this._hasUVs = (mesh.get_UVs() !== null) && 
    ((mesh.get_UVs().length >>> 0) > (0 >>> 0));
    this._hasColors = false;
  }; 

  function LegacyShaderCodeBuilder_BumpInputDeclaration (ps) {
    if (this._hasBump) {
      $S06().CallVirtual("Append", null, ps, "  uniform sampler2D BumpTexture;\n");
      $S06().CallVirtual("Append", null, ps, "  uniform float BumpIntensity;\n\n");
    }
  }; 

  function LegacyShaderCodeBuilder_ChannelInputDeclaration (ps, hasChannel, hasChannelTexture, channelName) {
    var flag = !hasChannel;
    if (!flag) {
      $S06().CallVirtual("Append", null, ps, "  uniform vec3 ");
      $S06().CallVirtual("Append", null, ps, channelName);
      $S06().CallVirtual("Append", null, ps, "Color;\n");
      var flag2 = !hasChannelTexture;
      if (!flag2) {
        $S06().CallVirtual("Append", null, ps, "  uniform sampler2D ");
        $S06().CallVirtual("Append", null, ps, channelName);
        $S06().CallVirtual("Append", null, ps, "Texture;\n");
        $S06().CallVirtual("Append", null, ps, "  uniform float ");
        $S06().CallVirtual("Append", null, ps, channelName);
        $S06().CallVirtual("Append", null, ps, "Mix;\n\n");
      }
    }
  }; 

  function LegacyShaderCodeBuilder_CheckApplyLightStringForErrors (applyLightMethod) {
    return (!$T0C().IsNullOrEmpty(applyLightMethod) && ((applyLightMethod.indexOf("vec3 ApplyLight(Light light)") != -1)));
  }; 

  function LegacyShaderCodeBuilder_CreatePSBodyFromLightningMethod (ps) {
    var flag = ($T14().AllLightResults.get_Count() | 0) === 0;
    if (flag) {
      $S06().CallVirtual("Append", null, ps, "\n\n  void main()\n  {\n");
      $S06().CallVirtual("Append", null, ps, "    vec3 result = vec3(0, 0, 0);\n\n");
      this.AddNormalVec(ps);
      this.AddCameraVec(ps);
      this.AddLightVec(ps);
      this.AddEmissiveChannel(ps);
      this.AddDiffuseChannel(ps);
      this.AddSpecularChannel(ps);
      $S06().CallVirtual("Append", null, ps, "\n    gl_FragColor = vec4(result, 1.0);\n");
      $S06().CallVirtual("Append", null, ps, "  }\n\n");
    } else {
      this.AddStandardLightningCalculation(ps);
    }
  }; 

  function LegacyShaderCodeBuilder_get_BumpIntensityName () {
    return (
      this._hasBump
         ? "BumpIntensity"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_BumpTextureName () {
    return (
      this._hasBump
         ? "BumpTexture"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_DiffuseColorName () {
    return (
      this._hasDiffuse
         ? "DiffuseColor"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_DiffuseMixName () {
    return (
      this._hasDiffuse
         ? "DiffuseMix"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_DiffuseTextureName () {
    return (
      this._hasDiffuseTexture
         ? "DiffuseTexture"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_EmissiveColorName () {
    return (
      this._hasEmissive
         ? "EmissiveColor"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_EmissiveMixName () {
    return (
      this._hasEmissive
         ? "EmissiveMix"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_EmissiveTextureName () {
    return (
      this._hasEmissiveTexture
         ? "EmissiveTexture"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_LightColorName () {
    return "LightColor";
  }; 

  function LegacyShaderCodeBuilder_get_LightDirectionName () {
    return "LightDirection";
  }; 

  function LegacyShaderCodeBuilder_get_LightIntensityName () {
    return "LightIntensity";
  }; 

  function LegacyShaderCodeBuilder_get_PS () {
    return this._ps;
  }; 

  function LegacyShaderCodeBuilder_get_SpecularColorName () {
    return (
      this._hasSpecular
         ? "SpecularColor"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_SpecularIntensityName () {
    return (
      this._hasSpecular
         ? "SpecularIntensity"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_SpecularMixName () {
    return (
      this._hasSpecular
         ? "SpecularMix"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_SpecularShininessName () {
    return (
      this._hasSpecular
         ? "SpecularShininess"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_SpecularTextureName () {
    return (
      this._hasSpecularTexture
         ? "SpecularTexture"
         : null)
    ;
  }; 

  function LegacyShaderCodeBuilder_get_VS () {
    return this._vs;
  }; 

  function LegacyShaderCodeBuilder_MatrixDeclarations (vs) {
    var hasSpecular = this._hasSpecular;
    if (hasSpecular) {
      $S06().CallVirtual("Append", null, vs, "  uniform mat4 FUSEE_IMV;\n");
    }
    var hasWeightMap = this._hasWeightMap;
    if (hasWeightMap) {
      $S06().CallVirtual("Append", null, vs, "uniform mat4 FUSEE_P;\n");
      $S06().CallVirtual("Append", null, vs, "uniform mat4 FUSEE_V;\n");
    } else {
      $S06().CallVirtual("Append", null, vs, "  uniform mat4 FUSEE_MVP;\n");
    }
    var hasWeightMap2 = this._hasWeightMap;
    if (hasWeightMap2) {
      $S06().CallVirtual("Append", null, vs, JSIL.ConcatString("  uniform mat4 FUSEE_BONES[", $T15().$Box(this._nBones), "];\n"));
    }
    $S06().CallVirtual("Append", null, vs, "varying vec4 surfacePos;\n");
    $S06().CallVirtual("Append", null, vs, "uniform mat4 FUSEE_MV;\n");
  }; 

  function LegacyShaderCodeBuilder_MeshInputDeclarations (vs) {
    var hasVertices = this._hasVertices;
    if (hasVertices) {
      $S06().CallVirtual("Append", null, vs, "  attribute vec3 fuVertex;\n");
      var hasSpecular = this._hasSpecular;
      if (hasSpecular) {
        $S06().CallVirtual("Append", null, vs, "  varying vec3 vViewDir;\n");
      }
    }
    var hasWeightMap = this._hasWeightMap;
    if (hasWeightMap) {
      $S06().CallVirtual("Append", null, vs, "  attribute vec4 fuBoneIndex;\n");
      $S06().CallVirtual("Append", null, vs, "  attribute vec4 fuBoneWeight;\n");
    }
    var hasNormals = this._hasNormals;
    if (hasNormals) {
      $S06().CallVirtual("Append", null, vs, "  attribute vec3 fuNormal;\n  varying vec3 vNormal;\n");
    }
    var hasUVs = this._hasUVs;
    if (hasUVs) {
      $S06().CallVirtual("Append", null, vs, "  attribute vec2 fuUV;\n  varying vec2 vUV;\n");
    }
    var hasColors = this._hasColors;
    if (hasColors) {
      $S06().CallVirtual("Append", null, vs, "  attribute vec4 fuColor;\n  varying vec4 vColors;\n");
    }
  }; 

  function LegacyShaderCodeBuilder_ParseLights (ps) {
    $S06().CallVirtual("Append", null, ps, "\n\n uniform struct Light {\nvec3 position;\nvec3 intensities;\nvec3 coneDirection;\nfloat attenuation;\nfloat ambientCoefficient;\nfloat coneAngle;\nint lightType;\n};\n\n\n");
    $S06().CallVirtual("Append", null, ps, "\n\n uniform Light allLights[MAX_LIGHTS]; \n\n\n");
  }; 

  function LegacyShaderCodeBuilder_PixelInputDeclarations (ps) {
    $S06().CallVirtual("Append", null, ps, "#ifdef GL_ES\n");
    $S06().CallVirtual("Append", null, ps, "  precision highp float;\n");
    $S06().CallVirtual("Append", null, ps, "#endif\n\n");
    var num = ((
      (($T14().AllLightResults.get_Count() | 0) > 0)
         ? $T14().AllLightResults.get_Count()
         : 1)
     | 0);
    $S06().CallVirtual("Append", null, ps, JSIL.ConcatString("\n\n #define MAX_LIGHTS ", $T15().$Box(num), "\n\n"));
    this.ChannelInputDeclaration(ps, this._hasDiffuse, this._hasDiffuseTexture, "Diffuse");
    this.SpecularInputDeclaration(ps);
    this.ChannelInputDeclaration(ps, this._hasEmissive, this._hasEmissiveTexture, "Emissive");
    this.BumpInputDeclaration(ps);
    if (this._hasSpecular || this._hasDiffuse) {
      $S06().CallVirtual("Append", null, ps, "  uniform vec3 ");
      $S06().CallVirtual("Append", null, ps, $thisType.get_LightColorName());
      $S06().CallVirtual("Append", null, ps, ";\n");
      $S06().CallVirtual("Append", null, ps, "  uniform float ");
      $S06().CallVirtual("Append", null, ps, $thisType.get_LightIntensityName());
      $S06().CallVirtual("Append", null, ps, ";\n");
      $S06().CallVirtual("Append", null, ps, "  uniform vec3 ");
      $S06().CallVirtual("Append", null, ps, $thisType.get_LightDirectionName());
      $S06().CallVirtual("Append", null, ps, ";\n");
    }
    var hasSpecular = this._hasSpecular;
    if (hasSpecular) {
      $S06().CallVirtual("Append", null, ps, "  varying vec3 vViewDir;\n");
    }
    var hasNormals = this._hasNormals;
    if (hasNormals) {
      $S06().CallVirtual("Append", null, ps, "  varying vec3 vNormal;\n");
    }
    var hasUVs = this._hasUVs;
    if (hasUVs) {
      $S06().CallVirtual("Append", null, ps, "  varying vec2 vUV;\n");
    }
  }; 

  function LegacyShaderCodeBuilder_PSBody (ps) {
    $thisType.ParseLights(ps);
    this.CreatePSBodyFromLightningMethod(ps);
  }; 

  function LegacyShaderCodeBuilder_PSCustomBody (ps, mlc) {
    $thisType.ParseLights(ps);
    this.AddApplyLightCalculation(ps, mlc);
    $S06().CallVirtual("Append", null, ps, "\n\n  void main()\n  {\n");
    $S06().CallVirtual("Append", null, ps, "    vec3 result = vec3(0, 0, 0);\n\n");
    this.AddNormalVec(ps);
    this.AddCameraVec(ps);
    $S06().CallVirtual("Append", null, ps, "\n   for(int i = 0; i < 3000; i++) { \n ");
    $S06().CallVirtual("Append", null, ps, "\n   if(i > MAX_LIGHTS) break; \n ");
    $S06().CallVirtual("Append", null, ps, "\n   result += ApplyLight(allLights[i]); \n ");
    $S06().CallVirtual("Append", null, ps, "\n   } \n ");
    $S06().CallVirtual("Append", null, ps, "\n   vec3 gamma = vec3(1.0/2.2);\n ");
    $S06().CallVirtual("Append", null, ps, "\n   vec3 final_light = pow(result, gamma); \n ");
    $S06().CallVirtual("Append", null, ps, "\n   gl_FragColor = vec4(final_light, 1.0);\n");
    $S06().CallVirtual("Append", null, ps, "  }\n\n");
  }; 

  function LegacyShaderCodeBuilder_PSPBRBody (ps, mpbr) {
    $thisType.ParseLights(ps);
    this.AddNormalVec(ps);
    this.AddCameraVec(ps);
    if (!this._hasSpecular) {
      $S06().CallVirtual("Append", null, ps, "  varying vec3 vViewDir;\n");
    }
    this.AddcooktorrancePBRMat(ps, mpbr);
    $S06().CallVirtual("Append", null, ps, "\n\n  void main()\n  {\n");
    $S06().CallVirtual("Append", null, ps, "    vec3 result = vec3(0, 0, 0);\n\n");
    $S06().CallVirtual("Append", null, ps, "\n   for(int i = 0; i < 3000; i++) { \n ");
    $S06().CallVirtual("Append", null, ps, "\n   if(i > MAX_LIGHTS) break; \n ");
    $S06().CallVirtual("Append", null, ps, "\n   result += ApplyLight(allLights[i]); \n ");
    $S06().CallVirtual("Append", null, ps, "\n   vec3 gamma = vec3(1.0/2.2);\n ");
    $S06().CallVirtual("Append", null, ps, "\n   vec3 final_light = pow(result, gamma); \n ");
    $S06().CallVirtual("Append", null, ps, "\n   gl_FragColor = vec4(final_light, 1.0);\n");
    $S06().CallVirtual("Append", null, ps, "  }\n\n");
  }; 

  function LegacyShaderCodeBuilder_SpecularInputDeclaration (ps) {
    if (this._hasSpecular) {
      this.ChannelInputDeclaration(ps, this._hasSpecular, this._hasSpecularTexture, "Specular");
      $S06().CallVirtual("Append", null, ps, "  uniform float SpecularShininess;\n");
      $S06().CallVirtual("Append", null, ps, "  uniform float SpecularIntensity;\n\n");
    }
  }; 

  function LegacyShaderCodeBuilder_VSBody (vs) {
    $S06().CallVirtual("Append", null, vs, "\n\n  varying vec3 oNormal; \n  \n");
    $S06().CallVirtual("Append", null, vs, "\n\n  void main()\n  {\n");
    var hasNormals = this._hasNormals;
    if (hasNormals) {
      var hasWeightMap = this._hasWeightMap;
      if (hasWeightMap) {
        $S06().CallVirtual("Append", null, vs, "    vec4 newVertex;\n");
        $S06().CallVirtual("Append", null, vs, "    vec4 newNormal;\n");
        $S06().CallVirtual("Append", null, vs, "    newVertex = (FUSEE_BONES[int(fuBoneIndex.x)] * vec4(fuVertex, 1.0) ) * fuBoneWeight.x ;\n");
        $S06().CallVirtual("Append", null, vs, "    newNormal = (FUSEE_BONES[int(fuBoneIndex.x)] * vec4(fuNormal, 0.0)) * fuBoneWeight.x;\n");
        $S06().CallVirtual("Append", null, vs, "    newVertex = (FUSEE_BONES[int(fuBoneIndex.y)] * vec4(fuVertex, 1.0)) * fuBoneWeight.y + newVertex;\n");
        $S06().CallVirtual("Append", null, vs, "    newNormal = (FUSEE_BONES[int(fuBoneIndex.y)] * vec4(fuNormal, 0.0)) * fuBoneWeight.y + newNormal;\n");
        $S06().CallVirtual("Append", null, vs, "    newVertex = (FUSEE_BONES[int(fuBoneIndex.z)] * vec4(fuVertex, 1.0)) * fuBoneWeight.z + newVertex;\n");
        $S06().CallVirtual("Append", null, vs, "    newNormal = (FUSEE_BONES[int(fuBoneIndex.z)] * vec4(fuNormal, 0.0)) * fuBoneWeight.z + newNormal;\n");
        $S06().CallVirtual("Append", null, vs, "    newVertex = (FUSEE_BONES[int(fuBoneIndex.w)] * vec4(fuVertex, 1.0)) * fuBoneWeight.w + newVertex;\n");
        $S06().CallVirtual("Append", null, vs, "    newNormal = (FUSEE_BONES[int(fuBoneIndex.w)] * vec4(fuNormal, 0.0)) * fuBoneWeight.w + newNormal;\n");
        $S06().CallVirtual("Append", null, vs, "    vNormal = mat3(FUSEE_IMV) * newNormal.xyz;\n");
        var normalizeNormals = this._normalizeNormals;
        if (normalizeNormals) {
          $S06().CallVirtual("Append", null, vs, "    vNormal = normalize(vNormal);\n");
        }
      } else {
        var normalizeNormals2 = this._normalizeNormals;
        if (normalizeNormals2) {
          $S06().CallVirtual("Append", null, vs, "    vNormal = normalize(fuNormal);\n");
        } else {
          $S06().CallVirtual("Append", null, vs, "    vNormal = fuNormal;\n");
        }
      }
    }
    var hasSpecular = this._hasSpecular;
    if (hasSpecular) {
      $S06().CallVirtual("Append", null, vs, "    vec3 viewPos = FUSEE_IMV[3].xyz;\n");
      var hasWeightMap2 = this._hasWeightMap;
      if (hasWeightMap2) {
        $S06().CallVirtual("Append", null, vs, "    vViewDir = normalize(viewPos - vec3(newVertex));\n");
      } else {
        $S06().CallVirtual("Append", null, vs, "    vViewDir = normalize(viewPos - fuVertex);\n");
      }
    }
    var hasWeightMap3 = this._hasWeightMap;
    if (hasWeightMap3) {
      $S06().CallVirtual("Append", null, vs, "    gl_Position = FUSEE_P * FUSEE_V * vec4(vec3(newVertex), 1.0);\n ");
    } else {
      $S06().CallVirtual("Append", null, vs, "    gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\n");
    }
    var hasUVs = this._hasUVs;
    if (hasUVs) {
      $S06().CallVirtual("Append", null, vs, "    vUV = fuUV;\n");
    }
    $S06().CallVirtual("Append", null, vs, " surfacePos =  vec4(fuVertex, 1.0); \n");
    $S06().CallVirtual("Append", null, vs, " oNormal = fuNormal; \n");
    $S06().CallVirtual("Append", null, vs, "  }\n\n");
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.LegacyShaderCodeBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent"), $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
          $asm0B.TypeRef("Fusee.Serialization.WeightComponent")
        ]), 
      LegacyShaderCodeBuilder__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent"), $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
          $asm0B.TypeRef("Fusee.Serialization.WeightComponent")
        ]), 
      LegacyShaderCodeBuilder__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("Fusee.Serialization.MaterialComponent"), $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
          $asm0B.TypeRef("Fusee.Serialization.WeightComponent")
        ]), 
      LegacyShaderCodeBuilder__ctor$02
    );

    $.Method({Static:false, Public:false}, "AddApplyLightCalculation", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Text.StringBuilder"), $asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent")]), 
      LegacyShaderCodeBuilder_AddApplyLightCalculation
    );

    $.Method({Static:false, Public:false}, "AddBlinnphongLightning", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddBlinnphongLightning
    );

    $.Method({Static:false, Public:false}, "AddCameraVec", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddCameraVec
    );

    $.Method({Static:false, Public:false}, "AddChannelBaseColorCalculation", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Boolean, 
          $.String
        ]), 
      LegacyShaderCodeBuilder_AddChannelBaseColorCalculation
    );

    $.Method({Static:true , Public:false}, "AddcooktorranceLightning", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddcooktorranceLightning
    );

    $.Method({Static:false, Public:false}, "AddcooktorrancePBRMat", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Text.StringBuilder"), $asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent")]), 
      LegacyShaderCodeBuilder_AddcooktorrancePBRMat
    );

    $.Method({Static:false, Public:false}, "AddDiffuseChannel", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddDiffuseChannel
    );

    $.Method({Static:false, Public:false}, "AddEmissiveChannel", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddEmissiveChannel
    );

    $.Method({Static:false, Public:false}, "AddLightVec", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddLightVec
    );

    $.Method({Static:false, Public:false}, "AddNormalVec", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddNormalVec
    );

    $.Method({Static:false, Public:false}, "AddSpecularChannel", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddSpecularChannel
    );

    $.Method({Static:false, Public:false}, "AddStandardLightningCalculation", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_AddStandardLightningCalculation
    );

    $.Method({Static:false, Public:false}, "AnalyzeMaterial", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialComponent")), 
      LegacyShaderCodeBuilder_AnalyzeMaterial$03
    );

    $.Method({Static:false, Public:false}, "AnalyzeMaterial", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent")), 
      LegacyShaderCodeBuilder_AnalyzeMaterial$04
    );

    $.Method({Static:false, Public:false}, "AnalyzeMaterial", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent")), 
      LegacyShaderCodeBuilder_AnalyzeMaterial$05
    );

    $.Method({Static:false, Public:false}, "AnalyzeMesh", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      LegacyShaderCodeBuilder_AnalyzeMesh
    );

    $.Method({Static:false, Public:false}, "BumpInputDeclaration", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_BumpInputDeclaration
    );

    $.Method({Static:false, Public:false}, "ChannelInputDeclaration", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Boolean, 
          $.Boolean, $.String
        ]), 
      LegacyShaderCodeBuilder_ChannelInputDeclaration
    );

    $.Method({Static:true , Public:false}, "CheckApplyLightStringForErrors", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      LegacyShaderCodeBuilder_CheckApplyLightStringForErrors
    );

    $.Method({Static:false, Public:false}, "CreatePSBodyFromLightningMethod", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_CreatePSBodyFromLightningMethod
    );

    $.Method({Static:false, Public:true }, "get_BumpIntensityName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_BumpIntensityName
    );

    $.Method({Static:false, Public:true }, "get_BumpTextureName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_BumpTextureName
    );

    $.Method({Static:false, Public:true }, "get_DiffuseColorName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_DiffuseColorName
    );

    $.Method({Static:false, Public:true }, "get_DiffuseMixName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_DiffuseMixName
    );

    $.Method({Static:false, Public:true }, "get_DiffuseTextureName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_DiffuseTextureName
    );

    $.Method({Static:false, Public:true }, "get_EmissiveColorName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_EmissiveColorName
    );

    $.Method({Static:false, Public:true }, "get_EmissiveMixName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_EmissiveMixName
    );

    $.Method({Static:false, Public:true }, "get_EmissiveTextureName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_EmissiveTextureName
    );

    $.Method({Static:true , Public:true }, "get_LightColorName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_LightColorName
    );

    $.Method({Static:true , Public:true }, "get_LightDirectionName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_LightDirectionName
    );

    $.Method({Static:true , Public:true }, "get_LightIntensityName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_LightIntensityName
    );

    $.Method({Static:false, Public:true }, "get_PS", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_PS
    );

    $.Method({Static:false, Public:true }, "get_SpecularColorName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_SpecularColorName
    );

    $.Method({Static:false, Public:true }, "get_SpecularIntensityName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_SpecularIntensityName
    );

    $.Method({Static:false, Public:true }, "get_SpecularMixName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_SpecularMixName
    );

    $.Method({Static:false, Public:true }, "get_SpecularShininessName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_SpecularShininessName
    );

    $.Method({Static:false, Public:true }, "get_SpecularTextureName", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_SpecularTextureName
    );

    $.Method({Static:false, Public:true }, "get_VS", 
      JSIL.MethodSignature.Return($.String), 
      LegacyShaderCodeBuilder_get_VS
    );

    $.Method({Static:false, Public:false}, "MatrixDeclarations", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_MatrixDeclarations
    );

    $.Method({Static:false, Public:false}, "MeshInputDeclarations", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_MeshInputDeclarations
    );

    $.Method({Static:true , Public:false}, "ParseLights", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_ParseLights
    );

    $.Method({Static:false, Public:false}, "PixelInputDeclarations", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_PixelInputDeclarations
    );

    $.Method({Static:false, Public:false}, "PSBody", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_PSBody
    );

    $.Method({Static:false, Public:false}, "PSCustomBody", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Text.StringBuilder"), $asm0B.TypeRef("Fusee.Serialization.MaterialLightComponent")]), 
      LegacyShaderCodeBuilder_PSCustomBody
    );

    $.Method({Static:false, Public:false}, "PSPBRBody", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Text.StringBuilder"), $asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent")]), 
      LegacyShaderCodeBuilder_PSPBRBody
    );

    $.Method({Static:false, Public:false}, "SpecularInputDeclaration", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_SpecularInputDeclaration
    );

    $.Method({Static:false, Public:false}, "VSBody", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder")), 
      LegacyShaderCodeBuilder_VSBody
    );

    $.Field({Static:true , Public:true }, "_allLights", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Engine.Core.LightResult")]));

    $.Field({Static:false, Public:false}, "_hasVertices", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasNormals", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasUVs", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasColors", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasDiffuse", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasSpecular", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasEmissive", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasBump", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasDiffuseTexture", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasSpecularTexture", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasEmissiveTexture", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasWeightMap", $.Boolean);

    $.Field({Static:false, Public:false}, "_nBones", $.Int32);

    $.Field({Static:false, Public:false}, "_normalizeNormals", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasApplyLightString", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasFragmentString", $.Boolean);

    $.Field({Static:false, Public:false}, "_lightingCalculationMethod", $asm04.TypeRef("Fusee.Engine.Core.LightingCalculationMethod"));

    $.Field({Static:false, Public:false}, "_vs", $.String);

    $.Field({Static:false, Public:false}, "_ps", $.String);


    function LegacyShaderCodeBuilder__cctor () {
      $thisType._allLights = $S00().Construct();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LegacyShaderCodeBuilder__cctor
    );

    $.Property({Static:false, Public:true }, "VS", $.String);

    $.Property({Static:false, Public:true }, "PS", $.String);

    $.Property({Static:false, Public:true }, "DiffuseColorName", $.String);

    $.Property({Static:false, Public:true }, "SpecularColorName", $.String);

    $.Property({Static:false, Public:true }, "EmissiveColorName", $.String);

    $.Property({Static:false, Public:true }, "DiffuseTextureName", $.String);

    $.Property({Static:false, Public:true }, "SpecularTextureName", $.String);

    $.Property({Static:false, Public:true }, "EmissiveTextureName", $.String);

    $.Property({Static:false, Public:true }, "BumpTextureName", $.String);

    $.Property({Static:false, Public:true }, "DiffuseMixName", $.String);

    $.Property({Static:false, Public:true }, "SpecularMixName", $.String);

    $.Property({Static:false, Public:true }, "EmissiveMixName", $.String);

    $.Property({Static:false, Public:true }, "SpecularShininessName", $.String);

    $.Property({Static:false, Public:true }, "SpecularIntensityName", $.String);

    $.Property({Static:false, Public:true }, "BumpIntensityName", $.String);

    $.Property({Static:true , Public:true }, "LightDirectionName", $.String);

    $.Property({Static:true , Public:true }, "LightColorName", $.String);

    $.Property({Static:true , Public:true }, "LightIntensityName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.MeshManager */ 

(function MeshManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm12.System.Collections.Generic.Stack$b1.Of($asm03.Fusee.Engine.Common.IMeshImp))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.Suid, $asm03.Fusee.Engine.Common.IMeshImp))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.Fusee.Serialization.MeshDataEventArgs)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm0B.Fusee.Serialization.MeshDataEventArgs))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm12.System.Collections.Generic.Stack$b1.Of($asm03.Fusee.Engine.Common.IMeshImp), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.Suid, $asm03.Fusee.Engine.Common.IMeshImp), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.KeyNotFoundException, [$asm0F.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm0B.Fusee.Serialization.MeshDataEventArgs]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetVertices)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetTriangles)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetColors)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetNormals)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetUVs)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetBoneWeights)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetBoneIndices)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetTangents)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetBiTangents)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.CreateMeshImp)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_VerticesSet)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveVertices)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_NormalsSet)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveNormals)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_ColorsSet)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveColors)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_UVsSet)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveUVs)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_TrianglesSet)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveTriangles)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_BoneWeightsSet)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveBoneWeights)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_BoneIndicesSet)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveBoneIndices)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_TangentsSet)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveTangents)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp.get_BiTangentsSet)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveBiTangents)) ();
  };


  function MeshManager__ctor (renderContextImp) {
    this._toBeDeletedMeshImps = $S00().Construct();
    this._identifierToMeshImpDictionary = $S01().Construct();
    this._renderContextImp = renderContextImp;
  }; 

  function MeshManager_Cleanup () {
    var flag = (this._toBeDeletedMeshImps === null) || 
    (((this._toBeDeletedMeshImps).get_Count() | 0) === 0);
    if (!flag) {

      while (((this._toBeDeletedMeshImps).get_Count() | 0) > 0) {
        var meshImp = $T01().prototype.Pop.call(this._toBeDeletedMeshImps);
        this.Remove(meshImp);
      }
    }
  }; 

  function MeshManager_GetMeshImpFromMesh (m) {
    var meshImp = new JSIL.BoxedVariable(null);
    var flag = !(this._identifierToMeshImpDictionary).TryGetValue(m.SessionUniqueIdentifier, /* ref */ meshImp);
    if (flag) {
      var result = this.RegisterNewMesh(m);
    } else {
      result = meshImp.get();
    }
    return result;
  }; 

  function MeshManager_MeshChanged (sender, meshDataEventArgs) {
    var meshImp = new JSIL.BoxedVariable(null);
    var flag = !(this._identifierToMeshImpDictionary).TryGetValue(meshDataEventArgs.get_Mesh().SessionUniqueIdentifier, /* ref */ meshImp);
    if (flag) {
      throw $S02().Construct("Mesh is not registered.");
    }
    var mesh = meshDataEventArgs.get_Mesh();
    switch ((meshDataEventArgs.get_ChangedEnum()).valueOf()) {
      case 0: 
        $T01().prototype.Push.call(this._toBeDeletedMeshImps, meshImp.get());
        (this._identifierToMeshImpDictionary).Remove(mesh.SessionUniqueIdentifier);
        break;

      case 1: 
        $IM00().Call(this._renderContextImp, null, meshImp.get(), mesh.get_Vertices());
        break;

      case 2: 
        $IM01().Call(this._renderContextImp, null, meshImp.get(), mesh.get_Triangles());
        break;

      case 3: 
        $IM02().Call(this._renderContextImp, null, meshImp.get(), mesh.get_Colors());
        break;

      case 4: 
        $IM03().Call(this._renderContextImp, null, meshImp.get(), mesh.get_Normals());
        break;

      case 5: 
        $IM04().Call(this._renderContextImp, null, meshImp.get(), mesh.get_UVs());
        break;

      case 6: 
        $IM05().Call(this._renderContextImp, null, meshImp.get(), mesh.get_BoneWeights());
        break;

      case 7: 
        $IM06().Call(this._renderContextImp, null, meshImp.get(), mesh.get_BoneIndices());
        break;

      case 8: 
        $IM07().Call(this._renderContextImp, null, meshImp.get(), mesh.get_Tangents());
        break;

      case 9: 
        $IM08().Call(this._renderContextImp, null, meshImp.get(), mesh.get_BiTangents());
        break;

    }
  }; 

  function MeshManager_RegisterNewMesh (mesh) {
    var meshImp = $IM09().Call(this._renderContextImp, null);
    var verticesSet = mesh.get_VerticesSet();
    if (verticesSet) {
      $IM00().Call(this._renderContextImp, null, meshImp, mesh.get_Vertices());
    }
    var uVsSet = mesh.get_UVsSet();
    if (uVsSet) {
      $IM04().Call(this._renderContextImp, null, meshImp, mesh.get_UVs());
    }
    var normalsSet = mesh.get_NormalsSet();
    if (normalsSet) {
      $IM03().Call(this._renderContextImp, null, meshImp, mesh.get_Normals());
    }
    var colorsSet = mesh.get_ColorsSet();
    if (colorsSet) {
      $IM02().Call(this._renderContextImp, null, meshImp, mesh.get_Colors());
    }
    var boneIndicesSet = mesh.get_BoneIndicesSet();
    if (boneIndicesSet) {
      $IM06().Call(this._renderContextImp, null, meshImp, mesh.get_BoneIndices());
    }
    var boneWeightsSet = mesh.get_BoneWeightsSet();
    if (boneWeightsSet) {
      $IM05().Call(this._renderContextImp, null, meshImp, mesh.get_BoneWeights());
    }
    var trianglesSet = mesh.get_TrianglesSet();
    if (trianglesSet) {
      $IM01().Call(this._renderContextImp, null, meshImp, mesh.get_Triangles());
    }
    var tangentsSet = mesh.get_TangentsSet();
    if (tangentsSet) {
      $IM07().Call(this._renderContextImp, null, meshImp, mesh.get_Tangents());
    }
    var biTangentsSet = mesh.get_BiTangentsSet();
    if (biTangentsSet) {
      $IM08().Call(this._renderContextImp, null, meshImp, mesh.get_BiTangents());
    }
    mesh.add_MeshChanged($T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "MeshChanged", $S03(), false, false)));
    (this._identifierToMeshImpDictionary).Add(mesh.SessionUniqueIdentifier, meshImp);
    return meshImp;
  }; 

  function MeshManager_Remove (meshImp) {
    var verticesSet = $IM0A().Call(meshImp, null);
    if (verticesSet) {
      $IM0B().Call(this._renderContextImp, null, meshImp);
    }
    var normalsSet = $IM0C().Call(meshImp, null);
    if (normalsSet) {
      $IM0D().Call(this._renderContextImp, null, meshImp);
    }
    var colorsSet = $IM0E().Call(meshImp, null);
    if (colorsSet) {
      $IM0F().Call(this._renderContextImp, null, meshImp);
    }
    var uVsSet = $IM10().Call(meshImp, null);
    if (uVsSet) {
      $IM11().Call(this._renderContextImp, null, meshImp);
    }
    var trianglesSet = $IM12().Call(meshImp, null);
    if (trianglesSet) {
      $IM13().Call(this._renderContextImp, null, meshImp);
    }
    var boneWeightsSet = $IM14().Call(meshImp, null);
    if (boneWeightsSet) {
      $IM15().Call(this._renderContextImp, null, meshImp);
    }
    var boneIndicesSet = $IM16().Call(meshImp, null);
    if (boneIndicesSet) {
      $IM17().Call(this._renderContextImp, null, meshImp);
    }
    var tangentsSet = $IM18().Call(meshImp, null);
    if (tangentsSet) {
      $IM19().Call(this._renderContextImp, null, meshImp);
    }
    var biTangentsSet = $IM1A().Call(meshImp, null);
    if (biTangentsSet) {
      $IM1B().Call(this._renderContextImp, null, meshImp);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.MeshManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp")), 
      MeshManager__ctor
    );

    $.Method({Static:false, Public:true }, "Cleanup", 
      JSIL.MethodSignature.Void, 
      MeshManager_Cleanup
    );

    $.Method({Static:false, Public:true }, "GetMeshImpFromMesh", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), [$asm0B.TypeRef("Fusee.Serialization.Mesh")]), 
      MeshManager_GetMeshImpFromMesh
    );

    $.Method({Static:false, Public:false}, "MeshChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0B.TypeRef("Fusee.Serialization.MeshDataEventArgs")]), 
      MeshManager_MeshChanged
    );

    $.Method({Static:false, Public:false}, "RegisterNewMesh", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), [$asm0B.TypeRef("Fusee.Serialization.Mesh")]), 
      MeshManager_RegisterNewMesh
    );

    $.Method({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      MeshManager_Remove
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_renderContextImp", $asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp"));

    $.Field({Static:false, Public:false}, "_toBeDeletedMeshImps", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp")]));

    $.Field({Static:false, Public:false}, "_identifierToMeshImpDictionary", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.Suid"), $asm03.TypeRef("Fusee.Engine.Common.IMeshImp")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.MeshReader */ 

(function MeshReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0F.System.Char))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm0F.System.String))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Char)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.IO.Stream)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.IO.StreamReader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Engine.Core.Geometry)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.IO.TextReader)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.Fusee.Math.Core.double2)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.Fusee.Math.Core.double3)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.FormatException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.IO.StreamReader, [$asm0F.System.IO.Stream]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.double2, [$asm0F.System.Double, $asm0F.System.Double]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.double3, [
        $asm0F.System.Double, $asm0F.System.Double, 
        $asm0F.System.Double
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.FormatException, [$asm0F.System.String]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };



  function MeshReader_FilteredSplit (strIn, separator) {
    var list = $S00().Construct();
    var array = (JSIL.SplitString(strIn, separator));

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var text = array[i];
      var flag = !$T00().IsNullOrEmpty(text);
      if (flag) {
        list.Add(text);
      }
    }
    return $T02().prototype.ToArray.call(list);
  }; 

  function MeshReader_LoadGeometry (stream) {
    var streamReader = $S01().Construct(stream);
    try {
      var result = $thisType.ReadWavefrontObj(streamReader);
    } finally {
      if (streamReader !== null) {
        $IM00().Call(streamReader, null);
      }
    }
    return result;
  }; 

  function MeshReader_LoadMesh (stream) {
    var streamReader = $S01().Construct(stream);
    try {
      var geometry = $thisType.ReadWavefrontObj(streamReader);
      var result = geometry.ToMesh();
    } finally {
      if (streamReader !== null) {
        $IM00().Call(streamReader, null);
      }
    }
    return result;
  }; 

  function MeshReader_ReadWavefrontObj (tr) {
    var geometry = new ($T09())();
    var num = 0;
    var num2 = 1;
    var text = tr.ReadLine();

    while (text !== null) {
      var flag = (System.String.StartsWith(text, "#"));
      if (!flag) {
        var flag2 = (System.String.StartsWith(text, "vt"));
        if (flag2) {
          var strIn = (text.substr(3));
          var array = $thisType.FilteredSplit(strIn, null);
          geometry.AddTexCoord($S02().Construct($thisType.Double_Parse(array[0]), $thisType.Double_Parse(array[1])));
        } else {
          var flag3 = (System.String.StartsWith(text, "vn"));
          if (flag3) {
            var strIn2 = (text.substr(3));
            var array2 = $thisType.FilteredSplit(strIn2, null);
            geometry.AddNormal($S03().Construct($thisType.Double_Parse(array2[0]), $thisType.Double_Parse(array2[1]), -$thisType.Double_Parse(array2[2])));
          } else {
            var flag4 = (System.String.StartsWith(text, "v"));
            if (flag4) {
              var strIn3 = (text.substr(2));
              var array3 = $thisType.FilteredSplit(strIn3, null);
              geometry.AddVertex($S03().Construct($thisType.Double_Parse(array3[0]), $thisType.Double_Parse(array3[1]), -$thisType.Double_Parse(array3[2])));
            } else {
              var flag5 = (System.String.StartsWith(text, "f"));
              if (flag5) {
                var strIn4 = (text.substr(2));
                var array4 = $thisType.FilteredSplit(strIn4, null);
                var flag6 = (3 > (array4.length | 0)) || 
                ((array4.length | 0) >= 256);
                if (flag6) {
                  throw $S04().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T10(), ["Error reading obj file (", $T05().$Box(num2), "). Face definition number of vertices must be within [3..", $T05().$Box(256), "]."])));
                }
                var array5 = JSIL.Array.New($T05(), array4.length);
                var array6 = null;
                var array7 = null;
                var num3 = 0;
                var array8 = array4;

                for (var i = 0; i < (array8.length | 0); i = ((i + 1) | 0)) {
                  var text2 = array8[i];
                  var array9 = (JSIL.SplitString(text2, JSIL.Array.New($T04(), ["/"])));
                  var flag7 = num === 0;
                  if (flag7) {
                    var flag8 = (1 > (array9.length | 0)) || 
                    ((array9.length | 0) > 3);
                    if (flag8) {
                      throw $S04().Construct(JSIL.ConcatString("Error reading obj file (", $T05().$Box(num2), "). Face definitions must contain 1, 2 or 3 indices per vertex"));
                    }
                    num = (array9.length | 0);
                  } else {
                    var flag9 = (array9.length | 0) !== num;
                    if (flag9) {
                      throw $S04().Construct(JSIL.ConcatString("Error reading obj file (", $T05().$Box(num2), "). Inconsistent face definitions"));
                    }
                  }
                  array5[num3] = ((($T05().Parse(array9[0]) | 0) - 1) | 0);
                  var flag10 = ((array9.length | 0) > 1) && 
                  !$T00().IsNullOrEmpty(array9[1]);
                  if (flag10) {
                    var flag11 = array7 === null;
                    if (flag11) {
                      array7 = JSIL.Array.New($T05(), array4.length);
                    }
                    array7[num3] = ((($T05().Parse(array9[1]) | 0) - 1) | 0);
                  }
                  var flag12 = (array9.length | 0) > 2;
                  if (flag12) {
                    var flag13 = $T00().IsNullOrEmpty(array9[1]);
                    if (flag13) {
                      throw $S05().Construct(JSIL.ConcatString("Error reading obj file (", $T05().$Box(num2), "). Syntax error in face definition"));
                    }
                    var flag14 = array6 === null;
                    if (flag14) {
                      array6 = JSIL.Array.New($T05(), array4.length);
                    }
                    array6[num3] = ((($T05().Parse(array9[2]) | 0) - 1) | 0);
                  }
                  num3 = ((num3 + 1) | 0);
                }
                geometry.AddFace(array5, array7, array6);
              } else {
                var flag15 = (System.String.StartsWith(text, "mtllib"));
                if (!flag15) {
                  var flag16 = (System.String.StartsWith(text, "usemtl"));
                  if (flag16) {
                  }
                }
              }
            }
          }
        }
      }
      text = tr.ReadLine();
      num2 = ((num2 + 1) | 0);
    }
    var flag17 = !geometry.get_HasNormals();
    if (flag17) {
      geometry.CreateNormals(1.396263111111111);
    }
    return geometry;
  }; 

  JSIL.MakeStaticClass("Fusee.Engine.Core.MeshReader", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Double_Parse", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.Method({Static:true , Public:true }, "FilteredSplit", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $jsilcore.TypeRef("System.Array", [$.Char])]), 
      MeshReader_FilteredSplit
    );

    $.Method({Static:true , Public:true }, "LoadGeometry", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Geometry"), [$asm0F.TypeRef("System.IO.Stream")]), 
      MeshReader_LoadGeometry
    );

    $.Method({Static:true , Public:true }, "LoadMesh", 
      new JSIL.MethodSignature($asm0B.TypeRef("Fusee.Serialization.Mesh"), [$asm0F.TypeRef("System.IO.Stream")]), 
      MeshReader_LoadMesh
    );

    $.Method({Static:true , Public:true }, "ReadWavefrontObj", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Geometry"), [$asm0F.TypeRef("System.IO.TextReader")]), 
      MeshReader_ReadWavefrontObj
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.MouseDevice */ 

(function MouseDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDirection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.Point)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function MouseDevice__ctor (inpDeviceImp) {
    $T01().prototype._ctor.call(this, inpDeviceImp);
    this._xVelId = (this.RegisterVelocityAxis(
      1, 
      0, 
      0, 
      null, 
      $T02().Unknown
    ).Id | 0);
    this._yVelId = (this.RegisterVelocityAxis(
      2, 
      0, 
      0, 
      null, 
      $T02().Unknown
    ).Id | 0);
    this._wheelVelId = (this.RegisterVelocityAxis(
      3, 
      0, 
      0, 
      null, 
      $T02().Unknown
    ).Id | 0);
  }; 

  function MouseDevice_get_LeftButton () {
    return this.GetButton(1);
  }; 

  function MouseDevice_get_LeftButtonDesc () {
    return this.GetButtonDescription(1);
  }; 

  function MouseDevice_get_MiddleButton () {
    return this.GetButton(4);
  }; 

  function MouseDevice_get_MiddleButtonDesc () {
    return this.GetButtonDescription(4);
  }; 

  function MouseDevice_get_Position () {
    return $S00().Construct(this.GetAxis(1), this.GetAxis(2));
  }; 

  function MouseDevice_get_PositionInt () {
    var result = new ($T04())();
    result.x = ((this.GetAxis(1)) | 0);
    result.y = ((this.GetAxis(2)) | 0);
    result.z = ((this.GetAxis(3)) | 0);
    return result;
  }; 

  function MouseDevice_get_RightButton () {
    return this.GetButton(2);
  }; 

  function MouseDevice_get_RightButtonDesc () {
    return this.GetButtonDescription(2);
  }; 

  function MouseDevice_get_Velocity () {
    return $S00().Construct(this.GetAxis(this._xVelId), this.GetAxis(this._yVelId));
  }; 

  function MouseDevice_get_VelocityInt () {
    var result = new ($T04())();
    result.x = ((this.GetAxis(this._xVelId)) | 0);
    result.y = ((this.GetAxis(this._yVelId)) | 0);
    result.z = ((this.GetAxis(this._wheelVelId)) | 0);
    return result;
  }; 

  function MouseDevice_get_Wheel () {
    return this.GetAxis(3);
  }; 

  function MouseDevice_get_WheelDesc () {
    return this.GetAxisDescription(3);
  }; 

  function MouseDevice_get_WheelVel () {
    return this.GetAxis(this._wheelVelId);
  }; 

  function MouseDevice_get_WheelVelDesc () {
    return this.GetAxisDescription(this._wheelVelId);
  }; 

  function MouseDevice_get_X () {
    return this.GetAxis(1);
  }; 

  function MouseDevice_get_XDesc () {
    return this.GetAxisDescription(1);
  }; 

  function MouseDevice_get_XVel () {
    return this.GetAxis(this._xVelId);
  }; 

  function MouseDevice_get_XVelDesc () {
    return this.GetAxisDescription(this._xVelId);
  }; 

  function MouseDevice_get_Y () {
    return this.GetAxis(2);
  }; 

  function MouseDevice_get_YDesc () {
    return this.GetAxisDescription(2);
  }; 

  function MouseDevice_get_YVel () {
    return this.GetAxis(this._yVelId);
  }; 

  function MouseDevice_get_YVelDesc () {
    return this.GetAxisDescription(this._yVelId);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.InputDevice"), 
      Name: "Fusee.Engine.Core.MouseDevice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")), 
      MouseDevice__ctor
    );

    $.Method({Static:false, Public:true }, "get_LeftButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      MouseDevice_get_LeftButton
    );

    $.Method({Static:false, Public:true }, "get_LeftButtonDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")), 
      MouseDevice_get_LeftButtonDesc
    );

    $.Method({Static:false, Public:true }, "get_MiddleButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      MouseDevice_get_MiddleButton
    );

    $.Method({Static:false, Public:true }, "get_MiddleButtonDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")), 
      MouseDevice_get_MiddleButtonDesc
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      MouseDevice_get_Position
    );

    $.Method({Static:false, Public:true }, "get_PositionInt", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Point")), 
      MouseDevice_get_PositionInt
    );

    $.Method({Static:false, Public:true }, "get_RightButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      MouseDevice_get_RightButton
    );

    $.Method({Static:false, Public:true }, "get_RightButtonDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")), 
      MouseDevice_get_RightButtonDesc
    );

    $.Method({Static:false, Public:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      MouseDevice_get_Velocity
    );

    $.Method({Static:false, Public:true }, "get_VelocityInt", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Point")), 
      MouseDevice_get_VelocityInt
    );

    $.Method({Static:false, Public:true }, "get_Wheel", 
      JSIL.MethodSignature.Return($.Single), 
      MouseDevice_get_Wheel
    );

    $.Method({Static:false, Public:true }, "get_WheelDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisDescription")), 
      MouseDevice_get_WheelDesc
    );

    $.Method({Static:false, Public:true }, "get_WheelVel", 
      JSIL.MethodSignature.Return($.Single), 
      MouseDevice_get_WheelVel
    );

    $.Method({Static:false, Public:true }, "get_WheelVelDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisDescription")), 
      MouseDevice_get_WheelVelDesc
    );

    $.Method({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Single), 
      MouseDevice_get_X
    );

    $.Method({Static:false, Public:true }, "get_XDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisDescription")), 
      MouseDevice_get_XDesc
    );

    $.Method({Static:false, Public:true }, "get_XVel", 
      JSIL.MethodSignature.Return($.Single), 
      MouseDevice_get_XVel
    );

    $.Method({Static:false, Public:true }, "get_XVelDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisDescription")), 
      MouseDevice_get_XVelDesc
    );

    $.Method({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Single), 
      MouseDevice_get_Y
    );

    $.Method({Static:false, Public:true }, "get_YDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisDescription")), 
      MouseDevice_get_YDesc
    );

    $.Method({Static:false, Public:true }, "get_YVel", 
      JSIL.MethodSignature.Return($.Single), 
      MouseDevice_get_YVel
    );

    $.Method({Static:false, Public:true }, "get_YVelDesc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisDescription")), 
      MouseDevice_get_YVelDesc
    );

    $.Field({Static:false, Public:false}, "_xVelId", $.Int32);

    $.Field({Static:false, Public:false}, "_yVelId", $.Int32);

    $.Field({Static:false, Public:false}, "_wheelVelId", $.Int32);

    $.Property({Static:false, Public:true }, "PositionInt", $asm03.TypeRef("Fusee.Engine.Common.Point"));

    $.Property({Static:false, Public:true }, "Position", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Property({Static:false, Public:true }, "X", $.Single);

    $.Property({Static:false, Public:true }, "Y", $.Single);

    $.Property({Static:false, Public:true }, "Wheel", $.Single);

    $.Property({Static:false, Public:true }, "VelocityInt", $asm03.TypeRef("Fusee.Engine.Common.Point"));

    $.Property({Static:false, Public:true }, "Velocity", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Property({Static:false, Public:true }, "XVel", $.Single);

    $.Property({Static:false, Public:true }, "YVel", $.Single);

    $.Property({Static:false, Public:true }, "WheelVel", $.Single);

    $.Property({Static:false, Public:true }, "XDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Property({Static:false, Public:true }, "YDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Property({Static:false, Public:true }, "WheelDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Property({Static:false, Public:true }, "XVelDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Property({Static:false, Public:true }, "YVelDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Property({Static:false, Public:true }, "WheelVelDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Property({Static:false, Public:true }, "LeftButton", $.Boolean);

    $.Property({Static:false, Public:true }, "MiddleButton", $.Boolean);

    $.Property({Static:false, Public:true }, "RightButton", $.Boolean);

    $.Property({Static:false, Public:true }, "LeftButtonDesc", $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription"));

    $.Property({Static:false, Public:true }, "MiddleButtonDesc", $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription"));

    $.Property({Static:false, Public:true }, "RightButtonDesc", $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.MultiSphereShape */ 

(function MultiSphereShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMultiSphereShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.CapsuleShape)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMultiSphereShapeImp.get_SphereCount)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMultiSphereShapeImp.GetSpherePosition)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IMultiSphereShapeImp.GetSphereRadius)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function MultiSphereShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function MultiSphereShape_get_Margin () {
    return $IM00().Call(this._multiSphereShapeImp, null);
  }; 

  function MultiSphereShape_get_SphereCount () {
    return $IM01().Call(this._multiSphereShapeImp, null);
  }; 

  function MultiSphereShape_GetSpherePosition (index) {
    return $IM02().Call(this._multiSphereShapeImp, null, index);
  }; 

  function MultiSphereShape_GetSphereRadius (index) {
    return $IM03().Call(this._multiSphereShapeImp, null, index);
  }; 

  function MultiSphereShape_set_Margin (value) {
    var capsuleShape = $T05().$Cast($IM04().Call(this._multiSphereShapeImp, null));
    $IM05().Call(capsuleShape._capsuleShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.MultiSphereShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MultiSphereShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      MultiSphereShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_SphereCount", 
      JSIL.MethodSignature.Return($.Int32), 
      MultiSphereShape_get_SphereCount
    );

    $.Method({Static:false, Public:true }, "GetSpherePosition", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$.Int32]), 
      MultiSphereShape_GetSpherePosition
    );

    $.Method({Static:false, Public:true }, "GetSphereRadius", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      MultiSphereShape_GetSphereRadius
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      MultiSphereShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_multiSphereShapeImp", $asm03.TypeRef("Fusee.Engine.Common.IMultiSphereShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true }, "SphereCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Fusee.Engine.Core.NamespaceDoc", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Network */ 

(function Network$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ConnectionUpdateEvent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.ObjectModel.Collection$b1.Of($asm03.Fusee.Engine.Common.INetworkConnection))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkMsg)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm03.Fusee.Engine.Common.INetworkMsg))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.Fusee.Engine.Common.MessageDelivery)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm03.Fusee.Engine.Common.NetConfigValues)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Fusee.Base.Core.Diagnostics)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.DummyNetworkImp)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm03.Fusee.Engine.Common.NetStatusValues)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.ObjectModel.Collection$b1.Of($asm03.Fusee.Engine.Common.INetworkConnection), [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")])]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.add_ConnectionUpdate)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.CloseConnection)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.CloseDevices)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.get_Config)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.get_Connections)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.get_IncomingMsg)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.GetLocalIp)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.get_Status)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.OnUpdateFrame)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.OpenConnection)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.remove_ConnectionUpdate)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.SendDiscoveryMessage)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.SendMessage)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.set_Config)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.set_Status)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp.StartPeer)) ();
  };


  function Network__ctor () {
  }; 

  function Network_add_OnConnectionUpdate (value) {
    $IM00().Call(this._networkImp, null, value);
  }; 

  function Network_CloseConnection () {
    $IM01().Call(this._networkImp, null);
  }; 

  function Network_CloseDevice () {
    $IM02().Call(this._networkImp, null);
  }; 

  function Network_Dispose () {
    $thisType._instance = null;
  }; 


  function Network_get_Config () {
    return $IM03().Call(this._networkImp, null);
  }; 

  function Network_get_Connections () {
    return $S00().Construct($IM04().Call(this._networkImp, null));
  }; 

  function Network_get_IncomingMsg () {
    var networkMsg = this.FirstMessage();
    var flag = networkMsg !== null;
    if (flag) {
      ($IM05().Call(this._networkImp, null)).Remove(networkMsg);
    }
    return networkMsg;
  }; 

  function Network_get_IncomingMsgCount () {
    return ($IM05().Call(this._networkImp, null)).get_Count();
  }; 

  function Network_get_Instance () {
    var arg_15_0 = null;
    if ((arg_15_0 = $thisType._instance) === null) {
      arg_15_0 = $thisType._instance = new $thisType();
    }
    return arg_15_0;
  }; 

  function Network_get_LocalIP () {
    return $IM06().Call(this._networkImp, null);
  }; 

  function Network_get_Status () {
    return $IM07().Call(this._networkImp, null);
  }; 

  function Network_OnUpdateFrame () {
    $IM08().Call(this._networkImp, null);
  }; 

  function Network_OpenConnection$00 (host) {
    this.OpenConnection(host, this.get_Config().DefaultPort);
  }; 

  function Network_OpenConnection$01 (port) {
    this.OpenConnection($T06().Empty, port);
  }; 

  function Network_OpenConnection$02 (host, port) {
    $IM09().Call(this._networkImp, null, this.get_Config().SysType, host, port);
  }; 

  function Network_remove_OnConnectionUpdate (value) {
    $IM0A().Call(this._networkImp, null, value);
  }; 

  function Network_SendDiscoveryMessage$03 () {
    $IM0B().Call(this._networkImp, null, this.get_Config().DefaultPort);
  }; 

  function Network_SendDiscoveryMessage$04 (port) {
    $IM0B().Call(this._networkImp, null, port);
  }; 

  function Network_SendMessage$05 (msg) {
    return this.SendMessage(msg, $T09().ReliableOrdered, 0);
  }; 

  function Network_SendMessage$06 (msg, msgDelivery, channelID) {
    return $IM0C().Call(this._networkImp, null, msg, msgDelivery, channelID);
  }; 

  function Network_set_Config (value) {
    $IM0D().Call(this._networkImp, null, value);
  }; 

  function Network_set_NetworkImp (value) {
    if (value === null) {
      $T0B().Log("WARNING: No Network implementation set. To enable Network functionality inject an appropriate implementation of INetworkImp in your platform specific application main module.");
      this._networkImp = new ($T0C())();
    } else {
      this._networkImp = value;
    }
  }; 

  function Network_set_Status (value) {
    $IM0E().Call(this._networkImp, null, value);
  }; 

  function Network_StartPeer$07 () {
    this.StartPeer(this.get_Config().DefaultPort);
  }; 

  function Network_StartPeer$08 (port) {
    $IM0F().Call(this._networkImp, null, port);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Network", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Network__ctor
    );

    $.Method({Static:false, Public:true }, "add_OnConnectionUpdate", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent")), 
      Network_add_OnConnectionUpdate
    );

    $.Method({Static:false, Public:true }, "CloseConnection", 
      JSIL.MethodSignature.Void, 
      Network_CloseConnection
    );

    $.Method({Static:false, Public:true }, "CloseDevice", 
      JSIL.MethodSignature.Void, 
      Network_CloseDevice
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void, 
      Network_Dispose
    );

    $.ExternalMethod({Static:false, Public:false}, "FirstMessage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.INetworkMsg"))
    );

    $.Method({Static:false, Public:true }, "get_Config", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.NetConfigValues")), 
      Network_get_Config
    );

    $.Method({Static:false, Public:true }, "get_Connections", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")])), 
      Network_get_Connections
    );

    $.Method({Static:false, Public:true }, "get_IncomingMsg", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.INetworkMsg")), 
      Network_get_IncomingMsg
    );

    $.Method({Static:false, Public:true }, "get_IncomingMsgCount", 
      JSIL.MethodSignature.Return($.Int32), 
      Network_get_IncomingMsgCount
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      Network_get_Instance
    );

    $.Method({Static:false, Public:true }, "get_LocalIP", 
      JSIL.MethodSignature.Return($.String), 
      Network_get_LocalIP
    );

    $.Method({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.NetStatusValues")), 
      Network_get_Status
    );

    $.Method({Static:false, Public:false}, "OnUpdateFrame", 
      JSIL.MethodSignature.Void, 
      Network_OnUpdateFrame
    );

    $.Method({Static:false, Public:true }, "OpenConnection", 
      JSIL.MethodSignature.Action($.String), 
      Network_OpenConnection$00
    );

    $.Method({Static:false, Public:true }, "OpenConnection", 
      JSIL.MethodSignature.Action($.Int32), 
      Network_OpenConnection$01
    );

    $.Method({Static:false, Public:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$.String, $.Int32]), 
      Network_OpenConnection$02
    );

    $.Method({Static:false, Public:true }, "remove_OnConnectionUpdate", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent")), 
      Network_remove_OnConnectionUpdate
    );

    $.Method({Static:false, Public:true }, "SendDiscoveryMessage", 
      JSIL.MethodSignature.Void, 
      Network_SendDiscoveryMessage$03
    );

    $.Method({Static:false, Public:true }, "SendDiscoveryMessage", 
      JSIL.MethodSignature.Action($.Int32), 
      Network_SendDiscoveryMessage$04
    );

    $.Method({Static:false, Public:true }, "SendMessage", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
      Network_SendMessage$05
    );

    $.Method({Static:false, Public:true }, "SendMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("Fusee.Engine.Common.MessageDelivery"), 
          $.Int32
        ]), 
      Network_SendMessage$06
    );

    $.Method({Static:false, Public:true }, "set_Config", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.NetConfigValues")), 
      Network_set_Config
    );

    $.Method({Static:false, Public:false}, "set_NetworkImp", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.INetworkImp")), 
      Network_set_NetworkImp
    );

    $.Method({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.NetStatusValues")), 
      Network_set_Status
    );

    $.Method({Static:false, Public:true }, "StartPeer", 
      JSIL.MethodSignature.Void, 
      Network_StartPeer$07
    );

    $.Method({Static:false, Public:true }, "StartPeer", 
      JSIL.MethodSignature.Action($.Int32), 
      Network_StartPeer$08
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type);

    $.Field({Static:false, Public:false}, "_networkImp", $asm03.TypeRef("Fusee.Engine.Common.INetworkImp"));

    $.Property({Static:false, Public:false}, "NetworkImp", $asm03.TypeRef("Fusee.Engine.Common.INetworkImp"));

    $.Property({Static:false, Public:true }, "Status", $asm03.TypeRef("Fusee.Engine.Common.NetStatusValues"));

    $.Property({Static:false, Public:true }, "Config", $asm03.TypeRef("Fusee.Engine.Common.NetConfigValues"));

    $.Property({Static:false, Public:true }, "Connections", $asm0F.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")]));

    $.Property({Static:false, Public:true }, "LocalIP", $.String);

    $.Property({Static:false, Public:true }, "IncomingMsgCount", $.Int32);

    $.Property({Static:false, Public:true }, "IncomingMsg", $asm03.TypeRef("Fusee.Engine.Common.INetworkMsg"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    $.Event({Static:false, Public:true }, "OnConnectionUpdate", $asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.DummyNetworkImp */ 

(function DummyNetworkImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ConnectionUpdateEvent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.SysType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Fusee.Engine.Common.MessageDelivery)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm03.Fusee.Engine.Common.NetConfigValues)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.Fusee.Engine.Common.NetStatusValues)) ();
  };


  function DummyNetworkImp__ctor () {
  }; 

  function DummyNetworkImp_add_ConnectionUpdate (value) {
    var connectionUpdateEvent = this.ConnectionUpdate;

    do {
      var connectionUpdateEvent2 = connectionUpdateEvent;
      var value2 = $T01().Combine(connectionUpdateEvent2, value);
      connectionUpdateEvent = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "ConnectionUpdate"), value2, connectionUpdateEvent2);
    } while (connectionUpdateEvent !== connectionUpdateEvent2);
  }; 

  function DummyNetworkImp_CloseConnection () {
  }; 

  function DummyNetworkImp_CloseDevices () {
  }; 

  function DummyNetworkImp_get_Config () {
    return this.DummyNetworkImp$Config$value;
  }; 

  function DummyNetworkImp_get_Connections () {
    return this.DummyNetworkImp$Connections$value;
  }; 

  function DummyNetworkImp_get_IncomingMsg () {
    return this.DummyNetworkImp$IncomingMsg$value;
  }; 

  function DummyNetworkImp_get_Status () {
    return this.DummyNetworkImp$Status$value;
  }; 

  function DummyNetworkImp_GetLocalIp () {
    return "";
  }; 

  function DummyNetworkImp_OnUpdateFrame () {
  }; 

  function DummyNetworkImp_OpenConnection (type, host, port) {
    return false;
  }; 

  function DummyNetworkImp_remove_ConnectionUpdate (value) {
    var connectionUpdateEvent = this.ConnectionUpdate;

    do {
      var connectionUpdateEvent2 = connectionUpdateEvent;
      var value2 = $T01().Remove(connectionUpdateEvent2, value);
      connectionUpdateEvent = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "ConnectionUpdate"), value2, connectionUpdateEvent2);
    } while (connectionUpdateEvent !== connectionUpdateEvent2);
  }; 

  function DummyNetworkImp_SendDiscoveryMessage (port) {
  }; 

  function DummyNetworkImp_SendMessage (msg, msgDelivery, msgChannel) {
    return false;
  }; 

  function DummyNetworkImp_set_Config (value) {
    this.DummyNetworkImp$Config$value = value;
  }; 

  function DummyNetworkImp_set_Status (value) {
    this.DummyNetworkImp$Status$value = value;
  }; 

  function DummyNetworkImp_StartPeer (port) {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.DummyNetworkImp", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DummyNetworkImp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_ConnectionUpdate", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent")), 
      DummyNetworkImp_add_ConnectionUpdate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CloseConnection", 
      JSIL.MethodSignature.Void, 
      DummyNetworkImp_CloseConnection
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CloseDevices", 
      JSIL.MethodSignature.Void, 
      DummyNetworkImp_CloseDevices
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Config", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.NetConfigValues")), 
      DummyNetworkImp_get_Config
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Connections", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")])), 
      DummyNetworkImp_get_Connections
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IncomingMsg", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkMsg")])), 
      DummyNetworkImp_get_IncomingMsg
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.NetStatusValues")), 
      DummyNetworkImp_get_Status
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetLocalIp", 
      JSIL.MethodSignature.Return($.String), 
      DummyNetworkImp_GetLocalIp
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OnUpdateFrame", 
      JSIL.MethodSignature.Void, 
      DummyNetworkImp_OnUpdateFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OpenConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Fusee.Engine.Common.SysType"), $.String, 
          $.Int32
        ]), 
      DummyNetworkImp_OpenConnection
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_ConnectionUpdate", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent")), 
      DummyNetworkImp_remove_ConnectionUpdate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SendDiscoveryMessage", 
      JSIL.MethodSignature.Action($.Int32), 
      DummyNetworkImp_SendDiscoveryMessage
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SendMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("Fusee.Engine.Common.MessageDelivery"), 
          $.Int32
        ]), 
      DummyNetworkImp_SendMessage
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Config", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.NetConfigValues")), 
      DummyNetworkImp_set_Config
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.NetStatusValues")), 
      DummyNetworkImp_set_Status
    );

    $.Method({Static:false, Public:true , Virtual:true }, "StartPeer", 
      JSIL.MethodSignature.Action($.Int32), 
      DummyNetworkImp_StartPeer
    );

    $.Field({Static:false, Public:false}, "DummyNetworkImp$Config$value", $asm03.TypeRef("Fusee.Engine.Common.NetConfigValues"));

    $.Field({Static:false, Public:false}, "DummyNetworkImp$Status$value", $asm03.TypeRef("Fusee.Engine.Common.NetStatusValues"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "DummyNetworkImp$Connections$value", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "DummyNetworkImp$IncomingMsg$value", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkMsg")]));

    $.Field({Static:false, Public:false}, "ConnectionUpdate", $asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent"));

    $.Property({Static:false, Public:true , Virtual:true }, "Config", $asm03.TypeRef("Fusee.Engine.Common.NetConfigValues"));

    $.Property({Static:false, Public:true , Virtual:true }, "Status", $asm03.TypeRef("Fusee.Engine.Common.NetStatusValues"));

    $.Property({Static:false, Public:true , Virtual:true }, "Connections", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IncomingMsg", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkMsg")]));

    $.Event({Static:false, Public:true , Virtual:true }, "ConnectionUpdate", $asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.INetworkImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.NineSlicePlane */ 

(function NineSlicePlane$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Func$b2.Of($asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.NineSlicePlane_$l$gc)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [$asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"]))) ();
  };


  function NineSlicePlane__ctor () {
    var arg_561_1 = null;
    $T01().prototype._ctor.call(this);
    var expr_10 = JSIL.Array.New($T03(), 16);
    var float = new ($T03())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = 0;
    expr_10[0] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5;
    float.y = -0.166666672;
    float.z = 0;
    expr_10[1] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5;
    float.y = 0.166666672;
    float.z = 0;
    expr_10[2] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = 0;
    expr_10[3] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.166666672;
    float.y = 0.5;
    float.z = 0;
    expr_10[4] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.166666672;
    float.y = 0.5;
    float.z = 0;
    expr_10[5] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = 0;
    expr_10[6] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5;
    float.y = 0.166666672;
    float.z = 0;
    expr_10[7] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5;
    float.y = -0.166666672;
    float.z = 0;
    expr_10[8] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = 0;
    expr_10[9] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.166666672;
    float.y = -0.5;
    float.z = 0;
    expr_10[10] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.166666672;
    float.y = -0.5;
    float.z = 0;
    expr_10[11] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.166666672;
    float.y = -0.166666672;
    float.z = 0;
    expr_10[12] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.166666672;
    float.y = 0.166666672;
    float.z = 0;
    expr_10[13] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.166666672;
    float.y = 0.166666672;
    float.z = 0;
    expr_10[14] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.166666672;
    float.y = -0.166666672;
    float.z = 0;
    expr_10[15] = float.MemberwiseClone();
    this.set_Vertices(expr_10);
    this.set_Triangles(JSIL.Array.New($T04(), [0, 12, 1, 0, 11, 12, 1, 13, 2, 1, 12, 13, 2, 4, 3, 2, 13, 4, 11, 15, 12, 11, 10, 15, 12, 14, 13, 12, 15, 14, 13, 5, 4, 13, 14, 5, 10, 8, 15, 10, 9, 8, 15, 7, 14, 15, 8, 7, 14, 6, 5, 14, 7, 6]));
    this.set_Normals(JSIL.Array.New($T03(), [$S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1)]));
    var arg_561_0 = $T05().$Cast(this.get_Vertices());
    if ((arg_561_1 = $T06().$l$g9__0_0) === null) {
      arg_561_1 = $T06().$l$g9__0_0 = $T00().New($T06().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.NineSlicePlane_$l$gc, "$l_ctor$gb__0_0", $S01(), false, false));
    }
    this.set_UVs($T08().ToArray$b1($T07())($S02().CallStatic($T08(), "Select$b2", [$asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float2], arg_561_0, arg_561_1)));
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
      Name: "Fusee.Engine.Core.NineSlicePlane", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NineSlicePlane__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.NineSlicePlane+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$l_ctor$gb__0_0 (vert) {
    return $T01().op_Addition($S00().Construct(vert.x, vert.y), $S00().Construct(0.5, 0.5));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.NineSlicePlane+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__0_0", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float2"), [$asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      $l$gc_$l_ctor$gb__0_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__0_0", $asm0F.TypeRef("System.Func`2", [$asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float2")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ParticleData */ 

(function ParticleData$Members () {
  var $, $thisType;

  function ParticleData__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ParticleData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ParticleData__ctor
    );

    $.Field({Static:false, Public:true }, "Position", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Velocity", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Gravity", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Life", $.Int32);

    $.Field({Static:false, Public:true }, "MaxSize", $.Single);

    $.Field({Static:false, Public:true }, "MinSize", $.Single);

    $.Field({Static:false, Public:true }, "Rotation", $.Single);

    $.Field({Static:false, Public:true }, "Transparency", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ParticleEmitter */ 

(function ParticleEmitter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.ParticleData))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Random)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.ParticleData)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.ParticleData), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Random, null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0F.System.Single, $asm0A.Fusee.Math.Core.float3]))) ();
  };


  function ParticleEmitter__ctor (myCount, myLifeMin, myLifeMax, myMinSize, myMaxSize, myRotation, myTransparency, myRandPosX, myRandPosY, myRandPosZ, myRandVelX, myRandVelY, myRandVelZ, myGravityX, myGravityY, myGravityZ) {
    this.VsSimpleTexture = "\n            /* Copies incoming vertex color without change.\n             * Applies the transformation matrix to vertex position.\n             */\n\n            attribute vec4 fuColor;\n            attribute vec3 fuVertex;\n            attribute vec3 fuNormal;\n            attribute vec2 fuUV;\n\n            varying vec4 vColor;\n            varying vec3 vNormal;\n            varying vec2 vUV;\n            varying float vTransparency;\n        \n            uniform mat4 FUSEE_MVP;\n            uniform mat4 FUSEE_MV;\n            uniform mat4 FUSEE_P;\n            uniform mat4 FUSEE_ITMV;\n            \n            uniform float timer;\n            attribute vec4 position;\n            varying vec2 texcoord;\n            varying float fade_factor;\n\n            void main()\n            {\n     \n                vec4 vPos = FUSEE_MV * vec4(fuVertex, 1.0);//umwandlung in Kamerakoordinaten\n               \n                //Offset rotieren um fuNormal.x\n                vec2 offset = fuUV;\n                offset.x  = fuUV.x*cos(fuNormal.x) - fuUV.y*sin(fuNormal.x);\n                offset.y =  fuUV.y*cos(fuNormal.x) + fuUV.x*sin(fuNormal.x);\n                vPos = vPos + vec4(100.0*offset, 0, 1.0);   //Offset  aus Partikelzentrum in Partikel-Eckpunkt          \n                gl_Position = FUSEE_P * vPos; //Perspektive-Projektion\n                vNormal = mat3(FUSEE_ITMV[0].xyz, FUSEE_ITMV[1].xyz, FUSEE_ITMV[2].xyz) * fuNormal;\n                vNormal = vec3(0, 0, 1);\n                vUV.x = (fuUV.x <= 0.0) ? 0.0 : 1.0;\n                vUV.y = (fuUV.y <= 0.0) ? 0.0 : 1.0;\n\n                vTransparency = fuNormal.y;\n            }";
    this.PsSimpleTexture = "\n            /* Copies incoming fragment color without change. */\n            #ifdef GL_ES\n                precision highp float;\n            #endif\n\n            // The parameter required for the texturing process\n            uniform sampler2D texture1;\n            uniform vec4 vColor;\n            varying vec3 vNormal;\n            varying float vTransparency;\n\n            // The parameter holding the UV-Coordinates of the texture\n            varying vec2 vUV;\n\n            void main()\n            {    \n              // The most basic texturing function, expecting the above mentioned parameters  \n             vec4 AlphaColor = vec4(1.0, 1.0, 1.0, vTransparency);\n             gl_FragColor = texture2D(texture1, vUV)*AlphaColor;        \n            }";
    this.ParticleMesh = new ($T03())();
    this._particleList = $S00().Construct();
    this._customCount = (myCount | 0);
    this._customLifeMin = (myLifeMin | 0);
    this._customLifeMax = (myLifeMax | 0);
    this._customMinSize = +myMinSize;
    this._customMaxSize = +myMaxSize;
    this._customRotation = +myRotation;
    this._customTransparency = +myTransparency;
    this._customRandPosX = myRandPosX;
    this._customRandPosY = myRandPosY;
    this._customRandPosZ = myRandPosZ;
    this._customRandVelX = +myRandVelX;
    this._customRandVelY = +myRandVelY;
    this._customRandVelZ = +myRandVelZ;
    this._customGravityX = +myGravityX;
    this._customGravityY = +myGravityY;
    this._customGravityZ = +myGravityZ;
  }; 

  function ParticleEmitter_GenIntRand (one, two) {
    var rnd = this._rnd;
    if ((one | 0) < (two | 0)) {
      var result = (rnd.Next(one, two) | 0);
    } else {
      result = (rnd.Next(two, one) | 0);
    }
    return result;
  }; 

  function ParticleEmitter_GenRand (one, two) {
    var rnd = this._rnd;
    return (+one + (+rnd.NextDouble() * (+two - +one)));
  }; 

  function ParticleEmitter_get_GravityX () {
    return this._customGravityX;
  }; 

  function ParticleEmitter_get_GravityY () {
    return this._customGravityY;
  }; 

  function ParticleEmitter_get_GravityZ () {
    return this._customGravityZ;
  }; 

  function ParticleEmitter_get_LifeMax () {
    return this._customLifeMax;
  }; 

  function ParticleEmitter_get_LifeMin () {
    return this._customLifeMin;
  }; 

  function ParticleEmitter_get_MaxSize () {
    return this._customMaxSize;
  }; 

  function ParticleEmitter_get_MinSize () {
    return this._customMinSize;
  }; 

  function ParticleEmitter_get_PMesh () {
    return this.ParticleMesh;
  }; 

  function ParticleEmitter_get_RandPosX () {
    return this._customRandPosX;
  }; 

  function ParticleEmitter_get_RandPosY () {
    return this._customRandPosY;
  }; 

  function ParticleEmitter_get_RandPosZ () {
    return this._customRandPosZ;
  }; 

  function ParticleEmitter_get_RandVelX () {
    return this._customRandVelX;
  }; 

  function ParticleEmitter_get_RandVelY () {
    return this._customRandVelY;
  }; 

  function ParticleEmitter_get_RandVelZ () {
    return this._customRandVelZ;
  }; 

  function ParticleEmitter_get_Transparency () {
    return this._customTransparency;
  }; 

  function ParticleEmitter_set_GravityX (value) {
    this._customGravityX = +value;
  }; 

  function ParticleEmitter_set_GravityY (value) {
    this._customGravityY = +value;
  }; 

  function ParticleEmitter_set_GravityZ (value) {
    this._customGravityZ = +value;
  }; 

  function ParticleEmitter_set_LifeMax (value) {
    this._customLifeMax = (value | 0);
  }; 

  function ParticleEmitter_set_LifeMin (value) {
    this._customLifeMin = (value | 0);
  }; 

  function ParticleEmitter_set_MaxSize (value) {
    this._customMaxSize = +value;
  }; 

  function ParticleEmitter_set_MinSize (value) {
    this._customMinSize = +value;
  }; 

  function ParticleEmitter_set_RandPosX (value) {
    this._customRandPosX = +value;
  }; 

  function ParticleEmitter_set_RandPosY (value) {
    this._customRandPosY = +value;
  }; 

  function ParticleEmitter_set_RandPosZ (value) {
    this._customRandPosZ = +value;
  }; 

  function ParticleEmitter_set_RandVelX (value) {
    this._customRandVelX = +value;
  }; 

  function ParticleEmitter_set_RandVelY (value) {
    this._customRandVelY = +value;
  }; 

  function ParticleEmitter_set_RandVelZ (value) {
    this._customRandVelZ = +value;
  }; 

  function ParticleEmitter_set_Transparency (value) {
    this._customTransparency = +value;
  }; 

  function ParticleEmitter_Tick (deltaTime) {
    var array = JSIL.Array.New($T07(), Math.imul(this._customCount, 4));
    var array2 = JSIL.Array.New($T09(), Math.imul(this._customCount, 6));
    var array3 = JSIL.Array.New($T07(), Math.imul(this._customCount, 4));
    var array4 = JSIL.Array.New($T0B(), Math.imul(this._customCount, 4));
    this._rnd = $S01().Construct();

    while (((this._particleList).get_Count() | 0) < (this._customCount | 0)) {
      this._randVelX = +this.GenRand(-this._customRandVelX, this._customRandVelX);
      this._randVelY = +this.GenRand(-this._customRandVelY, this._customRandVelY);
      this._randVelZ = +this.GenRand(-this._customRandVelZ, this._customRandVelZ);
      this._randPosX = +this.GenRand(-this._customRandPosX, this._customRandPosX);
      this._randPosY = +this.GenRand(-this._customRandPosY, this._customRandPosY);
      this._randPosZ = +this.GenRand(-this._customRandPosZ, this._customRandPosZ);
      this._randRot = +this.GenRand(0, 1.3);
      this._randLife = (this.GenIntRand(this._customLifeMin, this._customLifeMax) | 0);
      this._particle = new ($T0C())();
      this._particle.Position = $S02().Construct(Math.fround(this._randPosX), Math.fround(this._randPosY), Math.fround(this._randPosZ));
      this._particle.Velocity = $S02().Construct(Math.fround(this._randVelX), Math.fround(this._randVelY), Math.fround(this._randVelZ));
      this._particle.Gravity = $S02().Construct(this._customGravityX, this._customGravityY, this._customGravityZ);
      this._particle.Life = (this._randLife | 0);
      this._particle.MaxSize = +this._customMaxSize;
      this._particle.MinSize = +this._customMinSize;
      this._particle.Rotation = Math.fround(this._randRot);
      this._particle.Transparency = +this._customTransparency;
      (this._particleList).Add(this._particle);
    }

    for (var i = 0; i < ((this._particleList).get_Count() | 0); i = ((i + 1) | 0)) {
      var particleData = (this._particleList).get_Item(i);
      var position = particleData.Position;
      var minSize = +particleData.MinSize;
      var flag = (particleData.Life | 0) > 0;
      if (flag) {
        array[Math.imul(i, 4)] = position.MemberwiseClone();
        array[((Math.imul(i, 4) + 1) | 0)] = position.MemberwiseClone();
        array[((Math.imul(i, 4) + 2) | 0)] = position.MemberwiseClone();
        array[((Math.imul(i, 4) + 3) | 0)] = position.MemberwiseClone();
        array4[Math.imul(i, 4)] = $S03().Construct(+((minSize / 2)), +((-minSize / 2)));
        array4[((Math.imul(i, 4) + 1) | 0)] = $S03().Construct(+((minSize / 2)), +((minSize / 2)));
        array4[((Math.imul(i, 4) + 2) | 0)] = $S03().Construct(+((-minSize / 2)), +((minSize / 2)));
        array4[((Math.imul(i, 4) + 3) | 0)] = $S03().Construct(+((-minSize / 2)), +((-minSize / 2)));
        array3[Math.imul(i, 4)] = $S02().Construct(particleData.Rotation, particleData.Transparency, 1);
        array3[((Math.imul(i, 4) + 1) | 0)] = $S02().Construct(particleData.Rotation, particleData.Transparency, 1);
        array3[((Math.imul(i, 4) + 2) | 0)] = $S02().Construct(particleData.Rotation, particleData.Transparency, 1);
        array3[((Math.imul(i, 4) + 3) | 0)] = $S02().Construct(particleData.Rotation, particleData.Transparency, 1);
        array2[Math.imul(i, 6)] = (Math.imul(i, 4) & 0xFFFF);
        array2[((Math.imul(i, 6) + 1) | 0)] = (((Math.imul(i, 4) + 1) | 0) & 0xFFFF);
        array2[((Math.imul(i, 6) + 2) | 0)] = (((Math.imul(i, 4) + 2) | 0) & 0xFFFF);
        array2[((Math.imul(i, 6) + 3) | 0)] = (Math.imul(i, 4) & 0xFFFF);
        array2[((Math.imul(i, 6) + 4) | 0)] = (((Math.imul(i, 4) + 2) | 0) & 0xFFFF);
        array2[((Math.imul(i, 6) + 5) | 0)] = (((Math.imul(i, 4) + 3) | 0) & 0xFFFF);
      }
    }
    (this.ParticleMesh).set_Vertices(array);
    (this.ParticleMesh).set_Triangles(array2);
    (this.ParticleMesh).set_Normals(array3);
    (this.ParticleMesh).set_UVs(array4);

    for (var j = 0; j < ((this._particleList).get_Count() | 0); j = ((j + 1) | 0)) {
      var particleData2 = (this._particleList).get_Item(j);
      particleData2.Position = $T07().op_Addition(particleData2.Position.MemberwiseClone(), $S04().CallStatic($T07(), "op_Multiply", null, Math.fround(deltaTime), particleData2.Velocity.MemberwiseClone()));
      particleData2.Velocity = $T07().op_Subtraction(particleData2.Velocity.MemberwiseClone(), particleData2.Gravity);
      particleData2.Rotation += +this._customRotation;
      particleData2.Transparency -= +((+particleData2.Transparency / +(particleData2.Life)));
      var flag2 = +particleData2.MinSize <= +particleData2.MaxSize;
      if (flag2) {
        particleData2.MinSize += +((+particleData2.MaxSize / +(particleData2.Life)));
      }
      var flag3 = (particleData2.Life >>> 0) > (0 >>> 0);
      if (flag3) {
        particleData2.Life = (((particleData2.Life | 0) - 1) | 0);
      }
      (this._particleList).set_Item(j, particleData2);
      var flag4 = ((particleData2.Life | 0) === 0) || 
      ((particleData2.Life | 0) <= 0);
      if (flag4) {
        (this._particleList).Remove(particleData2);
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ParticleEmitter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 16, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Double, $.Double, 
          $.Double, $.Single, 
          $.Single, $.Single
        ]), 
      ParticleEmitter__ctor
    );

    $.Method({Static:false, Public:false}, "GenIntRand", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32]), 
      ParticleEmitter_GenIntRand
    );

    $.Method({Static:false, Public:false}, "GenRand", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double]), 
      ParticleEmitter_GenRand
    );

    $.Method({Static:false, Public:true }, "get_GravityX", 
      JSIL.MethodSignature.Return($.Single), 
      ParticleEmitter_get_GravityX
    );

    $.Method({Static:false, Public:true }, "get_GravityY", 
      JSIL.MethodSignature.Return($.Single), 
      ParticleEmitter_get_GravityY
    );

    $.Method({Static:false, Public:true }, "get_GravityZ", 
      JSIL.MethodSignature.Return($.Single), 
      ParticleEmitter_get_GravityZ
    );

    $.Method({Static:false, Public:true }, "get_LifeMax", 
      JSIL.MethodSignature.Return($.Int32), 
      ParticleEmitter_get_LifeMax
    );

    $.Method({Static:false, Public:true }, "get_LifeMin", 
      JSIL.MethodSignature.Return($.Int32), 
      ParticleEmitter_get_LifeMin
    );

    $.Method({Static:false, Public:true }, "get_MaxSize", 
      JSIL.MethodSignature.Return($.Single), 
      ParticleEmitter_get_MaxSize
    );

    $.Method({Static:false, Public:true }, "get_MinSize", 
      JSIL.MethodSignature.Return($.Single), 
      ParticleEmitter_get_MinSize
    );

    $.Method({Static:false, Public:true }, "get_PMesh", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      ParticleEmitter_get_PMesh
    );

    $.Method({Static:false, Public:true }, "get_RandPosX", 
      JSIL.MethodSignature.Return($.Double), 
      ParticleEmitter_get_RandPosX
    );

    $.Method({Static:false, Public:true }, "get_RandPosY", 
      JSIL.MethodSignature.Return($.Double), 
      ParticleEmitter_get_RandPosY
    );

    $.Method({Static:false, Public:true }, "get_RandPosZ", 
      JSIL.MethodSignature.Return($.Double), 
      ParticleEmitter_get_RandPosZ
    );

    $.Method({Static:false, Public:true }, "get_RandVelX", 
      JSIL.MethodSignature.Return($.Double), 
      ParticleEmitter_get_RandVelX
    );

    $.Method({Static:false, Public:true }, "get_RandVelY", 
      JSIL.MethodSignature.Return($.Double), 
      ParticleEmitter_get_RandVelY
    );

    $.Method({Static:false, Public:true }, "get_RandVelZ", 
      JSIL.MethodSignature.Return($.Double), 
      ParticleEmitter_get_RandVelZ
    );

    $.Method({Static:false, Public:true }, "get_Transparency", 
      JSIL.MethodSignature.Return($.Single), 
      ParticleEmitter_get_Transparency
    );

    $.Method({Static:false, Public:true }, "set_GravityX", 
      JSIL.MethodSignature.Action($.Single), 
      ParticleEmitter_set_GravityX
    );

    $.Method({Static:false, Public:true }, "set_GravityY", 
      JSIL.MethodSignature.Action($.Single), 
      ParticleEmitter_set_GravityY
    );

    $.Method({Static:false, Public:true }, "set_GravityZ", 
      JSIL.MethodSignature.Action($.Single), 
      ParticleEmitter_set_GravityZ
    );

    $.Method({Static:false, Public:true }, "set_LifeMax", 
      JSIL.MethodSignature.Action($.Int32), 
      ParticleEmitter_set_LifeMax
    );

    $.Method({Static:false, Public:true }, "set_LifeMin", 
      JSIL.MethodSignature.Action($.Int32), 
      ParticleEmitter_set_LifeMin
    );

    $.Method({Static:false, Public:true }, "set_MaxSize", 
      JSIL.MethodSignature.Action($.Single), 
      ParticleEmitter_set_MaxSize
    );

    $.Method({Static:false, Public:true }, "set_MinSize", 
      JSIL.MethodSignature.Action($.Single), 
      ParticleEmitter_set_MinSize
    );

    $.Method({Static:false, Public:true }, "set_RandPosX", 
      JSIL.MethodSignature.Action($.Double), 
      ParticleEmitter_set_RandPosX
    );

    $.Method({Static:false, Public:true }, "set_RandPosY", 
      JSIL.MethodSignature.Action($.Double), 
      ParticleEmitter_set_RandPosY
    );

    $.Method({Static:false, Public:true }, "set_RandPosZ", 
      JSIL.MethodSignature.Action($.Double), 
      ParticleEmitter_set_RandPosZ
    );

    $.Method({Static:false, Public:true }, "set_RandVelX", 
      JSIL.MethodSignature.Action($.Double), 
      ParticleEmitter_set_RandVelX
    );

    $.Method({Static:false, Public:true }, "set_RandVelY", 
      JSIL.MethodSignature.Action($.Double), 
      ParticleEmitter_set_RandVelY
    );

    $.Method({Static:false, Public:true }, "set_RandVelZ", 
      JSIL.MethodSignature.Action($.Double), 
      ParticleEmitter_set_RandVelZ
    );

    $.Method({Static:false, Public:true }, "set_Transparency", 
      JSIL.MethodSignature.Action($.Single), 
      ParticleEmitter_set_Transparency
    );

    $.Method({Static:false, Public:true }, "Tick", 
      JSIL.MethodSignature.Action($.Double), 
      ParticleEmitter_Tick
    );

    $.Field({Static:false, Public:true }, "VsSimpleTexture", $.String);

    $.Field({Static:false, Public:true }, "PsSimpleTexture", $.String);

    $.Field({Static:false, Public:true }, "ParticleMesh", $asm0B.TypeRef("Fusee.Serialization.Mesh"));

    $.Field({Static:false, Public:false}, "_particleList", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Engine.Core.ParticleData")]));

    $.Field({Static:false, Public:false}, "_particle", $asm04.TypeRef("Fusee.Engine.Core.ParticleData"));

    $.Field({Static:false, Public:false}, "_rnd", $asm0F.TypeRef("System.Random"));

    $.Field({Static:false, Public:false}, "_randVelX", $.Double);

    $.Field({Static:false, Public:false}, "_randVelY", $.Double);

    $.Field({Static:false, Public:false}, "_randVelZ", $.Double);

    $.Field({Static:false, Public:false}, "_randPosX", $.Double);

    $.Field({Static:false, Public:false}, "_randPosY", $.Double);

    $.Field({Static:false, Public:false}, "_randPosZ", $.Double);

    $.Field({Static:false, Public:false}, "_randRot", $.Double);

    $.Field({Static:false, Public:false}, "_randLife", $.Int32);

    $.Field({Static:false, Public:false}, "_customCount", $.Int32);

    $.Field({Static:false, Public:false}, "_customLifeMin", $.Int32);

    $.Field({Static:false, Public:false}, "_customLifeMax", $.Int32);

    $.Field({Static:false, Public:false}, "_customMinSize", $.Single);

    $.Field({Static:false, Public:false}, "_customMaxSize", $.Single);

    $.Field({Static:false, Public:false}, "_customRandPosX", $.Double);

    $.Field({Static:false, Public:false}, "_customRandPosY", $.Double);

    $.Field({Static:false, Public:false}, "_customRandPosZ", $.Double);

    $.Field({Static:false, Public:false}, "_customRandVelX", $.Double);

    $.Field({Static:false, Public:false}, "_customRandVelY", $.Double);

    $.Field({Static:false, Public:false}, "_customRandVelZ", $.Double);

    $.Field({Static:false, Public:false}, "_customGravityX", $.Single);

    $.Field({Static:false, Public:false}, "_customGravityY", $.Single);

    $.Field({Static:false, Public:false}, "_customGravityZ", $.Single);

    $.Field({Static:false, Public:false}, "_customTransparency", $.Single);

    $.Field({Static:false, Public:false}, "_customRotation", $.Single);

    $.Property({Static:false, Public:true }, "PMesh", $asm0B.TypeRef("Fusee.Serialization.Mesh"));

    $.Property({Static:false, Public:true }, "LifeMin", $.Int32);

    $.Property({Static:false, Public:true }, "LifeMax", $.Int32);

    $.Property({Static:false, Public:true }, "MinSize", $.Single);

    $.Property({Static:false, Public:true }, "MaxSize", $.Single);

    $.Property({Static:false, Public:true }, "Transparency", $.Single);

    $.Property({Static:false, Public:true }, "RandPosX", $.Double);

    $.Property({Static:false, Public:true }, "RandPosY", $.Double);

    $.Property({Static:false, Public:true }, "RandPosZ", $.Double);

    $.Property({Static:false, Public:true }, "RandVelX", $.Double);

    $.Property({Static:false, Public:true }, "RandVelY", $.Double);

    $.Property({Static:false, Public:true }, "RandVelZ", $.Double);

    $.Property({Static:false, Public:true }, "GravityX", $.Single);

    $.Property({Static:false, Public:true }, "GravityY", $.Single);

    $.Property({Static:false, Public:true }, "GravityZ", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Plane */ 

(function Plane$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function Plane__ctor () {
    $T00().prototype._ctor.call(this);
    var expr_0F = JSIL.Array.New($T02(), 4);
    var float = new ($T02())();
    float.x = -0.5;
    float.y = -0.5;
    float.z = 0;
    expr_0F[0] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = -0.5;
    float.y = 0.5;
    float.z = 0;
    expr_0F[1] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = 0.5;
    float.z = 0;
    expr_0F[2] = float.MemberwiseClone();
    float = new ($T02())();
    float.x = 0.5;
    float.y = -0.5;
    float.z = 0;
    expr_0F[3] = float.MemberwiseClone();
    this.set_Vertices(expr_0F);
    this.set_Triangles(JSIL.Array.New($T03(), [0, 2, 1, 0, 3, 2]));
    this.set_Normals(JSIL.Array.New($T02(), [$S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1)]));
    this.set_UVs(JSIL.Array.New($T04(), [$S01().Construct(0, 0), $S01().Construct(0, 1), $S01().Construct(1, 1), $S01().Construct(1, 0)]));
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
      Name: "Fusee.Engine.Core.Plane", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Plane__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Point2PointConstraint */ 

(function Point2PointConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.PointToPointFlags)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp.get_PivotInA)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp.get_PivotInB)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp.GetParam)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.GetUid)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_UserObject)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp.SetParam)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IPoint2PointConstraintImp.UpdateRhs)) ();
  };


  function Point2PointConstraint__ctor () {
  }; 

  function Point2PointConstraint_get_PivotInA () {
    return $IM00().Call(this._iP2PConstraintImp, null);
  }; 

  function Point2PointConstraint_get_PivotInB () {
    return $IM01().Call(this._iP2PConstraintImp, null);
  }; 

  function Point2PointConstraint_get_RigidBodyA () {
    var userObject = $IM02().Call($IM03().Call(this._iP2PConstraintImp, null), null);
    return $T04().$Cast(userObject);
  }; 

  function Point2PointConstraint_get_RigidBodyB () {
    var userObject = $IM02().Call($IM04().Call(this._iP2PConstraintImp, null), null);
    return $T04().$Cast(userObject);
  }; 

  function Point2PointConstraint_GetParam (param, axis) {
    return $IM05().Call(this._iP2PConstraintImp, null, param, axis);
  }; 

  function Point2PointConstraint_GetUid () {
    return $IM06().Call(this._iP2PConstraintImp, null);
  }; 

  function Point2PointConstraint_set_PivotInA (value) {
    var point2PointConstraint = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    (point2PointConstraint._iP2PConstraintImp.PivotInA = value.MemberwiseClone());
  }; 

  function Point2PointConstraint_set_PivotInB (value) {
    var point2PointConstraint = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    (point2PointConstraint._iP2PConstraintImp.PivotInB = value.MemberwiseClone());
  }; 

  function Point2PointConstraint_SetParam (param, value, axis) {
    var point2PointConstraint = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    $IM08().Call(point2PointConstraint._iP2PConstraintImp, null, param, value, axis);
  }; 

  function Point2PointConstraint_UpdateRhS (timeStep) {
    var point2PointConstraint = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    $IM09().Call(point2PointConstraint._iP2PConstraintImp, null, timeStep);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Point2PointConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Point2PointConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "get_PivotInA", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Point2PointConstraint_get_PivotInA
    );

    $.Method({Static:false, Public:true }, "get_PivotInB", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Point2PointConstraint_get_PivotInB
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      Point2PointConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      Point2PointConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "GetParam", 
      new JSIL.MethodSignature($.Single, [$asm03.TypeRef("Fusee.Engine.Common.PointToPointFlags"), $.Int32]), 
      Point2PointConstraint_GetParam
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      JSIL.MethodSignature.Return($.Int32), 
      Point2PointConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_PivotInA", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Point2PointConstraint_set_PivotInA
    );

    $.Method({Static:false, Public:true }, "set_PivotInB", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      Point2PointConstraint_set_PivotInB
    );

    $.Method({Static:false, Public:true }, "SetParam", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.PointToPointFlags"), $.Single, 
          $.Int32
        ]), 
      Point2PointConstraint_SetParam
    );

    $.Method({Static:false, Public:true }, "UpdateRhS", 
      JSIL.MethodSignature.Action($.Single), 
      Point2PointConstraint_UpdateRhS
    );

    $.Field({Static:false, Public:false}, "_iP2PConstraintImp", $asm03.TypeRef("Fusee.Engine.Common.IPoint2PointConstraintImp"));

    $.Property({Static:false, Public:true }, "PivotInA", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "PivotInB", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.RenderCanvas */ 

(function RenderCanvas$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.InitEventArgs)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.RenderEventArgs)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.Network)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.Time)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Fusee.Engine.Common.ResizeEventArgs)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Engine.Core.Audio)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Reflection.MemberInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.Fusee.Engine.Common.FuseeApplicationAttribute)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Fusee.Engine.Core.VideoManager)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.InitEventArgs))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.RenderEventArgs))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ResizeEventArgs))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm03.Fusee.Engine.Common.IAudioImp)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDriverImp)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm03.Fusee.Engine.Common.INetworkImp)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoManagerImp)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm03.Fusee.Engine.Common.CursorType)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.InitEventArgs]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.InitEventArgs]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.RenderEventArgs]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.ResizeEventArgs]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.get_DeltaTime)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.CloseGameWindow)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.get_Fullscreen)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.get_Height)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.get_VerticalSync)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.get_Width)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.set_Caption)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.add_Init)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.add_UnLoad)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.add_Render)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.add_Resize)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.OpenLink)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.Present)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.Run)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.set_Fullscreen)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.set_Height)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.set_VerticalSync)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.set_Width)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.SetCursor)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp.SetWindowSize)) ();
  };


  function RenderCanvas__ctor () {
  }; 

  function RenderCanvas_$lInitCanvas$gb__31_0 ($lp0$g, $lp1$g) {
    this.Init();
  }; 

  function RenderCanvas_$lInitCanvas$gb__31_1 ($lp0$g, $lp1$g) {
    this.DeInit();
  }; 

  function RenderCanvas_$lInitCanvas$gb__31_2 ($lp0$g, $lp1$g) {
    $T03().get_Instance().OnUpdateFrame();
    $T04().get_Instance().PreRender();
    $T05().get_Instance().set_DeltaTimeIncrement($IM00().Call(this.RenderCanvas$CanvasImplementor$value, null));
    this.RenderAFrame();
    $T04().get_Instance().PostRender();
  }; 

  function RenderCanvas_$lInitCanvas$gb__31_3 ($lp0$g, $lp1$g) {
    this.Resize();
  }; 

  function RenderCanvas_CloseGameWindow () {
    $IM01().Call(this.RenderCanvas$CanvasImplementor$value, null);
  }; 

  function RenderCanvas_DeInit () {
    $T08().get_Instance().CloseDevice();
    $T03().get_Instance().CloseDevice();
    $T08().get_Instance().Dispose();
    $T05().get_Instance().Dispose();
    $T04().get_Instance().Dispose();
    $T03().get_Instance().Dispose();
  }; 

  function RenderCanvas_get_AudioImplementor () {
    return this.RenderCanvas$AudioImplementor$value;
  }; 

  function RenderCanvas_get_CanvasImplementor () {
    return this.RenderCanvas$CanvasImplementor$value;
  }; 

  function RenderCanvas_get_ContextImplementor () {
    return this.RenderCanvas$ContextImplementor$value;
  }; 

  function RenderCanvas_get_Fullscreen () {
    return $IM02().Call(this.RenderCanvas$CanvasImplementor$value, null);
  }; 

  function RenderCanvas_get_Height () {
    return $IM03().Call(this.RenderCanvas$CanvasImplementor$value, null);
  }; 

  function RenderCanvas_get_InputDriverImplementor () {
    return this.RenderCanvas$InputDriverImplementor$value;
  }; 

  function RenderCanvas_get_NetworkImplementor () {
    return this.RenderCanvas$NetworkImplementor$value;
  }; 

  function RenderCanvas_get_RC () {
    return this.RenderCanvas$RC$value;
  }; 

  function RenderCanvas_get_VideoManagerImplementor () {
    return this.RenderCanvas$VideoManagerImplementor$value;
  }; 

  function RenderCanvas_get_VSync () {
    return $IM04().Call(this.RenderCanvas$CanvasImplementor$value, null);
  }; 

  function RenderCanvas_get_Width () {
    return $IM05().Call(this.RenderCanvas$CanvasImplementor$value, null);
  }; 

  function RenderCanvas_GetAppName () {
    var customAttributes = (JSIL.GetType(this)).GetCustomAttributes($T0B().__Type__, true);
    var flag = (customAttributes.length >>> 0) > (0 >>> 0);
    if (flag) {
      var fuseeApplicationAttribute = $T0B().$Cast(customAttributes[0]);
      var name = fuseeApplicationAttribute.Name;
    } else {
      name = (JSIL.GetType(this)).get_Name();
    }
    return name;
  }; 

  function RenderCanvas_GetWindowHeight () {
    var customAttributes = (JSIL.GetType(this)).GetCustomAttributes($T0B().__Type__, true);
    var flag = (customAttributes.length >>> 0) > (0 >>> 0);
    if (flag) {
      var fuseeApplicationAttribute = $T0B().$Cast(customAttributes[0]);
      var result = (fuseeApplicationAttribute.Height | 0);
    } else {
      result = -1;
    }
    return result;
  }; 

  function RenderCanvas_GetWindowWidth () {
    var customAttributes = (JSIL.GetType(this)).GetCustomAttributes($T0B().__Type__, true);
    var flag = (customAttributes.length >>> 0) > (0 >>> 0);
    if (flag) {
      var fuseeApplicationAttribute = $T0B().$Cast(customAttributes[0]);
      var result = (fuseeApplicationAttribute.Width | 0);
    } else {
      result = -1;
    }
    return result;
  }; 

  function RenderCanvas_Init () {
  }; 

  function RenderCanvas_InitCanvas () {
    $IM06().Call(this.RenderCanvas$CanvasImplementor$value, null, this.GetAppName());
    var windowWidth = (this.GetWindowWidth() | 0);
    var windowHeight = (this.GetWindowHeight() | 0);
    if ((windowWidth !== -1) && (windowHeight !== -1)) {
      this.SetWindowSize(
        windowWidth, 
        windowHeight, 
        -1, 
        -1, 
        false
      );
    }
    this.RenderCanvas$RC$value = new ($T10())(this.RenderCanvas$ContextImplementor$value);
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    $T08().get_Instance().set_AudioImp(this.RenderCanvas$AudioImplementor$value);
    $T03().get_Instance().set_NetworkImp(this.RenderCanvas$NetworkImplementor$value);
    $T11().get_Instance().set_VideoManagerImp(this.RenderCanvas$VideoManagerImplementor$value);
    $IM07().Call(this.RenderCanvas$CanvasImplementor$value, null, $T12().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lInitCanvas$gb__31_0", $S00(), false, false)));
    $IM08().Call(this.RenderCanvas$CanvasImplementor$value, null, $T12().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lInitCanvas$gb__31_1", $S01(), false, false)));
    $IM09().Call(this.RenderCanvas$CanvasImplementor$value, null, $T13().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lInitCanvas$gb__31_2", $S02(), false, false)));
    $IM0A().Call(this.RenderCanvas$CanvasImplementor$value, null, $T14().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lInitCanvas$gb__31_3", $S03(), false, false)));
  }; 

  function RenderCanvas_OpenLink (link) {
    $IM0B().Call(this.RenderCanvas$CanvasImplementor$value, null, link);
  }; 

  function RenderCanvas_Present () {
    $IM0C().Call(this.RenderCanvas$CanvasImplementor$value, null);
  }; 

  function RenderCanvas_RenderAFrame () {
  }; 

  function RenderCanvas_Resize () {
  }; 

  function RenderCanvas_Run () {
    this.InitCanvas();
    $IM0D().Call(this.RenderCanvas$CanvasImplementor$value, null);
  }; 

  function RenderCanvas_set_AudioImplementor (value) {
    this.RenderCanvas$AudioImplementor$value = value;
  }; 

  function RenderCanvas_set_CanvasImplementor (value) {
    this.RenderCanvas$CanvasImplementor$value = value;
  }; 

  function RenderCanvas_set_ContextImplementor (value) {
    this.RenderCanvas$ContextImplementor$value = value;
  }; 

  function RenderCanvas_set_Fullscreen (value) {
    $IM0E().Call(this.RenderCanvas$CanvasImplementor$value, null, value);
  }; 

  function RenderCanvas_set_Height (value) {
    $IM0F().Call(this.RenderCanvas$CanvasImplementor$value, null, value);
  }; 

  function RenderCanvas_set_InputDriverImplementor (value) {
    this.RenderCanvas$InputDriverImplementor$value = value;
  }; 

  function RenderCanvas_set_NetworkImplementor (value) {
    this.RenderCanvas$NetworkImplementor$value = value;
  }; 

  function RenderCanvas_set_RC (value) {
    this.RenderCanvas$RC$value = value;
  }; 

  function RenderCanvas_set_VideoManagerImplementor (value) {
    this.RenderCanvas$VideoManagerImplementor$value = value;
  }; 

  function RenderCanvas_set_VSync (value) {
    $IM10().Call(this.RenderCanvas$CanvasImplementor$value, null, value);
  }; 

  function RenderCanvas_set_Width (value) {
    $IM11().Call(this.RenderCanvas$CanvasImplementor$value, null, value);
  }; 

  function RenderCanvas_SetCursor (cursorType) {
    $IM12().Call(this.RenderCanvas$CanvasImplementor$value, null, cursorType);
  }; 

  function RenderCanvas_SetWindowSize (width, height, posx, posy, borderHidden) {
    $IM13().Call(this.RenderCanvas$CanvasImplementor$value, null, 
      width, 
      height, 
      posx, 
      posy, 
      borderHidden
    );
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.RenderCanvas", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RenderCanvas__ctor
    );

    $.Method({Static:false, Public:false}, "$lInitCanvas$gb__31_0", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")]), 
      RenderCanvas_$lInitCanvas$gb__31_0
    );

    $.Method({Static:false, Public:false}, "$lInitCanvas$gb__31_1", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")]), 
      RenderCanvas_$lInitCanvas$gb__31_1
    );

    $.Method({Static:false, Public:false}, "$lInitCanvas$gb__31_2", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.RenderEventArgs")]), 
      RenderCanvas_$lInitCanvas$gb__31_2
    );

    $.Method({Static:false, Public:false}, "$lInitCanvas$gb__31_3", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.ResizeEventArgs")]), 
      RenderCanvas_$lInitCanvas$gb__31_3
    );

    $.Method({Static:false, Public:true }, "CloseGameWindow", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_CloseGameWindow
    );

    $.Method({Static:false, Public:true , Virtual:true }, "DeInit", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_DeInit
    );

    $.Method({Static:false, Public:true }, "get_AudioImplementor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IAudioImp")), 
      RenderCanvas_get_AudioImplementor
    );

    $.Method({Static:false, Public:true }, "get_CanvasImplementor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IRenderCanvasImp")), 
      RenderCanvas_get_CanvasImplementor
    );

    $.Method({Static:false, Public:true }, "get_ContextImplementor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp")), 
      RenderCanvas_get_ContextImplementor
    );

    $.Method({Static:false, Public:true }, "get_Fullscreen", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderCanvas_get_Fullscreen
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderCanvas_get_Height
    );

    $.Method({Static:false, Public:true }, "get_InputDriverImplementor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")), 
      RenderCanvas_get_InputDriverImplementor
    );

    $.Method({Static:false, Public:true }, "get_NetworkImplementor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.INetworkImp")), 
      RenderCanvas_get_NetworkImplementor
    );

    $.Method({Static:false, Public:false}, "get_RC", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      RenderCanvas_get_RC
    );

    $.Method({Static:false, Public:true }, "get_VideoManagerImplementor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IVideoManagerImp")), 
      RenderCanvas_get_VideoManagerImplementor
    );

    $.Method({Static:false, Public:true }, "get_VSync", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderCanvas_get_VSync
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderCanvas_get_Width
    );

    $.Method({Static:false, Public:false}, "GetAppName", 
      JSIL.MethodSignature.Return($.String), 
      RenderCanvas_GetAppName
    );

    $.Method({Static:false, Public:false}, "GetWindowHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderCanvas_GetWindowHeight
    );

    $.Method({Static:false, Public:false}, "GetWindowWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderCanvas_GetWindowWidth
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_Init
    );

    $.Method({Static:false, Public:false}, "InitCanvas", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_InitCanvas
    );

    $.Method({Static:false, Public:true }, "OpenLink", 
      JSIL.MethodSignature.Action($.String), 
      RenderCanvas_OpenLink
    );

    $.Method({Static:false, Public:true }, "Present", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_Present
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_Resize
    );

    $.Method({Static:false, Public:true }, "Run", 
      JSIL.MethodSignature.Void, 
      RenderCanvas_Run
    );

    $.Method({Static:false, Public:true }, "set_AudioImplementor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IAudioImp")), 
      RenderCanvas_set_AudioImplementor
    );

    $.Method({Static:false, Public:true }, "set_CanvasImplementor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IRenderCanvasImp")), 
      RenderCanvas_set_CanvasImplementor
    );

    $.Method({Static:false, Public:true }, "set_ContextImplementor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp")), 
      RenderCanvas_set_ContextImplementor
    );

    $.Method({Static:false, Public:true }, "set_Fullscreen", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderCanvas_set_Fullscreen
    );

    $.Method({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Int32), 
      RenderCanvas_set_Height
    );

    $.Method({Static:false, Public:true }, "set_InputDriverImplementor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp")), 
      RenderCanvas_set_InputDriverImplementor
    );

    $.Method({Static:false, Public:true }, "set_NetworkImplementor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.INetworkImp")), 
      RenderCanvas_set_NetworkImplementor
    );

    $.Method({Static:false, Public:false}, "set_RC", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      RenderCanvas_set_RC
    );

    $.Method({Static:false, Public:true }, "set_VideoManagerImplementor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IVideoManagerImp")), 
      RenderCanvas_set_VideoManagerImplementor
    );

    $.Method({Static:false, Public:true }, "set_VSync", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderCanvas_set_VSync
    );

    $.Method({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      RenderCanvas_set_Width
    );

    $.Method({Static:false, Public:true }, "SetCursor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.CursorType")), 
      RenderCanvas_SetCursor
    );

    $.Method({Static:false, Public:true }, "SetWindowSize", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      RenderCanvas_SetWindowSize
    );

    $.Field({Static:false, Public:false}, "RenderCanvas$CanvasImplementor$value", $asm03.TypeRef("Fusee.Engine.Common.IRenderCanvasImp"));

    $.Field({Static:false, Public:false}, "RenderCanvas$ContextImplementor$value", $asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp"));

    $.Field({Static:false, Public:false}, "RenderCanvas$AudioImplementor$value", $asm03.TypeRef("Fusee.Engine.Common.IAudioImp"));

    $.Field({Static:false, Public:false}, "RenderCanvas$InputDriverImplementor$value", $asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp"));

    $.Field({Static:false, Public:false}, "RenderCanvas$VideoManagerImplementor$value", $asm03.TypeRef("Fusee.Engine.Common.IVideoManagerImp"));

    $.Field({Static:false, Public:false}, "RenderCanvas$NetworkImplementor$value", $asm03.TypeRef("Fusee.Engine.Common.INetworkImp"));

    $.Field({Static:false, Public:false}, "RenderCanvas$RC$value", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.Property({Static:false, Public:true }, "CanvasImplementor", $asm03.TypeRef("Fusee.Engine.Common.IRenderCanvasImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "ContextImplementor", $asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "AudioImplementor", $asm03.TypeRef("Fusee.Engine.Common.IAudioImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "InputDriverImplementor", $asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "VideoManagerImplementor", $asm03.TypeRef("Fusee.Engine.Common.IVideoManagerImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "NetworkImplementor", $asm03.TypeRef("Fusee.Engine.Common.INetworkImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));

    $.Property({Static:false, Public:false}, "RC", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "VSync", $.Boolean);

    $.Property({Static:false, Public:true }, "Fullscreen", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.RenderContext */ 

(function RenderContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Object))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm04.Fusee.Engine.Core.ShaderEffect, $asm04.Fusee.Engine.Core.ShaderEffectParam))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.MeshManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.TextureManager)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectManager)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Fusee.Base.Common.ColorUint)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext_MatrixParamNames)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.Fusee.Engine.Common.ITextureHandle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectParam)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm0F.System.String))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParam)))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm03.Fusee.Engine.Common.ShaderParamInfo))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm03.Fusee.Engine.Common.ShaderParamInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParam))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParam)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Int32))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.Fusee.Base.Core.Diagnostics)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderProgram)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm03.Fusee.Engine.Common.WritableTextureFormat)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm03.Fusee.Engine.Common.Rectangle)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm03.Fusee.Engine.Common.HardwareCapability)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm03.Fusee.Engine.Common.IShaderParam)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm03.Fusee.Engine.Common.RenderState)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.ShaderProgram))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.String, $asm0F.System.Object))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.String, $asm0F.System.Object))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm03.Fusee.Engine.Common.RenderState, $asm0F.System.UInt32)))) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm03.Fusee.Engine.Common.RenderState, $asm0F.System.UInt32)))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm03.Fusee.Engine.Common.RenderState, $asm0F.System.UInt32))) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float4))) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm03.Fusee.Engine.Common.ITexture)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm03.Fusee.Engine.Common.GBufferHandle)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoStreamImp)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Object), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm04.Fusee.Engine.Core.ShaderEffect, $asm04.Fusee.Engine.Core.ShaderEffectParam), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParam)), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParam), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0F.System.Type]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Exception, [$asm0F.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Int32")])]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Exception, [$asm0F.System.String, $asm0F.System.Exception]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String, $asm0F.System.String]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm03.Fusee.Engine.Common.IShaderParam, $asm03.Fusee.Engine.Common.ITextureHandle]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm03.Fusee.Engine.Common.IShaderParam, $asm03.Fusee.Engine.Common.ITextureHandle, 
        $asm03.Fusee.Engine.Common.GBufferHandle
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.Clear)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.ColorMask)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.CopyDepthBufferFromDeferredBuffer)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.CreateShader)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.CreateWritableTexture)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.DebugLine)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.get_ClearColor)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.get_ClearDepth)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetBufferContent)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetHardwareCapabilities)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetParamValue)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetPixelColor)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetPixelDepth)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetRenderState)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetShaderParam)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetShaderParamList)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveShader)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.Render)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.set_ClearDepth)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetCubeMapRenderTarget)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetRenderState)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm03.Fusee.Engine.Common.RenderState, $asm0F.System.UInt32)).GetEnumerator)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm03.Fusee.Engine.Common.RenderState, $asm0F.System.UInt32)).get_Current)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetRenderTarget)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShader)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParam1f)) ();
  };
  var $IM1C = function () {
    return ($IM1C = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParam2f)) ();
  };
  var $IM1D = function () {
    return ($IM1D = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParam3f)) ();
  };
  var $IM1E = function () {
    return ($IM1E = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParam4f)) ();
  };
  var $IM1F = function () {
    return ($IM1F = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParam4fArray)) ();
  };
  var $IM20 = function () {
    return ($IM20 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParamfloat4x4)) ();
  };
  var $IM21 = function () {
    return ($IM21 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParamMtx4fArray)) ();
  };
  var $IM22 = function () {
    return ($IM22 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParamI)) ();
  };
  var $IM23 = function () {
    return ($IM23 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.SetShaderParamTexture)) ();
  };
  var $IM24 = function () {
    return ($IM24 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.UpdateTextureFromVideoStream)) ();
  };
  var $IM25 = function () {
    return ($IM25 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.UpdateTextureRegion)) ();
  };
  var $IM26 = function () {
    return ($IM26 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.Viewport)) ();
  };


  function RenderContext__ctor (rci) {
    this._allFXParams = $S00().Construct();
    this._allShaderEffectParameter = $S01().Construct();
    this._debugLinesEnabled = true;
    this._rci = rci;
    (this.View = $T03().Identity.MemberwiseClone());
    (this.Model = $T03().Identity.MemberwiseClone());
    (this.Projection = $T03().Identity.MemberwiseClone());
    this._meshManager = new ($T04())(this._rci);
    this._textureManager = new ($T05())(this._rci);
    this._shaderEffectManager = new ($T06())(this);
    this._col = $T07().White.MemberwiseClone().Tofloat3();
    this._currentShaderParams = new ($T08())();
    this._updatedShaderParams = false;
  }; 

  function RenderContext_Clear (flags) {
    $IM00().Call(this._rci, null, flags);
  }; 

  function RenderContext_ColorMask (red, green, blue, alpha) {
    $IM01().Call(this._rci, null, red, green, blue, alpha);
  }; 

  function RenderContext_CopyDepthBufferFromDeferredBuffer (texture) {
    var textureHandleFromTexture = (this._textureManager).GetTextureHandleFromTexture(texture, false);
    $IM02().Call(this._rci, null, textureHandleFromTexture);
  }; 

  function RenderContext_CreateAllShaderEffectVariables (ef) {
    var $temp00;
    var shaderEffectParam = new JSIL.BoxedVariable(null);
    var obj = new JSIL.BoxedVariable(null);
    var obj2 = new JSIL.BoxedVariable(null);
    var obj3 = new JSIL.BoxedVariable(null);
    var i = 0;
    var num = (ef.VertexShaderSrc.length | 0);
    var flag = !(this._allShaderEffectParameter).TryGetValue(ef, /* ref */ shaderEffectParam);
    if (flag) {
      shaderEffectParam.set(new ($T0E())());
      (this._allShaderEffectParameter).Add(ef, shaderEffectParam.get());
    }
    shaderEffectParam.get().Parameters = $S00().Construct();
    shaderEffectParam.get().ParamsPerPass = $S02().Construct();

    for (i = 0; i < num; i = ((i + 1) | 0)) {
      var list = $T15().ToList$b1($T14())(this.GetShaderParamList(shaderEffectParam.get().CompiledShaders[i]));
      (shaderEffectParam.get().ParamsPerPass).Add($S03().Construct());

      for (var a$0 = list._items, i$0 = 0, l$0 = (list._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var current = a$0[i$0].MemberwiseClone();
        var flag2 = (ef.ParamDecl).TryGetValue(current.Name, /* ref */ obj);
        if (flag2) {
          var flag3 = (this._allFXParams).TryGetValue(current.Name, /* ref */ obj2);
          if (flag3) {
            var flag4 = !(JSIL.ObjectEqualsInstance(obj.get(), obj2.get(), !false, $T0F().__Type__));
            if (flag4) {
              obj.set(obj2.get());
              (ef.ParamDecl).set_Item(current.Name, obj2.get());
            }
          }
          var type = JSIL.GetType(obj.get());
          var flag5 = !((!(!$T17().op_Equality(current.Type, $T10().__Type__) && 
                !$T17().op_Equality(current.Type, $T18().__Type__)) && 
              ($T17().op_Equality(type, $T10().__Type__) || 
                $T17().op_Equality(type, $T18().__Type__) || 
                $T17().op_Equality(type, $T19().__Type__))) || 
            $S04().CallVirtual("IsAssignableFrom", null, current.Type, type)) && 
          !((current.Name.indexOf("BONES") != -1));
          if (flag5) {
            throw $S05().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0F(), ["Error preparing effect pass ", $T10().$Box(i), ". Shader parameter ", (current.Type).toString(), " ", current.Name, " was defined as ", type.toString(), " ", current.Name, " during initialization (different types)."])));
          }
          var flag6 = (shaderEffectParam.get().Parameters).TryGetValue(current.Name, /* ref */ obj3);
          if (flag6) {
            var effectParam = $T1D().$Cast(obj3.get());
            var flag7 = ((effectParam.Info.Size | 0) !== (current.Size | 0)) || 
            $T17().op_Inequality(effectParam.Info.Type, current.Type);
            if (flag7) {
              throw $S05().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0F(), ["Error preparing effect pass ", $T10().$Box(i), ". Shader parameter ", current.Name, " already defined with a different type in effect pass ", $T10().$Box((effectParam.ShaderInxs).get_Item(0))])));
            }
            (effectParam.ShaderInxs).Add(i);
          } else {
            var effectParam2 = new ($T1D())();
            effectParam2.Info = current.MemberwiseClone();
            effectParam2.ShaderInxs = $S06().Construct($T1F().$Cast(JSIL.Array.New($T10(), [i])));
            effectParam2.Value = obj.get();
            effectParam = effectParam2;
            (shaderEffectParam.get().Parameters).Add(current.Name, effectParam);
          }
          ((shaderEffectParam.get().ParamsPerPass).get_Item(i)).Add(effectParam);
        } else {
          $T20().Log(("Warning: uniform variable " + current.Name + " found but no value is given. Please add this variable to ParamDecl of current ShaderEffect."));
        }
      }
    }
  }; 

  function RenderContext_CreateShader (vs, ps) {
    return new ($T21())(this._rci, $IM03().Call(this._rci, null, vs, ps));
  }; 

  function RenderContext_CreateTexture (imgData, repeat) {
    return (this._textureManager).GetTextureHandleFromTexture(imgData, repeat);
  }; 

  function RenderContext_CreateWritableTexture (width, height, textureFormat) {
    return $IM04().Call(this._rci, null, width, height, textureFormat);
  }; 

  function RenderContext_DebugLine (start, end, color) {
    var debugLinesEnabled = this._debugLinesEnabled;
    if (debugLinesEnabled) {
      start = $T23().op_Division(start.MemberwiseClone(), 2).MemberwiseClone();
      end = $T23().op_Division(end.MemberwiseClone(), 2).MemberwiseClone();
      var currentShader = this._currentShader;
      this.SetShader(this._debugShader);
      this.SetShaderParamfloat4x4(this._currentShaderParams.FUSEE_MVP, this.get_ModelViewProjection().MemberwiseClone());
      this.SetShaderParam4f(this._debugColor, color.MemberwiseClone());
      $IM05().Call(this._rci, null, start.MemberwiseClone(), end.MemberwiseClone(), color.MemberwiseClone());
      var flag = currentShader !== null;
      if (flag) {
        this.SetShader(currentShader);
      }
    }
  }; 

  function RenderContext_get_Bones () {
    return this._bones;
  }; 

  function RenderContext_get_ClearColor () {
    return $IM06().Call(this._rci, null);
  }; 

  function RenderContext_get_ClearDepth () {
    return $IM07().Call(this._rci, null);
  }; 

  function RenderContext_get_CurrentShader () {
    return this._currentShaderEffect;
  }; 

  function RenderContext_get_DebugLinesEnabled () {
    return this._debugLinesEnabled;
  }; 

  function RenderContext_get_HasPickingContext () {
    return this.RenderContext$HasPickingContext$value;
  }; 

  function RenderContext_get_InvModel () {
    if (!this._invModelOk) {
      this._invModel = $T03().Invert(this.get_Model().MemberwiseClone()).MemberwiseClone();
      this._invModelOk = true;
    }
    return this._invModel;
  }; 

  function RenderContext_get_InvModelView () {
    if (!this._invModelViewOk) {
      this._invModelView = $T03().Invert(this.get_ModelView().MemberwiseClone()).MemberwiseClone();
      this._invModelViewOk = true;
    }
    return this._invModelView;
  }; 

  function RenderContext_get_InvModelViewProjection () {
    if (!this._invModelViewProjectionOk) {
      this._invModelViewProjection = $T03().Invert(this.get_ModelViewProjection().MemberwiseClone()).MemberwiseClone();
      this._invModelViewProjectionOk = true;
    }
    return this._invModelViewProjection;
  }; 

  function RenderContext_get_InvProjection () {
    if (!this._invProjectionOk) {
      this._invProjection = $T03().Invert(this.get_Projection().MemberwiseClone()).MemberwiseClone();
      this._invProjectionOk = true;
    }
    return this._invProjection;
  }; 

  function RenderContext_get_InvTransModel () {
    if (!this._invTransModelOk) {
      this._invTransModel = $T03().Invert(this.get_TransModel().MemberwiseClone()).MemberwiseClone();
      this._invTransModelOk = true;
    }
    return this._invTransModel;
  }; 

  function RenderContext_get_InvTransModelView () {
    if (!this._invTransModelViewOk) {
      this._invTransModelView = $T03().Invert(this.get_TransModelView().MemberwiseClone()).MemberwiseClone();
      this._invTransModelViewOk = true;
    }
    return this._invTransModelView;
  }; 

  function RenderContext_get_InvTransModelViewProjection () {
    if (!this._invTransModelViewProjectionOk) {
      this._invTransModelViewProjection = $T03().Invert(this.get_TransModelViewProjection().MemberwiseClone()).MemberwiseClone();
      this._invTransModelViewProjectionOk = true;
    }
    return this._invTransModelViewProjection;
  }; 

  function RenderContext_get_InvTransProjection () {
    if (!this._invTransProjectionOk) {
      this._invTransProjection = $T03().Invert(this.get_TransProjection().MemberwiseClone()).MemberwiseClone();
      this._invTransProjectionOk = true;
    }
    return this._invTransProjection;
  }; 

  function RenderContext_get_InvTransView () {
    if (!this._invTransViewOk) {
      this._invTransView = $T03().Invert(this.get_TransView().MemberwiseClone()).MemberwiseClone();
      this._invTransViewOk = true;
    }
    return this._invTransView;
  }; 

  function RenderContext_get_InvView () {
    if (!this._invViewOk) {
      this._invView = $T03().Invert(this.get_View().MemberwiseClone()).MemberwiseClone();
      this._invViewOk = true;
    }
    return this._invView;
  }; 

  function RenderContext_get_Model () {
    return this._model;
  }; 

  function RenderContext_get_ModelView () {
    return this._modelView;
  }; 

  function RenderContext_get_ModelViewProjection () {
    if (!this._modelViewProjectionOk) {
      this._modelViewProjection = $T03().Mult(
        this.get_Projection().MemberwiseClone(), 
        this.get_ModelView().MemberwiseClone()
      ).MemberwiseClone();
      this._modelViewProjectionOk = true;
    }
    return this._modelViewProjection;
  }; 

  function RenderContext_get_Projection () {
    return this._projection;
  }; 

  function RenderContext_get_TransModel () {
    if (!this._transModelOk) {
      this._transModel = $T03().Transpose(this.get_Model().MemberwiseClone());
      this._transModelOk = true;
    }
    return this._transModel;
  }; 

  function RenderContext_get_TransModelView () {
    if (!this._transModelViewOk) {
      this._transModelView = $T03().Transpose(this.get_ModelView().MemberwiseClone());
      this._transModelViewOk = true;
    }
    return this._transModelView;
  }; 

  function RenderContext_get_TransModelViewProjection () {
    if (!this._transModelViewProjectionOk) {
      this._transModelViewProjection = $T03().Transpose(this.get_ModelViewProjection().MemberwiseClone());
      this._transModelViewProjectionOk = true;
    }
    return this._transModelViewProjection;
  }; 

  function RenderContext_get_TransProjection () {
    if (!this._transProjectionOk) {
      this._transProjection = $T03().Transpose(this.get_Projection().MemberwiseClone());
      this._transProjectionOk = true;
    }
    return this._transProjection;
  }; 

  function RenderContext_get_TransView () {
    if (!this._transViewOk) {
      this._transView = $T03().Transpose(this.get_View().MemberwiseClone());
      this._transViewOk = true;
    }
    return this._transView;
  }; 

  function RenderContext_get_View () {
    return this._view;
  }; 

  function RenderContext_get_ViewportHeight () {
    return this.RenderContext$ViewportHeight$value;
  }; 

  function RenderContext_get_ViewportWidth () {
    return this.RenderContext$ViewportWidth$value;
  }; 

  function RenderContext_GetBufferContent (quad, texId) {
    var textureHandleFromTexture = (this._textureManager).GetTextureHandleFromTexture(texId, false);
    $IM08().Call(this._rci, null, quad.MemberwiseClone(), textureHandleFromTexture);
  }; 

  function RenderContext_GetHardwareCapabilities (capability) {
    return $IM09().Call(this._rci, null, capability);
  }; 

  function RenderContext_GetParamValue (program, handle) {
    return $IM0A().Call(this._rci, null, program._spi, handle);
  }; 

  function RenderContext_GetPixelColor (x, y, w, h) {
    return $IM0B().Call(this._rci, null, x, y, w, h);
  }; 

  function RenderContext_GetPixelDepth (x, y) {
    return $IM0C().Call(this._rci, null, x, y);
  }; 

  function RenderContext_GetRenderState (renderState) {
    return $IM0D().Call(this._rci, null, renderState);
  }; 

  function RenderContext_GetShaderParam (program, paramName) {
    return $IM0E().Call(this._rci, null, program._spi, paramName);
  }; 

  function RenderContext_GetShaderParamList (program) {
    return $IM0F().Call(this._rci, null, program._spi);
  }; 

  function RenderContext_HandleAndUpdateChangedButExisistingEffectVariable (ef, changedName, changedValue) {
    var $temp00, $temp01;
    var shaderEffectParam = new JSIL.BoxedVariable(null);
    var flag = !(this._allShaderEffectParameter).TryGetValue(ef, /* ref */ shaderEffectParam);
    if (!flag) {

      for (var a$0 = shaderEffectParam.get().ParamsPerPass._items, i$0 = 0, l$0 = (shaderEffectParam.get().ParamsPerPass._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var current = a$0[i$0];

        for (var a$1 = current._items, i$1 = 0, l$1 = (current._size | 0); i$1 < l$1; ($temp01 = i$1, 
            i$1 = ((i$1 + 1) | 0), 
            $temp01)) {
          var current2 = a$1[i$1];
          var flag2 = !(current2.Info.Name == changedName);
          if (!flag2) {
            var flag3 = (JSIL.ObjectEqualsInstance(current2.Value, changedValue, !false, $T0F().__Type__));
            if (flag3) {
              return;
            }
            current2.Value = changedValue;
          }
        }
      }
    }
  }; 

  function RenderContext_RemoveShader (ef) {
    var shaderEffectParam = new JSIL.BoxedVariable(null);
    var flag = !(this._allShaderEffectParameter).TryGetValue(ef, /* ref */ shaderEffectParam);
    if (!flag) {
      var compiledShaders = shaderEffectParam.get().CompiledShaders;

      for (var i = 0; i < (compiledShaders.length | 0); i = ((i + 1) | 0)) {
        var shaderProgram = compiledShaders[i];
        $IM10().Call(this._rci, null, shaderProgram._spi);
      }
    }
  }; 

  function RenderContext_Render (m, $exception) {
    var $temp00;
    var shaderEffectParam = new JSIL.BoxedVariable(null);
    if (this._currentShaderEffect !== null) {
      var enumerator = $T01().prototype.GetEnumerator.call(this._allFXParams);

      while ($T2B().prototype.MoveNext.call(enumerator)) {
        var current = $T2B().prototype.get_Current.call(enumerator).MemberwiseClone();
        (this._currentShaderEffect).SetEffectParam(
          current.get_Key(), 
          current.get_Value()
        );
      }
      var i = 0;
      var num = (this._currentShaderEffect.VertexShaderSrc.length | 0);
      try {

        for (i = 0; i < num; i = ((i + 1) | 0)) {
          (this._allShaderEffectParameter).TryGetValue(this._currentShaderEffect, /* ref */ shaderEffectParam);
          this.SetShader(shaderEffectParam.get().CompiledShaders[i]);

          for (var a$0 = (shaderEffectParam.get().ParamsPerPass).get_Item(i)._items, i$0 = 0, l$0 = ((shaderEffectParam.get().ParamsPerPass).get_Item(i)._size | 0); i$0 < l$0; ($temp00 = i$0, 
              i$0 = ((i$0 + 1) | 0), 
              $temp00)) {
            var current2 = a$0[i$0];
            this.SetShaderParamT(current2);
          }
          this.SetRenderState(this._currentShaderEffect.States[i]);
          var meshImpFromMesh = (this._meshManager).GetMeshImpFromMesh(m);
          $IM11().Call(this._rci, null, meshImpFromMesh);
          (this._meshManager).Cleanup();
          (this._textureManager).Cleanup();
        }
        (this._shaderEffectManager).Cleanup();
      } catch ($exception) {
        throw $S07().Construct(JSIL.ConcatString("Error while rendering pass ", $T10().$Box(i)), $exception);
      }
    }
  }; 

  function RenderContext_set_Bones (value) {
    this._bones = value;
    this.UpdateCurrentShader();
  }; 

  function RenderContext_set_ClearColor (value) {
    (this._rci.ClearColor = value.MemberwiseClone());
  }; 

  function RenderContext_set_ClearDepth (value) {
    $IM12().Call(this._rci, null, value);
  }; 

  function RenderContext_set_DebugLinesEnabled (value) {
    this._debugLinesEnabled = value;
  }; 

  function RenderContext_set_HasPickingContext (value) {
    this.RenderContext$HasPickingContext$value = value;
  }; 

  function RenderContext_set_Model (value) {
    this._model = value.MemberwiseClone();
    this._modelViewProjectionOk = false;
    this._invModelOk = false;
    this._invModelViewOk = false;
    this._invModelViewProjectionOk = false;
    this._invTransModelOk = false;
    this._invTransModelViewOk = false;
    this._invTransModelViewProjectionOk = false;
    this._transModelOk = false;
    this._transModelViewOk = false;
    this._transModelViewProjectionOk = false;
    this._modelView = $S08().CallStatic($T03(), "op_Multiply", null, this._view.MemberwiseClone(), this._model.MemberwiseClone()).MemberwiseClone();
    this.UpdateCurrentShader();
  }; 

  function RenderContext_set_ModelView (value) {
    this._modelView = value.MemberwiseClone();
    this._view = $T03().Identity.MemberwiseClone();
    this._model = value.MemberwiseClone();
    this._modelViewProjectionOk = false;
    this._invModelOk = false;
    this._invViewOk = false;
    this._invModelViewOk = false;
    this._invModelViewProjectionOk = false;
    this._invTransModelOk = false;
    this._invTransViewOk = false;
    this._invTransModelViewOk = false;
    this._invTransModelViewProjectionOk = false;
    this._transModelOk = false;
    this._transViewOk = false;
    this._transModelViewOk = false;
    this._transModelViewProjectionOk = false;
    this.UpdateCurrentShader();
  }; 

  function RenderContext_set_Projection (value) {
    this._projection = value.MemberwiseClone();
    this._modelViewProjectionOk = false;
    this._invProjectionOk = false;
    this._invProjectionOk = false;
    this._invTransProjectionOk = false;
    this._invTransProjectionOk = false;
    this._transProjectionOk = false;
    this._transProjectionOk = false;
    this.UpdateCurrentShader();
  }; 

  function RenderContext_set_View (value) {
    this._view = value.MemberwiseClone();
    this._modelViewProjectionOk = false;
    this._invViewOk = false;
    this._invModelViewOk = false;
    this._invModelViewProjectionOk = false;
    this._invTransViewOk = false;
    this._invTransModelViewOk = false;
    this._invTransModelViewProjectionOk = false;
    this._transViewOk = false;
    this._transModelViewOk = false;
    this._transModelViewProjectionOk = false;
    this._modelView = $S08().CallStatic($T03(), "op_Multiply", null, this._view.MemberwiseClone(), this._model.MemberwiseClone()).MemberwiseClone();
    this.UpdateCurrentShader();
  }; 

  function RenderContext_set_ViewportHeight (value) {
    this.RenderContext$ViewportHeight$value = (value | 0);
  }; 

  function RenderContext_set_ViewportWidth (value) {
    this.RenderContext$ViewportWidth$value = (value | 0);
  }; 

  function RenderContext_SetCubeMapRenderTarget (texture, position) {
    var textureHandleFromTexture = (this._textureManager).GetTextureHandleFromTexture(texture, false);
    $IM13().Call(this._rci, null, textureHandleFromTexture, position);
  }; 

  function RenderContext_SetFXParam (name, value) {
    var obj = new JSIL.BoxedVariable(null);
    var flag = (this._allFXParams).TryGetValue(name, /* ref */ obj);
    if (flag) {
      var flag2 = (JSIL.ObjectEqualsInstance(obj.get(), value, !false, $T0F().__Type__));
      if (!flag2) {
        (this._allFXParams).set_Item(name, value);
        (this._currentShaderEffect).SetEffectParam(name, value);
      }
    } else {
      (this._allFXParams).Add(name, value);
      (this._currentShaderEffect).SetEffectParam(name, value);
    }
  }; 

  function RenderContext_SetRenderState$00 (renderState, value) {
    $IM14().Call(this._rci, null, renderState, value);
  }; 

  function RenderContext_SetRenderState$01 (renderStateSet) {
    var enumerator = $IM15().Call(renderStateSet.get_States(), null);
    try {

      while ($IM16().Call(enumerator, null)) {
        var current = $IM17().Call(enumerator, null);
        var key = current.get_Key();
        var value = (current.get_Value() >>> 0);
        $IM14().Call(this._rci, null, key, value);
      }
    } finally {
      if (enumerator !== null) {
        $IM18().Call(enumerator, null);
      }
    }
  }; 

  function RenderContext_SetRenderTarget (texture) {
    var flag = texture !== null;
    if (flag) {
      var textureHandleFromTexture = (this._textureManager).GetTextureHandleFromTexture(texture, false);
      $IM19().Call(this._rci, null, textureHandleFromTexture);
    } else {
      $IM19().Call(this._rci, null, null);
    }
  }; 

  function RenderContext_SetShader (program) {
    this._updatedShaderParams = false;
    var flag = this._currentShader !== program;
    if (flag) {
      this._currentShader = program;
      $IM1A().Call(this._rci, null, program._spi);
    }
    this.UpdateShaderParams();
  }; 

  function RenderContext_SetShaderEffect (ef, $exception) {
    if (this._rci === null) {
      throw $S09().Construct("rc", "must pass a valid render context.");
    }
    var flag2 = ef === null;
    if (!flag2) {
      var flag3 = (this._shaderEffectManager).GetShaderEffect(ef) !== null;
      if (flag3) {
        this._currentShaderEffect = ef;
      } else {
        var i = 0;
        var num = (ef.VertexShaderSrc.length | 0);
        var shaderEffectParam = new ($T0E())();
        shaderEffectParam.CompiledShaders = JSIL.Array.New($T21(), num);
        var shaderEffectParam2 = shaderEffectParam;
        try {

          for (i = 0; i < num; i = ((i + 1) | 0)) {
            shaderEffectParam2.CompiledShaders[i] = this.CreateShader(ef.VertexShaderSrc[i], ef.PixelShaderSrc[i]);
          }
        } catch ($exception) {
          throw $S07().Construct(JSIL.ConcatString("Error while compiling shader for pass ", $T10().$Box(i)), $exception);
        }
        (this._allShaderEffectParameter).Add(ef, shaderEffectParam2);
        this.CreateAllShaderEffectVariables(ef);
        (this._shaderEffectManager).RegisterShaderEffect(ef);
        this._currentShaderEffect = ef;
      }
    }
  }; 

  function RenderContext_SetShaderParam1f (param, val) {
    $IM1B().Call(this._rci, null, param, val);
  }; 

  function RenderContext_SetShaderParam2f (param, val) {
    $IM1C().Call(this._rci, null, param, val.MemberwiseClone());
  }; 

  function RenderContext_SetShaderParam3f (param, val) {
    $IM1D().Call(this._rci, null, param, val.MemberwiseClone());
  }; 

  function RenderContext_SetShaderParam4f (param, val) {
    $IM1E().Call(this._rci, null, param, val.MemberwiseClone());
  }; 

  function RenderContext_SetShaderParam4fArray (param, val) {
    $IM1F().Call(this._rci, null, param, val);
  }; 

  function RenderContext_SetShaderParamfloat4x4 (param, val) {
    $IM20().Call(this._rci, null, param, val.MemberwiseClone());
  }; 

  function RenderContext_SetShaderParamMtx4fArray (param, val) {
    $IM21().Call(this._rci, null, param, val);
  }; 

  function RenderContext_SetShaderParamI (param, val) {
    $IM22().Call(this._rci, null, param, val);
  }; 

  function RenderContext_SetShaderParamT (param) {
    var flag = $T17().op_Equality(param.Info.Type, $T10().__Type__);
    if (flag) {
      this.SetShaderParamI(param.Info.Handle, $T10().$Cast(param.Value));
    } else {
      var flag2 = $T17().op_Equality(param.Info.Type, $T18().__Type__);
      if (flag2) {
        this.SetShaderParam1f(param.Info.Handle, $T18().$Cast(param.Value));
      } else {
        var flag3 = $T17().op_Equality(param.Info.Type, $T37().__Type__);
        if (flag3) {
          this.SetShaderParam2f(param.Info.Handle, $T37().$Cast(param.Value).MemberwiseClone());
        } else {
          var flag4 = $T17().op_Equality(param.Info.Type, $T23().__Type__);
          if (flag4) {
            this.SetShaderParam3f(param.Info.Handle, $T23().$Cast(param.Value).MemberwiseClone());
          } else {
            var flag5 = $T17().op_Equality(param.Info.Type, $T24().__Type__);
            if (flag5) {
              this.SetShaderParam4f(param.Info.Handle, $T24().$Cast(param.Value).MemberwiseClone());
            } else {
              var flag6 = $T17().op_Equality(param.Info.Type, $T03().__Type__);
              if (flag6) {
                var flag7 = (param.Info.Size | 0) > 1;
                if (flag7) {
                  var val = $T2E().$Cast(param.Value);
                  this.SetShaderParamMtx4fArray(param.Info.Handle, val);
                } else {
                  this.SetShaderParamfloat4x4(param.Info.Handle, $T03().$Cast(param.Value).MemberwiseClone());
                }
              } else {
                var flag8 = $T17().op_Equality(param.Info.Type, $T2E().__Type__);
                if (flag8) {
                  this.SetShaderParamMtx4fArray(param.Info.Handle, $T2E().$Cast(param.Value));
                } else {
                  var flag9 = $T17().op_Equality(param.Info.Type, $T39().__Type__);
                  if (flag9) {
                    this.SetShaderParamTexture(param.Info.Handle, $T0B().$Cast(param.Value));
                  }
                }
              }
            }
          }
        }
      }
    }
  }; 

  function RenderContext_SetShaderParamTexture$02 (param, texture) {
    var textureHandleFromTexture = (this._textureManager).GetTextureHandleFromTexture(texture, false);
    $S0A().CallVirtual($IM23(), null, this._rci, param, textureHandleFromTexture);
  }; 

  function RenderContext_SetShaderParamTexture$03 (param, texId, gHandle) {
    $S0B().CallVirtual($IM23(), null, this._rci, param, texId, gHandle);
  }; 

  function RenderContext_UpdateCurrentShader () {
    if (this._currentShader !== null) {
      if (!this._updatedShaderParams) {
        this.UpdateShaderParams();
      }
      if (this._currentShaderParams.FUSEE_M !== null) {
        this.SetFXParam("FUSEE_M", this.get_Model().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_V !== null) {
        this.SetFXParam("FUSEE_V", this.get_View().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_MV !== null) {
        this.SetFXParam("FUSEE_MV", this.get_ModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_P !== null) {
        this.SetFXParam("FUSEE_P", this.get_Projection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_MVP !== null) {
        this.SetFXParam("FUSEE_MVP", this.get_ModelViewProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_IMV !== null) {
        this.SetFXParam("FUSEE_IMV", this.get_InvModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_IP !== null) {
        this.SetFXParam("FUSEE_IP", this.get_InvProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_IMVP !== null) {
        this.SetFXParam("FUSEE_IMVP", this.get_InvModelViewProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_TMV !== null) {
        this.SetFXParam("FUSEE_TMV", this.get_TransModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_TP !== null) {
        this.SetFXParam("FUSEE_TP", this.get_TransProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_TMVP !== null) {
        this.SetFXParam("FUSEE_TMVP", this.get_TransModelViewProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_ITMV !== null) {
        this.SetFXParam("FUSEE_ITMV", this.get_InvTransModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_ITP !== null) {
        this.SetFXParam("FUSEE_ITP", this.get_InvTransProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_ITMVP !== null) {
        this.SetFXParam("FUSEE_ITMVP", this.get_InvTransModelViewProjection().MemberwiseClone());
      }
      var flag17 = (this._currentShaderParams.FUSEE_BONES !== null) && 
      (this.get_Bones() !== null);
      if (flag17) {
        this.SetFXParam("FUSEE_BONES[0]", this.get_Bones());
      }
    }
  }; 

  function RenderContext_UpdateShaderParams () {
    if (this._currentShader !== null) {
      this._currentShaderParams.FUSEE_M = (this._currentShader).GetShaderParam("FUSEE_M");
      this._currentShaderParams.FUSEE_V = (this._currentShader).GetShaderParam("FUSEE_V");
      this._currentShaderParams.FUSEE_MV = (this._currentShader).GetShaderParam("FUSEE_MV");
      this._currentShaderParams.FUSEE_P = (this._currentShader).GetShaderParam("FUSEE_P");
      this._currentShaderParams.FUSEE_MVP = (this._currentShader).GetShaderParam("FUSEE_MVP");
      this._currentShaderParams.FUSEE_IMV = (this._currentShader).GetShaderParam("FUSEE_IMV");
      this._currentShaderParams.FUSEE_IP = (this._currentShader).GetShaderParam("FUSEE_IP");
      this._currentShaderParams.FUSEE_IMVP = (this._currentShader).GetShaderParam("FUSEE_IMVP");
      this._currentShaderParams.FUSEE_TMV = (this._currentShader).GetShaderParam("FUSEE_TMV");
      this._currentShaderParams.FUSEE_TP = (this._currentShader).GetShaderParam("FUSEE_TP");
      this._currentShaderParams.FUSEE_TMVP = (this._currentShader).GetShaderParam("FUSEE_TMVP");
      this._currentShaderParams.FUSEE_ITMV = (this._currentShader).GetShaderParam("FUSEE_ITMV");
      this._currentShaderParams.FUSEE_ITP = (this._currentShader).GetShaderParam("FUSEE_ITP");
      this._currentShaderParams.FUSEE_ITMVP = (this._currentShader).GetShaderParam("FUSEE_ITMVP");
      this._currentShaderParams.FUSEE_BONES = (this._currentShader).GetShaderParam("FUSEE_BONES[0]");
      this._updatedShaderParams = true;
      this.UpdateCurrentShader();
    }
  }; 

  function RenderContext_UpdateTextureFromVideoStream (stream, tex) {
    var textureHandleFromTexture = (this._textureManager).GetTextureHandleFromTexture(tex, false);
    $IM24().Call(this._rci, null, stream, textureHandleFromTexture);
  }; 

  function RenderContext_UpdateTextureRegion (dstTexture, srcTexture, startX, startY, width, height) {
    var textureHandleFromTexture = (this._textureManager).GetTextureHandleFromTexture(dstTexture, false);
    $IM25().Call(this._rci, null, 
      textureHandleFromTexture, 
      srcTexture, 
      startX, 
      startY, 
      width, 
      height
    );
  }; 

  function RenderContext_Viewport (x, y, width, height) {
    this.RenderContext$ViewportWidth$value = (width | 0);
    this.RenderContext$ViewportHeight$value = (height | 0);
    $IM26().Call(this._rci, null, x, y, width, height);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.RenderContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp")), 
      RenderContext__ctor
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ClearFlags")), 
      RenderContext_Clear
    );

    $.Method({Static:false, Public:true }, "ColorMask", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      RenderContext_ColorMask
    );

    $.Method({Static:false, Public:true }, "CopyDepthBufferFromDeferredBuffer", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.Texture")), 
      RenderContext_CopyDepthBufferFromDeferredBuffer
    );

    $.Method({Static:false, Public:false}, "CreateAllShaderEffectVariables", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      RenderContext_CreateAllShaderEffectVariables
    );

    $.Method({Static:false, Public:false}, "CreateShader", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderProgram"), [$.String, $.String]), 
      RenderContext_CreateShader
    );

    $.Method({Static:false, Public:true }, "CreateTexture", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITextureHandle"), [$asm04.TypeRef("Fusee.Engine.Core.Texture"), $.Boolean]), 
      RenderContext_CreateTexture
    );

    $.Method({Static:false, Public:true }, "CreateWritableTexture", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITextureHandle"), [
          $.Int32, $.Int32, 
          $asm03.TypeRef("Fusee.Engine.Common.WritableTextureFormat")
        ]), 
      RenderContext_CreateWritableTexture
    );

    $.Method({Static:false, Public:true }, "DebugLine", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $asm0A.TypeRef("Fusee.Math.Core.float4")
        ]), 
      RenderContext_DebugLine
    );

    $.Method({Static:false, Public:true }, "get_Bones", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")])), 
      RenderContext_get_Bones
    );

    $.Method({Static:false, Public:true }, "get_ClearColor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      RenderContext_get_ClearColor
    );

    $.Method({Static:false, Public:true }, "get_ClearDepth", 
      JSIL.MethodSignature.Return($.Single), 
      RenderContext_get_ClearDepth
    );

    $.Method({Static:false, Public:true }, "get_CurrentShader", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      RenderContext_get_CurrentShader
    );

    $.Method({Static:false, Public:true }, "get_DebugLinesEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderContext_get_DebugLinesEnabled
    );

    $.Method({Static:false, Public:true }, "get_HasPickingContext", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderContext_get_HasPickingContext
    );

    $.Method({Static:false, Public:true }, "get_InvModel", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvModel
    );

    $.Method({Static:false, Public:true }, "get_InvModelView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvModelView
    );

    $.Method({Static:false, Public:true }, "get_InvModelViewProjection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvModelViewProjection
    );

    $.Method({Static:false, Public:true }, "get_InvProjection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvProjection
    );

    $.Method({Static:false, Public:true }, "get_InvTransModel", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvTransModel
    );

    $.Method({Static:false, Public:true }, "get_InvTransModelView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvTransModelView
    );

    $.Method({Static:false, Public:true }, "get_InvTransModelViewProjection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvTransModelViewProjection
    );

    $.Method({Static:false, Public:true }, "get_InvTransProjection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvTransProjection
    );

    $.Method({Static:false, Public:true }, "get_InvTransView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvTransView
    );

    $.Method({Static:false, Public:true }, "get_InvView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_InvView
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_Model
    );

    $.Method({Static:false, Public:true }, "get_ModelView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_ModelView
    );

    $.Method({Static:false, Public:true }, "get_ModelViewProjection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_ModelViewProjection
    );

    $.Method({Static:false, Public:true }, "get_Projection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_Projection
    );

    $.Method({Static:false, Public:true }, "get_TransModel", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_TransModel
    );

    $.Method({Static:false, Public:true }, "get_TransModelView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_TransModelView
    );

    $.Method({Static:false, Public:true }, "get_TransModelViewProjection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_TransModelViewProjection
    );

    $.Method({Static:false, Public:true }, "get_TransProjection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_TransProjection
    );

    $.Method({Static:false, Public:true }, "get_TransView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_TransView
    );

    $.Method({Static:false, Public:true }, "get_View", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_get_View
    );

    $.Method({Static:false, Public:true }, "get_ViewportHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderContext_get_ViewportHeight
    );

    $.Method({Static:false, Public:true }, "get_ViewportWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderContext_get_ViewportWidth
    );

    $.Method({Static:false, Public:true }, "GetBufferContent", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.Rectangle"), $asm04.TypeRef("Fusee.Engine.Core.Texture")]), 
      RenderContext_GetBufferContent
    );

    $.Method({Static:false, Public:true }, "GetHardwareCapabilities", 
      new JSIL.MethodSignature($.UInt32, [$asm03.TypeRef("Fusee.Engine.Common.HardwareCapability")]), 
      RenderContext_GetHardwareCapabilities
    );

    $.Method({Static:false, Public:true }, "GetParamValue", 
      new JSIL.MethodSignature($.Single, [$asm04.TypeRef("Fusee.Engine.Core.ShaderProgram"), $asm03.TypeRef("Fusee.Engine.Common.IShaderParam")]), 
      RenderContext_GetParamValue
    );

    $.Method({Static:false, Public:true }, "GetPixelColor", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.IImageData"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      RenderContext_GetPixelColor
    );

    $.Method({Static:false, Public:true }, "GetPixelDepth", 
      new JSIL.MethodSignature($.Single, [$.Int32, $.Int32]), 
      RenderContext_GetPixelDepth
    );

    $.Method({Static:false, Public:true }, "GetRenderState", 
      new JSIL.MethodSignature($.UInt32, [$asm03.TypeRef("Fusee.Engine.Common.RenderState")]), 
      RenderContext_GetRenderState
    );

    $.Method({Static:false, Public:true }, "GetShaderParam", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), [$asm04.TypeRef("Fusee.Engine.Core.ShaderProgram"), $.String]), 
      RenderContext_GetShaderParam
    );

    $.Method({Static:false, Public:true }, "GetShaderParamList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ShaderParamInfo")]), [$asm04.TypeRef("Fusee.Engine.Core.ShaderProgram")]), 
      RenderContext_GetShaderParamList
    );

    $.Method({Static:false, Public:false}, "HandleAndUpdateChangedButExisistingEffectVariable", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), $.String, 
          $.Object
        ]), 
      RenderContext_HandleAndUpdateChangedButExisistingEffectVariable
    );

    $.Method({Static:false, Public:false}, "RemoveShader", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      RenderContext_RemoveShader
    );

    $.Method({Static:false, Public:true }, "Render", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      RenderContext_Render
    );

    $.Method({Static:false, Public:true }, "set_Bones", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")])), 
      RenderContext_set_Bones
    );

    $.Method({Static:false, Public:true }, "set_ClearColor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      RenderContext_set_ClearColor
    );

    $.Method({Static:false, Public:true }, "set_ClearDepth", 
      JSIL.MethodSignature.Action($.Single), 
      RenderContext_set_ClearDepth
    );

    $.Method({Static:false, Public:true }, "set_DebugLinesEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderContext_set_DebugLinesEnabled
    );

    $.Method({Static:false, Public:false}, "set_HasPickingContext", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderContext_set_HasPickingContext
    );

    $.Method({Static:false, Public:true }, "set_Model", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_set_Model
    );

    $.Method({Static:false, Public:true }, "set_ModelView", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_set_ModelView
    );

    $.Method({Static:false, Public:true }, "set_Projection", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_set_Projection
    );

    $.Method({Static:false, Public:true }, "set_View", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RenderContext_set_View
    );

    $.Method({Static:false, Public:false}, "set_ViewportHeight", 
      JSIL.MethodSignature.Action($.Int32), 
      RenderContext_set_ViewportHeight
    );

    $.Method({Static:false, Public:false}, "set_ViewportWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      RenderContext_set_ViewportWidth
    );

    $.Method({Static:false, Public:true }, "SetCubeMapRenderTarget", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Engine.Core.Texture"), $.Int32]), 
      RenderContext_SetCubeMapRenderTarget
    );

    $.Method({Static:false, Public:true }, "SetFXParam", 
      new JSIL.MethodSignature(null, [$.String, $.Object]), 
      RenderContext_SetFXParam
    );

    $.Method({Static:false, Public:true }, "SetRenderState", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.RenderState"), $.UInt32]), 
      RenderContext_SetRenderState$00
    );

    $.Method({Static:false, Public:true }, "SetRenderState", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderStateSet")), 
      RenderContext_SetRenderState$01
    );

    $.Method({Static:false, Public:true }, "SetRenderTarget", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.Texture")), 
      RenderContext_SetRenderTarget
    );

    $.Method({Static:false, Public:false}, "SetShader", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderProgram")), 
      RenderContext_SetShader
    );

    $.Method({Static:false, Public:true }, "SetShaderEffect", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      RenderContext_SetShaderEffect
    );

    $.Method({Static:false, Public:true }, "SetShaderParam1f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $.Single]), 
      RenderContext_SetShaderParam1f
    );

    $.Method({Static:false, Public:true }, "SetShaderParam2f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm0A.TypeRef("Fusee.Math.Core.float2")]), 
      RenderContext_SetShaderParam2f
    );

    $.Method({Static:false, Public:true }, "SetShaderParam3f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      RenderContext_SetShaderParam3f
    );

    $.Method({Static:false, Public:true }, "SetShaderParam4f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm0A.TypeRef("Fusee.Math.Core.float4")]), 
      RenderContext_SetShaderParam4f
    );

    $.Method({Static:false, Public:true }, "SetShaderParam4fArray", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float4")])]), 
      RenderContext_SetShaderParam4fArray
    );

    $.Method({Static:false, Public:true }, "SetShaderParamfloat4x4", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]), 
      RenderContext_SetShaderParamfloat4x4
    );

    $.Method({Static:false, Public:true }, "SetShaderParamMtx4fArray", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")])]), 
      RenderContext_SetShaderParamMtx4fArray
    );

    $.Method({Static:false, Public:true }, "SetShaderParamI", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $.Int32]), 
      RenderContext_SetShaderParamI
    );

    $.Method({Static:false, Public:false}, "SetShaderParamT", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.EffectParam")), 
      RenderContext_SetShaderParamT
    );

    $.Method({Static:false, Public:true }, "SetShaderParamTexture", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm04.TypeRef("Fusee.Engine.Core.Texture")]), 
      RenderContext_SetShaderParamTexture$02
    );

    $.Method({Static:false, Public:true }, "SetShaderParamTexture", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm03.TypeRef("Fusee.Engine.Common.ITextureHandle"), 
          $asm03.TypeRef("Fusee.Engine.Common.GBufferHandle")
        ]), 
      RenderContext_SetShaderParamTexture$03
    );

    $.Method({Static:false, Public:false}, "UpdateCurrentShader", 
      JSIL.MethodSignature.Void, 
      RenderContext_UpdateCurrentShader
    );

    $.Method({Static:false, Public:false}, "UpdateShaderParams", 
      JSIL.MethodSignature.Void, 
      RenderContext_UpdateShaderParams
    );

    $.Method({Static:false, Public:true }, "UpdateTextureFromVideoStream", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"), $asm04.TypeRef("Fusee.Engine.Core.Texture")]), 
      RenderContext_UpdateTextureFromVideoStream
    );

    $.Method({Static:false, Public:true }, "UpdateTextureRegion", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Engine.Core.Texture"), $asm04.TypeRef("Fusee.Engine.Core.Texture"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      RenderContext_UpdateTextureRegion
    );

    $.Method({Static:false, Public:true }, "Viewport", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      RenderContext_Viewport
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_rci", $asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp"));

    $.Field({Static:false, Public:false}, "RenderContext$ViewportWidth$value", $.Int32);

    $.Field({Static:false, Public:false}, "RenderContext$ViewportHeight$value", $.Int32);

    $.Field({Static:false, Public:false}, "_currentShader", $asm04.TypeRef("Fusee.Engine.Core.ShaderProgram"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_currentShaderParams", $asm04.TypeRef("Fusee.Engine.Core.RenderContext+MatrixParamNames"));

    $.Field({Static:false, Public:false}, "_currentShaderEffect", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "_allFXParams", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_meshManager", $asm04.TypeRef("Fusee.Engine.Core.MeshManager"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_textureManager", $asm04.TypeRef("Fusee.Engine.Core.TextureManager"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_shaderEffectManager", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffectManager"));

    $.Field({Static:false, Public:false}, "_allShaderEffectParameter", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffectParam")]));

    $.Field({Static:false, Public:false}, "_updatedShaderParams", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_debugShader", $asm04.TypeRef("Fusee.Engine.Core.ShaderProgram"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_debugColor", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:false}, "_debugLinesEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "RenderContext$HasPickingContext$value", $.Boolean);

    $.Field({Static:false, Public:false}, "_modelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_projection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_view", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_model", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_bones", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false}, "_modelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invModel", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invModelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invTransView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invTransModel", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invTransModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invTransProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_invTransModelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_transView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_transModel", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_transModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_transProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_transModelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_modelViewProjectionOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invViewOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invModelOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invModelViewOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invProjectionOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invModelViewProjectionOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invTransViewOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invTransModelOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invTransModelViewOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invTransProjectionOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_invTransModelViewProjectionOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_transViewOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_transModelOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_transModelViewOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_transProjectionOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_transModelViewProjectionOk", $.Boolean);

    $.Field({Static:false, Public:false}, "_col", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "ViewportWidth", $.Int32);

    $.Property({Static:false, Public:true }, "ViewportHeight", $.Int32);

    $.Property({Static:false, Public:true }, "HasPickingContext", $.Boolean);

    $.Property({Static:false, Public:true }, "Bones", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Property({Static:false, Public:true }, "View", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "Model", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "ModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "Projection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "ModelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvModel", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvModelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "TransView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "TransModel", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "TransModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "TransProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "TransModelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransModel", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransModelViewProjection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "ClearColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Property({Static:false, Public:true }, "ClearDepth", $.Single);

    $.Property({Static:false, Public:true }, "CurrentShader", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Property({Static:false, Public:true }, "DebugLinesEnabled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.RenderContext+MatrixParamNames */ 

(function MatrixParamNames$Members () {
  var $, $thisType;

  function MatrixParamNames__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.RenderContext+MatrixParamNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MatrixParamNames__ctor
    );

    $.Field({Static:false, Public:true }, "FUSEE_M", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_V", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_MV", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_P", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_MVP", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_IMV", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_IP", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_IMVP", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_TMV", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_TP", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_TMVP", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_ITMV", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_ITP", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_ITMVP", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "FUSEE_BONES", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.EffectParam */ 

(function EffectParam$Members () {
  var $, $thisType;

  function EffectParam__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.EffectParam", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EffectParam__ctor
    );

    $.Field({Static:false, Public:true }, "Info", $asm03.TypeRef("Fusee.Engine.Common.ShaderParamInfo"));

    $.Field({Static:false, Public:true }, "Value", $.Object);

    $.Field({Static:false, Public:true }, "ShaderInxs", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ShaderEffectParam */ 

(function ShaderEffectParam$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParam)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParam)), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Object), null))) ();
  };


  function ShaderEffectParam__ctor () {
    this.ParamsPerPass = $S00().Construct();
    this.Parameters = $S01().Construct();
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ShaderEffectParam", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShaderEffectParam__ctor
    );

    $.Field({Static:false, Public:false}, "CompiledShaders", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Engine.Core.ShaderProgram")]));

    $.Field({Static:false, Public:false}, "ParamsPerPass", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Engine.Core.EffectParam")])]));

    $.Field({Static:false, Public:false}, "Parameters", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.RenderStateSet */ 

(function RenderStateSet$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm03.Fusee.Engine.Common.RenderState, $asm0F.System.UInt32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.RenderState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Fusee.Base.Common.ColorUint)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.BlendOperation)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.Cull)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.Blend)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.FillMode)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Fusee.Engine.Common.Compare)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm0F.System.UInt32))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.UInt32, $asm0F.System.UInt32))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.UInt32, $asm0F.System.UInt32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm03.Fusee.Engine.Common.RenderState, $asm0F.System.UInt32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4, [$asm00.Fusee.Base.Common.ColorUint]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm00.Fusee.Base.Common.ColorUint, [$asm0F.System.UInt32]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.UInt32, [$asm00.Fusee.Base.Common.ColorUint]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm00.Fusee.Base.Common.ColorUint, [$asm0A.Fusee.Math.Core.float4]))) ();
  };


  function RenderStateSet__ctor () {
    this._states = $S00().Construct();
  }; 

  function RenderStateSet_get_AlphaBlendEnable () {
    return (((this._states).get_Item($T01().AlphaBlendEnable) >>> 0) > 0);
  }; 

  function RenderStateSet_get_BlendFactor () {
    return $S01().CallStatic($T02(), "op_Explicit", null, $S02().CallStatic($T02(), "op_Explicit", null, (this._states).get_Item($T01().BlendFactor)).MemberwiseClone());
  }; 

  function RenderStateSet_get_BlendOperation () {
    return $T03().$Cast((this._states).get_Item($T01().BlendOperation));
  }; 

  function RenderStateSet_get_BlendOperationAlpha () {
    return $T03().$Cast((this._states).get_Item($T01().BlendOperationAlpha));
  }; 

  function RenderStateSet_get_Clipping () {
    return (((this._states).get_Item($T01().Clipping) >>> 0) > 0);
  }; 

  function RenderStateSet_get_CullMode () {
    return $T04().$Cast((this._states).get_Item($T01().CullMode));
  }; 

  function RenderStateSet_get_DestinationBlend () {
    return $T05().$Cast((this._states).get_Item($T01().DestinationBlend));
  }; 

  function RenderStateSet_get_DestinationBlendAlpha () {
    return $T05().$Cast((this._states).get_Item($T01().DestinationBlendAlpha));
  }; 

  function RenderStateSet_get_FillMode () {
    return $T06().$Cast((this._states).get_Item($T01().FillMode));
  }; 

  function RenderStateSet_get_SourceBlend () {
    return $T05().$Cast((this._states).get_Item($T01().SourceBlend));
  }; 

  function RenderStateSet_get_SourceBlendAlpha () {
    return $T05().$Cast((this._states).get_Item($T01().SourceBlendAlpha));
  }; 

  function RenderStateSet_get_States () {
    return this._states;
  }; 

  function RenderStateSet_get_ZEnable () {
    return (((this._states).get_Item($T01().ZEnable) >>> 0) > 0);
  }; 

  function RenderStateSet_get_ZFunc () {
    return $T07().$Cast((this._states).get_Item($T01().ZFunc));
  }; 

  function RenderStateSet_get_ZWriteEnable () {
    return (((this._states).get_Item($T01().ZWriteEnable) >>> 0) > 0);
  }; 

  function RenderStateSet_set_AlphaBlendEnable (value) {
    (this._states).set_Item($T01().AlphaBlendEnable, (
        value
           ? 1
           : 0)
    );
  }; 

  function RenderStateSet_set_BlendFactor (value) {
    (this._states).set_Item($T01().BlendFactor, $S03().CallStatic($T02(), "op_Explicit", null, $S04().CallStatic($T02(), "op_Explicit", null, value.MemberwiseClone())));
  }; 

  function RenderStateSet_set_BlendOperation (value) {
    (this._states).set_Item($T01().BlendOperation, value.valueOf());
  }; 

  function RenderStateSet_set_BlendOperationAlpha (value) {
    (this._states).set_Item($T01().BlendOperationAlpha, value.valueOf());
  }; 

  function RenderStateSet_set_Clipping (value) {
    (this._states).set_Item($T01().Clipping, (
        value
           ? 1
           : 0)
    );
  }; 

  function RenderStateSet_set_CullMode (value) {
    (this._states).set_Item($T01().CullMode, value.valueOf());
  }; 

  function RenderStateSet_set_DestinationBlend (value) {
    (this._states).set_Item($T01().DestinationBlend, value.valueOf());
  }; 

  function RenderStateSet_set_DestinationBlendAlpha (value) {
    (this._states).set_Item($T01().DestinationBlendAlpha, value.valueOf());
  }; 

  function RenderStateSet_set_FillMode (value) {
    (this._states).set_Item($T01().FillMode, value.valueOf());
  }; 

  function RenderStateSet_set_SourceBlend (value) {
    (this._states).set_Item($T01().SourceBlend, value.valueOf());
  }; 

  function RenderStateSet_set_SourceBlendAlpha (value) {
    (this._states).set_Item($T01().SourceBlendAlpha, value.valueOf());
  }; 

  function RenderStateSet_set_ZEnable (value) {
    (this._states).set_Item($T01().ZEnable, (
        value
           ? 1
           : 0)
    );
  }; 

  function RenderStateSet_set_ZFunc (value) {
    (this._states).set_Item($T01().ZFunc, value.valueOf());
  }; 

  function RenderStateSet_set_ZWriteEnable (value) {
    (this._states).set_Item($T01().ZWriteEnable, (
        value
           ? 1
           : 0)
    );
  }; 

  function RenderStateSet_SetRenderStates (renderStateContainer) {
    var enumerator = $T0A().prototype.GetEnumerator.call(renderStateContainer);

    while ($T0B().prototype.MoveNext.call(enumerator)) {
      var current = $T0B().prototype.get_Current.call(enumerator);
      (this._states).set_Item(
        $T01().$Cast(current.get_Key()), 
        current.get_Value()
      );
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.RenderStateSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RenderStateSet__ctor
    );

    $.Method({Static:false, Public:true }, "get_AlphaBlendEnable", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderStateSet_get_AlphaBlendEnable
    );

    $.Method({Static:false, Public:true }, "get_BlendFactor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      RenderStateSet_get_BlendFactor
    );

    $.Method({Static:false, Public:true }, "get_BlendOperation", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.BlendOperation")), 
      RenderStateSet_get_BlendOperation
    );

    $.Method({Static:false, Public:true }, "get_BlendOperationAlpha", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.BlendOperation")), 
      RenderStateSet_get_BlendOperationAlpha
    );

    $.Method({Static:false, Public:true }, "get_Clipping", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderStateSet_get_Clipping
    );

    $.Method({Static:false, Public:true }, "get_CullMode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Cull")), 
      RenderStateSet_get_CullMode
    );

    $.Method({Static:false, Public:true }, "get_DestinationBlend", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_get_DestinationBlend
    );

    $.Method({Static:false, Public:true }, "get_DestinationBlendAlpha", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_get_DestinationBlendAlpha
    );

    $.Method({Static:false, Public:true }, "get_FillMode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.FillMode")), 
      RenderStateSet_get_FillMode
    );

    $.Method({Static:false, Public:true }, "get_SourceBlend", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_get_SourceBlend
    );

    $.Method({Static:false, Public:true }, "get_SourceBlendAlpha", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_get_SourceBlendAlpha
    );

    $.Method({Static:false, Public:true }, "get_States", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm03.TypeRef("Fusee.Engine.Common.RenderState"), $.UInt32])])), 
      RenderStateSet_get_States
    );

    $.Method({Static:false, Public:true }, "get_ZEnable", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderStateSet_get_ZEnable
    );

    $.Method({Static:false, Public:true }, "get_ZFunc", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Compare")), 
      RenderStateSet_get_ZFunc
    );

    $.Method({Static:false, Public:true }, "get_ZWriteEnable", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderStateSet_get_ZWriteEnable
    );

    $.Method({Static:false, Public:true }, "set_AlphaBlendEnable", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderStateSet_set_AlphaBlendEnable
    );

    $.Method({Static:false, Public:true }, "set_BlendFactor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      RenderStateSet_set_BlendFactor
    );

    $.Method({Static:false, Public:true }, "set_BlendOperation", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.BlendOperation")), 
      RenderStateSet_set_BlendOperation
    );

    $.Method({Static:false, Public:true }, "set_BlendOperationAlpha", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.BlendOperation")), 
      RenderStateSet_set_BlendOperationAlpha
    );

    $.Method({Static:false, Public:true }, "set_Clipping", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderStateSet_set_Clipping
    );

    $.Method({Static:false, Public:true }, "set_CullMode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.Cull")), 
      RenderStateSet_set_CullMode
    );

    $.Method({Static:false, Public:true }, "set_DestinationBlend", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_set_DestinationBlend
    );

    $.Method({Static:false, Public:true }, "set_DestinationBlendAlpha", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_set_DestinationBlendAlpha
    );

    $.Method({Static:false, Public:true }, "set_FillMode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.FillMode")), 
      RenderStateSet_set_FillMode
    );

    $.Method({Static:false, Public:true }, "set_SourceBlend", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_set_SourceBlend
    );

    $.Method({Static:false, Public:true }, "set_SourceBlendAlpha", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.Blend")), 
      RenderStateSet_set_SourceBlendAlpha
    );

    $.Method({Static:false, Public:true }, "set_ZEnable", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderStateSet_set_ZEnable
    );

    $.Method({Static:false, Public:true }, "set_ZFunc", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.Compare")), 
      RenderStateSet_set_ZFunc
    );

    $.Method({Static:false, Public:true }, "set_ZWriteEnable", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderStateSet_set_ZWriteEnable
    );

    $.Method({Static:false, Public:true }, "SetRenderStates", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $.UInt32])), 
      RenderStateSet_SetRenderStates
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_states", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm03.TypeRef("Fusee.Engine.Common.RenderState"), $.UInt32]));

    $.Property({Static:false, Public:true }, "FillMode", $asm03.TypeRef("Fusee.Engine.Common.FillMode"));

    $.Property({Static:false, Public:true }, "CullMode", $asm03.TypeRef("Fusee.Engine.Common.Cull"));

    $.Property({Static:false, Public:true }, "Clipping", $.Boolean);

    $.Property({Static:false, Public:true }, "AlphaBlendEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "BlendOperation", $asm03.TypeRef("Fusee.Engine.Common.BlendOperation"));

    $.Property({Static:false, Public:true }, "BlendOperationAlpha", $asm03.TypeRef("Fusee.Engine.Common.BlendOperation"));

    $.Property({Static:false, Public:true }, "SourceBlend", $asm03.TypeRef("Fusee.Engine.Common.Blend"));

    $.Property({Static:false, Public:true }, "DestinationBlend", $asm03.TypeRef("Fusee.Engine.Common.Blend"));

    $.Property({Static:false, Public:true }, "SourceBlendAlpha", $asm03.TypeRef("Fusee.Engine.Common.Blend"));

    $.Property({Static:false, Public:true }, "DestinationBlendAlpha", $asm03.TypeRef("Fusee.Engine.Common.Blend"));

    $.Property({Static:false, Public:true }, "BlendFactor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Property({Static:false, Public:true }, "ZEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "ZFunc", $asm03.TypeRef("Fusee.Engine.Common.Compare"));

    $.Property({Static:false, Public:true }, "ZWriteEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "States", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm03.TypeRef("Fusee.Engine.Common.RenderState"), $.UInt32])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.RigidBody */ 

(function RigidBody$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.EventHandler)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody_$l$gc)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.$lPrivateImplementationDetails$g)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.ConeShape)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IConeShapeImp)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.BoxShape)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IBoxShapeImp)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.StaticPlaneShape)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IStaticPlaneShapeImp)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Engine.Core.GImpactMeshShape)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IGImpactMeshShapeImp)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.Fusee.Engine.Core.CylinderShape)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICylinderShapeImp)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Engine.Core.CapsuleShape)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICapsuleShapeImp)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm04.Fusee.Engine.Core.EmptyShape)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IEmptyShapeImp)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm04.Fusee.Engine.Core.CompoundShape)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm03.Fusee.Engine.Common.ICompoundShapeImp)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm04.Fusee.Engine.Core.MultiSphereShape)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm03.Fusee.Engine.Common.IMultiSphereShapeImp)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm04.Fusee.Engine.Core.ConvexHullShape)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm03.Fusee.Engine.Common.IConvexHullShapeImp)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.Fusee.Engine.Core.SphereShape)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISphereShapeImp)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm12.System.Diagnostics.Debug)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm0F.System.EventArgs]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.String")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.ApplyCentralForce)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.ApplyCentralImpulse)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.ApplyForce)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.ApplyImpulse)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.ApplyTorque)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.ApplyTorqueImpulse)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_AngularDrag)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_LinearFactor)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_AngularVelocity)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_CollisionShape)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_UserObject)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_Friction)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_Gravity)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_Inertia)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_LinearDrag)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_LinearVelocity)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_Mass)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_Position)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_Restitution)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_WorldTransform)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_Rotation)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.set_CollisionShape)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.set_Friction)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.set_Mass)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.set_Restitution)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.SetDrag)) ();
  };


  function RigidBody__ctor () {
    var arg_20_1 = null;
    if ((arg_20_1 = $T01().$l$g9__52_0) === null) {
      arg_20_1 = $T01().$l$g9__52_0 = $T00().New($T01().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.RigidBody_$l$gc, "$l_ctor$gb__52_0", $S00(), false, false));
    }
    this.WhileCollidingEvent = arg_20_1;
  }; 

  function RigidBody_add_WhileCollidingEvent (value) {
    var eventHandler = this.WhileCollidingEvent;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "WhileCollidingEvent"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RigidBody_ApplyCentralForce (centralForce) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM01().Call(rigidBody._iRigidBodyImp, null, centralForce.MemberwiseClone());
  }; 

  function RigidBody_ApplyCentralImpulse (centralImpulse) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM02().Call(rigidBody._iRigidBodyImp, null, centralImpulse.MemberwiseClone());
  }; 

  function RigidBody_ApplyForce (force, relPos) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM03().Call(rigidBody._iRigidBodyImp, null, force.MemberwiseClone(), relPos.MemberwiseClone());
  }; 

  function RigidBody_ApplyImpulse (impulse, relPos) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM04().Call(rigidBody._iRigidBodyImp, null, impulse.MemberwiseClone(), relPos.MemberwiseClone());
  }; 

  function RigidBody_ApplyTorque (torque) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM05().Call(rigidBody._iRigidBodyImp, null, torque.MemberwiseClone());
  }; 

  function RigidBody_ApplyTorqueImpulse (torqueImpulse) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM06().Call(rigidBody._iRigidBodyImp, null, torqueImpulse.MemberwiseClone());
  }; 

  function RigidBody_get_AngularDrag () {
    return $IM07().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_AngularFactor () {
    return $IM08().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_AngularVelocity () {
    return $IM09().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_CollisionShape () {
    var collisionShape = $IM0A().Call(this._iRigidBodyImp, null);
    var text = (JSIL.GetType(collisionShape)).toString();
    var text2 = text;
    var num = ($T0A().ComputeStringHash(text2) >>> 0);
    if (num <= 1897919175) {
      if (num <= 1564528284) {
        if (num !== 969439150) {
          if (num === 1564528284) {
            if (text2 == "Fusee.Engine._coneShapeImp") {
              var coneShape = new ($T0B())();
              coneShape._coneShapeImp = $T0C().$Cast(collisionShape);
              $IM0B().Call(collisionShape, null, coneShape);
              var result = coneShape;
              return result;
            }
          }
        } else if (text2 == "Fusee.Engine._boxShapeImp") {
          var boxShape = new ($T0E())();
          boxShape._boxShapeImp = $T0F().$Cast(collisionShape);
          $IM0B().Call(collisionShape, null, boxShape);
          result = boxShape;
          return result;
        }
      } else if (num !== 1576819597) {
        if (num !== 1643911949) {
          if (num === 1897919175) {
            if (text2 == "Fusee.Engine._staticPlaneShapeImp") {
              var staticPlaneShape = new ($T10())();
              staticPlaneShape._staticPlaneShapeImp = $T11().$Cast(collisionShape);
              $IM0B().Call(collisionShape, null, staticPlaneShape);
              result = staticPlaneShape;
              return result;
            }
          }
        } else if (text2 == "Fusee.Engine._gImpactMeshShapeImp") {
          var gImpactMeshShape = new ($T12())();
          gImpactMeshShape._gImpactMeshShapeImp = $T13().$Cast(collisionShape);
          $IM0B().Call(collisionShape, null, gImpactMeshShape);
          result = gImpactMeshShape;
          return result;
        }
      } else if (text2 == "Fusee.Engine._cylinderShapeImp") {
        var cylinderShape = new ($T14())();
        cylinderShape._cylinderShapeImp = $T15().$Cast(collisionShape);
        $IM0B().Call(collisionShape, null, cylinderShape);
        result = cylinderShape;
        return result;
      }
    } else if (num <= 2667469352) {
      if (num !== 2444095446) {
        if (num !== 2615718639) {
          if (num === 2667469352) {
            if (text2 == "Fusee.Engine._capsuleShapeImp") {
              var capsuleShape = new ($T16())();
              capsuleShape._capsuleShapeImp = $T17().$Cast(collisionShape);
              $IM0B().Call(collisionShape, null, capsuleShape);
              result = capsuleShape;
              return result;
            }
          }
        } else if (text2 == "Fusee.Engine.EmptyShape") {
          var emptyShape = new ($T18())();
          emptyShape._emtyShapeImp = $T19().$Cast(collisionShape);
          $IM0B().Call(collisionShape, null, emptyShape);
          result = emptyShape;
          return result;
        }
      } else if (text2 == "Fusee.Engine._compoundShapeImp") {
        var compoundShape = new ($T1A())();
        compoundShape._compoundShapeImp = $T1B().$Cast(collisionShape);
        $IM0B().Call(collisionShape, null, compoundShape);
        result = compoundShape;
        return result;
      }
    } else if (num !== 3500362078) {
      if (num !== 3780937395) {
        if (num === 3909512595) {
          if (text2 == "Fusee.Engine._multiSphereShapeImp") {
            var multiSphereShape = new ($T1C())();
            multiSphereShape._multiSphereShapeImp = $T1D().$Cast(collisionShape);
            $IM0B().Call(collisionShape, null, multiSphereShape);
            result = multiSphereShape;
            return result;
          }
        }
      } else if (text2 == "Fusee.Engine._convexHullShapeImp") {
        var convexHullShape = new ($T1E())();
        convexHullShape._convexHullShapeImp = $T1F().$Cast(collisionShape);
        $IM0B().Call(collisionShape, null, convexHullShape);
        result = convexHullShape;
        return result;
      }
    } else if (text2 == "Fusee.Engine._sphereShapeImp") {
      var sphereShape = new ($T20())();
      sphereShape._sphereShapeImp = $T21().$Cast(collisionShape);
      $IM0B().Call(collisionShape, null, sphereShape);
      result = sphereShape;
      return result;
    }
    result = new ($T18())();
    return result;
  }; 

  function RigidBody_get_Friction () {
    return $IM0C().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_Gravity () {
    return $IM0D().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_Inertia () {
    return $IM0E().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_LinearDrag () {
    return $IM0F().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_LinearFactor () {
    return $IM08().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_LinearVelocity () {
    return $IM10().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_Mass () {
    return $IM11().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_Position () {
    return $IM12().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_Restitution () {
    return $IM13().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_get_WorldTransform () {
    return $IM14().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_remove_WhileCollidingEvent (value) {
    var eventHandler = this.WhileCollidingEvent;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "WhileCollidingEvent"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RigidBody_Rotation () {
    return $IM15().Call(this._iRigidBodyImp, null);
  }; 

  function RigidBody_set_AngularFactor (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (rigidBody._iRigidBodyImp.AngularFactor = value.MemberwiseClone());
  }; 

  function RigidBody_set_AngularVelocity (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (rigidBody._iRigidBodyImp.AngularVelocity = value.MemberwiseClone());
  }; 

  function RigidBody_set_CollisionShape (value) {
    var text = (JSIL.GetType(value)).toString();
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    var text2 = text;
    var num = ($T0A().ComputeStringHash(text2) >>> 0);
    if (num <= 1844105875) {
      if (num <= 1319428916) {
        if (num !== 505077084) {
          if (num === 1319428916) {
            if (text2 == "Fusee.Engine.MultiSphereShape") {
              var multiSphereShape = $T1C().$Cast(value);
              $IM16().Call(rigidBody._iRigidBodyImp, null, multiSphereShape._multiSphereShapeImp);
              return;
            }
          }
        } else if (text2 == "Fusee.Engine.CylinderShape") {
          var cylinderShape = $T14().$Cast(value);
          $IM16().Call(rigidBody._iRigidBodyImp, null, cylinderShape._cylinderShapeImp);
          return;
        }
      } else if (num !== 1574939861) {
        if (num !== 1681802816) {
          if (num === 1844105875) {
            if (text2 == "Fusee.Engine.BoxShape") {
              var boxShape = $T0E().$Cast(value);
              $IM16().Call(rigidBody._iRigidBodyImp, null, boxShape._boxShapeImp);
              return;
            }
          }
        } else if (text2 == "Fusee.Engine.StaticPlaneShape") {
          var staticPlaneShape = $T10().$Cast(value);
          $IM16().Call(rigidBody._iRigidBodyImp, null, staticPlaneShape._staticPlaneShapeImp);
          return;
        }
      } else if (text2 == "Fusee.Engine.CompoundShape") {
        var compoundShape = $T1A().$Cast(value);
        $IM16().Call(rigidBody._iRigidBodyImp, null, compoundShape._compoundShapeImp);
        return;
      }
    } else if (num <= 2615718639) {
      if (num !== 2569625669) {
        if (num === 2615718639) {
          if (text2 == "Fusee.Engine.EmptyShape") {
            var emptyShape = $T18().$Cast(value);
            $IM16().Call(rigidBody._iRigidBodyImp, null, emptyShape._emtyShapeImp);
            return;
          }
        }
      } else if (text2 == "Fusee.Engine.CapsuleShape") {
        var capsuleShape = $T16().$Cast(value);
        $IM16().Call(rigidBody._iRigidBodyImp, null, capsuleShape._capsuleShapeImp);
        return;
      }
    } else if (num !== 2828003299) {
      if (num !== 3405169718) {
        if (num === 3680950897) {
          if (text2 == "Fusee.Engine.SphereShape") {
            var sphereShape = $T20().$Cast(value);
            $IM16().Call(rigidBody._iRigidBodyImp, null, sphereShape._sphereShapeImp);
            return;
          }
        }
      } else if (text2 == "Fusee.Engine.ConvexHullShape") {
        var convexHullShape = $T1E().$Cast(value);
        $IM16().Call(rigidBody._iRigidBodyImp, null, convexHullShape._convexHullShapeImp);
        return;
      }
    } else if (text2 == "Fusee.Engine.ConeShape") {
      var coneShape = $T0B().$Cast(value);
      $IM16().Call(rigidBody._iRigidBodyImp, null, coneShape._coneShapeImp);
      return;
    }
    var emptyShape2 = new ($T18())();
    $S01().CallStatic($T22(), "WriteLine", null, "default");
  }; 

  function RigidBody_set_Friction (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM17().Call(rigidBody._iRigidBodyImp, null, value);
  }; 

  function RigidBody_set_Gravity (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (this._iRigidBodyImp.Gravity = value.MemberwiseClone());
  }; 

  function RigidBody_set_Inertia (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (rigidBody._iRigidBodyImp.Inertia = value.MemberwiseClone());
  }; 

  function RigidBody_set_LinearFactor (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (rigidBody._iRigidBodyImp.LinearFactor = value.MemberwiseClone());
  }; 

  function RigidBody_set_LinearVelocity (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (rigidBody._iRigidBodyImp.LinearVelocity = value.MemberwiseClone());
  }; 

  function RigidBody_set_Mass (value) {
    $IM18().Call(this._iRigidBodyImp, null, value);
  }; 

  function RigidBody_set_Position (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (rigidBody._iRigidBodyImp.Position = value.MemberwiseClone());
  }; 

  function RigidBody_set_Restitution (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM19().Call(rigidBody._iRigidBodyImp, null, value);
  }; 

  function RigidBody_set_WorldTransform (value) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (rigidBody._iRigidBodyImp.WorldTransform = value.MemberwiseClone());
  }; 

  function RigidBody_SetDrag (linearDrag, anglularDrag) {
    var rigidBody = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM1A().Call(rigidBody._iRigidBodyImp, null, linearDrag, anglularDrag);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.RigidBody", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RigidBody__ctor
    );

    $.Method({Static:false, Public:true }, "add_WhileCollidingEvent", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler")), 
      RigidBody_add_WhileCollidingEvent
    );

    $.Method({Static:false, Public:true }, "ApplyCentralForce", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_ApplyCentralForce
    );

    $.Method({Static:false, Public:true }, "ApplyCentralImpulse", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_ApplyCentralImpulse
    );

    $.Method({Static:false, Public:true }, "ApplyForce", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      RigidBody_ApplyForce
    );

    $.Method({Static:false, Public:true }, "ApplyImpulse", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      RigidBody_ApplyImpulse
    );

    $.Method({Static:false, Public:true }, "ApplyTorque", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_ApplyTorque
    );

    $.Method({Static:false, Public:true }, "ApplyTorqueImpulse", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_ApplyTorqueImpulse
    );

    $.Method({Static:false, Public:true }, "get_AngularDrag", 
      JSIL.MethodSignature.Return($.Single), 
      RigidBody_get_AngularDrag
    );

    $.Method({Static:false, Public:true }, "get_AngularFactor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_get_AngularFactor
    );

    $.Method({Static:false, Public:true }, "get_AngularVelocity", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_get_AngularVelocity
    );

    $.Method({Static:false, Public:true }, "get_CollisionShape", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.CollisionShape")), 
      RigidBody_get_CollisionShape
    );

    $.Method({Static:false, Public:true }, "get_Friction", 
      JSIL.MethodSignature.Return($.Single), 
      RigidBody_get_Friction
    );

    $.Method({Static:false, Public:true }, "get_Gravity", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_get_Gravity
    );

    $.Method({Static:false, Public:true }, "get_Inertia", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_get_Inertia
    );

    $.Method({Static:false, Public:true }, "get_LinearDrag", 
      JSIL.MethodSignature.Return($.Single), 
      RigidBody_get_LinearDrag
    );

    $.Method({Static:false, Public:true }, "get_LinearFactor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_get_LinearFactor
    );

    $.Method({Static:false, Public:true }, "get_LinearVelocity", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_get_LinearVelocity
    );

    $.Method({Static:false, Public:true }, "get_Mass", 
      JSIL.MethodSignature.Return($.Single), 
      RigidBody_get_Mass
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Restitution", 
      JSIL.MethodSignature.Return($.Single), 
      RigidBody_get_Restitution
    );

    $.Method({Static:false, Public:true }, "get_WorldTransform", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RigidBody_get_WorldTransform
    );

    $.Method({Static:false, Public:true }, "remove_WhileCollidingEvent", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler")), 
      RigidBody_remove_WhileCollidingEvent
    );

    $.Method({Static:false, Public:true }, "Rotation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.Quaternion")), 
      RigidBody_Rotation
    );

    $.Method({Static:false, Public:true }, "set_AngularFactor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_set_AngularFactor
    );

    $.Method({Static:false, Public:true }, "set_AngularVelocity", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_set_AngularVelocity
    );

    $.Method({Static:false, Public:true }, "set_CollisionShape", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.CollisionShape")), 
      RigidBody_set_CollisionShape
    );

    $.Method({Static:false, Public:true }, "set_Friction", 
      JSIL.MethodSignature.Action($.Single), 
      RigidBody_set_Friction
    );

    $.Method({Static:false, Public:true }, "set_Gravity", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_set_Gravity
    );

    $.Method({Static:false, Public:true }, "set_Inertia", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_set_Inertia
    );

    $.Method({Static:false, Public:true }, "set_LinearFactor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_set_LinearFactor
    );

    $.Method({Static:false, Public:true }, "set_LinearVelocity", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_set_LinearVelocity
    );

    $.Method({Static:false, Public:true }, "set_Mass", 
      JSIL.MethodSignature.Action($.Single), 
      RigidBody_set_Mass
    );

    $.Method({Static:false, Public:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      RigidBody_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Restitution", 
      JSIL.MethodSignature.Action($.Single), 
      RigidBody_set_Restitution
    );

    $.Method({Static:false, Public:true }, "set_WorldTransform", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RigidBody_set_WorldTransform
    );

    $.Method({Static:false, Public:true }, "SetDrag", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      RigidBody_SetDrag
    );

    $.Field({Static:false, Public:false}, "WhileCollidingEvent", $asm0F.TypeRef("System.EventHandler"));

    $.Field({Static:false, Public:false}, "_iRigidBodyImp", $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"));

    $.Property({Static:false, Public:true }, "Gravity", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "Mass", $.Single);

    $.Property({Static:false, Public:true }, "Inertia", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "WorldTransform", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "Position", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "LinearVelocity", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "AngularVelocity", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "LinearFactor", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "AngularFactor", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "Restitution", $.Single);

    $.Property({Static:false, Public:true }, "Friction", $.Single);

    $.Property({Static:false, Public:true }, "LinearDrag", $.Single);

    $.Property({Static:false, Public:true }, "AngularDrag", $.Single);

    $.Property({Static:false, Public:true }, "CollisionShape", $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"));

    $.Event({Static:false, Public:true }, "WhileCollidingEvent", $asm0F.TypeRef("System.EventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.RigidBody+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.EventArgs)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$l_ctor$gb__52_0 ($lp0$g, $lp1$g) {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.RigidBody+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$l.ctor$gb__52_0", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.EventArgs")]), 
      $l$gc_$l_ctor$gb__52_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__52_0", $asm0F.TypeRef("System.EventHandler"));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.PickResult */ 

(function PickResult$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };


  function PickResult__ctor () {
  }; 

  function PickResult_get_CameraPos () {
    return (this.get_ModelPos()).TransformPerspective($S00().CallStatic($T01(), "op_Multiply", null, this.View.MemberwiseClone(), this.Model.MemberwiseClone()));
  }; 

  function PickResult_get_ClipPos () {
    return (this.get_ModelPos()).TransformPerspective($S00().CallStatic($T01(), "op_Multiply", null, $S00().CallStatic($T01(), "op_Multiply", null, this.Projection.MemberwiseClone(), this.View.MemberwiseClone()).MemberwiseClone(), this.Model.MemberwiseClone()));
  }; 

  function PickResult_get_ModelPos () {
    return this.get_TriangleBarycentric();
  }; 

  function PickResult_get_NormalBarycentric () {
    var a = new JSIL.BoxedVariable(new ($T00())());
    var b = new JSIL.BoxedVariable(new ($T00())());
    var c = new JSIL.BoxedVariable(new ($T00())());
    this.GetNormals(/* ref */ a, /* ref */ b, /* ref */ c);
    return $T00().Barycentric(
      a.get().MemberwiseClone(), 
      b.get().MemberwiseClone(), 
      c.get().MemberwiseClone(), 
      this.U, 
      this.V
    );
  }; 

  function PickResult_get_NormalCenter () {
    var left = new JSIL.BoxedVariable(new ($T00())());
    var right = new JSIL.BoxedVariable(new ($T00())());
    var right2 = new JSIL.BoxedVariable(new ($T00())());
    this.GetNormals(/* ref */ left, /* ref */ right, /* ref */ right2);
    return $T00().op_Division($T00().op_Addition($T00().op_Addition(left.get().MemberwiseClone(), right.get()).MemberwiseClone(), right2.get()).MemberwiseClone(), 3);
  }; 

  function PickResult_get_TriangleBarycentric () {
    var a = new JSIL.BoxedVariable(new ($T00())());
    var b = new JSIL.BoxedVariable(new ($T00())());
    var c = new JSIL.BoxedVariable(new ($T00())());
    this.GetTriangle(/* ref */ a, /* ref */ b, /* ref */ c);
    return $T00().Barycentric(
      a.get().MemberwiseClone(), 
      b.get().MemberwiseClone(), 
      c.get().MemberwiseClone(), 
      this.U, 
      this.V
    );
  }; 

  function PickResult_get_TriangleCenter () {
    var left = new JSIL.BoxedVariable(new ($T00())());
    var right = new JSIL.BoxedVariable(new ($T00())());
    var right2 = new JSIL.BoxedVariable(new ($T00())());
    this.GetTriangle(/* ref */ left, /* ref */ right, /* ref */ right2);
    return $T00().op_Division($T00().op_Addition($T00().op_Addition(left.get().MemberwiseClone(), right.get()).MemberwiseClone(), right2.get()).MemberwiseClone(), 3);
  }; 

  function PickResult_get_WorldPos () {
    return (this.get_ModelPos()).TransformPerspective(this.Model);
  }; 

  function PickResult_GetNormals (/* ref */ a, /* ref */ b, /* ref */ c) {
    a.set((this.Mesh).get_Normals()[(this.Mesh).get_Triangles()[this.Triangle]].MemberwiseClone());
    b.set((this.Mesh).get_Normals()[(this.Mesh).get_Triangles()[(((this.Triangle | 0) + 1) | 0)]].MemberwiseClone());
    c.set((this.Mesh).get_Normals()[(this.Mesh).get_Triangles()[(((this.Triangle | 0) + 2) | 0)]].MemberwiseClone());
  }; 

  function PickResult_GetTriangle (/* ref */ a, /* ref */ b, /* ref */ c) {
    a.set((this.Mesh).get_Vertices()[(this.Mesh).get_Triangles()[this.Triangle]].MemberwiseClone());
    b.set((this.Mesh).get_Vertices()[(this.Mesh).get_Triangles()[(((this.Triangle | 0) + 1) | 0)]].MemberwiseClone());
    c.set((this.Mesh).get_Vertices()[(this.Mesh).get_Triangles()[(((this.Triangle | 0) + 2) | 0)]].MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.PickResult", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PickResult__ctor
    );

    $.Method({Static:false, Public:true }, "get_CameraPos", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_CameraPos
    );

    $.Method({Static:false, Public:true }, "get_ClipPos", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_ClipPos
    );

    $.Method({Static:false, Public:true }, "get_ModelPos", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_ModelPos
    );

    $.Method({Static:false, Public:true }, "get_NormalBarycentric", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_NormalBarycentric
    );

    $.Method({Static:false, Public:true }, "get_NormalCenter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_NormalCenter
    );

    $.Method({Static:false, Public:true }, "get_TriangleBarycentric", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_TriangleBarycentric
    );

    $.Method({Static:false, Public:true }, "get_TriangleCenter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_TriangleCenter
    );

    $.Method({Static:false, Public:true }, "get_WorldPos", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      PickResult_get_WorldPos
    );

    $.Method({Static:false, Public:true }, "GetNormals", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("Fusee.Math.Core.float3")])
        ]), 
      PickResult_GetNormals
    );

    $.Method({Static:false, Public:true }, "GetTriangle", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("Fusee.Math.Core.float3")])
        ]), 
      PickResult_GetTriangle
    );

    $.Field({Static:false, Public:true }, "Node", $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"));

    $.Field({Static:false, Public:true }, "Mesh", $asm0B.TypeRef("Fusee.Serialization.Mesh"));

    $.Field({Static:false, Public:true }, "Triangle", $.Int32);

    $.Field({Static:false, Public:true }, "U", $.Single);

    $.Field({Static:false, Public:true }, "V", $.Single);

    $.Field({Static:false, Public:true }, "Model", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:true }, "View", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:true }, "Projection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "TriangleCenter", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "TriangleBarycentric", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "NormalCenter", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "NormalBarycentric", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "ModelPos", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "ClipPos", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "WorldPos", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "CameraPos", $asm0A.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ScenePicker */ 

(function ScenePicker$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneContainer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0D.Fusee.Xene.Viserator$b2.Of($asm04.Fusee.Engine.Core.PickResult, $asm04.Fusee.Engine.Core.ScenePicker_PickerState))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.ScenePicker_PickerState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0D.Fusee.Xene.ViseratorBase$b1.Of($asm04.Fusee.Engine.Core.PickResult))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.Fusee.Serialization.CanvasTransformComponent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0B.Fusee.Serialization.CanvasRenderMode)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Fusee.Engine.Core.PickResult)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0D.Fusee.Xene.SceneVisitor)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0B.Fusee.Serialization.RectTransformComponent)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0B.Fusee.Serialization.TransformComponent)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0D.Fusee.Xene.ContainerExtensions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float4, [$asm0A.Fusee.Math.Core.float3, $asm0F.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [$asm0A.Fusee.Math.Core.float2, $asm0A.Fusee.Math.Core.float2]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [$asm0A.Fusee.Math.Core.float2, $asm0F.System.Single]))) ();
  };


  function ScenePicker__ctor (scene) {
    $T01().prototype._ctor.call(this, $T02().prototype.GetEnumerator.call(scene.Children).MemberwiseClone());
    this.View = $T03().Identity.MemberwiseClone();
    this.Projection = $T03().Identity.MemberwiseClone();
  }; 

  function ScenePicker_get_PickPosClip () {
    return this.ScenePicker$PickPosClip$value;
  }; 

  function ScenePicker_InitState () {
    $T01().prototype.InitState.call(this);
    (this.State.Model = $T03().Identity.MemberwiseClone());
    (this.State.CanvasXForm = $T03().Identity.MemberwiseClone());
  }; 

  function ScenePicker_Pick (pickPos) {
    (this.ScenePicker$PickPosClip$value = pickPos.MemberwiseClone());
    return $T06().prototype.Viserate.call(this);
  }; 

  function ScenePicker_PickCanvasTransform (ctc) {
    var float = new ($T08())();
    this._ctc = ctc;
    var flag = ctc.CanvasRenderMode === $T0A().WORLD;
    if (flag) {
      var minMaxRect = new ($T0B())();
      minMaxRect.Min = ctc.Size.Min.MemberwiseClone();
      minMaxRect.Max = ctc.Size.Max.MemberwiseClone();
      var uiRect = minMaxRect.MemberwiseClone();
      this.State.CanvasXForm = $S00().CallStatic($T03(), "op_Multiply", null, this.State.CanvasXForm.MemberwiseClone(), $S00().CallStatic($T03(), "op_Multiply", null, 
          $T03().CreateTranslation(
            uiRect.get_Center().x, 
            uiRect.get_Center().y, 
            0
          ).MemberwiseClone(), 
          $T03().CreateScale(
            uiRect.get_Size().x, 
            uiRect.get_Size().y, 
            1
          ).MemberwiseClone()
        ).MemberwiseClone()).MemberwiseClone();
      this.State.Model = $S00().CallStatic($T03(), "op_Multiply", null, this.State.Model.MemberwiseClone(), (this.State).get_CanvasXForm().MemberwiseClone()).MemberwiseClone();
      (this.State.UiRect = uiRect.MemberwiseClone());
    }
    var flag2 = ctc.CanvasRenderMode === $T0A().SCREEN;
    if (flag2) {
      var projection = this.Projection.MemberwiseClone();
      var num = (Math.abs(+((+projection.get_M34() / (+projection.get_M33() + 1)))));
      var num2 = 2 * (Math.atan(+(1 / +projection.get_M22())));
      var num3 = +((+projection.get_M22() / +projection.get_M11()));
      var left = $T03().Invert(this.View.MemberwiseClone()).MemberwiseClone();
      (float = float.MemberwiseClone(), 
        $T08().prototype._ctor.call(float, 
          left.get_M14(), 
          left.get_M24(), 
          +left.get_M34() + num
        ));
      var num4 = Math.fround((2 * (Math.tan(+((num2 / 2))))) * num);
      var num5 = num4 * num3;
      minMaxRect = new ($T0B())();
      minMaxRect.Min = $S01().Construct((+float.x - +((num5 / 2))), (+float.y - +((num4 / 2))));
      minMaxRect.Max = $S01().Construct((+float.x + +((num5 / 2))), (+float.y + +((num4 / 2))));
      ctc.Size = minMaxRect.MemberwiseClone();
      minMaxRect = new ($T0B())();
      minMaxRect.Min = ctc.Size.Min.MemberwiseClone();
      minMaxRect.Max = ctc.Size.Max.MemberwiseClone();
      var uiRect2 = minMaxRect;
      this.State.CanvasXForm = $S00().CallStatic($T03(), "op_Multiply", null, this.State.CanvasXForm.MemberwiseClone(), $S00().CallStatic($T03(), "op_Multiply", null, 
          $S00().CallStatic($T03(), "op_Multiply", null, left.MemberwiseClone(), $T03().CreateTranslation(0, 0, num + 1E-05).MemberwiseClone()).MemberwiseClone(), 
          $T03().CreateScale(
            uiRect2.get_Size().x, 
            uiRect2.get_Size().y, 
            1
          ).MemberwiseClone()
        ).MemberwiseClone()).MemberwiseClone();
      this.State.Model = $S00().CallStatic($T03(), "op_Multiply", null, this.State.Model.MemberwiseClone(), (this.State).get_CanvasXForm().MemberwiseClone()).MemberwiseClone();
      (this.State.UiRect = uiRect2.MemberwiseClone());
    }
  }; 

  function ScenePicker_PickMesh (mesh) {
    var u = new JSIL.BoxedVariable(0);
    var v = new JSIL.BoxedVariable(0);
    var mat = $S00().CallStatic($T03(), "op_Multiply", null, 
      $S00().CallStatic($T03(), "op_Multiply", null, this.Projection.MemberwiseClone(), this.View.MemberwiseClone()).MemberwiseClone(), 
      (this.State).get_Model().MemberwiseClone()
    ).MemberwiseClone();

    for (var i = 0; i < (mesh.get_Triangles().length | 0); i = ((i + 3) | 0)) {
      var float = ($S02().Construct(mesh.get_Vertices()[mesh.get_Triangles()[i]], 1)).TransformPerspective(mat).MemberwiseClone();
      var float2 = ($S02().Construct(mesh.get_Vertices()[mesh.get_Triangles()[((i + 1) | 0)]], 1)).TransformPerspective(mat).MemberwiseClone();
      var float3 = ($S02().Construct(mesh.get_Vertices()[mesh.get_Triangles()[((i + 2) | 0)]], 1)).TransformPerspective(mat);
      var flag = $T05().PointInTriangle(
        float.get_xy().MemberwiseClone(), 
        float2.get_xy().MemberwiseClone(), 
        float3.get_xy(), 
        this.ScenePicker$PickPosClip$value.MemberwiseClone(), 
        /* ref */ u, 
        /* ref */ v
      );
      if (flag) {
        var expr_D9 = new ($T13())();
        expr_D9.Mesh = mesh;
        expr_D9.Node = this.SceneVisitor$CurrentNode$value;
        expr_D9.Triangle = i;
        expr_D9.Model = (this.State).get_Model().MemberwiseClone();
        expr_D9.View = this.View.MemberwiseClone();
        expr_D9.Projection = this.Projection.MemberwiseClone();
        expr_D9.U = +u.get();
        expr_D9.V = +v.get();
        $T06().prototype.YieldItem.call(this, expr_D9);
      }
    }
  }; 

  function ScenePicker_PickRectTransform (rtc) {
    if (this._ctc.CanvasRenderMode === $T0A().SCREEN) {
      var minMaxRect = new ($T0B())();
      minMaxRect.Min = $T05().op_Addition(
        $T05().op_Addition(
          (this.State).get_UiRect().Min.MemberwiseClone(), 
          $S03().CallStatic($T05(), "op_Multiply", null, ((this.State).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Min)
        ).MemberwiseClone(), 
        $S04().CallStatic($T05(), "op_Multiply", null, rtc.Offsets.Min.MemberwiseClone(), this._ctc.Scale)
      );
      minMaxRect.Max = $T05().op_Addition(
        $T05().op_Addition(
          (this.State).get_UiRect().Min.MemberwiseClone(), 
          $S03().CallStatic($T05(), "op_Multiply", null, ((this.State).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Max)
        ).MemberwiseClone(), 
        $S04().CallStatic($T05(), "op_Multiply", null, rtc.Offsets.Max.MemberwiseClone(), this._ctc.Scale)
      );
      var uiRect = minMaxRect.MemberwiseClone();
    } else {
      minMaxRect = new ($T0B())();
      minMaxRect.Min = $T05().op_Addition($T05().op_Addition(
          (this.State).get_UiRect().Min.MemberwiseClone(), 
          $S03().CallStatic($T05(), "op_Multiply", null, ((this.State).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Min)
        ).MemberwiseClone(), rtc.Offsets.Min);
      minMaxRect.Max = $T05().op_Addition($T05().op_Addition(
          (this.State).get_UiRect().Min.MemberwiseClone(), 
          $S03().CallStatic($T05(), "op_Multiply", null, ((this.State).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Max)
        ).MemberwiseClone(), rtc.Offsets.Max);
      uiRect = minMaxRect;
    }
    var float = $T05().op_Subtraction(
      uiRect.get_Center().MemberwiseClone(), 
      ((this.State).get_UiRect()).get_Center()
    );
    var x = +((+float.x / +((this.State).get_UiRect()).get_Size().x));
    var y = +((+float.y / +((this.State).get_UiRect()).get_Size().y));
    var x2 = +((+uiRect.get_Size().x / +((this.State).get_UiRect()).get_Size().x));
    var y2 = +((+uiRect.get_Size().y / +((this.State).get_UiRect()).get_Size().y));
    (this.State.UiRect = uiRect.MemberwiseClone());
    this.State.Model = $S00().CallStatic($T03(), "op_Multiply", null, this.State.Model.MemberwiseClone(), $S00().CallStatic($T03(), "op_Multiply", null, 
        $T03().CreateTranslation(x, y, 0).MemberwiseClone(), 
        $T03().CreateScale(x2, y2, 1).MemberwiseClone()
      ).MemberwiseClone()).MemberwiseClone();
  }; 

  function ScenePicker_PickTransform (transform) {
    this.State.Model = $S00().CallStatic($T03(), "op_Multiply", null, this.State.Model.MemberwiseClone(), $T17().Matrix(transform).MemberwiseClone()).MemberwiseClone();
  }; 

  function ScenePicker_set_PickPosClip (value) {
    this.ScenePicker$PickPosClip$value = value.MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.Viserator`2", [$asm04.TypeRef("Fusee.Engine.Core.PickResult"), $asm04.TypeRef("Fusee.Engine.Core.ScenePicker+PickerState")]), 
      Name: "Fusee.Engine.Core.ScenePicker", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneContainer")), 
      ScenePicker__ctor
    );

    $.Method({Static:false, Public:true }, "get_PickPosClip", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      ScenePicker_get_PickPosClip
    );

    $.Method({Static:false, Public:false, Virtual:true }, "InitState", 
      JSIL.MethodSignature.Void, 
      ScenePicker_InitState
    );

    $.Method({Static:false, Public:true }, "Pick", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.PickResult")]), [$asm0A.TypeRef("Fusee.Math.Core.float2")]), 
      ScenePicker_Pick
    );

    $.Method({Static:false, Public:true }, "PickCanvasTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.CanvasTransformComponent")), 
      ScenePicker_PickCanvasTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "PickMesh", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      ScenePicker_PickMesh
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "PickRectTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.RectTransformComponent")), 
      ScenePicker_PickRectTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "PickTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.TransformComponent")), 
      ScenePicker_PickTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "set_PickPosClip", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      ScenePicker_set_PickPosClip
    );

    $.Field({Static:false, Public:false}, "_ctc", $asm0B.TypeRef("Fusee.Serialization.CanvasTransformComponent"));

    $.Field({Static:false, Public:true }, "View", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:true }, "Projection", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "ScenePicker$PickPosClip$value", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Property({Static:false, Public:true }, "PickPosClip", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ScenePicker+PickerState */ 

(function PickerState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0D.Fusee.Xene.CollapsingStateStack$b1.Of($asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0D.Fusee.Xene.CollapsingStateStack$b1.Of($asm0A.Fusee.Math.Core.MinMaxRect))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0D.Fusee.Xene.VisitorState)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };


  function PickerState__ctor () {
    this._canvasXForm = new ($T00())(4);
    this._model = new ($T00())(4);
    this._uiRect = new ($T01())(4);
    $T02().prototype._ctor.call(this);
    this.RegisterState(this._model);
    this.RegisterState(this._uiRect);
    this.RegisterState(this._canvasXForm);
  }; 

  function PickerState_get_CanvasXForm () {
    return (this._canvasXForm).get_Tos();
  }; 

  function PickerState_get_Model () {
    return (this._model).get_Tos();
  }; 

  function PickerState_get_UiRect () {
    return (this._uiRect).get_Tos();
  }; 

  function PickerState_set_CanvasXForm (value) {
    (this._canvasXForm).set_Tos(value.MemberwiseClone());
  }; 

  function PickerState_set_Model (value) {
    (this._model).set_Tos(value.MemberwiseClone());
  }; 

  function PickerState_set_UiRect (value) {
    (this._uiRect).set_Tos(value.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.VisitorState"), 
      Name: "Fusee.Engine.Core.ScenePicker+PickerState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PickerState__ctor
    );

    $.Method({Static:false, Public:true }, "get_CanvasXForm", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      PickerState_get_CanvasXForm
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      PickerState_get_Model
    );

    $.Method({Static:false, Public:true }, "get_UiRect", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")), 
      PickerState_get_UiRect
    );

    $.Method({Static:false, Public:true }, "set_CanvasXForm", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      PickerState_set_CanvasXForm
    );

    $.Method({Static:false, Public:true }, "set_Model", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      PickerState_set_Model
    );

    $.Method({Static:false, Public:true }, "set_UiRect", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")), 
      PickerState_set_UiRect
    );

    $.Field({Static:false, Public:false}, "_canvasXForm", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false}, "_model", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false}, "_uiRect", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")]));

    $.Property({Static:false, Public:true }, "Model", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "UiRect", $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"));

    $.Property({Static:false, Public:true }, "CanvasXForm", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.AABBCalculator */ 

(function AABBCalculator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneContainer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.AABBCalculator_AABBState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0D.Fusee.Xene.SceneVisitor)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0D.Fusee.Xene.SceneVisitorHelpers)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0D.Fusee.Xene.VisitorState)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Fusee.Math.Core.AABBf)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0B.Fusee.Serialization.TransformComponent)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0D.Fusee.Xene.ContainerExtensions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")])))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };


  function AABBCalculator__ctor$00 (sc) {
    this._state = new ($T01())();
    $T02().prototype._ctor.call(this);
    this._sncList = sc.Children;
  }; 

  function AABBCalculator__ctor$01 (sncList) {
    this._state = new ($T01())();
    $T02().prototype._ctor.call(this);
    this._sncList = sncList;
  }; 

  function AABBCalculator__ctor$02 (snc) {
    this._state = new ($T01())();
    $T02().prototype._ctor.call(this);
    this._sncList = $T05().SingleRootEnumerable(snc);
  }; 

  function AABBCalculator_GetBox () {
    $S00().CallVirtual("Traverse", null, this, this._sncList);
    var boxValid = this._boxValid;
    if (boxValid) {
      var result = this._result.MemberwiseClone();
    } else {
      result = null;
    }
    return result;
  }; 

  function AABBCalculator_InitState () {
    this._boxValid = false;
    (this._state).Clear();
    (this._state.ModelView = $T08().Identity.MemberwiseClone());
  }; 

  function AABBCalculator_OnMesh (mesh) {
    var aABBf = $T0A().op_Multiply((this._state).get_ModelView(), mesh.BoundingBox.MemberwiseClone()).MemberwiseClone();
    if (!this._boxValid) {
      this._result = aABBf.MemberwiseClone();
      this._boxValid = true;
    } else {
      this._result = $T0A().Union(this._result, aABBf).MemberwiseClone();
    }
  }; 

  function AABBCalculator_OnTransform (transform) {
    this._state.ModelView = $S01().CallStatic($T08(), "op_Multiply", null, this._state.ModelView.MemberwiseClone(), $T0C().Matrix(transform).MemberwiseClone()).MemberwiseClone();
  }; 

  function AABBCalculator_PopState () {
    (this._state).Pop();
  }; 

  function AABBCalculator_PushState () {
    (this._state).Push();
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.SceneVisitor"), 
      Name: "Fusee.Engine.Core.AABBCalculator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneContainer")), 
      AABBCalculator__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")])), 
      AABBCalculator__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")), 
      AABBCalculator__ctor$02
    );

    $.Method({Static:false, Public:true }, "GetBox", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$asm0A.TypeRef("Fusee.Math.Core.AABBf")])), 
      AABBCalculator_GetBox
    );

    $.Method({Static:false, Public:false, Virtual:true }, "InitState", 
      JSIL.MethodSignature.Void, 
      AABBCalculator_InitState
    );

    $.Method({Static:false, Public:true }, "OnMesh", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      AABBCalculator_OnMesh
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "OnTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.TransformComponent")), 
      AABBCalculator_OnTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "PopState", 
      JSIL.MethodSignature.Void, 
      AABBCalculator_PopState
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PushState", 
      JSIL.MethodSignature.Void, 
      AABBCalculator_PushState
    );

    $.Field({Static:false, Public:false}, "_sncList", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]));

    $.Field({Static:false, Public:false}, "_state", $asm04.TypeRef("Fusee.Engine.Core.AABBCalculator+AABBState"));

    $.Field({Static:false, Public:false}, "_boxValid", $.Boolean);

    $.Field({Static:false, Public:false}, "_result", $asm0A.TypeRef("Fusee.Math.Core.AABBf"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.AABBCalculator+AABBState */ 

(function AABBState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0D.Fusee.Xene.CollapsingStateStack$b1.Of($asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0D.Fusee.Xene.VisitorState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };


  function AABBState__ctor () {
    this._modelView = new ($T00())(4);
    $T01().prototype._ctor.call(this);
    this.RegisterState(this._modelView);
  }; 

  function AABBState_get_ModelView () {
    return (this._modelView).get_Tos();
  }; 

  function AABBState_set_ModelView (value) {
    (this._modelView).set_Tos(value.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.VisitorState"), 
      Name: "Fusee.Engine.Core.AABBCalculator+AABBState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AABBState__ctor
    );

    $.Method({Static:false, Public:true }, "get_ModelView", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      AABBState_get_ModelView
    );

    $.Method({Static:false, Public:true }, "set_ModelView", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      AABBState_set_ModelView
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_modelView", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Property({Static:false, Public:true }, "ModelView", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Core.LightingCalculationMethod */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Core.LightingCalculationMethod", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SIMPLE: 0, 
    ADVANCED: 1, 
    ADVANCEDwENVMAP: 2, 
  }
);

/* class Fusee.Engine.Core.SceneRenderer */ 

(function SceneRenderer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneContainer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.LightResult)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0D.Fusee.Xene.SceneVisitor)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult)))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Engine.Core.LightSetup)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0D.Fusee.Xene.ViseratorExtensions)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult)))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0B.Fusee.Serialization.LightComponent)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer_RendererState)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0B.Fusee.Serialization.WeightComponent)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float4))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.VertexWeightList))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0B.Fusee.Serialization.VertexWeightList)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm0B.Fusee.Serialization.VertexWeight))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0B.Fusee.Serialization.VertexWeight)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.VertexWeight))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.VertexWeight))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0E.Fusee.Xirkit.ChannelBase))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0E.Fusee.Xirkit.Animation)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.Fusee.Engine.Core.Time)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0B.Fusee.Serialization.ShaderComponent)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.ShaderComponent, $asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainer)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainerDouble)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainerInt)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainerFloat)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainerFloat2)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainerFloat3)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainerFloat4)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0B.Fusee.Serialization.TypeContainerBool)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm12.System.IO.InvalidDataException)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm0B.Fusee.Serialization.TypeId)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize(System.Array.Of($asm0F.System.String))) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm0F.System.Predicate$b1.Of($asm0B.Fusee.Serialization.AnimationComponent))) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer_$l$gc)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0B.Fusee.Serialization.AnimationComponent))) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.AnimationComponent))) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationComponent)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm0D.Fusee.Xene.SceneFinderExtensions)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationTrackContainer)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0F.System.Int32))) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1_LerpFunc.Of($asm0F.System.Int32))) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationKeyContainerInt)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm0E.Fusee.Xirkit.Keyframe$b1.Of($asm0F.System.Int32))) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0F.System.Single))) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1_LerpFunc.Of($asm0F.System.Single))) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationKeyContainerFloat)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm0E.Fusee.Xirkit.Keyframe$b1.Of($asm0F.System.Single))) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1_LerpFunc.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationKeyContainerFloat2)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm0E.Fusee.Xirkit.Keyframe$b1.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm0B.Fusee.Serialization.LerpType)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1_LerpFunc.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationKeyContainerFloat3)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm0E.Fusee.Xirkit.Keyframe$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0A.Fusee.Math.Core.float4))) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm0E.Fusee.Xirkit.Channel$b1_LerpFunc.Of($asm0A.Fusee.Math.Core.float4))) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationKeyContainerFloat4)) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm0E.Fusee.Xirkit.Keyframe$b1.Of($asm0A.Fusee.Math.Core.float4))) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm0D.Fusee.Xene.VisitorState)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm0A.Fusee.Math.Core.M)) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.RenderPass))) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm0B.Fusee.Serialization.RenderPass)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm0B.Fusee.Serialization.BoneComponent)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.SceneNodeContainer, $asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm0B.Fusee.Serialization.CanvasTransformComponent)) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm0B.Fusee.Serialization.CanvasRenderMode)) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_KeyCollection.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm0D.Fusee.Xene.ContainerExtensions)) ();
  };
  var $T64 = function () {
    return ($T64 = JSIL.Memoize($asm0B.Fusee.Serialization.RectTransformComponent)) ();
  };
  var $T65 = function () {
    return ($T65 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectComponent)) ();
  };
  var $T66 = function () {
    return ($T66 = JSIL.Memoize($asm0B.Fusee.Serialization.TransformComponent)) ();
  };
  var $T67 = function () {
    return ($T67 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T68 = function () {
    return ($T68 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T69 = function () {
    return ($T69 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T6A = function () {
    return ($T6A = JSIL.Memoize($asm0B.Fusee.Serialization.XFormComponent)) ();
  };
  var $T6B = function () {
    return ($T6B = JSIL.Memoize($asm0B.Fusee.Serialization.XFormTextComponent)) ();
  };
  var $T6C = function () {
    return ($T6C = JSIL.Memoize($asm03.Fusee.Engine.Common.HardwareCapability)) ();
  };
  var $T6D = function () {
    return ($T6D = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T6E = function () {
    return ($T6E = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T6F = function () {
    return ($T6F = JSIL.Memoize($asm0B.Fusee.Serialization.MatChannelContainer)) ();
  };
  var $T70 = function () {
    return ($T70 = JSIL.Memoize($asm0B.Fusee.Serialization.SpecularChannelContainer)) ();
  };
  var $T71 = function () {
    return ($T71 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderCodeBuilder)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer)], ["TViserator", "TResult"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.VertexWeight), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0B.TypeRef("Fusee.Serialization.VertexWeight")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm12.System.IO.InvalidDataException, [$asm0F.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0B.Fusee.Serialization.AnimationComponent]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), $asm0F.TypeRef("System.Predicate`1", ["!!0"])], ["TComponent"]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0F.System.Int32), [$asm0E.TypeRef("Fusee.Xirkit.Channel`1+LerpFunc", [$asm0F.TypeRef("System.Int32")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [
        $asm0F.System.Int32, $asm0F.System.Int32, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0F.System.Single), [$asm0E.TypeRef("Fusee.Xirkit.Channel`1+LerpFunc", [$asm0F.TypeRef("System.Single")])]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0A.Fusee.Math.Core.float2), [$asm0E.TypeRef("Fusee.Xirkit.Channel`1+LerpFunc", [$asm0A.TypeRef("Fusee.Math.Core.float2")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [
        $asm0A.Fusee.Math.Core.float2, $asm0A.Fusee.Math.Core.float2, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float3, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float3, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0A.Fusee.Math.Core.float3), [$asm0E.TypeRef("Fusee.Xirkit.Channel`1+LerpFunc", [$asm0A.TypeRef("Fusee.Math.Core.float3")])]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.Fusee.Xirkit.Channel$b1.Of($asm0A.Fusee.Math.Core.float4), [$asm0E.TypeRef("Fusee.Xirkit.Channel`1+LerpFunc", [$asm0A.TypeRef("Fusee.Math.Core.float4")])]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4, [
        $asm0A.Fusee.Math.Core.float4, $asm0A.Fusee.Math.Core.float4, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration), null))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")])))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [$asm0A.Fusee.Math.Core.float2, $asm0A.Fusee.Math.Core.float2]))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float2, [$asm0A.Fusee.Math.Core.float2, $asm0F.System.Single]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S1D = function () {
    return ($S1D = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.SceneNodeContainer, $asm0A.Fusee.Math.Core.float4x4), null))) ();
  };
  var $S1E = function () {
    return ($S1E = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.ShaderComponent, $asm04.Fusee.Engine.Core.ShaderEffect), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult)).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult)).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0B.Fusee.Serialization.AnimationComponent).GetEnumerator)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0B.Fusee.Serialization.AnimationComponent).get_Current)) ();
  };


  function SceneRenderer__ctor$00 (sc, RenderDeferred, RenderShadows) {
    $thisType.prototype._ctor.call(this, sc);
    if (RenderShadows) {
      this._wantToRenderWithShadows = true;
    }
    if (RenderDeferred) {
      this._wantToRenderDeferred = true;
    }
  }; 

  function SceneRenderer__ctor$01 (sc) {
    var lightResult = new JSIL.BoxedVariable(new ($T03())());
    this.SceneRenderer$ShadowMapSize$value = $S01().Construct(1024, 1024);
    this._lightComponents = $S00().Construct();
    $T05().prototype._ctor.call(this);
    var enumerable = $S02().CallStatic($T09(), "Viserate$b2", [$asm04.Fusee.Engine.Core.LightSetup, $asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult)], sc.Children);
    var enumerator = $IM00().Call(enumerable, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var current = $IM02().Call(enumerator, null).MemberwiseClone();
        var flag = (this._lightComponents).TryGetValue(current.get_Key(), /* ref */ lightResult);
        if (!flag) {
          (this._lightComponents).Add(
            current.get_Key(), 
            current.get_Value().MemberwiseClone()
          );
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    $thisType.AllLightResults = this._lightComponents;
    var flag2 = ($thisType.AllLightResults.get_Count() | 0) === 0;
    if (flag2) {
      var arg_147_0 = $thisType.AllLightResults;
      var arg_147_1 = new ($T0D())();
      var value = new ($T03())();
      value.PositionWorldSpace = $T0E().UnitZ.MemberwiseClone();
      value.Position = $T0E().UnitZ.MemberwiseClone();
      value.Active = true;
      value.AmbientCoefficient = 0;
      value.Attenuation = 0;
      value.Color = $S03().Construct(1, 1, 1);
      value.ConeAngle = 45;
      value.ConeDirection = $T0E().UnitZ.MemberwiseClone();
      value.ModelMatrix = $T0F().Identity.MemberwiseClone();
      value.Type = 3;
      arg_147_0.Add(arg_147_1, value.MemberwiseClone());
    }
    this._sc = sc;
    this._state = new ($T10())();
    this.InitAnimations(this._sc);
  }; 

  function SceneRenderer_AccumulateLight (lightComponent) {
    var lightResult = new JSIL.BoxedVariable(new ($T03())());
    var flag = $thisType.AllLightResults.TryGetValue(lightComponent, /* ref */ lightResult);
    if (!flag) {
      var enumerable = $S02().CallStatic($T09(), "Viserate$b2", [$asm04.Fusee.Engine.Core.LightSetup, $asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult)], this._sc.Children);
      var enumerator = $IM00().Call(enumerable, null);
      try {

        while ($IM01().Call(enumerator, null)) {
          var current = $IM02().Call(enumerator, null).MemberwiseClone();
          var flag2 = (this._lightComponents).TryGetValue(current.get_Key(), /* ref */ lightResult);
          if (!flag2) {
            (this._lightComponents).Add(
              current.get_Key(), 
              current.get_Value().MemberwiseClone()
            );
          }
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
      $thisType.AllLightResults = this._lightComponents;
      this.LightsToModelViewSpace();
    }
  }; 

  function SceneRenderer_AddWeightComponentToMesh (mesh, wc) {
    var array = JSIL.Array.New($T14(), (wc.WeightMap).get_Count());
    var array2 = JSIL.Array.New($T14(), (wc.WeightMap).get_Count());

    for (var i = 0; i < ((wc.WeightMap).get_Count() | 0); i = ((i + 1) | 0)) {
      var vertexWeightList = (wc.WeightMap).get_Item(i);
      var flag = vertexWeightList === null;
      if (flag) {
        vertexWeightList = new ($T17())();
      }
      var flag2 = vertexWeightList.VertexWeightList$VertexWeights$value === null;
      if (flag2) {
        var arg_88_0 = vertexWeightList;
        var expr_5E = JSIL.Array.New($T19(), 1);
        var vertexWeight = new ($T19())();
        vertexWeight.JointIndex = 0;
        vertexWeight.Weight = 1;
        expr_5E[0] = vertexWeight.MemberwiseClone();
        arg_88_0.VertexWeightList$VertexWeights$value = $S04().Construct($T1B().$Cast(expr_5E));
      }
      var num = ($T1C().Min(4, (vertexWeightList.VertexWeightList$VertexWeights$value).get_Count()) | 0);

      for (var j = 0; j < num; j = ((j + 1) | 0)) {
        switch (j) {
          case 0: 
            array[i].x = +(vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).Weight;
            array2[i].x = +((vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).JointIndex);
            break;

          case 1: 
            array[i].y = +(vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).Weight;
            array2[i].y = +((vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).JointIndex);
            break;

          case 2: 
            array[i].z = +(vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).Weight;
            array2[i].z = +((vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).JointIndex);
            break;

          case 3: 
            array[i].w = +(vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).Weight;
            array2[i].w = +((vertexWeightList.VertexWeightList$VertexWeights$value).get_Item(j).JointIndex);
            break;

        }
      }
      (array[i].MemberwiseClone()).Normalize1();
    }
    mesh.set_BoneIndices(array2);
    mesh.set_BoneWeights(array);
  }; 

  function SceneRenderer_Animate () {
    var flag = (((this._animation).get_ChannelBaseList()).get_Count() >>> 0) > (0 >>> 0);
    if (flag) {
      (this._animation).Animate($T20().get_DeltaTime());
    }
  }; 

  function SceneRenderer_BuildMaterialFromShaderComponent (shaderComponent) {
    var shaderEffect = new JSIL.BoxedVariable(null);
    var flag = (this._shaderEffectMap).TryGetValue(shaderComponent, /* ref */ shaderEffect);
    if (flag) {
      var result = shaderEffect.get();
    } else {
      shaderEffect.set($thisType.MakeShader(shaderComponent));
      (this._rc).SetShaderEffect(shaderEffect.get());
      (this._shaderEffectMap).Add(shaderComponent, shaderEffect.get());
      result = shaderEffect.get();
    }
    return result;
  }; 

  function SceneRenderer_CreateEffectParameterDeclaration (effectParameter) {
    var typeContainerDouble = null, typeContainerInt = null, typeContainerFloat = null, typeContainerFloat2 = null, typeContainerFloat3 = null, typeContainerFloat4 = null, typeContainerBool = null;
    var flag = effectParameter.Name === null;
    if (flag) {
      throw $S05().Construct("EffectParameterDeclaration: Name is empty!");
    }
    var effectParameterDeclaration = new ($T2E())();
    effectParameterDeclaration.Name = effectParameter.Name;
    var effectParameterDeclaration2 = effectParameterDeclaration.MemberwiseClone();
    var typeId = effectParameter.TypeId;
    switch (typeId.valueOf()) {
      case 0: 
        var flag2 = (typeContainerDouble = $T26().$As(effectParameter)) !== null;
        if (flag2) {
          effectParameterDeclaration2.Value = $T30().$Box(typeContainerDouble.Value);
        }
        break;

      case 1: 
        var flag3 = (typeContainerInt = $T27().$As(effectParameter)) !== null;
        if (flag3) {
          effectParameterDeclaration2.Value = $T16().$Box(typeContainerInt.Value);
        }
        break;

      case 2: 
        var flag4 = (typeContainerFloat = $T28().$As(effectParameter)) !== null;
        if (flag4) {
          effectParameterDeclaration2.Value = $T31().$Box(typeContainerFloat.Value);
        }
        break;

      case 3: 
        var flag5 = (typeContainerFloat2 = $T29().$As(effectParameter)) !== null;
        if (flag5) {
          effectParameterDeclaration2.Value = typeContainerFloat2.Value.MemberwiseClone();
        }
        break;

      case 4: 
        var flag6 = (typeContainerFloat3 = $T2A().$As(effectParameter)) !== null;
        if (flag6) {
          effectParameterDeclaration2.Value = typeContainerFloat3.Value.MemberwiseClone();
        }
        break;

      case 5: 
        var flag7 = (typeContainerFloat4 = $T2B().$As(effectParameter)) !== null;
        if (flag7) {
          effectParameterDeclaration2.Value = typeContainerFloat4.Value.MemberwiseClone();
        }
        break;

      case 6: 
        var flag8 = (typeContainerBool = $T2C().$As(effectParameter)) !== null;
        if (flag8) {
          effectParameterDeclaration2.Value = $T02().$Box(typeContainerBool.Value);
        }
        break;

      default: 
        throw $S05().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T32(), ["EffectParameterDeclaration:", effectParameter.Name, " is of unhandled type ", typeId.toString(), "!"])));

    }
    var flag9 = effectParameterDeclaration2.Value === null;
    if (flag9) {
      throw $S05().Construct(("EffectParameterDeclaration:" + effectParameter.Name + ", value is null"));
    }
    return effectParameterDeclaration2;
  }; 

  function SceneRenderer_get_DoRenderDeferred () {
    return this._renderDeferred;
  }; 

  function SceneRenderer_get_DoRenderEnvMap () {
    return this._renderEnvMap;
  }; 

  function SceneRenderer_get_DoRenderWithShadows () {
    return this._renderWithShadows;
  }; 

  function SceneRenderer_get_ShadowMapSize () {
    return this.SceneRenderer$ShadowMapSize$value;
  }; 

  function SceneRenderer_InitAnimations (sc) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05;
    var arg_33_1 = null;
    this._animation = new ($T1F())(0);
    var arg_33_0 = sc.Children;
    if ((arg_33_1 = $T37().$l$g9__35_0) === null) {
      arg_33_1 = $T37().$l$g9__35_0 = $T35().New($T37().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.SceneRenderer_$l$gc, "$lInitAnimations$gb__35_0", $S06(), false, false));
    }
    var enumerator = $IM04().Call($S07().CallStatic($T3B(), "FindComponents$b1", [$asm0B.Fusee.Serialization.AnimationComponent], arg_33_0, arg_33_1), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var current = $IM05().Call(enumerator, null);
        var flag = current.AnimationTracks !== null;
        if (flag) {

          for (var a$0 = current.AnimationTracks._items, i$0 = 0, l$0 = (current.AnimationTracks._size | 0); i$0 < l$0; ($temp00 = i$0, 
              i$0 = ((i$0 + 1) | 0), 
              $temp00)) {
            var current2 = a$0[i$0];
            switch ((current2.TypeId).valueOf()) {
              case 1: 
                var channel = $S08().Construct($T3E().New(null, null, new JSIL.MethodPointerInfo($asm0E.Fusee.Xirkit.Lerp, "IntLerp", $S09(), true, false)));

                for (var a$1 = current2.KeyFrames._items, i$1 = 0, l$1 = (current2.KeyFrames._size | 0); i$1 < l$1; ($temp01 = i$1, 
                    i$1 = ((i$1 + 1) | 0), 
                    $temp01)) {
                  var animationKeyContainerInt = $T3F().$Cast(a$1[i$1]);
                  $T3D().prototype.AddKeyframe.call(channel, new ($T40())(animationKeyContainerInt.Time, animationKeyContainerInt.Value));
                }
                (this._animation).AddAnimation$b1($T16())(channel, current2.SceneComponent, current2.Property);
                break;

              case 2: 
                var channel2 = $S0A().Construct($T42().New(null, null, new JSIL.MethodPointerInfo($asm0E.Fusee.Xirkit.Lerp, "FloatLerp", $S0B(), true, false)));

                for (var a$2 = current2.KeyFrames._items, i$2 = 0, l$2 = (current2.KeyFrames._size | 0); i$2 < l$2; ($temp02 = i$2, 
                    i$2 = ((i$2 + 1) | 0), 
                    $temp02)) {
                  var animationKeyContainerFloat = $T43().$Cast(a$2[i$2]);
                  $T41().prototype.AddKeyframe.call(channel2, new ($T44())(animationKeyContainerFloat.Time, animationKeyContainerFloat.Value));
                }
                (this._animation).AddAnimation$b1($T31())(channel2, current2.SceneComponent, current2.Property);
                break;

              case 3: 
                var channel3 = $S0C().Construct($T46().New(null, null, new JSIL.MethodPointerInfo($asm0E.Fusee.Xirkit.Lerp, "Float2Lerp", $S0D(), true, false)));

                for (var a$3 = current2.KeyFrames._items, i$3 = 0, l$3 = (current2.KeyFrames._size | 0); i$3 < l$3; ($temp03 = i$3, 
                    i$3 = ((i$3 + 1) | 0), 
                    $temp03)) {
                  var animationKeyContainerFloat2 = $T47().$Cast(a$3[i$3]);
                  $T45().prototype.AddKeyframe.call(channel3, new ($T48())(animationKeyContainerFloat2.Time, animationKeyContainerFloat2.Value.MemberwiseClone()));
                }
                (this._animation).AddAnimation$b1($T04())(channel3, current2.SceneComponent, current2.Property);
                break;

              case 4: 
                var lerpType = current2.LerpType;
                if ((lerpType.valueOf() | 0) !== 0) {
                  if (lerpType !== $T49().Slerp) {
                    throw $S0E().Construct(JSIL.ConcatString("Unknown lerp type: animTrackContainer.LerpType: ", $T16().$Box((current2.LerpType).valueOf())));
                  }
                  var lerpFunc = $T4B().New(null, null, new JSIL.MethodPointerInfo($asm0E.Fusee.Xirkit.Lerp, "Float3QuaternionSlerp", $S0F(), true, false));
                } else {
                  lerpFunc = $T4B().New(null, null, new JSIL.MethodPointerInfo($asm0E.Fusee.Xirkit.Lerp, "Float3Lerp", $S10(), true, false));
                }
                var channel4 = $S11().Construct(lerpFunc);

                for (var a$4 = current2.KeyFrames._items, i$4 = 0, l$4 = (current2.KeyFrames._size | 0); i$4 < l$4; ($temp04 = i$4, 
                    i$4 = ((i$4 + 1) | 0), 
                    $temp04)) {
                  var animationKeyContainerFloat3 = $T4D().$Cast(a$4[i$4]);
                  $T4C().prototype.AddKeyframe.call(channel4, new ($T4E())(animationKeyContainerFloat3.Time, animationKeyContainerFloat3.Value.MemberwiseClone()));
                }
                (this._animation).AddAnimation$b1($T0E())(channel4, current2.SceneComponent, current2.Property);
                break;

              case 5: 
                var channel5 = $S12().Construct($T50().New(null, null, new JSIL.MethodPointerInfo($asm0E.Fusee.Xirkit.Lerp, "Float4Lerp", $S13(), true, false)));

                for (var a$5 = current2.KeyFrames._items, i$5 = 0, l$5 = (current2.KeyFrames._size | 0); i$5 < l$5; ($temp05 = i$5, 
                    i$5 = ((i$5 + 1) | 0), 
                    $temp05)) {
                  var animationKeyContainerFloat4 = $T51().$Cast(a$5[i$5]);
                  $T4F().prototype.AddKeyframe.call(channel5, new ($T52())(animationKeyContainerFloat4.Time, animationKeyContainerFloat4.Value.MemberwiseClone()));
                }
                (this._animation).AddAnimation$b1($T14())(channel5, current2.SceneComponent, current2.Property);
                break;

            }
          }
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
  }; 

  function SceneRenderer_InitState () {
    (this._state).Clear();
    (this._state.Model = $T0F().Identity.MemberwiseClone());
    (this._state.CanvasXForm = $T0F().Identity.MemberwiseClone());
    var arg_5B_0 = this._state;
    var uiRect = new ($T54())();
    uiRect.Min = $T04().op_UnaryNegation($T04().One.MemberwiseClone());
    uiRect.Max = $T04().One.MemberwiseClone();
    (arg_5B_0.UiRect = uiRect.MemberwiseClone());
    (this._state).set_Effect(this._defaultEffect);
    this._view = (this._rc).get_ModelView().MemberwiseClone();
  }; 

  function SceneRenderer_LightsToModelViewSpace () {
    var $temp00;
    var float = new ($T14())();

    for (var a$0 = $T55().ToList$b1($T0D())($thisType.AllLightResults.get_Keys())._items, i$0 = 0, l$0 = ($T55().ToList$b1($T0D())($thisType.AllLightResults.get_Keys())._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var current = a$0[i$0];
      var lightResult = $thisType.AllLightResults.get_Item(current).MemberwiseClone();
      lightResult.PositionModelViewSpace = $S14().CallStatic($T0F(), "op_Multiply", null, (this._rc).get_ModelView(), lightResult.PositionWorldSpace);
      (float = float.MemberwiseClone(), 
        $T14().prototype._ctor.call(float, lightResult.ConeDirection.x, lightResult.ConeDirection.y, lightResult.ConeDirection.z, 0));
      float = $S15().CallStatic($T0F(), "op_Multiply", null, (this._rc).get_ModelView(), float);
      float.Normalize();
      lightResult.ConeDirectionModelViewSpace = $S03().Construct(float.x, float.y, float.z);
      lightResult.ConeAngle = +$T56().DegreesToRadians(lightResult.ConeAngle);
      $thisType.AllLightResults.set_Item(current, lightResult.MemberwiseClone());
    }
  }; 

  function SceneRenderer_MakeShader (shaderComponent) {
    var $temp00;
    var list = $S16().Construct();
    var renderStateSet = new ($T58())();
    var flag = shaderComponent.EffectParameter !== null;
    if (flag) {
      var list2 = $S16().Construct();

      for (var a$0 = shaderComponent.EffectParameter._items, i$0 = 0, l$0 = (shaderComponent.EffectParameter._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var current = a$0[i$0];
        list2.Add($thisType.CreateEffectParameterDeclaration(current).MemberwiseClone());
      }
      $T57().prototype.AddRange.call(list, list2);
    }
    var flag2 = shaderComponent.EffectPasses === null;
    if (flag2) {
      throw $S05().Construct("No EffectPasses in Shader Component! Please specify at least one pass");
    }
    var array = JSIL.Array.New($T5A(), (shaderComponent.EffectPasses).get_Count());

    for (var i = 0; i < ((shaderComponent.EffectPasses).get_Count() | 0); i = ((i + 1) | 0)) {
      var effectPassDeclaration = new ($T5A())();
      var renderPass = (shaderComponent.EffectPasses).get_Item(i);
      var flag3 = renderPass.RenderStateContainer !== null;
      if (flag3) {
        renderStateSet = new ($T58())();
        renderStateSet.SetRenderStates(renderPass.RenderStateContainer);
      }
      effectPassDeclaration.VS = renderPass.VS;
      effectPassDeclaration.PS = renderPass.PS;
      effectPassDeclaration.StateSet = renderStateSet;
      array[i] = effectPassDeclaration.MemberwiseClone();
    }
    return new ($T22())(array, list);
  }; 

  function SceneRenderer_PopState () {
    (this._state).Pop();
    (this._rc.Model = (this._state).get_Model().MemberwiseClone());
    (this._rc.View = this._view.MemberwiseClone());
  }; 

  function SceneRenderer_PushState () {
    (this._state).Push();
  }; 

  function SceneRenderer_Render (rc) {
    this.SetContext(rc);
    rc.SetRenderTarget(null);
    $S17().CallVirtual("Traverse", null, this, this._sc.Children);
  }; 

  function SceneRenderer_RenderBone (bone) {
    var float4x = new JSIL.BoxedVariable(new ($T0F())());
    var currentNode = this.SceneVisitor$CurrentNode$value;
    var flag = !(this._boneMap).TryGetValue(currentNode, /* ref */ float4x);
    if (flag) {
      (this._boneMap).Add(currentNode, (this._rc).get_Model().MemberwiseClone());
    } else {
      (this._boneMap).set_Item(currentNode, (this._rc).get_Model().MemberwiseClone());
    }
  }; 

  function SceneRenderer_RenderCanvasTransform (ctc) {
    var float = new ($T0E())();
    this._ctc = ctc;
    (this._rc.View = this._view.MemberwiseClone());
    var flag = ctc.CanvasRenderMode === $T61().WORLD;
    if (flag) {
      var minMaxRect = new ($T54())();
      minMaxRect.Min = ctc.Size.Min.MemberwiseClone();
      minMaxRect.Max = ctc.Size.Max.MemberwiseClone();
      var minMaxRect2 = minMaxRect.MemberwiseClone();
      this._state.CanvasXForm = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.CanvasXForm.MemberwiseClone(), $T0F().CreateTranslation(
          minMaxRect2.get_Center().x, 
          minMaxRect2.get_Center().y, 
          0
        ).MemberwiseClone()).MemberwiseClone();
      this._state.Model = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.Model.MemberwiseClone(), (this._state).get_CanvasXForm().MemberwiseClone()).MemberwiseClone();
      this._parentRect = minMaxRect2.MemberwiseClone();
      (this._state.UiRect = minMaxRect2.MemberwiseClone());
    }
    var flag2 = ctc.CanvasRenderMode === $T61().SCREEN;
    if (flag2) {
      var projection = (this._rc).get_Projection().MemberwiseClone();
      var num = (Math.abs(+((+projection.get_M34() / (+projection.get_M33() + 1)))));
      var num2 = 2 * (Math.atan(+(1 / +projection.get_M22())));
      var num3 = +((+projection.get_M22() / +projection.get_M11()));
      (float = float.MemberwiseClone(), 
        $T0E().prototype._ctor.call(float, 
          ((this._rc).get_InvView()).get_M14(), 
          ((this._rc).get_InvView()).get_M24(), 
          +((this._rc).get_InvView()).get_M34() + num
        ));
      var num4 = Math.fround((2 * (Math.tan(+((num2 / 2))))) * num);
      var num5 = num4 * num3;
      minMaxRect = new ($T54())();
      minMaxRect.Min = $S01().Construct((+float.x - +((num5 / 2))), (+float.y - +((num4 / 2))));
      minMaxRect.Max = $S01().Construct((+float.x + +((num5 / 2))), (+float.y + +((num4 / 2))));
      ctc.Size = minMaxRect.MemberwiseClone();
      minMaxRect = new ($T54())();
      minMaxRect.Min = ctc.Size.Min.MemberwiseClone();
      minMaxRect.Max = ctc.Size.Max.MemberwiseClone();
      var minMaxRect3 = minMaxRect;
      this._state.CanvasXForm = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.CanvasXForm.MemberwiseClone(), $S18().CallStatic($T0F(), "op_Multiply", null, 
          (this._rc).get_InvView().MemberwiseClone(), 
          $T0F().CreateTranslation(0, 0, num + (num * 0.01)).MemberwiseClone()
        ).MemberwiseClone()).MemberwiseClone();
      this._state.Model = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.Model.MemberwiseClone(), (this._state).get_CanvasXForm().MemberwiseClone()).MemberwiseClone();
      this._parentRect = minMaxRect3.MemberwiseClone();
      (this._state.UiRect = minMaxRect3.MemberwiseClone());
    }
  }; 

  function SceneRenderer_RenderCurrentPass (rm, effect) {

    for (var i = 0; i < (((this._lightComponents).get_Keys()).get_Count() | 0); i = ((i + 1) | 0)) {
      (this._rc).SetShaderEffect(effect);
      this.UpdateLightParamsInPixelShader(i, (this._lightComponents).get_Item($T55().ElementAt$b1($T0D())((this._lightComponents).get_Keys(), i)).MemberwiseClone(), effect);
      (this._rc).Render(rm);
    }
  }; 

  function SceneRenderer_RenderMesh (mesh) {
    var weights = $T63().GetWeights(this.SceneVisitor$CurrentNode$value, 0);
    if (weights !== null) {
      this.AddWeightComponentToMesh(mesh, weights);
    }
    this.RenderCurrentPass(mesh, (this._state).get_Effect());
  }; 

  function SceneRenderer_RenderRectTransform (rtc) {
    if (this._ctc.CanvasRenderMode === $T61().SCREEN) {
      var minMaxRect = new ($T54())();
      minMaxRect.Min = $T04().op_Addition(
        $T04().op_Addition(
          (this._state).get_UiRect().Min.MemberwiseClone(), 
          $S19().CallStatic($T04(), "op_Multiply", null, ((this._state).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Min)
        ).MemberwiseClone(), 
        $S1A().CallStatic($T04(), "op_Multiply", null, rtc.Offsets.Min.MemberwiseClone(), this._ctc.Scale)
      );
      minMaxRect.Max = $T04().op_Addition(
        $T04().op_Addition(
          (this._state).get_UiRect().Min.MemberwiseClone(), 
          $S19().CallStatic($T04(), "op_Multiply", null, ((this._state).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Max)
        ).MemberwiseClone(), 
        $S1A().CallStatic($T04(), "op_Multiply", null, rtc.Offsets.Max.MemberwiseClone(), this._ctc.Scale)
      );
      var uiRect = minMaxRect.MemberwiseClone();
    } else {
      minMaxRect = new ($T54())();
      minMaxRect.Min = $T04().op_Addition($T04().op_Addition(
          (this._state).get_UiRect().Min.MemberwiseClone(), 
          $S19().CallStatic($T04(), "op_Multiply", null, ((this._state).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Min)
        ).MemberwiseClone(), rtc.Offsets.Min);
      minMaxRect.Max = $T04().op_Addition($T04().op_Addition(
          (this._state).get_UiRect().Min.MemberwiseClone(), 
          $S19().CallStatic($T04(), "op_Multiply", null, ((this._state).get_UiRect()).get_Size().MemberwiseClone(), rtc.Anchors.Max)
        ).MemberwiseClone(), rtc.Offsets.Max);
      uiRect = minMaxRect;
    }
    var float = $T04().op_Subtraction(
      uiRect.get_Center().MemberwiseClone(), 
      ((this._state).get_UiRect()).get_Center()
    );
    var x = +((+float.x / +((this._state).get_UiRect()).get_Size().x));
    var y = +((+float.y / +((this._state).get_UiRect()).get_Size().y));
    this._parentRect = (this._state).get_UiRect().MemberwiseClone();
    (this._state.UiRect = uiRect.MemberwiseClone());
    this._state.Model = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.Model.MemberwiseClone(), $T0F().CreateTranslation(x, y, 0).MemberwiseClone()).MemberwiseClone();
  }; 

  function SceneRenderer_RenderShader (shaderComponent) {
    var effect = this.BuildMaterialFromShaderComponent(shaderComponent);
    (this._state).set_Effect(effect);
  }; 

  function SceneRenderer_RenderShaderEffect (shaderComponent) {
    (this._state).set_Effect(shaderComponent.ShaderEffectComponent$Effect$value);
    (this._rc).SetShaderEffect(shaderComponent.ShaderEffectComponent$Effect$value);
  }; 

  function SceneRenderer_RenderTransform (transform) {
    this._state.Model = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.Model.MemberwiseClone(), $T63().Matrix(transform).MemberwiseClone()).MemberwiseClone();
    (this._rc.Model = (this._state).get_Model().MemberwiseClone());
    (this._rc.View = this._view.MemberwiseClone());
  }; 

  function SceneRenderer_RenderWeight (weight) {
    var array = JSIL.Array.New($T0F(), $S1B().CallStatic($T55(), "Count$b1", [$asm0B.Fusee.Serialization.SceneNodeContainer], weight.Joints));

    for (var i = 0; i < ($S1B().CallStatic($T55(), "Count$b1", [$asm0B.Fusee.Serialization.SceneNodeContainer], weight.Joints) | 0); i = ((i + 1) | 0)) {
      var right = (weight.BindingMatrices).get_Item(i).MemberwiseClone();
      array[i] = $S18().CallStatic($T0F(), "op_Multiply", null, (this._boneMap).get_Item((weight.Joints).get_Item(i)).MemberwiseClone(), right.MemberwiseClone()).MemberwiseClone();
    }
    (this._rc).set_Bones(array);
  }; 

  function SceneRenderer_RenderXForm (xfc) {
    var flag = $T04().op_Inequality(
      ((this._state).get_UiRect()).get_Size(), 
      (this._parentRect).get_Size()
    );
    if (flag) {
      var x = +((+((this._state).get_UiRect()).get_Size().x / +(this._parentRect).get_Size().x));
      var y = +((+((this._state).get_UiRect()).get_Size().y / +(this._parentRect).get_Size().y));
      var right = $T0F().CreateScale(x, y, 1).MemberwiseClone();
    } else {
      right = $T0F().CreateScale(
        ((this._state).get_UiRect()).get_Size().x, 
        ((this._state).get_UiRect()).get_Size().y, 
        1
      ).MemberwiseClone();
    }
    this._state.Model = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.Model.MemberwiseClone(), right.MemberwiseClone()).MemberwiseClone();
    (this._rc.Model = (this._state).get_Model().MemberwiseClone());
    (this._rc.View = this._view.MemberwiseClone());
  }; 

  function SceneRenderer_RenderXFormText (xfc) {
    var x = +((1 / +((this._state).get_UiRect()).get_Size().x)) * +xfc.TextScaleFactor;
    var y = +((1 / +((this._state).get_UiRect()).get_Size().y)) * +xfc.TextScaleFactor;
    var right = $T0F().CreateScale(x, y, 1).MemberwiseClone();
    this._state.Model = $S18().CallStatic($T0F(), "op_Multiply", null, this._state.Model.MemberwiseClone(), right.MemberwiseClone()).MemberwiseClone();
    (this._rc.Model = (this._state).get_Model().MemberwiseClone());
    (this._rc.View = this._view.MemberwiseClone());
  }; 

  function SceneRenderer_set_DoRenderDeferred (value) {
    this._renderDeferred = (((this._rc).GetHardwareCapabilities($T6C().DefferedPossible) >>> 0) === 1) & value;
  }; 

  function SceneRenderer_set_DoRenderEnvMap (value) {
    this._renderEnvMap = (((this._rc).GetHardwareCapabilities($T6C().DefferedPossible) >>> 0) === 1) & value;
  }; 

  function SceneRenderer_set_DoRenderWithShadows (value) {
    this._renderWithShadows = (((this._rc).GetHardwareCapabilities($T6C().DefferedPossible) >>> 0) === 1) & value;
  }; 

  function SceneRenderer_set_ShadowMapSize (value) {
    this.SceneRenderer$ShadowMapSize$value = value.MemberwiseClone();
  }; 

  function SceneRenderer_SetContext (rc) {
    if (rc === null) {
      throw $S1C().Construct("rc");
    }
    var flag2 = rc !== this._rc;
    if (flag2) {
      this._rc = rc;
      this._boneMap = $S1D().Construct();
      this._shaderEffectMap = $S1E().Construct();
      var expr_4A = new ($T6E())();
      var expr_50 = new ($T6F())();
      expr_50.Color = $S03().Construct(0.5, 0.5, 0.5);
      expr_4A.Diffuse = expr_50;
      var expr_75 = new ($T70())();
      expr_75.Color = $S03().Construct(1, 1, 1);
      expr_75.Intensity = 0.5;
      expr_75.Shininess = 22;
      expr_4A.Specular = expr_75;
      this._defaultEffect = $T71().MakeShaderEffectFromMatComp(expr_4A, null);
      (this._rc).SetShaderEffect(this._defaultEffect);
      this.set_DoRenderDeferred(this._wantToRenderDeferred);
      this.set_DoRenderWithShadows(this._wantToRenderWithShadows);
      this.set_DoRenderEnvMap(this._wantToRenderEnvMap);
    }
  }; 

  function SceneRenderer_UpdateLightParamsInPixelShader (position, light, effect) {
    var flag = !light.Active;
    if (!flag) {
      (this._rc).SetFXParam($T32().Format("allLights[{0}].position", $T16().$Box(position)), light.PositionModelViewSpace.MemberwiseClone());
      (this._rc).SetFXParam($T32().Format("allLights[{0}].intensities", $T16().$Box(position)), light.Color.MemberwiseClone());
      (this._rc).SetFXParam($T32().Format("allLights[{0}].attenuation", $T16().$Box(position)), $T31().$Box(light.Attenuation));
      (this._rc).SetFXParam($T32().Format("allLights[{0}].ambientCoefficient", $T16().$Box(position)), $T31().$Box(light.AmbientCoefficient));
      (this._rc).SetFXParam($T32().Format("allLights[{0}].coneAngle", $T16().$Box(position)), $T31().$Box(light.ConeAngle));
      (this._rc).SetFXParam($T32().Format("allLights[{0}].coneDirection", $T16().$Box(position)), light.ConeDirectionModelViewSpace.MemberwiseClone());
      (this._rc).SetFXParam($T32().Format("allLights[{0}].lightType", $T16().$Box(position)), $T16().$Box(light.Type));
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.SceneVisitor"), 
      Name: "Fusee.Engine.Core.SceneRenderer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("Fusee.Serialization.SceneContainer"), $.Boolean, 
          $.Boolean
        ]), 
      SceneRenderer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneContainer")), 
      SceneRenderer__ctor$01
    );

    $.Method({Static:false, Public:true }, "AccumulateLight", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.LightComponent")), 
      SceneRenderer_AccumulateLight
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false}, "AddWeightComponentToMesh", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("Fusee.Serialization.Mesh"), $asm0B.TypeRef("Fusee.Serialization.WeightComponent")]), 
      SceneRenderer_AddWeightComponentToMesh
    );

    $.Method({Static:false, Public:true }, "Animate", 
      JSIL.MethodSignature.Void, 
      SceneRenderer_Animate
    );

    $.Method({Static:false, Public:false}, "BuildMaterialFromShaderComponent", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [$asm0B.TypeRef("Fusee.Serialization.ShaderComponent")]), 
      SceneRenderer_BuildMaterialFromShaderComponent
    );

    $.Method({Static:true , Public:false}, "CreateEffectParameterDeclaration", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.EffectParameterDeclaration"), [$asm0B.TypeRef("Fusee.Serialization.TypeContainer")]), 
      SceneRenderer_CreateEffectParameterDeclaration
    );

    $.Method({Static:false, Public:true }, "get_DoRenderDeferred", 
      JSIL.MethodSignature.Return($.Boolean), 
      SceneRenderer_get_DoRenderDeferred
    );

    $.Method({Static:false, Public:true }, "get_DoRenderEnvMap", 
      JSIL.MethodSignature.Return($.Boolean), 
      SceneRenderer_get_DoRenderEnvMap
    );

    $.Method({Static:false, Public:true }, "get_DoRenderWithShadows", 
      JSIL.MethodSignature.Return($.Boolean), 
      SceneRenderer_get_DoRenderWithShadows
    );

    $.Method({Static:false, Public:true }, "get_ShadowMapSize", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      SceneRenderer_get_ShadowMapSize
    );

    $.Method({Static:false, Public:true }, "InitAnimations", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.SceneContainer")), 
      SceneRenderer_InitAnimations
    );

    $.Method({Static:false, Public:false, Virtual:true }, "InitState", 
      JSIL.MethodSignature.Void, 
      SceneRenderer_InitState
    );

    $.Method({Static:false, Public:false}, "LightsToModelViewSpace", 
      JSIL.MethodSignature.Void, 
      SceneRenderer_LightsToModelViewSpace
    );

    $.Method({Static:true , Public:false}, "MakeShader", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [$asm0B.TypeRef("Fusee.Serialization.ShaderComponent")]), 
      SceneRenderer_MakeShader
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PopState", 
      JSIL.MethodSignature.Void, 
      SceneRenderer_PopState
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PushState", 
      JSIL.MethodSignature.Void, 
      SceneRenderer_PushState
    );

    $.Method({Static:false, Public:true }, "Render", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      SceneRenderer_Render
    );

    $.Method({Static:false, Public:true }, "RenderBone", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.BoneComponent")), 
      SceneRenderer_RenderBone
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderCanvasTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.CanvasTransformComponent")), 
      SceneRenderer_RenderCanvasTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderCurrentPass", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("Fusee.Serialization.Mesh"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]), 
      SceneRenderer_RenderCurrentPass
    );

    $.Method({Static:false, Public:true }, "RenderMesh", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      SceneRenderer_RenderMesh
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderRectTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.RectTransformComponent")), 
      SceneRenderer_RenderRectTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderShader", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.ShaderComponent")), 
      SceneRenderer_RenderShader
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderShaderEffect", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffectComponent")), 
      SceneRenderer_RenderShaderEffect
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.TransformComponent")), 
      SceneRenderer_RenderTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderWeight", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.WeightComponent")), 
      SceneRenderer_RenderWeight
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderXForm", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.XFormComponent")), 
      SceneRenderer_RenderXForm
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "RenderXFormText", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.XFormTextComponent")), 
      SceneRenderer_RenderXFormText
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false}, "set_DoRenderDeferred", 
      JSIL.MethodSignature.Action($.Boolean), 
      SceneRenderer_set_DoRenderDeferred
    );

    $.Method({Static:false, Public:false}, "set_DoRenderEnvMap", 
      JSIL.MethodSignature.Action($.Boolean), 
      SceneRenderer_set_DoRenderEnvMap
    );

    $.Method({Static:false, Public:false}, "set_DoRenderWithShadows", 
      JSIL.MethodSignature.Action($.Boolean), 
      SceneRenderer_set_DoRenderWithShadows
    );

    $.Method({Static:false, Public:true }, "set_ShadowMapSize", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      SceneRenderer_set_ShadowMapSize
    );

    $.Method({Static:false, Public:true }, "SetContext", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      SceneRenderer_SetContext
    );

    $.Method({Static:false, Public:false}, "UpdateLightParamsInPixelShader", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm04.TypeRef("Fusee.Engine.Core.LightResult"), 
          $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")
        ]), 
      SceneRenderer_UpdateLightParamsInPixelShader
    );

    $.Field({Static:true , Public:true }, "AllLightResults", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.LightComponent"), $asm04.TypeRef("Fusee.Engine.Core.LightResult")]));

    $.Field({Static:false, Public:false}, "_renderWithShadows", $.Boolean);

    $.Field({Static:false, Public:false}, "_renderDeferred", $.Boolean);

    $.Field({Static:false, Public:false}, "_renderEnvMap", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_wantToRenderWithShadows", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_wantToRenderDeferred", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_wantToRenderEnvMap", $.Boolean);

    $.Field({Static:false, Public:false}, "SceneRenderer$ShadowMapSize$value", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Field({Static:false, Public:false}, "_ctc", $asm0B.TypeRef("Fusee.Serialization.CanvasTransformComponent"));

    $.Field({Static:false, Public:false}, "_parentRect", $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"));

    $.Field({Static:false, Public:false}, "_boneMap", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false}, "_shaderEffectMap", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.ShaderComponent"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));

    $.Field({Static:false, Public:false}, "_animation", $asm0E.TypeRef("Fusee.Xirkit.Animation"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sc", $asm0B.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_rc", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.Field({Static:false, Public:false}, "_lightComponents", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.LightComponent"), $asm04.TypeRef("Fusee.Engine.Core.LightResult")]));

    $.Field({Static:false, Public:false}, "_scenePathDirectory", $.String);

    $.Field({Static:false, Public:false}, "_defaultEffect", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Field({Static:false, Public:false}, "_state", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer+RendererState"));

    $.Field({Static:false, Public:false}, "_view", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));


    function SceneRenderer__cctor () {
      $thisType.AllLightResults = $S00().Construct();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SceneRenderer__cctor
    );

    $.Property({Static:false, Public:true }, "ShadowMapSize", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Property({Static:false, Public:true }, "DoRenderWithShadows", $.Boolean);

    $.Property({Static:false, Public:true }, "DoRenderDeferred", $.Boolean);

    $.Property({Static:false, Public:true }, "DoRenderEnvMap", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.SceneRenderer+RendererState */ 

(function RendererState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0D.Fusee.Xene.CollapsingStateStack$b1.Of($asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0D.Fusee.Xene.CollapsingStateStack$b1.Of($asm0A.Fusee.Math.Core.MinMaxRect))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0D.Fusee.Xene.StateStack$b1.Of($asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0D.Fusee.Xene.VisitorState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };


  function RendererState__ctor () {
    this._model = new ($T00())(4);
    this._uiRect = new ($T01())(4);
    this._canvasXForm = new ($T00())(4);
    this._effect = new ($T02())(8);
    $T03().prototype._ctor.call(this);
    this.RegisterState(this._model);
    this.RegisterState(this._canvasXForm);
    this.RegisterState(this._effect);
    this.RegisterState(this._uiRect);
  }; 

  function RendererState_get_CanvasXForm () {
    return (this._canvasXForm).get_Tos();
  }; 

  function RendererState_get_Effect () {
    return (this._effect).get_Tos();
  }; 

  function RendererState_get_Model () {
    return (this._model).get_Tos();
  }; 

  function RendererState_get_UiRect () {
    return (this._uiRect).get_Tos();
  }; 

  function RendererState_set_CanvasXForm (value) {
    (this._canvasXForm).set_Tos(value.MemberwiseClone());
  }; 

  function RendererState_set_Effect (value) {
    (this._effect).set_Tos(value);
  }; 

  function RendererState_set_Model (value) {
    (this._model).set_Tos(value.MemberwiseClone());
  }; 

  function RendererState_set_UiRect (value) {
    (this._uiRect).set_Tos(value.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.VisitorState"), 
      Name: "Fusee.Engine.Core.SceneRenderer+RendererState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RendererState__ctor
    );

    $.Method({Static:false, Public:true }, "get_CanvasXForm", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RendererState_get_CanvasXForm
    );

    $.Method({Static:false, Public:true }, "get_Effect", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      RendererState_get_Effect
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RendererState_get_Model
    );

    $.Method({Static:false, Public:true }, "get_UiRect", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")), 
      RendererState_get_UiRect
    );

    $.Method({Static:false, Public:true }, "set_CanvasXForm", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RendererState_set_CanvasXForm
    );

    $.Method({Static:false, Public:true }, "set_Effect", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      RendererState_set_Effect
    );

    $.Method({Static:false, Public:true }, "set_Model", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      RendererState_set_Model
    );

    $.Method({Static:false, Public:true }, "set_UiRect", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")), 
      RendererState_set_UiRect
    );

    $.Field({Static:false, Public:false}, "_model", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false}, "_uiRect", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")]));

    $.Field({Static:false, Public:false}, "_canvasXForm", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false}, "_effect", $asm0D.TypeRef("Fusee.Xene.StateStack`1", [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));

    $.Property({Static:false, Public:true }, "Model", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "UiRect", $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"));

    $.Property({Static:false, Public:true }, "CanvasXForm", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "Effect", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.SceneRenderer+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.AnimationComponent)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lInitAnimations$gb__35_0 (c) {
    return true;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.SceneRenderer+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lInitAnimations$gb__35_0", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("Fusee.Serialization.AnimationComponent")]), 
      $l$gc_$lInitAnimations$gb__35_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__35_0", $asm0F.TypeRef("System.Predicate`1", [$asm0B.TypeRef("Fusee.Serialization.AnimationComponent")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Core.LightResult */ 

(function LightResult$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Core.LightResult", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Active", $.Boolean);

    $.Field({Static:false, Public:true }, "Position", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Color", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Attenuation", $.Single);

    $.Field({Static:false, Public:true }, "AmbientCoefficient", $.Single);

    $.Field({Static:false, Public:true }, "Type", $.Int32);

    $.Field({Static:false, Public:true }, "ConeAngle", $.Single);

    $.Field({Static:false, Public:true }, "ConeDirection", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "ModelMatrix", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:true }, "PositionWorldSpace", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "ConeDirectionWorldSpace", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "PositionModelViewSpace", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "ConeDirectionModelViewSpace", $asm0A.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.LightSetupState */ 

(function LightSetupState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0D.Fusee.Xene.CollapsingStateStack$b1.Of($asm0A.Fusee.Math.Core.float4x4))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0D.Fusee.Xene.VisitorState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };


  function LightSetupState__ctor () {
    this._model = new ($T00())(4);
    $T01().prototype._ctor.call(this);
    this.RegisterState(this._model);
  }; 

  function LightSetupState_get_Model () {
    return (this._model).get_Tos();
  }; 

  function LightSetupState_set_Model (value) {
    (this._model).set_Tos(value.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.VisitorState"), 
      Name: "Fusee.Engine.Core.LightSetupState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LightSetupState__ctor
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      LightSetupState_get_Model
    );

    $.Method({Static:false, Public:true }, "set_Model", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      LightSetupState_set_Model
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_model", $asm0D.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm0A.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Property({Static:false, Public:true }, "Model", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.LightSetup */ 

(function LightSetup$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0D.Fusee.Xene.Viserator$b2.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult), $asm04.Fusee.Engine.Core.LightSetupState))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.LightSetupState)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.Fusee.Serialization.LightComponent)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.LightResult)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0D.Fusee.Xene.ViseratorBase$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult)))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.Fusee.Serialization.TransformComponent)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0D.Fusee.Xene.ContainerExtensions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };


  function LightSetup__ctor () {
    this.FoundLightResults = $S00().Construct();
    $T01().prototype._ctor.call(this);
  }; 

  function LightSetup_InitState () {
    $T01().prototype.InitState.call(this);
    (this.State.Model = $T03().Identity.MemberwiseClone());
  }; 

  function LightSetup_OnLight (lightComponent) {
    var lightResult = new ($T05())();
    lightResult.Type = ((lightComponent.Type).valueOf() | 0);
    lightResult.Color = lightComponent.Color.MemberwiseClone();
    lightResult.ConeAngle = +lightComponent.ConeAngle;
    lightResult.ConeDirection = lightComponent.ConeDirection.MemberwiseClone();
    lightResult.AmbientCoefficient = +lightComponent.AmbientCoefficient;
    lightResult.ModelMatrix = (this.State).get_Model().MemberwiseClone();
    lightResult.Position = lightComponent.Position.MemberwiseClone();
    lightResult.PositionWorldSpace = $S01().CallStatic($T03(), "op_Multiply", null, (this.State).get_Model(), lightComponent.Position);
    lightResult.ConeDirectionWorldSpace = $S01().CallStatic($T03(), "op_Multiply", null, (this.State).get_Model(), lightComponent.ConeDirection);
    lightResult.Active = lightComponent.Active;
    lightResult.Attenuation = +lightComponent.Attenuation;
    var value = lightResult;
    $T06().prototype.YieldItem.call(this, new ($T07())(lightComponent, value.MemberwiseClone()));
  }; 

  function LightSetup_OnTransform (xform) {
    this.State.Model = $S02().CallStatic($T03(), "op_Multiply", null, this.State.Model.MemberwiseClone(), $T09().Matrix(xform).MemberwiseClone()).MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Fusee.Xene.Viserator`2", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0B.TypeRef("Fusee.Serialization.LightComponent"), $asm04.TypeRef("Fusee.Engine.Core.LightResult")]), $asm04.TypeRef("Fusee.Engine.Core.LightSetupState")]), 
      Name: "Fusee.Engine.Core.LightSetup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LightSetup__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "InitState", 
      JSIL.MethodSignature.Void, 
      LightSetup_InitState
    );

    $.Method({Static:false, Public:true }, "OnLight", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.LightComponent")), 
      LightSetup_OnLight
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:true }, "OnTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.TransformComponent")), 
      LightSetup_OnTransform
    )
      .Attribute($asm0D.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Field({Static:false, Public:true }, "FoundLightResults", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.LightComponent"), $asm04.TypeRef("Fusee.Engine.Core.LightResult")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Core.MeshProbs */ 

(function MeshProbs$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Core.MeshProbs", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "HasVertices", $.Boolean);

    $.Field({Static:false, Public:true }, "HasNormals", $.Boolean);

    $.Field({Static:false, Public:true }, "HasUVs", $.Boolean);

    $.Field({Static:false, Public:true }, "HasColors", $.Boolean);

    $.Field({Static:false, Public:true }, "HasWeightMap", $.Boolean);

    $.Field({Static:false, Public:true }, "HasTangents", $.Boolean);

    $.Field({Static:false, Public:true }, "HasBiTangents", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Core.MaterialProbs */ 

(function MaterialProbs$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Core.MaterialProbs", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "HasDiffuse", $.Boolean);

    $.Field({Static:false, Public:true }, "HasDiffuseTexture", $.Boolean);

    $.Field({Static:false, Public:true }, "HasSpecular", $.Boolean);

    $.Field({Static:false, Public:true }, "HasSpecularTexture", $.Boolean);

    $.Field({Static:false, Public:true }, "HasEmissive", $.Boolean);

    $.Field({Static:false, Public:true }, "HasEmissiveTexture", $.Boolean);

    $.Field({Static:false, Public:true }, "HasBump", $.Boolean);

    $.Field({Static:false, Public:true }, "HasApplyLightString", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Core.MaterialType */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Core.MaterialType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Material: 0, 
    MaterialLightComponent: 1, 
    MaterialPbrComponent: 2, 
  }
);

/* enum Fusee.Engine.Core.Type */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Core.Type", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Mat3: 0, 
    Mat4: 1, 
    Vec2: 2, 
    Vec3: 3, 
    Vec4: 4, 
    Boolean: 5, 
    Float: 6, 
    Int: 7, 
    Sampler2D: 8, 
    Void: 9, 
  }
);

/* class Fusee.Engine.Core.GLSL */ 

(function GLSL$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm0F.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0F.System.String))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Func$b2.Of($asm0F.System.String, $asm0F.System.String))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.GLSL_$l$gc)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.String, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [
        $asm0F.System.String, $asm0F.System.Object, 
        $asm0F.System.String
      ]))) ();
  };


  function GLSL__ctor () {
  }; 

  function GLSL_CreateIn (type, varName) {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), ["in  ", $thisType.DecodeType(type), " ", varName, ";"]));
  }; 

  function GLSL_CreateMethod (returnType, methodName, methodParams, method) {
    var arg_21_1 = null;
    var arg_21_0 = method;
    if ((arg_21_1 = $T06().$l$g9__4_0) === null) {
      arg_21_1 = $T06().$l$g9__4_0 = $T04().New($T06().$l$g9, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.GLSL_$l$gc, "$lCreateMethod$gb__4_0", $S00(), false, false));
    }
    method = $T07().ToList$b1($T01())($S01().CallStatic($T07(), "Select$b2", [$asm0F.System.String, $asm0F.System.String], arg_21_0, arg_21_1));
    var list = $S02().Construct();
    list.Add(JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), [$thisType.DecodeType(returnType), " ", methodName, "(", JSIL.JoinStrings(", ", methodParams), ")"])));
    list.Add("{");
    var list2 = list;
    $T08().prototype.AddRange.call(list2, method);
    list2.Add("}");
    return JSIL.JoinEnumerable("\n", list2);
  }; 

  function GLSL_CreateOut (type, varName) {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), ["out ", $thisType.DecodeType(type), " ", varName, ";"]));
  }; 

  function GLSL_CreateUniform (type, varName) {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), ["uniform ", $thisType.DecodeType(type), " ", varName, ";"]));
  }; 

  function GLSL_CreateVar (type, varName) {
    return ($thisType.DecodeType(type) + " " + varName);
  }; 

  function GLSL_DecodeType (type) {
    switch (type.valueOf()) {
      case 0: 
        var result = "mat3";
        break;

      case 1: 
        result = "mat4";
        break;

      case 2: 
        result = "vec2";
        break;

      case 3: 
        result = "vec3";
        break;

      case 4: 
        result = "vec4";
        break;

      case 5: 
        result = "bool";
        break;

      case 6: 
        result = "float";
        break;

      case 7: 
        result = "int";
        break;

      case 8: 
        result = "sampler2D";
        break;

      case 9: 
        result = "void";
        break;

      default: 
        throw $S03().Construct("type", type, null);

    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.GLSL", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GLSL__ctor
    );

    $.Method({Static:true , Public:true }, "CreateIn", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Fusee.Engine.Core.Type"), $.String]), 
      GLSL_CreateIn
    );

    $.Method({Static:true , Public:true }, "CreateMethod", 
      new JSIL.MethodSignature($.String, [
          $asm04.TypeRef("Fusee.Engine.Core.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])
        ]), 
      GLSL_CreateMethod
    );

    $.Method({Static:true , Public:true }, "CreateOut", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Fusee.Engine.Core.Type"), $.String]), 
      GLSL_CreateOut
    );

    $.Method({Static:true , Public:true }, "CreateUniform", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Fusee.Engine.Core.Type"), $.String]), 
      GLSL_CreateUniform
    );

    $.Method({Static:true , Public:true }, "CreateVar", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Fusee.Engine.Core.Type"), $.String]), 
      GLSL_CreateVar
    );

    $.Method({Static:true , Public:false}, "DecodeType", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Fusee.Engine.Core.Type")]), 
      GLSL_DecodeType
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.GLSL+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lCreateMethod$gb__4_0 (x) {
    return JSIL.ConcatString("   ", x);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.GLSL+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lCreateMethod$gb__4_0", 
      new JSIL.MethodSignature($.String, [$.String]), 
      $l$gc_$lCreateMethod$gb__4_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__4_0", $asm0F.TypeRef("System.Func`2", [$.String, $.String]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ShaderCodeBuilder */ 

(function ShaderCodeBuilder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.Fusee.Serialization.WeightComponent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.LightingCalculationMethod)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.MaterialType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Engine.Core.GLSL)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Engine.Core.Type)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialLightComponent)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm0F.System.String))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0B.Fusee.Serialization.MaterialPBRComponent)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Globalization.NumberFormatInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.LightComponent, $asm04.Fusee.Engine.Core.LightResult))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm03.Fusee.Engine.Common.Helper)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Engine.Core.MeshProbs)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float4))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm04.Fusee.Engine.Core.MaterialProbs)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.Fusee.Base.Core.ImageData)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0B.Fusee.Serialization.MatChannelContainer)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0B.Fusee.Serialization.SpecularChannelContainer)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.String), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Globalization.NumberFormatInfo, null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.Texture, [$asm00.Fusee.Base.Common.IImageData]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.ShaderCodeBuilder, [
        $asm0B.Fusee.Serialization.MaterialComponent, $asm0B.Fusee.Serialization.Mesh, 
        $asm0B.Fusee.Serialization.WeightComponent, $asm0F.System.Boolean
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.ShaderCodeBuilder, [
        $asm0B.Fusee.Serialization.MaterialComponent, $asm0B.Fusee.Serialization.Mesh, 
        $asm04.Fusee.Engine.Core.LightingCalculationMethod, $asm0B.Fusee.Serialization.WeightComponent, 
        $asm0F.System.Boolean
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Exception, [$asm0F.System.String]))) ();
  };


  function ShaderCodeBuilder__ctor$00 (mc, mesh, wc, renderWithShadows) {
    $thisType.prototype._ctor.call(this, 
      mc, 
      mesh, 
      $T04().SIMPLE, 
      wc, 
      renderWithShadows
    );
  }; 

  function ShaderCodeBuilder__ctor$01 (mc, mesh, lightingCalculation, wc, renderWithShadows) {
    this._materialType = $T05().Material;
    this._lightingCalculationMethod = lightingCalculation;
    this._renderWithShadows = renderWithShadows;
    this._vertexShader = $S00().Construct();
    this._pixelShader = $S00().Construct();
    this.AnalyzeMaterialType(mc);
    this.AnalyzeMesh(mesh, wc);
    this.AnalzyeMaterialParams(mc);
    this.CreateVertexShader(wc);
    this.ShaderCodeBuilder$VS$value = (JSIL.JoinEnumerable("\n", this._vertexShader));
    this.CreatePixelShader_new(mc);
    this.ShaderCodeBuilder$PS$value = (JSIL.JoinEnumerable("\n", this._pixelShader));
  }; 

  function ShaderCodeBuilder_AddAmbientLightMethod () {
    var expr_06 = $S00().Construct();
    expr_06.Add((
        this._materialProbs.HasEmissive
           ? ("return vec3(" + $thisType.ShaderCodeBuilder$EmissiveColorName$value + " * ambientCoefficient);")
           : "return vec3(ambientCoefficient);")
    );
    var method = expr_06;
    (this._pixelShader).Add($T09().CreateMethod($T0A().Vec3, "ambientLighting", JSIL.Array.New($T07(), [$T09().CreateVar($T0A().Float, "ambientCoefficient")]), method));
  }; 

  function ShaderCodeBuilder_AddApplyLightMethod (mc) {
    if (this._materialProbs.HasApplyLightString) {
      var arg_2A_0 = this._pixelShader;
      var expr_1E = $T0B().$As(mc);
      arg_2A_0.Add((
          (expr_1E !== null)
             ? expr_1E.ApplyLightString
             : null)
      );
    }
    var list = $S00().Construct();
    list.Add("///////////////// BUMP MAPPING, tangent space ///////////////////");
    list.Add(JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), ["vec3 N = ((texture(BumpTexture, vUV).rgb * 2.0) - 1.0f) * vec3(", $thisType.ShaderCodeBuilder$BumpIntensityName$value, ", ", $thisType.ShaderCodeBuilder$BumpIntensityName$value, ", 1.0);"])));
    list.Add("N = (N.x * vec3(vT)) + (N.y * vB) + (N.z * vMVNormal);");
    list.Add("N = normalize(N);");
    var list2 = list;
    var expr_A1 = $S00().Construct();
    expr_A1.Add("vec3 N = normalize(vMVNormal);");
    var list3 = expr_A1;
    var expr_B3 = $S00().Construct();
    expr_B3.Add("vec3 L = normalize(position - viewPos.xyz);");
    expr_B3.Add("vec3 V = normalize(-viewPos.xyz);");
    expr_B3.Add("if(lightType == 3) {");
    expr_B3.Add("   L = normalize(vec3(0.0,0.0,-1.0));");
    expr_B3.Add("   V = vec3(0);");
    expr_B3.Add("}");
    expr_B3.Add("vec2 o_texcoords = vUV;");
    expr_B3.Add("");
    expr_B3.Add((
        this._renderWithShadows
           ? "float shadowFactor = CalcShadowFactor(shadowLight);"
           : "")
    );
    expr_B3.Add("");
    expr_B3.Add("vec3 Idif = vec3(0);");
    expr_B3.Add("vec3 Ispe = vec3(0);");
    expr_B3.Add("");
    var collection = expr_B3;
    var list4 = $S00().Construct();
    $T06().prototype.AddRange.call(list4, (
        this._materialProbs.HasBump
           ? list2
           : list3)
    );
    $T06().prototype.AddRange.call(list4, collection);
    if (this._materialProbs.HasDiffuse) {
      list4.Add("Idif = diffuseLighting(N, L, intensities);");
    }
    if (this._materialProbs.HasSpecular) {
      list4.Add("Ispe = specularLighting(N, L, V, intensities);");
    }
    list4.Add("vec3 Iamb = ambientLighting(ambientCoefficient);");
    var expr_1D0 = $S00().Construct();
    expr_1D0.Add("float distanceToLight = distance(position, viewPos.xyz) / 1000.0;");
    expr_1D0.Add("float distance = pow(distanceToLight/attenuation,4.0);");
    expr_1D0.Add("float att = (clamp(1.0 - pow(distance,2.0), 0.0, 1.0)) / (pow(distance,2.0) + 1.0);");
    var collection2 = expr_1D0;
    var expr_1FB = $S00().Construct();
    expr_1FB.Add((
        this._renderWithShadows
           ? "result = Iamb + (1.0-shadowFactor) * (Idif + Ispe) * att;"
           : "result = Iamb + (Idif + Ispe) * att;")
    );
    var collection3 = expr_1FB;
    var expr_21D = $S00().Construct();
    expr_21D.Add((
        this._renderWithShadows
           ? "result = Iamb + (1.0-shadowFactor) * (Idif + Ispe);"
           : "result =  Iamb + (Idif + Ispe);")
    );
    var collection4 = expr_21D;
    var expr_23F = $S00().Construct();
    expr_23F.Add("float lightToSurfaceAngle = dot(-L, coneDirection);");
    expr_23F.Add("if (lightToSurfaceAngle > coneAngle)");
    expr_23F.Add("{");
    expr_23F.Add("   att *= (1.0 - (1.0 - lightToSurfaceAngle) * 1.0/(1.0 - coneAngle));");
    expr_23F.Add("}");
    expr_23F.Add("else");
    expr_23F.Add("{");
    expr_23F.Add("   att = 0.0;");
    expr_23F.Add("}");
    expr_23F.Add("");
    expr_23F.Add((
        this._renderWithShadows
           ? "result = Iamb + (1.0-shadowFactor) * (Idif + Ispe) * att;"
           : "result = Iamb + (Idif + Ispe) * att;")
    );
    var collection5 = expr_23F;
    var list5 = $S00().Construct();
    $T06().prototype.AddRange.call(list5, list4);
    list5.Add("vec3 result = vec3(0);");
    list5.Add("");
    $T06().prototype.AddRange.call(list5, collection2);
    list5.Add("if(lightType == 0) // PointLight");
    list5.Add("{");
    $T06().prototype.AddRange.call(list5, collection3);
    list5.Add("}");
    list5.Add("else if(lightType == 1 || lightType == 3) // ParallelLight or LegacyLight");
    list5.Add("{");
    $T06().prototype.AddRange.call(list5, collection4);
    list5.Add("}");
    list5.Add("else if(lightType == 2) // SpotLight");
    list5.Add("{");
    $T06().prototype.AddRange.call(list5, collection5);
    list5.Add("}");
    list5.Add("");
    list5.Add("");
    list5.Add("return result;");
    (this._pixelShader).Add($T09().CreateMethod($T0A().Vec3, "ApplyLight", JSIL.Array.New($T07(), [$T09().CreateVar($T0A().Vec3, "position"), $T09().CreateVar($T0A().Vec3, "intensities"), $T09().CreateVar($T0A().Vec3, "coneDirection"), $T09().CreateVar($T0A().Float, "attenuation"), $T09().CreateVar($T0A().Float, "ambientCoefficient"), $T09().CreateVar($T0A().Float, "coneAngle"), $T09().CreateVar($T0A().Int, "lightType")]), list5));
  }; 

  function ShaderCodeBuilder_AddDiffuseLightMethod () {
    var expr_06 = $S00().Construct();
    expr_06.Add("float diffuseTerm = dot(N, L);");
    var list = expr_06;
    if (this._materialProbs.HasDiffuseTexture) {
      list.Add(JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), ["return texture(", $thisType.ShaderCodeBuilder$DiffuseTextureName$value, ", vUV).rgb * ", $thisType.ShaderCodeBuilder$DiffuseMixName$value, " *  max(diffuseTerm, 0.0) * intensities;"])));
    } else {
      list.Add(("return (" + $thisType.ShaderCodeBuilder$DiffuseColorName$value + " * intensities * diffuseTerm);"));
    }
    (this._pixelShader).Add($T09().CreateMethod($T0A().Vec3, "diffuseLighting", JSIL.Array.New($T07(), [$T09().CreateVar($T0A().Vec3, "N"), $T09().CreateVar($T0A().Vec3, "L"), $T09().CreateVar($T0A().Vec3, "intensities")]), list));
  }; 

  function ShaderCodeBuilder_AddPbrSpecularLightMethod (mc) {
    var expr_06 = $S01().Construct();
    expr_06.set_NumberDecimalSeparator(".");
    var provider = expr_06;
    var num2 = mc.RoughnessValue + 1E-07;
    var num3 = mc.FresnelReflectance + 1E-07;
    var num4 = mc.DiffuseFraction + 1E-07;
    var expr_41 = $S00().Construct();
    expr_41.Add(("float roughnessValue = " + $T0F().__Type__.__PublicInterface__.$ToString(num2, null, provider) + "; // 0 : smooth, 1: rough"));
    expr_41.Add(("float F0 = " + $T0F().__Type__.__PublicInterface__.$ToString(num3, null, provider) + "; // fresnel reflectance at normal incidence"));
    expr_41.Add(("float k = 1.0-" + $T0F().__Type__.__PublicInterface__.$ToString(num4, null, provider) + "; // metaliness"));
    expr_41.Add("float NdotL = max(dot(N, L), 0.0);");
    expr_41.Add("float specular = 0.0;");
    expr_41.Add("float BlinnSpecular = 0.0;");
    expr_41.Add("");
    expr_41.Add("if(dot(N, L) > 0.0)");
    expr_41.Add("{");
    expr_41.Add("     // calculate intermediary values");
    expr_41.Add("     vec3 H = normalize(L + V);");
    expr_41.Add("     float NdotH = max(dot(N, H), 0.0); ");
    expr_41.Add("     float NdotV = max(dot(N, L), 0.0); // note: this is NdotL, which is the same value");
    expr_41.Add("     float VdotH = max(dot(V, H), 0.0);");
    expr_41.Add("     float mSquared = roughnessValue * roughnessValue;");
    expr_41.Add("");
    expr_41.Add("");
    expr_41.Add("");
    expr_41.Add("");
    expr_41.Add("     // -- geometric attenuation");
    expr_41.Add("     //[Schlick's approximation of Smith's shadow equation]");
    expr_41.Add("     float k= roughnessValue * sqrt(2.0/3.14159265);");
    expr_41.Add("     float one_minus_k= 1.0 - k;");
    expr_41.Add("     float geoAtt = ( NdotL / (NdotL * one_minus_k + k) ) * ( NdotV / (NdotV * one_minus_k + k) );");
    expr_41.Add("");
    expr_41.Add("     // -- roughness (or: microfacet distribution function)");
    expr_41.Add("     // Trowbridge-Reitz or GGX, GTR2");
    expr_41.Add("     float a2 = mSquared * mSquared;");
    expr_41.Add("     float d = (NdotH * a2 - NdotH) * NdotH + 1.0;");
    expr_41.Add("     float roughness = a2 / (3.14 * d * d);");
    expr_41.Add("");
    expr_41.Add("     // -- fresnel");
    expr_41.Add("     // [Schlick 1994, An Inexpensive BRDF Model for Physically-Based Rendering]");
    expr_41.Add("     float fresnel = pow(1.0 - VdotH, 5.0);");
    expr_41.Add(("    fresnel = clamp((50.0 * " + $thisType.ShaderCodeBuilder$SpecularColorName$value + ".y), 0.0, 1.0) * fresnel + (1.0 - fresnel);"));
    expr_41.Add("");
    expr_41.Add("     specular = (fresnel * geoAtt * roughness) / (NdotV * NdotL * 3.14);");
    expr_41.Add("     ");
    expr_41.Add("}");
    expr_41.Add("");
    expr_41.Add(("return intensities * " + $thisType.ShaderCodeBuilder$SpecularColorName$value + " * (k + specular * (1.0-k));"));
    var method = expr_41;
    (this._pixelShader).Add($T09().CreateMethod($T0A().Vec3, "specularLighting", JSIL.Array.New($T07(), [$T09().CreateVar($T0A().Vec3, "N"), $T09().CreateVar($T0A().Vec3, "L"), $T09().CreateVar($T0A().Vec3, "V"), $T09().CreateVar($T0A().Vec3, "intensities")]), method));
  }; 

  function ShaderCodeBuilder_AddPixelAttributes () {
    (this._pixelShader).Add($thisType.EsPrecision());
    var num = ((
      (($T12().AllLightResults.get_Count() | 0) > 0)
         ? $T12().AllLightResults.get_Count()
         : 1)
     | 0);
    (this._pixelShader).Add($T07().Format("#define MAX_LIGHTS {0}", $T10().$Box(num)));
    (this._pixelShader).Add($thisType.LightStructDeclaration());
    (this._pixelShader).Add($T09().CreateIn($T0A().Vec3, "vViewDir"));
    if (this._meshProbs.HasNormals) {
      (this._pixelShader).Add($T09().CreateIn($T0A().Vec3, "vMVNormal"));
      (this._pixelShader).Add($T09().CreateIn($T0A().Vec3, "vNormal"));
    }
    if (this._meshProbs.HasTangents && this._meshProbs.HasBiTangents) {
      (this._pixelShader).Add($T09().CreateIn($T0A().Vec4, "vT"));
      (this._pixelShader).Add($T09().CreateIn($T0A().Vec3, "vB"));
    }
    if (this._meshProbs.HasUVs) {
      (this._pixelShader).Add($T09().CreateIn($T0A().Vec2, "vUV"));
    }
    (this._pixelShader).Add($T09().CreateIn($T0A().Vec3, "viewPos"));
    if (this._renderWithShadows) {
      (this._pixelShader).Add($T09().CreateIn($T0A().Vec4, "shadowLight"));
    }
    (this._pixelShader).Add($T09().CreateOut($T0A().Vec4, "fragmentColor"));
  }; 

  function ShaderCodeBuilder_AddPixelBody () {
    var expr_06 = $S00().Construct();
    expr_06.Add("vec3 result = vec3(0.0);");
    expr_06.Add("for(int i = 0; i < MAX_LIGHTS;i++)");
    expr_06.Add("{");
    expr_06.Add("vec3 currentPosition = allLights[i].position;");
    expr_06.Add("vec3 currentIntensities = allLights[i].intensities;");
    expr_06.Add("vec3 currentConeDirection = allLights[i].coneDirection;");
    expr_06.Add("float currentAttenuation = allLights[i].attenuation;");
    expr_06.Add("float currentAmbientCoefficient = allLights[i].ambientCoefficient;");
    expr_06.Add("float currentConeAngle = allLights[i].coneAngle;");
    expr_06.Add("int currentLightType = allLights[i].lightType; ");
    expr_06.Add("result += ApplyLight(currentPosition, currentIntensities, currentConeDirection, ");
    expr_06.Add("currentAttenuation, currentAmbientCoefficient, currentConeAngle, currentLightType);");
    expr_06.Add("}");
    expr_06.Add("fragmentColor = vec4(result, 1.0);");
    var method = expr_06;
    (this._pixelShader).Add($T09().CreateMethod($T0A().Void, "main", JSIL.Array.New($T07(), [""]), method));
  }; 

  function ShaderCodeBuilder_AddPixelUniforms () {
    (this._pixelShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_MV"));
    (this._pixelShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_IMV"));
    (this._pixelShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_IV"));
    if (this._materialProbs.HasBump) {
      (this._pixelShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_ITMV"));
    }
    (this._pixelShader).Add($T09().CreateUniform($T0A().Sampler2D, "firstPassTex"));
  }; 

  function ShaderCodeBuilder_AddShadowMethod () {
    var expr_06 = $S00().Construct();
    expr_06.Add("// perform perspective divide for ortographic!");
    expr_06.Add("vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;");
    expr_06.Add("projCoords = projCoords * 0.5 + 0.5; // map to [0,1]");
    expr_06.Add("float currentDepth = projCoords.z;");
    expr_06.Add("float pcfDepth = texture(firstPassTex, projCoords.xy).r;");
    expr_06.Add("float shadow = 0.0;");
    expr_06.Add("shadow = currentDepth - 0.01 > pcfDepth ? 1.0 : 0.0;");
    expr_06.Add("if (projCoords.z > 1.0)");
    expr_06.Add("   shadow = 0.0;");
    expr_06.Add("");
    expr_06.Add("return shadow;");
    var method = expr_06;
    (this._pixelShader).Add($T09().CreateMethod($T0A().Float, "CalcShadowFactor", JSIL.Array.New($T07(), [$T09().CreateVar($T0A().Vec4, "fragPosLightSpace")]), method));
  }; 

  function ShaderCodeBuilder_AddSpecularLightMethod () {
    var list = $S00().Construct();
    list.Add("float specularTerm = 0.0;");
    list.Add("if(dot(N, L) > 0.0)");
    list.Add("{");
    list.Add("   // half vector");
    list.Add("   vec3 H = normalize(V + L);");
    list.Add(("  specularTerm = pow(max(0.0, dot(H, N)), " + $thisType.ShaderCodeBuilder$SpecularShininessName$value + ");"));
    list.Add("}");
    list.Add(JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), ["return (", $thisType.ShaderCodeBuilder$SpecularColorName$value, " * ", $thisType.ShaderCodeBuilder$SpecularIntensityName$value, " * intensities) * specularTerm;"])));
    var method = list;
    (this._pixelShader).Add($T09().CreateMethod($T0A().Vec3, "specularLighting", JSIL.Array.New($T07(), [$T09().CreateVar($T0A().Vec3, "N"), $T09().CreateVar($T0A().Vec3, "L"), $T09().CreateVar($T0A().Vec3, "V"), $T09().CreateVar($T0A().Vec3, "intensities")]), method));
  }; 

  function ShaderCodeBuilder_AddTabsToMethods (/* ref */ list) {
    var flag = false;

  $loop0: 
    for (var i = 0; i < ((list.get()).get_Count() | 0); i = ((i + 1) | 0)) {
      var str = (list.get()).get_Item(i);
      var flag2 = (((list.get()).get_Item(i).indexOf("}") != -1));
      if (flag2) {
        break $loop0;
      }
      var flag3 = flag;
      if (flag3) {
        (list.get()).set_Item(i, JSIL.ConcatString("   ", str));
      }
      var flag4 = (((list.get()).get_Item(i).indexOf("{") != -1));
      if (flag4) {
        flag = true;
      }
    }
  }; 

  function ShaderCodeBuilder_AddTextureChannels () {
    if (this._materialProbs.HasSpecular) {
      (this._pixelShader).Add($T09().CreateUniform($T0A().Float, $thisType.ShaderCodeBuilder$SpecularShininessName$value));
      (this._pixelShader).Add($T09().CreateUniform($T0A().Float, $thisType.ShaderCodeBuilder$SpecularIntensityName$value));
      (this._pixelShader).Add($T09().CreateUniform($T0A().Vec3, $thisType.ShaderCodeBuilder$SpecularColorName$value));
    }
    if (this._materialProbs.HasBump) {
      (this._pixelShader).Add($T09().CreateUniform($T0A().Sampler2D, $thisType.ShaderCodeBuilder$BumpTextureName$value));
      (this._pixelShader).Add($T09().CreateUniform($T0A().Float, $thisType.ShaderCodeBuilder$BumpIntensityName$value));
    }
    if (this._materialProbs.HasDiffuse) {
      (this._pixelShader).Add($T09().CreateUniform($T0A().Vec3, $thisType.ShaderCodeBuilder$DiffuseColorName$value));
    }
    if (this._materialProbs.HasDiffuseTexture) {
      (this._pixelShader).Add($T09().CreateUniform($T0A().Sampler2D, $thisType.ShaderCodeBuilder$DiffuseTextureName$value));
      (this._pixelShader).Add($T09().CreateUniform($T0A().Float, $thisType.ShaderCodeBuilder$DiffuseMixName$value));
    }
    if (this._materialProbs.HasEmissive) {
      (this._pixelShader).Add($T09().CreateUniform($T0A().Vec3, $thisType.ShaderCodeBuilder$EmissiveColorName$value));
    }
    if (this._materialProbs.HasEmissiveTexture) {
      (this._pixelShader).Add($T09().CreateUniform($T0A().Sampler2D, $thisType.ShaderCodeBuilder$EmissiveTextureName$value));
      (this._pixelShader).Add($T09().CreateUniform($T0A().Float, $thisType.ShaderCodeBuilder$EmissiveMixName$value));
    }
  }; 

  function ShaderCodeBuilder_AddVertexAttributes (wc) {
    if (this._meshProbs.HasWeightMap) {
      (this._vertexShader).Add($T07().Format("#define BONES {0}", $T10().$Box((wc.Joints).get_Count())));
    }
    if (this._meshProbs.HasVertices) {
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec3, "fuVertex"));
    }
    if (this._meshProbs.HasTangents && this._meshProbs.HasBiTangents) {
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec4, $T14().TangentAttribName));
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec3, $T14().BitangentAttribName));
      (this._vertexShader).Add($T09().CreateOut($T0A().Vec4, "vT"));
      (this._vertexShader).Add($T09().CreateOut($T0A().Vec3, "vB"));
    }
    if (this._materialProbs.HasSpecular) {
      (this._vertexShader).Add($T09().CreateOut($T0A().Vec3, "vViewDir"));
    }
    if (this._meshProbs.HasWeightMap) {
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec4, "fuBoneIndex"));
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec4, "fuBoneWeight"));
    }
    if (this._meshProbs.HasNormals) {
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec3, "fuNormal"));
      (this._vertexShader).Add($T09().CreateOut($T0A().Vec3, "vNormal"));
    }
    if (this._meshProbs.HasUVs) {
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec2, "fuUV"));
      (this._vertexShader).Add($T09().CreateOut($T0A().Vec2, "vUV"));
    }
    if (this._meshProbs.HasColors) {
      (this._vertexShader).Add($T09().CreateIn($T0A().Vec4, "fuColor"));
      (this._vertexShader).Add($T09().CreateOut($T0A().Vec4, "vColors"));
    }
    (this._vertexShader).Add($T09().CreateOut($T0A().Vec3, "viewPos"));
    (this._vertexShader).Add($T09().CreateOut($T0A().Vec3, "vMVNormal"));
    if (this._renderWithShadows) {
      (this._vertexShader).Add($T09().CreateOut($T0A().Vec4, "shadowLight"));
    }
  }; 

  function ShaderCodeBuilder_AddVertexMain () {
    (this._vertexShader).Add("void main() {");
    if (this._meshProbs.HasNormals && this._meshProbs.HasWeightMap) {
      (this._vertexShader).Add("vec4 newVertex;");
      (this._vertexShader).Add("vec4 newNormal;");
      (this._vertexShader).Add("newVertex = (FUSEE_BONES[int(fuBoneIndex.x)] * vec4(fuVertex, 1.0) ) * fuBoneWeight.x ;");
      (this._vertexShader).Add("newNormal = (FUSEE_BONES[int(fuBoneIndex.x)] * vec4(fuNormal, 0.0)) * fuBoneWeight.x;");
      (this._vertexShader).Add("newVertex = (FUSEE_BONES[int(fuBoneIndex.y)] * vec4(fuVertex, 1.0)) * fuBoneWeight.y + newVertex;");
      (this._vertexShader).Add("newNormal = (FUSEE_BONES[int(fuBoneIndex.y)] * vec4(fuNormal, 0.0)) * fuBoneWeight.y + newNormal;");
      (this._vertexShader).Add("newVertex = (FUSEE_BONES[int(fuBoneIndex.z)] * vec4(fuVertex, 1.0)) * fuBoneWeight.z + newVertex;");
      (this._vertexShader).Add("newNormal = (FUSEE_BONES[int(fuBoneIndex.z)] * vec4(fuNormal, 0.0)) * fuBoneWeight.z + newNormal;");
      (this._vertexShader).Add("newVertex = (FUSEE_BONES[int(fuBoneIndex.w)] * vec4(fuVertex, 1.0)) * fuBoneWeight.w + newVertex;");
      (this._vertexShader).Add("newNormal = (FUSEE_BONES[int(fuBoneIndex.w)] * vec4(fuNormal, 0.0)) * fuBoneWeight.w + newNormal;");
      (this._vertexShader).Add("vMVNormal = mat3(FUSEE_ITMV) * newNormal.xyz;");
    }
    if (this._materialProbs.HasSpecular) {
      (this._vertexShader).Add("vec3 viewPos = FUSEE_IMV[3].xyz;");
      (this._vertexShader).Add((
          this._meshProbs.HasWeightMap
             ? "vViewDir = normalize(viewPos - vec3(newVertex));"
             : "vViewDir = normalize(viewPos - fuVertex);")
      );
    }
    if (this._meshProbs.HasUVs) {
      (this._vertexShader).Add("vUV = fuUV;");
    }
    if (this._meshProbs.HasNormals && !this._meshProbs.HasWeightMap) {
      (this._vertexShader).Add("vMVNormal = normalize(mat3(FUSEE_ITMV) * fuNormal);");
    }
    (this._vertexShader).Add("viewPos = (FUSEE_MV * vec4(fuVertex, 1.0)).xyz;");
    if (this._renderWithShadows) {
      (this._vertexShader).Add("shadowLight = shadowMVP * viewPos;");
    }
    if (this._meshProbs.HasTangents && this._meshProbs.HasBiTangents) {
      (this._vertexShader).Add(("vT = " + $T14().TangentAttribName + ";"));
      (this._vertexShader).Add(("vB = " + $T14().BitangentAttribName + ";"));
    }
    (this._vertexShader).Add((
        this._meshProbs.HasWeightMap
           ? "gl_Position = FUSEE_MVP * vec4(vec3(newVertex), 1.0);"
           : "gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);")
    );
    (this._vertexShader).Add("}");
  }; 

  function ShaderCodeBuilder_AddVertexUniforms (wc) {
    (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_MVP"));
    if (this._meshProbs.HasNormals) {
      (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_ITMV"));
    }
    if (this._materialProbs.HasSpecular) {
      (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_IMV"));
    }
    if (this._meshProbs.HasWeightMap) {
      (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_V"));
      (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_P"));
      (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_IMV"));
      (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_BONES[BONES]"));
    }
    (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "FUSEE_MV"));
    if (this._renderWithShadows) {
      (this._vertexShader).Add($T09().CreateUniform($T0A().Mat4, "shadowMVP"));
    }
  }; 

  function ShaderCodeBuilder_AnalyzeMaterialType (mc) {
    var flag = $T15().op_Equality(JSIL.GetType(mc), $T0D().__Type__);
    if (flag) {
      this._materialType = $T05().MaterialPbrComponent;
    }
    var flag2 = $T15().op_Equality(JSIL.GetType(mc), $T0B().__Type__);
    if (flag2) {
      this._materialType = $T05().MaterialLightComponent;
    }
  }; 

  function ShaderCodeBuilder_AnalyzeMesh (mesh, wc) {
    var meshProbs = new ($T16())();
    meshProbs.HasVertices = (mesh === null) || 
    ((mesh.get_Vertices() !== null) && 
      ((mesh.get_Vertices().length >>> 0) > (0 >>> 0)));
    meshProbs.HasNormals = (mesh === null) || 
    ((mesh.get_Normals() !== null) && 
      ((mesh.get_Normals().length >>> 0) > (0 >>> 0)));
    meshProbs.HasUVs = (mesh === null) || 
    ((mesh.get_UVs() !== null) && 
      ((mesh.get_UVs().length >>> 0) > (0 >>> 0)));
    meshProbs.HasColors = false;
    meshProbs.HasWeightMap = wc !== null;
    meshProbs.HasTangents = (mesh === null) || 
    ((mesh.get_Tangents() !== null) && 
      ((mesh.get_Tangents().length | 0) > 1));
    meshProbs.HasBiTangents = (mesh === null) || 
    ((mesh.get_BiTangents() !== null) && 
      ((mesh.get_BiTangents().length | 0) > 1));
    this._meshProbs = meshProbs.MemberwiseClone();
  }; 

  function ShaderCodeBuilder_AnalzyeMaterialParams (mc) {
    var materialProbs = new ($T1B())();
    materialProbs.HasDiffuse = mc.get_HasDiffuse();
    materialProbs.HasDiffuseTexture = mc.get_HasDiffuse() && 
    (mc.Diffuse.Texture !== null);
    materialProbs.HasSpecular = mc.get_HasSpecular();
    materialProbs.HasSpecularTexture = mc.get_HasSpecular() && 
    (mc.Specular.Texture !== null);
    materialProbs.HasEmissive = mc.get_HasEmissive();
    materialProbs.HasEmissiveTexture = mc.get_HasEmissive() && 
    (mc.Emissive.Texture !== null);
    materialProbs.HasBump = mc.get_HasBump();
    if (this._materialType === $T05().MaterialLightComponent) {
      var expr_AF = $T0B().$As(mc);
      var arg_C3_1 = $T07().IsNullOrEmpty((
          (expr_AF !== null)
             ? expr_AF.ApplyLightString
             : null)
      );
    } else {
      arg_C3_1 = false;
    }
    materialProbs.HasApplyLightString = arg_C3_1;
    this._materialProbs = materialProbs.MemberwiseClone();
  }; 

  function ShaderCodeBuilder_AssembleEffectParamers (mc) {
    var list = $S02().Construct();
    var hasDiffuse = mc.get_HasDiffuse();
    if (hasDiffuse) {
      var item = new ($T1D())();
      item.Name = $thisType.ShaderCodeBuilder$DiffuseColorName$value;
      item.Value = mc.Diffuse.Color.MemberwiseClone();
      list.Add(item.MemberwiseClone());
      var flag = mc.Diffuse.Texture !== null;
      if (flag) {
        var arg_88_0 = list;
        item = new ($T1D())();
        item.Name = $thisType.ShaderCodeBuilder$DiffuseMixName$value;
        item.Value = $T1E().$Box(mc.Diffuse.Mix);
        arg_88_0.Add(item.MemberwiseClone());
        var arg_BB_0 = list;
        item = new ($T1D())();
        item.Name = $thisType.ShaderCodeBuilder$DiffuseTextureName$value;
        item.Value = $thisType.LoadTexture(mc.Diffuse.Texture);
        arg_BB_0.Add(item.MemberwiseClone());
      }
    }
    var hasSpecular = mc.get_HasSpecular();
    if (hasSpecular) {
      var arg_100_0 = list;
      item = new ($T1D())();
      item.Name = $thisType.ShaderCodeBuilder$SpecularColorName$value;
      item.Value = mc.Specular.Color.MemberwiseClone();
      arg_100_0.Add(item.MemberwiseClone());
      var arg_133_0 = list;
      item = new ($T1D())();
      item.Name = $thisType.ShaderCodeBuilder$SpecularShininessName$value;
      item.Value = $T1E().$Box(mc.Specular.Shininess);
      arg_133_0.Add(item.MemberwiseClone());
      var arg_166_0 = list;
      item = new ($T1D())();
      item.Name = $thisType.ShaderCodeBuilder$SpecularIntensityName$value;
      item.Value = $T1E().$Box(mc.Specular.Intensity);
      arg_166_0.Add(item.MemberwiseClone());
      var flag2 = mc.Specular.Texture !== null;
      if (flag2) {
        var arg_1AE_0 = list;
        item = new ($T1D())();
        item.Name = $thisType.ShaderCodeBuilder$SpecularMixName$value;
        item.Value = $T1E().$Box(mc.Specular.Mix);
        arg_1AE_0.Add(item.MemberwiseClone());
        var arg_1E1_0 = list;
        item = new ($T1D())();
        item.Name = $thisType.ShaderCodeBuilder$SpecularTextureName$value;
        item.Value = $thisType.LoadTexture(mc.Specular.Texture);
        arg_1E1_0.Add(item.MemberwiseClone());
      }
    }
    var hasEmissive = mc.get_HasEmissive();
    if (hasEmissive) {
      var arg_226_0 = list;
      item = new ($T1D())();
      item.Name = $thisType.ShaderCodeBuilder$EmissiveColorName$value;
      item.Value = mc.Emissive.Color.MemberwiseClone();
      arg_226_0.Add(item.MemberwiseClone());
      var flag3 = mc.Emissive.Texture !== null;
      if (flag3) {
        var arg_26E_0 = list;
        item = new ($T1D())();
        item.Name = $thisType.ShaderCodeBuilder$EmissiveMixName$value;
        item.Value = $T1E().$Box(mc.Emissive.Mix);
        arg_26E_0.Add(item.MemberwiseClone());
        var arg_2A1_0 = list;
        item = new ($T1D())();
        item.Name = $thisType.ShaderCodeBuilder$EmissiveTextureName$value;
        item.Value = $thisType.LoadTexture(mc.Emissive.Texture);
        arg_2A1_0.Add(item.MemberwiseClone());
      }
    }
    var hasBump = mc.get_HasBump();
    if (hasBump) {
      var arg_2E3_0 = list;
      item = new ($T1D())();
      item.Name = $thisType.ShaderCodeBuilder$BumpIntensityName$value;
      item.Value = $T1E().$Box(mc.Bump.Intensity);
      arg_2E3_0.Add(item.MemberwiseClone());
      var arg_316_0 = list;
      item = new ($T1D())();
      item.Name = $thisType.ShaderCodeBuilder$BumpTextureName$value;
      item.Value = $thisType.LoadTexture(mc.Bump.Texture);
      arg_316_0.Add(item.MemberwiseClone());
    }
    var arg_363_0 = list;
    item = new ($T1D())();
    item.Name = (JSIL.ConcatString("allLights[", $T10().$Box(0), "].position"));
    item.Value = $S03().Construct(0, 0, -1);
    arg_363_0.Add(item.MemberwiseClone());
    var arg_3A0_0 = list;
    item = new ($T1D())();
    item.Name = (JSIL.ConcatString("allLights[", $T10().$Box(0), "].intensities"));
    item.Value = $T1F().Zero.MemberwiseClone();
    arg_3A0_0.Add(item.MemberwiseClone());
    var arg_3DD_0 = list;
    item = new ($T1D())();
    item.Name = (JSIL.ConcatString("allLights[", $T10().$Box(0), "].attenuation"));
    item.Value = $T1E().$Box(0);
    arg_3DD_0.Add(item.MemberwiseClone());
    var arg_41A_0 = list;
    item = new ($T1D())();
    item.Name = (JSIL.ConcatString("allLights[", $T10().$Box(0), "].ambientCoefficient"));
    item.Value = $T1E().$Box(0);
    arg_41A_0.Add(item.MemberwiseClone());
    var arg_457_0 = list;
    item = new ($T1D())();
    item.Name = (JSIL.ConcatString("allLights[", $T10().$Box(0), "].coneAngle"));
    item.Value = $T1E().$Box(0);
    arg_457_0.Add(item.MemberwiseClone());
    var arg_494_0 = list;
    item = new ($T1D())();
    item.Name = (JSIL.ConcatString("allLights[", $T10().$Box(0), "].coneDirection"));
    item.Value = $T1F().Zero.MemberwiseClone();
    arg_494_0.Add(item.MemberwiseClone());
    var arg_4CD_0 = list;
    item = new ($T1D())();
    item.Name = (JSIL.ConcatString("allLights[", $T10().$Box(0), "].lightType"));
    item.Value = $T10().$Box(1);
    arg_4CD_0.Add(item.MemberwiseClone());
    var arg_4FA_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_M";
    item.Value = $T20().Identity.MemberwiseClone();
    arg_4FA_0.Add(item.MemberwiseClone());
    var arg_527_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_MV";
    item.Value = $T20().Identity.MemberwiseClone();
    arg_527_0.Add(item.MemberwiseClone());
    var arg_554_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_MVP";
    item.Value = $T20().Identity.MemberwiseClone();
    arg_554_0.Add(item.MemberwiseClone());
    var arg_581_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_ITMV";
    item.Value = $T20().Identity.MemberwiseClone();
    arg_581_0.Add(item.MemberwiseClone());
    var arg_5AE_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_IMV";
    item.Value = $T20().Identity.MemberwiseClone();
    arg_5AE_0.Add(item.MemberwiseClone());
    var arg_5DB_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_V";
    item.Value = $T20().Identity.MemberwiseClone();
    arg_5DB_0.Add(item.MemberwiseClone());
    var arg_608_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_P";
    item.Value = $T20().Identity.MemberwiseClone();
    arg_608_0.Add(item.MemberwiseClone());
    var arg_63D_0 = list;
    item = new ($T1D())();
    item.Name = "FUSEE_BONES";
    item.Value = JSIL.Array.New($T20(), [$T20().Identity]);
    arg_63D_0.Add(item.MemberwiseClone());
    return list;
  }; 

  function ShaderCodeBuilder_CreatePixelShader_new (mc) {
    (this._pixelShader).Add($thisType.Version());
    this.AddPixelAttributes();
    this.AddPixelUniforms();
    this.AddTextureChannels();
    var materialType = this._materialType;
    if (materialType > $T05().MaterialLightComponent) {
      if (materialType !== $T05().MaterialPbrComponent) {
        throw $S04().Construct($T07().Format("Material Type unknown or incorrect: {0}", this._materialType));
      }
      if (this._lightingCalculationMethod !== $T04().ADVANCED) {
        this.AddAmbientLightMethod();
        if (this._materialProbs.HasDiffuse) {
          this.AddDiffuseLightMethod();
        }
        if (this._materialProbs.HasSpecular) {
          this.AddSpecularLightMethod();
        }
      } else {
        this.AddAmbientLightMethod();
        if (this._materialProbs.HasDiffuse) {
          this.AddDiffuseLightMethod();
        }
        if (this._materialProbs.HasSpecular) {
          this.AddPbrSpecularLightMethod($T0D().$As(mc));
        }
      }
    } else {
      this.AddAmbientLightMethod();
      if (this._materialProbs.HasDiffuse) {
        this.AddDiffuseLightMethod();
      }
      if (this._materialProbs.HasSpecular) {
        this.AddSpecularLightMethod();
      }
    }
    if (this._renderWithShadows) {
      this.AddShadowMethod();
    }
    this.AddApplyLightMethod(mc);
    this.AddPixelBody();
    $thisType.AddTabsToMethods(/* ref */ new JSIL.MemberReference(this, "_pixelShader"));
  }; 

  function ShaderCodeBuilder_CreateVertexShader (wc) {
    (this._vertexShader).Add($thisType.Version());
    this.AddVertexAttributes(wc);
    this.AddVertexUniforms(wc);
    this.AddVertexMain();
    $thisType.AddTabsToMethods(/* ref */ new JSIL.MemberReference(this, "_vertexShader"));
  }; 

  function ShaderCodeBuilder_EsPrecision () {
    return "precision highp float; \n";
  }; 

  function ShaderCodeBuilder_get_BumpIntensityName () {
    return $thisType.ShaderCodeBuilder$BumpIntensityName$value;
  }; 

  function ShaderCodeBuilder_get_BumpTextureName () {
    return $thisType.ShaderCodeBuilder$BumpTextureName$value;
  }; 

  function ShaderCodeBuilder_get_DiffuseColorName () {
    return $thisType.ShaderCodeBuilder$DiffuseColorName$value;
  }; 

  function ShaderCodeBuilder_get_DiffuseMixName () {
    return $thisType.ShaderCodeBuilder$DiffuseMixName$value;
  }; 

  function ShaderCodeBuilder_get_DiffuseTextureName () {
    return $thisType.ShaderCodeBuilder$DiffuseTextureName$value;
  }; 

  function ShaderCodeBuilder_get_EmissiveColorName () {
    return $thisType.ShaderCodeBuilder$EmissiveColorName$value;
  }; 

  function ShaderCodeBuilder_get_EmissiveMixName () {
    return $thisType.ShaderCodeBuilder$EmissiveMixName$value;
  }; 

  function ShaderCodeBuilder_get_EmissiveTextureName () {
    return $thisType.ShaderCodeBuilder$EmissiveTextureName$value;
  }; 

  function ShaderCodeBuilder_get_LightColorName () {
    return $thisType.ShaderCodeBuilder$LightColorName$value;
  }; 

  function ShaderCodeBuilder_get_LightDirectionName () {
    return $thisType.ShaderCodeBuilder$LightDirectionName$value;
  }; 

  function ShaderCodeBuilder_get_LightIntensityName () {
    return $thisType.ShaderCodeBuilder$LightIntensityName$value;
  }; 

  function ShaderCodeBuilder_get_PS () {
    return this.ShaderCodeBuilder$PS$value;
  }; 

  function ShaderCodeBuilder_get_SpecularColorName () {
    return $thisType.ShaderCodeBuilder$SpecularColorName$value;
  }; 

  function ShaderCodeBuilder_get_SpecularIntensityName () {
    return $thisType.ShaderCodeBuilder$SpecularIntensityName$value;
  }; 

  function ShaderCodeBuilder_get_SpecularMixName () {
    return $thisType.ShaderCodeBuilder$SpecularMixName$value;
  }; 

  function ShaderCodeBuilder_get_SpecularShininessName () {
    return $thisType.ShaderCodeBuilder$SpecularShininessName$value;
  }; 

  function ShaderCodeBuilder_get_SpecularTextureName () {
    return $thisType.ShaderCodeBuilder$SpecularTextureName$value;
  }; 

  function ShaderCodeBuilder_get_VS () {
    return this.ShaderCodeBuilder$VS$value;
  }; 

  function ShaderCodeBuilder_LightStructDeclaration () {
    return "\n            struct Light \n            {\n                vec3 position;\n                vec3 intensities;\n                vec3 coneDirection;\n                float attenuation;\n                float ambientCoefficient;\n                float coneAngle;\n                int lightType;\n            };\n            uniform Light allLights[MAX_LIGHTS];\n            ";
  }; 

  function ShaderCodeBuilder_LoadTexture (path) {
    var imageData = $T23().Get$b1($T22())(path);
    return $S05().Construct(imageData);
  }; 

  function ShaderCodeBuilder_MakeShaderEffect (diffuseColor, specularColor, shininess) {
    var expr_06 = new ($T00())();
    var expr_0C = new ($T25())();
    expr_0C.Color = diffuseColor.MemberwiseClone();
    expr_06.Diffuse = expr_0C;
    var expr_1E = new ($T26())();
    expr_1E.Color = specularColor.MemberwiseClone();
    expr_1E.Shininess = +shininess;
    expr_06.Specular = expr_1E;
    return $thisType.MakeShaderEffectFromMatComp(expr_06, null);
  }; 

  function ShaderCodeBuilder_MakeShaderEffectFromMatComp (mc, wc) {
    var mc2 = null, mc3 = null;
    var shaderCodeBuilder = null;
    var flag = $T15().op_Equality(JSIL.GetType(mc), $T0B().__Type__);
    if (flag) {
      var flag2 = (mc2 = $T0B().$As(mc)) !== null;
      if (flag2) {
        shaderCodeBuilder = $S06().Construct(mc2, null, wc, false);
      }
    } else {
      var flag3 = $T15().op_Equality(JSIL.GetType(mc), $T0D().__Type__);
      if (flag3) {
        var flag4 = (mc3 = $T0D().$As(mc)) !== null;
        if (flag4) {
          shaderCodeBuilder = $S07().Construct(mc3, null, $T04().SIMPLE, wc, false);
        }
      } else {
        shaderCodeBuilder = $S06().Construct(mc, null, wc, false);
      }
    }
    var effectParameters = $thisType.AssembleEffectParamers(mc);
    var flag5 = shaderCodeBuilder === null;
    if (flag5) {
      throw $S08().Construct("Material could not be evaluated or be built!");
    }
    var expr_A8 = JSIL.Array.New($T2A(), 1);
    var effectPassDeclaration = new ($T2A())();
    effectPassDeclaration.VS = shaderCodeBuilder.ShaderCodeBuilder$VS$value;
    effectPassDeclaration.PS = shaderCodeBuilder.ShaderCodeBuilder$PS$value;
    var expr_D3 = new ($T2B())();
    expr_D3.set_ZEnable(true);
    expr_D3.set_AlphaBlendEnable(false);
    effectPassDeclaration.StateSet = expr_D3;
    expr_A8[0] = effectPassDeclaration.MemberwiseClone();
    return new ($T2C())(expr_A8, effectParameters);
  }; 

  function ShaderCodeBuilder_Version () {
    return "#version 300 es\n";
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ShaderCodeBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("Fusee.Serialization.MaterialComponent"), $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
          $asm0B.TypeRef("Fusee.Serialization.WeightComponent"), $.Boolean
        ]), 
      ShaderCodeBuilder__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("Fusee.Serialization.MaterialComponent"), $asm0B.TypeRef("Fusee.Serialization.Mesh"), 
          $asm04.TypeRef("Fusee.Engine.Core.LightingCalculationMethod"), $asm0B.TypeRef("Fusee.Serialization.WeightComponent"), 
          $.Boolean
        ]), 
      ShaderCodeBuilder__ctor$01
    );

    $.Method({Static:false, Public:false}, "AddAmbientLightMethod", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddAmbientLightMethod
    );

    $.Method({Static:false, Public:false}, "AddApplyLightMethod", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialComponent")), 
      ShaderCodeBuilder_AddApplyLightMethod
    );

    $.Method({Static:false, Public:false}, "AddDiffuseLightMethod", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddDiffuseLightMethod
    );

    $.Method({Static:false, Public:false}, "AddPbrSpecularLightMethod", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialPBRComponent")), 
      ShaderCodeBuilder_AddPbrSpecularLightMethod
    );

    $.Method({Static:false, Public:false}, "AddPixelAttributes", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddPixelAttributes
    );

    $.Method({Static:false, Public:false}, "AddPixelBody", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddPixelBody
    );

    $.Method({Static:false, Public:false}, "AddPixelUniforms", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddPixelUniforms
    );

    $.Method({Static:false, Public:false}, "AddShadowMethod", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddShadowMethod
    );

    $.Method({Static:false, Public:false}, "AddSpecularLightMethod", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddSpecularLightMethod
    );

    $.Method({Static:true , Public:false}, "AddTabsToMethods", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.List`1", [$.String])])), 
      ShaderCodeBuilder_AddTabsToMethods
    );

    $.Method({Static:false, Public:false}, "AddTextureChannels", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddTextureChannels
    );

    $.Method({Static:false, Public:false}, "AddVertexAttributes", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.WeightComponent")), 
      ShaderCodeBuilder_AddVertexAttributes
    );

    $.Method({Static:false, Public:false}, "AddVertexMain", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder_AddVertexMain
    );

    $.Method({Static:false, Public:false}, "AddVertexUniforms", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.WeightComponent")), 
      ShaderCodeBuilder_AddVertexUniforms
    );

    $.Method({Static:false, Public:false}, "AnalyzeMaterialType", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialComponent")), 
      ShaderCodeBuilder_AnalyzeMaterialType
    );

    $.Method({Static:false, Public:false}, "AnalyzeMesh", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("Fusee.Serialization.Mesh"), $asm0B.TypeRef("Fusee.Serialization.WeightComponent")]), 
      ShaderCodeBuilder_AnalyzeMesh
    );

    $.Method({Static:false, Public:false}, "AnalzyeMaterialParams", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialComponent")), 
      ShaderCodeBuilder_AnalzyeMaterialParams
    );

    $.Method({Static:true , Public:false}, "AssembleEffectParamers", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.EffectParameterDeclaration")]), [$asm0B.TypeRef("Fusee.Serialization.MaterialComponent")]), 
      ShaderCodeBuilder_AssembleEffectParamers
    );

    $.Method({Static:false, Public:false}, "CreatePixelShader_new", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.MaterialComponent")), 
      ShaderCodeBuilder_CreatePixelShader_new
    );

    $.Method({Static:false, Public:false}, "CreateVertexShader", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.WeightComponent")), 
      ShaderCodeBuilder_CreateVertexShader
    );

    $.Method({Static:true , Public:false}, "EsPrecision", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_EsPrecision
    );

    $.Method({Static:true , Public:true }, "get_BumpIntensityName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_BumpIntensityName
    );

    $.Method({Static:true , Public:true }, "get_BumpTextureName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_BumpTextureName
    );

    $.Method({Static:true , Public:true }, "get_DiffuseColorName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_DiffuseColorName
    );

    $.Method({Static:true , Public:true }, "get_DiffuseMixName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_DiffuseMixName
    );

    $.Method({Static:true , Public:true }, "get_DiffuseTextureName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_DiffuseTextureName
    );

    $.Method({Static:true , Public:true }, "get_EmissiveColorName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_EmissiveColorName
    );

    $.Method({Static:true , Public:true }, "get_EmissiveMixName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_EmissiveMixName
    );

    $.Method({Static:true , Public:true }, "get_EmissiveTextureName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_EmissiveTextureName
    );

    $.Method({Static:true , Public:true }, "get_LightColorName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_LightColorName
    );

    $.Method({Static:true , Public:true }, "get_LightDirectionName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_LightDirectionName
    );

    $.Method({Static:true , Public:true }, "get_LightIntensityName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_LightIntensityName
    );

    $.Method({Static:false, Public:true }, "get_PS", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_PS
    );

    $.Method({Static:true , Public:true }, "get_SpecularColorName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_SpecularColorName
    );

    $.Method({Static:true , Public:true }, "get_SpecularIntensityName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_SpecularIntensityName
    );

    $.Method({Static:true , Public:true }, "get_SpecularMixName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_SpecularMixName
    );

    $.Method({Static:true , Public:true }, "get_SpecularShininessName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_SpecularShininessName
    );

    $.Method({Static:true , Public:true }, "get_SpecularTextureName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_SpecularTextureName
    );

    $.Method({Static:false, Public:true }, "get_VS", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_get_VS
    );

    $.Method({Static:true , Public:false}, "LightStructDeclaration", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_LightStructDeclaration
    );

    $.Method({Static:true , Public:false}, "LoadTexture", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Texture"), [$.String]), 
      ShaderCodeBuilder_LoadTexture
    );

    $.Method({Static:true , Public:true }, "MakeShaderEffect", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $.Single
        ]), 
      ShaderCodeBuilder_MakeShaderEffect
    );

    $.Method({Static:true , Public:true }, "MakeShaderEffectFromMatComp", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [$asm0B.TypeRef("Fusee.Serialization.MaterialComponent"), $asm0B.TypeRef("Fusee.Serialization.WeightComponent")]), 
      ShaderCodeBuilder_MakeShaderEffectFromMatComp
    );

    $.Method({Static:true , Public:false}, "Version", 
      JSIL.MethodSignature.Return($.String), 
      ShaderCodeBuilder_Version
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_lightingCalculationMethod", $asm04.TypeRef("Fusee.Engine.Core.LightingCalculationMethod"));

    $.Field({Static:false, Public:false}, "_materialProbs", $asm04.TypeRef("Fusee.Engine.Core.MaterialProbs"));

    $.Field({Static:false, Public:false}, "_meshProbs", $asm04.TypeRef("Fusee.Engine.Core.MeshProbs"));

    $.Field({Static:false, Public:false}, "_materialType", $asm04.TypeRef("Fusee.Engine.Core.MaterialType"));

    $.Field({Static:false, Public:false}, "_vertexShader", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "_pixelShader", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_renderWithShadows", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ShaderCodeBuilder$VS$value", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ShaderCodeBuilder$PS$value", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$DiffuseColorName$value", $.String, "DiffuseColor");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$SpecularColorName$value", $.String, "SpecularColor");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$EmissiveColorName$value", $.String, "EmissiveColor");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$DiffuseTextureName$value", $.String, "DiffuseTexture");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$SpecularTextureName$value", $.String, "SpecularTexture");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$EmissiveTextureName$value", $.String, "EmissiveTexture");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$BumpTextureName$value", $.String, "BumpTexture");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$DiffuseMixName$value", $.String, "DiffuseMix");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$SpecularMixName$value", $.String, "SpecularMix");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$EmissiveMixName$value", $.String, "EmissiveMix");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$SpecularShininessName$value", $.String, "SpecularShininess");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$SpecularIntensityName$value", $.String, "SpecularIntensity");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$BumpIntensityName$value", $.String, "BumpIntensity");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$LightDirectionName$value", $.String, "LightDirection");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$LightColorName$value", $.String, "LightColor");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ShaderCodeBuilder$LightIntensityName$value", $.String, "LightIntensity");


    function ShaderCodeBuilder__cctor () {
      $thisType.ShaderCodeBuilder$DiffuseColorName$value = "DiffuseColor";
      $thisType.ShaderCodeBuilder$SpecularColorName$value = "SpecularColor";
      $thisType.ShaderCodeBuilder$EmissiveColorName$value = "EmissiveColor";
      $thisType.ShaderCodeBuilder$DiffuseTextureName$value = "DiffuseTexture";
      $thisType.ShaderCodeBuilder$SpecularTextureName$value = "SpecularTexture";
      $thisType.ShaderCodeBuilder$EmissiveTextureName$value = "EmissiveTexture";
      $thisType.ShaderCodeBuilder$BumpTextureName$value = "BumpTexture";
      $thisType.ShaderCodeBuilder$DiffuseMixName$value = "DiffuseMix";
      $thisType.ShaderCodeBuilder$SpecularMixName$value = "SpecularMix";
      $thisType.ShaderCodeBuilder$EmissiveMixName$value = "EmissiveMix";
      $thisType.ShaderCodeBuilder$SpecularShininessName$value = "SpecularShininess";
      $thisType.ShaderCodeBuilder$SpecularIntensityName$value = "SpecularIntensity";
      $thisType.ShaderCodeBuilder$BumpIntensityName$value = "BumpIntensity";
      $thisType.ShaderCodeBuilder$LightDirectionName$value = "LightDirection";
      $thisType.ShaderCodeBuilder$LightColorName$value = "LightColor";
      $thisType.ShaderCodeBuilder$LightIntensityName$value = "LightIntensity";
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ShaderCodeBuilder__cctor
    );

    $.Property({Static:false, Public:true }, "VS", $.String);

    $.Property({Static:false, Public:true }, "PS", $.String);

    $.Property({Static:true , Public:true }, "DiffuseColorName", $.String);

    $.Property({Static:true , Public:true }, "SpecularColorName", $.String);

    $.Property({Static:true , Public:true }, "EmissiveColorName", $.String);

    $.Property({Static:true , Public:true }, "DiffuseTextureName", $.String);

    $.Property({Static:true , Public:true }, "SpecularTextureName", $.String);

    $.Property({Static:true , Public:true }, "EmissiveTextureName", $.String);

    $.Property({Static:true , Public:true }, "BumpTextureName", $.String);

    $.Property({Static:true , Public:true }, "DiffuseMixName", $.String);

    $.Property({Static:true , Public:true }, "SpecularMixName", $.String);

    $.Property({Static:true , Public:true }, "EmissiveMixName", $.String);

    $.Property({Static:true , Public:true }, "SpecularShininessName", $.String);

    $.Property({Static:true , Public:true }, "SpecularIntensityName", $.String);

    $.Property({Static:true , Public:true }, "BumpIntensityName", $.String);

    $.Property({Static:true , Public:true }, "LightDirectionName", $.String);

    $.Property({Static:true , Public:true }, "LightColorName", $.String);

    $.Property({Static:true , Public:true }, "LightIntensityName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Core.EffectPassDeclaration */ 

(function EffectPassDeclaration$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Core.EffectPassDeclaration", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "StateSet", $asm04.TypeRef("Fusee.Engine.Core.RenderStateSet"));

    $.Field({Static:false, Public:true }, "VS", $.String);

    $.Field({Static:false, Public:true }, "PS", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Core.EffectParameterDeclaration */ 

(function EffectParameterDeclaration$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Core.EffectParameterDeclaration", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ShaderEffect */ 

(function ShaderEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.Fusee.Serialization.Suid)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.Dynamic.DynamicObject)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Object))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm04.Fusee.Engine.Core.ShaderEffect_ShaderEffectEventArgs))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect_ShaderEffectEventArgs)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect_ShaderEffectChangedEnum)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm15.System.Dynamic.GetMemberBinder)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm15.System.Dynamic.SetMemberBinder)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String, $asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Object), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function ShaderEffect__ctor (effectPasses, effectParameters) {
    this.SessionUniqueIdentifier = $T02().GenerateSuid();
    $T03().prototype._ctor.call(this);
    var flag = (effectPasses === null) || 
    ((effectPasses.length | 0) === 0);
    if (flag) {
      throw $S00().Construct("effectPasses", "must not be null and must contain at least one pass");
    }
    var num = (effectPasses.length | 0);
    this.States = JSIL.Array.New($T07(), num);
    this.VertexShaderSrc = JSIL.Array.New($T08(), num);
    this.PixelShaderSrc = JSIL.Array.New($T08(), num);

    for (var i = 0; i < num; i = ((i + 1) | 0)) {
      this.States[i] = effectPasses[i].StateSet;
      this.VertexShaderSrc[i] = effectPasses[i].VS;
      this.PixelShaderSrc[i] = effectPasses[i].PS;
    }
    this.ParamDecl = $S01().Construct();
    var flag2 = effectParameters !== null;
    if (flag2) {
      var enumerator = $IM00().Call(effectParameters, null);
      try {

        while ($IM01().Call(enumerator, null)) {
          var current = $IM02().Call(enumerator, null).MemberwiseClone();
          (this.ParamDecl).Add(current.Name, current.Value);
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
    }
  }; 

  function ShaderEffect_add_ShaderEffectChanged (value) {
    var eventHandler = this.ShaderEffectChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0F().Combine(eventHandler2, value);
      eventHandler = $T10().CompareExchange$b1($T0E())(/* ref */ new JSIL.MemberReference(this, "ShaderEffectChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function ShaderEffect_Dispose () {
    var expr_07 = this.ShaderEffectChanged;
    if (expr_07 !== null) {
      expr_07(this, new ($T11())(this, $T12().DISPOSE, null, null));
    }
  }; 

  function ShaderEffect_Finalize () {
    try {
      this.Dispose();
    } finally {
      $T13().prototype.Finalize.call(this);
    }
  }; 

  function ShaderEffect_get_Count () {
    return (this.ParamDecl).get_Count();
  }; 

  function ShaderEffect_GetEffectParam (name) {
    var obj = new JSIL.BoxedVariable(null);
    var flag = (this.ParamDecl).TryGetValue(name, /* ref */ obj);
    if (flag) {
      var result = obj.get();
    } else {
      result = new ($T13())();
    }
    return result;
  }; 

  function ShaderEffect_remove_ShaderEffectChanged (value) {
    var eventHandler = this.ShaderEffectChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0F().Remove(eventHandler2, value);
      eventHandler = $T10().CompareExchange$b1($T0E())(/* ref */ new JSIL.MemberReference(this, "ShaderEffectChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function ShaderEffect_SetEffectParam (name, value) {
    var obj = new JSIL.BoxedVariable(null);
    if (this.ParamDecl !== null) {
      var flag2 = (this.ParamDecl).TryGetValue(name, /* ref */ obj);
      if (flag2) {
        var flag3 = (JSIL.ObjectEqualsInstance(obj.get(), value, !false, $T13().__Type__));
        if (!flag3) {
          (this.ParamDecl).set_Item(name, value);
          var expr_43 = this.ShaderEffectChanged;
          if (expr_43 !== null) {
            expr_43(this, new ($T11())(this, $T12().UNIFORM_VAR_UPDATED, name, value));
          }
        }
      } else {
        (this.ParamDecl).Add(name, value);
        var expr_71 = this.ShaderEffectChanged;
        if (expr_71 !== null) {
          expr_71(this, new ($T11())(this, $T12().UNIFORM_VAR_ADDED, null, null));
        }
      }
    }
  }; 

  function ShaderEffect_TryGetMember (binder, /* ref */ result) {
    var name = binder.get_Name();
    return (this.ParamDecl).TryGetValue(name, /* ref */ result);
  }; 

  function ShaderEffect_TrySetMember (binder, value) {
    var obj = new JSIL.BoxedVariable(null);
    var flag = !(this.ParamDecl).TryGetValue(binder.get_Name(), /* ref */ obj);
    if (flag) {
      var result = false;
    } else {
      this.SetEffectParam(binder.get_Name(), value);
      result = true;
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicObject"), 
      Name: "Fusee.Engine.Core.ShaderEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Engine.Core.EffectPassDeclaration")]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Engine.Core.EffectParameterDeclaration")])]), 
      ShaderEffect__ctor
    );

    $.Method({Static:false, Public:false}, "add_ShaderEffectChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectEventArgs")])), 
      ShaderEffect_add_ShaderEffectChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ShaderEffect_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      ShaderEffect_Finalize
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      ShaderEffect_get_Count
    );

    $.Method({Static:false, Public:true }, "GetEffectParam", 
      new JSIL.MethodSignature($.Object, [$.String]), 
      ShaderEffect_GetEffectParam
    );

    $.Method({Static:false, Public:false}, "remove_ShaderEffectChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectEventArgs")])), 
      ShaderEffect_remove_ShaderEffectChanged
    );

    $.Method({Static:false, Public:true }, "SetEffectParam", 
      new JSIL.MethodSignature(null, [$.String, $.Object]), 
      ShaderEffect_SetEffectParam
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TryGetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.GetMemberBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])]), 
      ShaderEffect_TryGetMember
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TrySetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Dynamic.SetMemberBinder"), $.Object]), 
      ShaderEffect_TrySetMember
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "ParamDecl", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:true , ReadOnly:true }, "States", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Engine.Core.RenderStateSet")]));

    $.Field({Static:false, Public:true , ReadOnly:true }, "VertexShaderSrc", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true , ReadOnly:true }, "PixelShaderSrc", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "ShaderEffectChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectEventArgs")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SessionUniqueIdentifier", $asm0B.TypeRef("Fusee.Serialization.Suid"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Event({Static:false, Public:false}, "ShaderEffectChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectEventArgs")]));

    $.ImplementInterfaces(
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ShaderEffect+ShaderEffectEventArgs */ 

(function ShaderEffectEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect_ShaderEffectChangedEnum)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.EventArgs)) ();
  };


  function ShaderEffectEventArgs__ctor (effect, changed, changedName, changedValue) {
    $T04().prototype._ctor.call(this);
    this.ShaderEffectEventArgs$Effect$value = effect;
    this.ShaderEffectEventArgs$Changed$value = changed;
    if (!((changedName === null) || (changedValue === null))) {
      this.ShaderEffectEventArgs$ChangedEffectName$value = changedName;
      this.ShaderEffectEventArgs$ChangedEffectValue$value = changedValue;
    }
  }; 

  function ShaderEffectEventArgs_get_Changed () {
    return this.ShaderEffectEventArgs$Changed$value;
  }; 

  function ShaderEffectEventArgs_get_ChangedEffectName () {
    return this.ShaderEffectEventArgs$ChangedEffectName$value;
  }; 

  function ShaderEffectEventArgs_get_ChangedEffectValue () {
    return this.ShaderEffectEventArgs$ChangedEffectValue$value;
  }; 

  function ShaderEffectEventArgs_get_Effect () {
    return this.ShaderEffectEventArgs$Effect$value;
  }; 

  function ShaderEffectEventArgs_get_EffectParameter () {
    return this.ShaderEffectEventArgs$EffectParameter$value;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Core.ShaderEffect+ShaderEffectEventArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectChangedEnum"), 
          $.String, $.Object
        ]), 
      ShaderEffectEventArgs__ctor
    );

    $.Method({Static:false, Public:false}, "get_Changed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectChangedEnum")), 
      ShaderEffectEventArgs_get_Changed
    );

    $.Method({Static:false, Public:false}, "get_ChangedEffectName", 
      JSIL.MethodSignature.Return($.String), 
      ShaderEffectEventArgs_get_ChangedEffectName
    );

    $.Method({Static:false, Public:false}, "get_ChangedEffectValue", 
      JSIL.MethodSignature.Return($.Object), 
      ShaderEffectEventArgs_get_ChangedEffectValue
    );

    $.Method({Static:false, Public:false}, "get_Effect", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      ShaderEffectEventArgs_get_Effect
    );

    $.Method({Static:false, Public:false}, "get_EffectParameter", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.EffectParam")), 
      ShaderEffectEventArgs_get_EffectParameter
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "ShaderEffectEventArgs$Effect$value", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ShaderEffectEventArgs$Changed$value", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectChangedEnum"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ShaderEffectEventArgs$EffectParameter$value", $asm04.TypeRef("Fusee.Engine.Core.EffectParam"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ShaderEffectEventArgs$ChangedEffectName$value", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ShaderEffectEventArgs$ChangedEffectValue$value", $.Object);

    $.Property({Static:false, Public:false}, "Effect", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Property({Static:false, Public:false}, "Changed", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectChangedEnum"));

    $.Property({Static:false, Public:false}, "EffectParameter", $asm04.TypeRef("Fusee.Engine.Core.EffectParam"));

    $.Property({Static:false, Public:false}, "ChangedEffectName", $.String);

    $.Property({Static:false, Public:false}, "ChangedEffectValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Core.ShaderEffect+ShaderEffectChangedEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Core.ShaderEffect+ShaderEffectChangedEnum", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DISPOSE: 0, 
    UNIFORM_VAR_UPDATED: 1, 
    UNIFORM_VAR_ADDED: 2, 
  }
);

/* class Fusee.Engine.Core.ShaderEffectComponent */ 

(function ShaderEffectComponent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneComponentContainer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };


  function ShaderEffectComponent__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ShaderEffectComponent_get_Effect () {
    return this.ShaderEffectComponent$Effect$value;
  }; 

  function ShaderEffectComponent_set_Effect (value) {
    this.ShaderEffectComponent$Effect$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.SceneComponentContainer"), 
      Name: "Fusee.Engine.Core.ShaderEffectComponent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShaderEffectComponent__ctor
    );

    $.Method({Static:false, Public:true }, "get_Effect", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      ShaderEffectComponent_get_Effect
    );

    $.Method({Static:false, Public:true }, "set_Effect", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      ShaderEffectComponent_set_Effect
    );

    $.Field({Static:false, Public:false}, "ShaderEffectComponent$Effect$value", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Property({Static:false, Public:true }, "Effect", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ShaderEffectManager */ 

(function ShaderEffectManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm12.System.Collections.Generic.Stack$b1.Of($asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.Suid, $asm04.Fusee.Engine.Core.ShaderEffect))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm04.Fusee.Engine.Core.ShaderEffect_ShaderEffectEventArgs))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect_ShaderEffectEventArgs)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm12.System.Collections.Generic.Stack$b1.Of($asm04.Fusee.Engine.Core.ShaderEffect), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.Suid, $asm04.Fusee.Engine.Core.ShaderEffect), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm04.Fusee.Engine.Core.ShaderEffect_ShaderEffectEventArgs]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };


  function ShaderEffectManager__ctor (renderContextImp) {
    this._shaderEffectsToBeDeleted = $S00().Construct();
    this._allShaderEffects = $S01().Construct();
    this._rc = renderContextImp;
  }; 

  function ShaderEffectManager_Cleanup () {

    while (((this._shaderEffectsToBeDeleted).get_Count() | 0) > 0) {
      var shaderEffect = $T01().prototype.Pop.call(this._shaderEffectsToBeDeleted);
      (this._allShaderEffects).Remove(shaderEffect.SessionUniqueIdentifier);
      this.Remove(shaderEffect);
    }
  }; 

  function ShaderEffectManager_GetShaderEffect (ef) {
    var shaderEffect = new JSIL.BoxedVariable(null);
    return (
      (this._allShaderEffects).TryGetValue(ef.SessionUniqueIdentifier, /* ref */ shaderEffect)
         ? shaderEffect.get()
         : null)
    ;
  }; 

  function ShaderEffectManager_RegisterShaderEffect (ef) {
    var flag = this.GetShaderEffect(ef) !== null;
    if (!flag) {
      ef.add_ShaderEffectChanged($T05().New(this, null, new JSIL.MethodPointerInfo($thisType, "ShaderEffectChanged", $S02(), false, false)));
      (this._allShaderEffects).Add(ef.SessionUniqueIdentifier, ef);
    }
  }; 

  function ShaderEffectManager_Remove (ef) {
    (this._rc).RemoveShader(ef);
  }; 

  function ShaderEffectManager_ShaderEffectChanged (sender, args) {
    if (!((args === null) || (sender === null))) {
      var ef = $T03().$As(sender);
      switch ((args.ShaderEffectEventArgs$Changed$value).valueOf()) {
        case 0: 
          this.Remove(ef);
          break;

        case 1: 
          (this._rc).HandleAndUpdateChangedButExisistingEffectVariable(ef, args.ShaderEffectEventArgs$ChangedEffectName$value, args.ShaderEffectEventArgs$ChangedEffectValue$value);
          break;

        case 2: 
          (this._rc).CreateAllShaderEffectVariables(ef);
          break;

        default: 
          throw $S03().Construct($T09().Format("ShaderEffectChanged event called with unknown arguments: {0}, calling ShaderEffect: {1}", args, $T03().$As(sender)));

      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ShaderEffectManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      ShaderEffectManager__ctor
    );

    $.Method({Static:false, Public:true }, "Cleanup", 
      JSIL.MethodSignature.Void, 
      ShaderEffectManager_Cleanup
    );

    $.Method({Static:false, Public:true }, "GetShaderEffect", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"), [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]), 
      ShaderEffectManager_GetShaderEffect
    );

    $.Method({Static:false, Public:true }, "RegisterShaderEffect", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      ShaderEffectManager_RegisterShaderEffect
    );

    $.Method({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")), 
      ShaderEffectManager_Remove
    );

    $.Method({Static:false, Public:false}, "ShaderEffectChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect+ShaderEffectEventArgs")]), 
      ShaderEffectManager_ShaderEffectChanged
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_rc", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_shaderEffectsToBeDeleted", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_allShaderEffects", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.Suid"), $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ShaderMaterial */ 

(function ShaderMaterial$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderProgram)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.NotImplementedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotImplementedException, null))) ();
  };


  function ShaderMaterial__ctor (program) {
    this._sp = program;
  }; 

  function ShaderMaterial_GetShader () {
    return this._sp;
  }; 

  function ShaderMaterial_UpdateMaterial (rc) {
    throw $S00().Construct();
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ShaderMaterial", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.ShaderProgram")), 
      ShaderMaterial__ctor
    );

    $.Method({Static:false, Public:true }, "GetShader", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.ShaderProgram")), 
      ShaderMaterial_GetShader
    );

    $.Method({Static:false, Public:true }, "UpdateMaterial", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      ShaderMaterial_UpdateMaterial
    );

    $.Field({Static:false, Public:false}, "_sp", $asm04.TypeRef("Fusee.Engine.Core.ShaderProgram"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.ShaderProgram */ 

(function ShaderProgram$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IShaderProgramImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm03.Fusee.Engine.Common.ShaderParamInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.ShaderParamInfo))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.ShaderParamInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.ShaderParamInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm03.Fusee.Engine.Common.ShaderParamInfo), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm03.Fusee.Engine.Common.ShaderParamInfo).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.GetShaderParamList)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm03.Fusee.Engine.Common.ShaderParamInfo).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function ShaderProgram__ctor (renderContextImp, shaderProgramImp) {
    this._spi = shaderProgramImp;
    this._rci = renderContextImp;
    this._paramsByName = $S00().Construct();
    var enumerator = $IM00().Call($IM01().Call(this._rci, null, this._spi), null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var current = $IM03().Call(enumerator, null).MemberwiseClone();
        (this._paramsByName).Add(current.Name, current.MemberwiseClone());
      }
    } finally {
      if (enumerator !== null) {
        $IM04().Call(enumerator, null);
      }
    }
  }; 

  function ShaderProgram_GetShaderParam (paramName) {
    return this.GetShaderParamInfo(paramName).Handle;
  }; 

  function ShaderProgram_GetShaderParamInfo (paramName) {
    var result = new JSIL.BoxedVariable(new ($T06())());
    (this._paramsByName).TryGetValue(paramName, /* ref */ result);
    return result.get();
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.ShaderProgram", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp"), $asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp")]), 
      ShaderProgram__ctor
    );

    $.Method({Static:false, Public:true }, "GetShaderParam", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), [$.String]), 
      ShaderProgram_GetShaderParam
    );

    $.Method({Static:false, Public:true }, "GetShaderParamInfo", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ShaderParamInfo"), [$.String]), 
      ShaderProgram_GetShaderParamInfo
    );

    $.Field({Static:false, Public:false}, "_spi", $asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"));

    $.Field({Static:false, Public:false}, "_rci", $asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp"));

    $.Field({Static:false, Public:false}, "_paramsByName", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm03.TypeRef("Fusee.Engine.Common.ShaderParamInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.SliderConstraint */ 

(function SliderConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.RigidBody)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.CalculateTransforms)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_AnchorInA)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_AnchorInB)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_AngularDepth)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_AngularPos)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_CalculatedTransformA)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_CalculatedTransformB)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_DampingDirAngular)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_DampingDirLin)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_DampingLimAngular)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_DampingLimLin)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_DampingOrthoAngular)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_DampingOrthoLin)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_FrameOffsetA)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_FrameOffsetB)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_LinDepth)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_LinPos)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_LowerAngularLimit)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_LowerLinLimit)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_MaxAngularMotorForce)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_MaxLinMotorForce)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_PoweredAngularMotor)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_PoweredLinMotor)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_RestitutionDirAngular)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_RestitutionDirLin)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_RestitutionLimAngular)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_RestitutionLimLin)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_RestitutionOrthoAngular)) ();
  };
  var $IM1C = function () {
    return ($IM1C = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_RestitutionOrthoLin)) ();
  };
  var $IM1D = function () {
    return ($IM1D = JSIL.Memoize($asm03.Fusee.Engine.Common.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM1E = function () {
    return ($IM1E = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM1F = function () {
    return ($IM1F = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM20 = function () {
    return ($IM20 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SoftnessDirAngular)) ();
  };
  var $IM21 = function () {
    return ($IM21 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SoftnessDirLin)) ();
  };
  var $IM22 = function () {
    return ($IM22 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SoftnessLimAngular)) ();
  };
  var $IM23 = function () {
    return ($IM23 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SoftnessLimLin)) ();
  };
  var $IM24 = function () {
    return ($IM24 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SoftnessOrthoAngular)) ();
  };
  var $IM25 = function () {
    return ($IM25 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SoftnessOrthoLin)) ();
  };
  var $IM26 = function () {
    return ($IM26 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SolveAngularLimit)) ();
  };
  var $IM27 = function () {
    return ($IM27 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_SolveLinLimit)) ();
  };
  var $IM28 = function () {
    return ($IM28 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_TargetAngularMotorVelocity)) ();
  };
  var $IM29 = function () {
    return ($IM29 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_TargetLinMotorVelocity)) ();
  };
  var $IM2A = function () {
    return ($IM2A = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_UpperAngularLimit)) ();
  };
  var $IM2B = function () {
    return ($IM2B = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_UpperLinLimit)) ();
  };
  var $IM2C = function () {
    return ($IM2C = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_UseFrameOffset)) ();
  };
  var $IM2D = function () {
    return ($IM2D = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.get_UseLinearReferenceFrameA)) ();
  };
  var $IM2E = function () {
    return ($IM2E = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.GetUid)) ();
  };
  var $IM2F = function () {
    return ($IM2F = JSIL.Memoize($asm03.Fusee.Engine.Common.IConstraintImp.get_UserObject)) ();
  };
  var $IM30 = function () {
    return ($IM30 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_DampingDirAngular)) ();
  };
  var $IM31 = function () {
    return ($IM31 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_DampingDirLin)) ();
  };
  var $IM32 = function () {
    return ($IM32 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_DampingLimAngular)) ();
  };
  var $IM33 = function () {
    return ($IM33 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_DampingLimLin)) ();
  };
  var $IM34 = function () {
    return ($IM34 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_DampingOrthoAngular)) ();
  };
  var $IM35 = function () {
    return ($IM35 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_DampingOrthoLin)) ();
  };
  var $IM36 = function () {
    return ($IM36 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_LowerAngularLimit)) ();
  };
  var $IM37 = function () {
    return ($IM37 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_LowerLinLimit)) ();
  };
  var $IM38 = function () {
    return ($IM38 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_MaxAngularMotorForce)) ();
  };
  var $IM39 = function () {
    return ($IM39 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_MaxLinMotorForce)) ();
  };
  var $IM3A = function () {
    return ($IM3A = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_PoweredAngularMotor)) ();
  };
  var $IM3B = function () {
    return ($IM3B = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_PoweredLinMotor)) ();
  };
  var $IM3C = function () {
    return ($IM3C = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_RestitutionDirAngular)) ();
  };
  var $IM3D = function () {
    return ($IM3D = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_RestitutionDirLin)) ();
  };
  var $IM3E = function () {
    return ($IM3E = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_RestitutionLimAngular)) ();
  };
  var $IM3F = function () {
    return ($IM3F = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_RestitutionLimLin)) ();
  };
  var $IM40 = function () {
    return ($IM40 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_RestitutionOrthoAngular)) ();
  };
  var $IM41 = function () {
    return ($IM41 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_RestitutionOrthoLin)) ();
  };
  var $IM42 = function () {
    return ($IM42 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_SoftnessDirAngular)) ();
  };
  var $IM43 = function () {
    return ($IM43 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_SoftnessDirLin)) ();
  };
  var $IM44 = function () {
    return ($IM44 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_SoftnessLimAngular)) ();
  };
  var $IM45 = function () {
    return ($IM45 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_SoftnessLimLin)) ();
  };
  var $IM46 = function () {
    return ($IM46 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_SoftnessOrthoAngular)) ();
  };
  var $IM47 = function () {
    return ($IM47 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_SoftnessOrthoLin)) ();
  };
  var $IM48 = function () {
    return ($IM48 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_TargetAngularMotorVelocity)) ();
  };
  var $IM49 = function () {
    return ($IM49 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_TargetLinMotorVelocity)) ();
  };
  var $IM4A = function () {
    return ($IM4A = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_UpperAngularLimit)) ();
  };
  var $IM4B = function () {
    return ($IM4B = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_UpperLinLimit)) ();
  };
  var $IM4C = function () {
    return ($IM4C = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.set_UseFrameOffset)) ();
  };
  var $IM4D = function () {
    return ($IM4D = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.SetFrames)) ();
  };
  var $IM4E = function () {
    return ($IM4E = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.TestAngularLimits)) ();
  };
  var $IM4F = function () {
    return ($IM4F = JSIL.Memoize($asm03.Fusee.Engine.Common.ISliderConstraintImp.TestLinLimits)) ();
  };


  function SliderConstraint__ctor () {
  }; 

  function SliderConstraint_CalculateTransforms (transA, transB) {
    $IM00().Call(this._iSliderConstraintImp, null, transA.MemberwiseClone(), transB.MemberwiseClone());
  }; 

  function SliderConstraint_get_AnchorInA () {
    return $IM01().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_AnchorInB () {
    return $IM02().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_AngularDepth () {
    return $IM03().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_AngularPos () {
    return $IM04().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_CalculatedTransformA () {
    return $IM05().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_CalculatedTransformB () {
    return $IM06().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_DampingDirAngular () {
    return $IM07().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_DampingDirLin () {
    return $IM08().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_DampingLimAngular () {
    return $IM09().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_DampingLimLin () {
    return $IM0A().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_DampingOrthoAngular () {
    return $IM0B().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_DampingOrthoLin () {
    return $IM0C().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_FrameOffsetA () {
    return $IM0D().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_FrameOffsetB () {
    return $IM0E().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_LinDepth () {
    return $IM0F().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_LinPos () {
    return $IM10().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_LowerAngularLimit () {
    return $IM11().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_LowerLinLimit () {
    return $IM12().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_MaxAngularMotorForce () {
    return $IM13().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_MaxLinMotorForce () {
    return $IM14().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_PoweredAngularMotor () {
    return $IM15().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_PoweredLinMotor () {
    return $IM16().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_RestitutionDirAngular () {
    return $IM17().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_RestitutionDirLin () {
    return $IM18().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_RestitutionLimAngular () {
    return $IM19().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_RestitutionLimLin () {
    return $IM1A().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_RestitutionOrthoAngular () {
    return $IM1B().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_RestitutionOrthoLin () {
    return $IM1C().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_RigidBodyA () {
    var userObject = $IM1D().Call($IM1E().Call(this._iSliderConstraintImp, null), null);
    return $T05().$Cast(userObject);
  }; 

  function SliderConstraint_get_RigidBodyB () {
    var userObject = $IM1D().Call($IM1F().Call(this._iSliderConstraintImp, null), null);
    return $T05().$Cast(userObject);
  }; 

  function SliderConstraint_get_SoftnessDirAngular () {
    return $IM20().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_SoftnessDirLin () {
    return $IM21().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_SoftnessLimAngular () {
    return $IM22().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_SoftnessLimLin () {
    return $IM23().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_SoftnessOrthoAngular () {
    return $IM24().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_SoftnessOrthoLin () {
    return $IM25().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_SolveAngularLimit () {
    return $IM26().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_SolveLinLimit () {
    return $IM27().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_TargetAngularMotorVelocity () {
    return $IM28().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_TargetLinMotorVelocity () {
    return $IM29().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_UpperAngularLimit () {
    return $IM2A().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_UpperLinLimit () {
    return $IM2B().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_UseFrameOffset () {
    return $IM2C().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_get_UseLinearReferenceFrameA () {
    return $IM2D().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_GetUid () {
    return $IM2E().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_set_DampingDirAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM30().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_DampingDirLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM31().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_DampingLimAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM32().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_DampingLimLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM33().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_DampingOrthoAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM34().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_DampingOrthoLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM35().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_LowerAngularLimit (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM36().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_LowerLinLimit (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM37().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_MaxAngularMotorForce (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM38().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_MaxLinMotorForce (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM39().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_PoweredAngularMotor (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3A().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_PoweredLinMotor (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3B().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_RestitutionDirAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3C().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_RestitutionDirLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3D().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_RestitutionLimAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3E().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_RestitutionLimLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3F().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_RestitutionOrthoAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM40().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_RestitutionOrthoLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM41().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_SoftnessDirAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM42().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_SoftnessDirLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM43().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_SoftnessLimAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM44().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_SoftnessLimLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM45().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_SoftnessOrthoAngular (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM46().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_SoftnessOrthoLin (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM47().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_TargetAngularMotorVelocity (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM48().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_TargetLinMotorVelocity (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM49().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_UpperAngularLimit (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4A().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_UpperLinLimit (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4B().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_set_UseFrameOffset (value) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4C().Call(sliderConstraint._iSliderConstraintImp, null, value);
  }; 

  function SliderConstraint_SetFrames (frameA, frameB) {
    var sliderConstraint = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4D().Call(sliderConstraint._iSliderConstraintImp, null, frameA.MemberwiseClone(), frameB.MemberwiseClone());
  }; 

  function SliderConstraint_TestAngularLimits () {
    $IM4E().Call(this._iSliderConstraintImp, null);
  }; 

  function SliderConstraint_TestLinLimits () {
    $IM4F().Call(this._iSliderConstraintImp, null);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.SliderConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SliderConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "CalculateTransforms", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]), 
      SliderConstraint_CalculateTransforms
    );

    $.Method({Static:false, Public:true }, "get_AnchorInA", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      SliderConstraint_get_AnchorInA
    );

    $.Method({Static:false, Public:true }, "get_AnchorInB", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      SliderConstraint_get_AnchorInB
    );

    $.Method({Static:false, Public:true }, "get_AngularDepth", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_AngularDepth
    );

    $.Method({Static:false, Public:true }, "get_AngularPos", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_AngularPos
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformA", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      SliderConstraint_get_CalculatedTransformA
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformB", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      SliderConstraint_get_CalculatedTransformB
    );

    $.Method({Static:false, Public:true }, "get_DampingDirAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_DampingDirAngular
    );

    $.Method({Static:false, Public:true }, "get_DampingDirLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_DampingDirLin
    );

    $.Method({Static:false, Public:true }, "get_DampingLimAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_DampingLimAngular
    );

    $.Method({Static:false, Public:true }, "get_DampingLimLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_DampingLimLin
    );

    $.Method({Static:false, Public:true }, "get_DampingOrthoAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_DampingOrthoAngular
    );

    $.Method({Static:false, Public:true }, "get_DampingOrthoLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_DampingOrthoLin
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetA", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      SliderConstraint_get_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetB", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4x4")), 
      SliderConstraint_get_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "get_LinDepth", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_LinDepth
    );

    $.Method({Static:false, Public:true }, "get_LinPos", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_LinPos
    );

    $.Method({Static:false, Public:true }, "get_LowerAngularLimit", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_LowerAngularLimit
    );

    $.Method({Static:false, Public:true }, "get_LowerLinLimit", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_LowerLinLimit
    );

    $.Method({Static:false, Public:true }, "get_MaxAngularMotorForce", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_MaxAngularMotorForce
    );

    $.Method({Static:false, Public:true }, "get_MaxLinMotorForce", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_MaxLinMotorForce
    );

    $.Method({Static:false, Public:true }, "get_PoweredAngularMotor", 
      JSIL.MethodSignature.Return($.Boolean), 
      SliderConstraint_get_PoweredAngularMotor
    );

    $.Method({Static:false, Public:true }, "get_PoweredLinMotor", 
      JSIL.MethodSignature.Return($.Boolean), 
      SliderConstraint_get_PoweredLinMotor
    );

    $.Method({Static:false, Public:true }, "get_RestitutionDirAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_RestitutionDirAngular
    );

    $.Method({Static:false, Public:true }, "get_RestitutionDirLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_RestitutionDirLin
    );

    $.Method({Static:false, Public:true }, "get_RestitutionLimAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_RestitutionLimAngular
    );

    $.Method({Static:false, Public:true }, "get_RestitutionLimLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_RestitutionLimLin
    );

    $.Method({Static:false, Public:true }, "get_RestitutionOrthoAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_RestitutionOrthoAngular
    );

    $.Method({Static:false, Public:true }, "get_RestitutionOrthoLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_RestitutionOrthoLin
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      SliderConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.RigidBody")), 
      SliderConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_SoftnessDirAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_SoftnessDirAngular
    );

    $.Method({Static:false, Public:true }, "get_SoftnessDirLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_SoftnessDirLin
    );

    $.Method({Static:false, Public:true }, "get_SoftnessLimAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_SoftnessLimAngular
    );

    $.Method({Static:false, Public:true }, "get_SoftnessLimLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_SoftnessLimLin
    );

    $.Method({Static:false, Public:true }, "get_SoftnessOrthoAngular", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_SoftnessOrthoAngular
    );

    $.Method({Static:false, Public:true }, "get_SoftnessOrthoLin", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_SoftnessOrthoLin
    );

    $.Method({Static:false, Public:true }, "get_SolveAngularLimit", 
      JSIL.MethodSignature.Return($.Boolean), 
      SliderConstraint_get_SolveAngularLimit
    );

    $.Method({Static:false, Public:true }, "get_SolveLinLimit", 
      JSIL.MethodSignature.Return($.Boolean), 
      SliderConstraint_get_SolveLinLimit
    );

    $.Method({Static:false, Public:true }, "get_TargetAngularMotorVelocity", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_TargetAngularMotorVelocity
    );

    $.Method({Static:false, Public:true }, "get_TargetLinMotorVelocity", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_TargetLinMotorVelocity
    );

    $.Method({Static:false, Public:true }, "get_UpperAngularLimit", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_UpperAngularLimit
    );

    $.Method({Static:false, Public:true }, "get_UpperLinLimit", 
      JSIL.MethodSignature.Return($.Single), 
      SliderConstraint_get_UpperLinLimit
    );

    $.Method({Static:false, Public:true }, "get_UseFrameOffset", 
      JSIL.MethodSignature.Return($.Boolean), 
      SliderConstraint_get_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "get_UseLinearReferenceFrameA", 
      JSIL.MethodSignature.Return($.Boolean), 
      SliderConstraint_get_UseLinearReferenceFrameA
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      JSIL.MethodSignature.Return($.Int32), 
      SliderConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_DampingDirAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_DampingDirAngular
    );

    $.Method({Static:false, Public:true }, "set_DampingDirLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_DampingDirLin
    );

    $.Method({Static:false, Public:true }, "set_DampingLimAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_DampingLimAngular
    );

    $.Method({Static:false, Public:true }, "set_DampingLimLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_DampingLimLin
    );

    $.Method({Static:false, Public:true }, "set_DampingOrthoAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_DampingOrthoAngular
    );

    $.Method({Static:false, Public:true }, "set_DampingOrthoLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_DampingOrthoLin
    );

    $.Method({Static:false, Public:true }, "set_LowerAngularLimit", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_LowerAngularLimit
    );

    $.Method({Static:false, Public:true }, "set_LowerLinLimit", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_LowerLinLimit
    );

    $.Method({Static:false, Public:true }, "set_MaxAngularMotorForce", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_MaxAngularMotorForce
    );

    $.Method({Static:false, Public:true }, "set_MaxLinMotorForce", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_MaxLinMotorForce
    );

    $.Method({Static:false, Public:true }, "set_PoweredAngularMotor", 
      JSIL.MethodSignature.Action($.Boolean), 
      SliderConstraint_set_PoweredAngularMotor
    );

    $.Method({Static:false, Public:true }, "set_PoweredLinMotor", 
      JSIL.MethodSignature.Action($.Boolean), 
      SliderConstraint_set_PoweredLinMotor
    );

    $.Method({Static:false, Public:true }, "set_RestitutionDirAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_RestitutionDirAngular
    );

    $.Method({Static:false, Public:true }, "set_RestitutionDirLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_RestitutionDirLin
    );

    $.Method({Static:false, Public:true }, "set_RestitutionLimAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_RestitutionLimAngular
    );

    $.Method({Static:false, Public:true }, "set_RestitutionLimLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_RestitutionLimLin
    );

    $.Method({Static:false, Public:true }, "set_RestitutionOrthoAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_RestitutionOrthoAngular
    );

    $.Method({Static:false, Public:true }, "set_RestitutionOrthoLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_RestitutionOrthoLin
    );

    $.Method({Static:false, Public:true }, "set_SoftnessDirAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_SoftnessDirAngular
    );

    $.Method({Static:false, Public:true }, "set_SoftnessDirLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_SoftnessDirLin
    );

    $.Method({Static:false, Public:true }, "set_SoftnessLimAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_SoftnessLimAngular
    );

    $.Method({Static:false, Public:true }, "set_SoftnessLimLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_SoftnessLimLin
    );

    $.Method({Static:false, Public:true }, "set_SoftnessOrthoAngular", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_SoftnessOrthoAngular
    );

    $.Method({Static:false, Public:true }, "set_SoftnessOrthoLin", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_SoftnessOrthoLin
    );

    $.Method({Static:false, Public:true }, "set_TargetAngularMotorVelocity", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_TargetAngularMotorVelocity
    );

    $.Method({Static:false, Public:true }, "set_TargetLinMotorVelocity", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_TargetLinMotorVelocity
    );

    $.Method({Static:false, Public:true }, "set_UpperAngularLimit", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_UpperAngularLimit
    );

    $.Method({Static:false, Public:true }, "set_UpperLinLimit", 
      JSIL.MethodSignature.Action($.Single), 
      SliderConstraint_set_UpperLinLimit
    );

    $.Method({Static:false, Public:true }, "set_UseFrameOffset", 
      JSIL.MethodSignature.Action($.Boolean), 
      SliderConstraint_set_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "SetFrames", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float4x4"), $asm0A.TypeRef("Fusee.Math.Core.float4x4")]), 
      SliderConstraint_SetFrames
    );

    $.Method({Static:false, Public:true }, "TestAngularLimits", 
      JSIL.MethodSignature.Void, 
      SliderConstraint_TestAngularLimits
    );

    $.Method({Static:false, Public:true }, "TestLinLimits", 
      JSIL.MethodSignature.Void, 
      SliderConstraint_TestLinLimits
    );

    $.Field({Static:false, Public:false}, "_iSliderConstraintImp", $asm03.TypeRef("Fusee.Engine.Common.ISliderConstraintImp"));

    $.Property({Static:false, Public:true }, "AnchorInA", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "AnchorInB", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "AngularDepth", $.Single);

    $.Property({Static:false, Public:true }, "AngularPos", $.Single);

    $.Property({Static:false, Public:true }, "CalculatedTransformA", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "CalculatedTransformB", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "DampingDirAngular", $.Single);

    $.Property({Static:false, Public:true }, "DampingDirLin", $.Single);

    $.Property({Static:false, Public:true }, "DampingLimAngular", $.Single);

    $.Property({Static:false, Public:true }, "DampingLimLin", $.Single);

    $.Property({Static:false, Public:true }, "DampingOrthoAngular", $.Single);

    $.Property({Static:false, Public:true }, "DampingOrthoLin", $.Single);

    $.Property({Static:false, Public:true }, "FrameOffsetA", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetB", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Property({Static:false, Public:true }, "LinDepth", $.Single);

    $.Property({Static:false, Public:true }, "LinPos", $.Single);

    $.Property({Static:false, Public:true }, "LowerAngularLimit", $.Single);

    $.Property({Static:false, Public:true }, "LowerLinLimit", $.Single);

    $.Property({Static:false, Public:true }, "MaxAngularMotorForce", $.Single);

    $.Property({Static:false, Public:true }, "MaxLinMotorForce", $.Single);

    $.Property({Static:false, Public:true }, "PoweredAngularMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "PoweredLinMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "RestitutionDirAngular", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionDirLin", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionLimAngular", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionLimLin", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionOrthoAngular", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionOrthoLin", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessDirAngular", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessDirLin", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessLimAngular", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessLimLin", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessOrthoAngular", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessOrthoLin", $.Single);

    $.Property({Static:false, Public:true }, "SolveAngularLimit", $.Boolean);

    $.Property({Static:false, Public:true }, "SolveLinLimit", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetAngularMotorVelocity", $.Single);

    $.Property({Static:false, Public:true }, "TargetLinMotorVelocity", $.Single);

    $.Property({Static:false, Public:true }, "UpperAngularLimit", $.Single);

    $.Property({Static:false, Public:true }, "UpperLinLimit", $.Single);

    $.Property({Static:false, Public:true }, "UseFrameOffset", $.Boolean);

    $.Property({Static:false, Public:true }, "UseLinearReferenceFrameA", $.Boolean);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm04.TypeRef("Fusee.Engine.Core.RigidBody"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.SphereShape */ 

(function SphereShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISphereShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISphereShapeImp.get_Radius)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm03.Fusee.Engine.Common.ISphereShapeImp.set_Radius)) ();
  };


  function SphereShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function SphereShape_get_LocalScaling () {
    return $IM00().Call(this._sphereShapeImp, null);
  }; 

  function SphereShape_get_Margin () {
    return $IM01().Call(this._sphereShapeImp, null);
  }; 

  function SphereShape_get_Radius () {
    return $IM02().Call(this._sphereShapeImp, null);
  }; 

  function SphereShape_set_LocalScaling (value) {
    var sphereShape = $thisType.$Cast($IM03().Call(this._sphereShapeImp, null));
    (sphereShape._sphereShapeImp.LocalScaling = value.MemberwiseClone());
  }; 

  function SphereShape_set_Margin (value) {
    var sphereShape = $thisType.$Cast($IM03().Call(this._sphereShapeImp, null));
    $IM04().Call(sphereShape._sphereShapeImp, null, value);
  }; 

  function SphereShape_set_Radius (value) {
    var sphereShape = $thisType.$Cast($IM03().Call(this._sphereShapeImp, null));
    $IM05().Call(sphereShape._sphereShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.SphereShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SphereShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LocalScaling", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      SphereShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      SphereShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      JSIL.MethodSignature.Return($.Single), 
      SphereShape_get_Radius
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LocalScaling", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      SphereShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      SphereShape_set_Margin
    );

    $.Method({Static:false, Public:true }, "set_Radius", 
      JSIL.MethodSignature.Action($.Single), 
      SphereShape_set_Radius
    );

    $.Field({Static:false, Public:false}, "_sphereShapeImp", $asm03.TypeRef("Fusee.Engine.Common.ISphereShapeImp"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalScaling", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true }, "Radius", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.StaticPlaneShape */ 

(function StaticPlaneShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IStaticPlaneShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IStaticPlaneShapeImp.get_PlaneConstant)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IStaticPlaneShapeImp.get_PlaneNormal)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ICollisionShapeImp.set_Margin)) ();
  };


  function StaticPlaneShape__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function StaticPlaneShape_get_Margin () {
    return $IM00().Call(this._staticPlaneShapeImp, null);
  }; 

  function StaticPlaneShape_get_PlaneConstant () {
    return $IM01().Call(this._staticPlaneShapeImp, null);
  }; 

  function StaticPlaneShape_get_PlaneNormal () {
    return $IM02().Call(this._staticPlaneShapeImp, null);
  }; 

  function StaticPlaneShape_set_Margin (value) {
    var staticPlaneShape = $thisType.$Cast($IM03().Call(this._staticPlaneShapeImp, null));
    $IM04().Call(staticPlaneShape._staticPlaneShapeImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.CollisionShape"), 
      Name: "Fusee.Engine.Core.StaticPlaneShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      StaticPlaneShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      JSIL.MethodSignature.Return($.Single), 
      StaticPlaneShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_PlaneConstant", 
      JSIL.MethodSignature.Return($.Single), 
      StaticPlaneShape_get_PlaneConstant
    );

    $.Method({Static:false, Public:true }, "get_PlaneNormal", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float3")), 
      StaticPlaneShape_get_PlaneNormal
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      JSIL.MethodSignature.Action($.Single), 
      StaticPlaneShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "_staticPlaneShapeImp", $asm03.TypeRef("Fusee.Engine.Common.IStaticPlaneShapeImp"));

    $.Property({Static:false, Public:true }, "PlaneConstant", $.Single);

    $.Property({Static:false, Public:true }, "PlaneNormal", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Texture */ 

(function Texture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Fusee.Base.Common.ImagePixelFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.Fusee.Serialization.Suid)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Base.Core.ImageData)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm04.Fusee.Engine.Core.TextureDataEventArgs))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.TextureDataEventArgs)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.TextureChangedEnum)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_Width)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_Height)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_PixelFormat)) ();
  };


  function Texture__ctor$00 (pixelData, width, height, colorFormat) {
    this.SessionUniqueIdentifier = $T03().GenerateSuid();
    this._imageData = new ($T04())(pixelData, width, height, colorFormat.MemberwiseClone());
  }; 

  function Texture__ctor$01 (imageData) {
    this.SessionUniqueIdentifier = $T03().GenerateSuid();
    this._imageData = new ($T04())(JSIL.Array.New($T06(), Math.imul(Math.imul($IM00().Call(imageData, null), $IM01().Call(imageData, null)), ($IM02().Call(imageData, null)).get_BytesPerPixel())), $IM00().Call(imageData, null), $IM01().Call(imageData, null), $IM02().Call(imageData, null).MemberwiseClone());
    (this._imageData).Blt(
      0, 
      0, 
      imageData, 
      0, 
      0, 
      0, 
      0
    );
  }; 

  function Texture_add_TextureChanged (value) {
    var eventHandler = this.TextureChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T08().Combine(eventHandler2, value);
      eventHandler = $T09().CompareExchange$b1($T07())(/* ref */ new JSIL.MemberReference(this, "TextureChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function Texture_Blt ($xDst, $yDst, src, $xSrc, $ySrc, $width, $height) {
    var height = new JSIL.BoxedVariable($height);
    var ySrc = new JSIL.BoxedVariable($ySrc);
    var yDst = new JSIL.BoxedVariable($yDst);
    var width = new JSIL.BoxedVariable($width);
    var xSrc = new JSIL.BoxedVariable($xSrc);
    var xDst = new JSIL.BoxedVariable($xDst);
    (this._imageData).Blt(
      xDst.get(), 
      yDst.get(), 
      src, 
      xSrc.get(), 
      ySrc.get(), 
      width.get(), 
      height.get()
    );
    var flag = (width.get() | 0) === 0;
    if (flag) {
      width.set($IM00().Call(src, null));
    }
    var flag2 = (height.get() | 0) === 0;
    if (flag2) {
      height.set($IM01().Call(src, null));
    }
    $thisType.ClipBlt(
      /* ref */ xDst, 
      this.get_Width(), 
      /* ref */ xSrc, 
      $IM00().Call(src, null), 
      /* ref */ width
    );
    $thisType.ClipBlt(
      /* ref */ yDst, 
      this.get_Height(), 
      /* ref */ ySrc, 
      $IM01().Call(src, null), 
      /* ref */ height
    );
    var flag3 = ((width.get() | 0) <= 0) || 
    ((height.get() | 0) <= 0);
    if (!flag3) {
      var textureChanged = this.TextureChanged;
      var flag4 = textureChanged !== null;
      if (flag4) {
        textureChanged(this, new ($T0B())(this, $T0C().RegionChanged, xDst.get(), yDst.get(), width.get(), height.get()));
      }
    }
  }; 

  function Texture_ClipBlt (/* ref */ iDst, sizeDst, /* ref */ iSrc, sizeSrc, /* ref */ sizeBlk) {
    var num = ((
      ((iDst.get() | 0) < (iSrc.get() | 0))
         ? iDst.get()
         : iSrc.get())
     | 0);
    var flag = num > 0;
    if (flag) {
      num = 0;
    }
    var num2 = (((((iDst.get() | 0) + (sizeBlk.get() | 0)) | 0) - (sizeDst | 0)) | 0);
    var num3 = (((((iSrc.get() | 0) + (sizeBlk.get() | 0)) | 0) - (sizeSrc | 0)) | 0);
    var num4 = ((
      (num2 > num3)
         ? num2
         : num3)
     | 0);
    var flag2 = num4 < 0;
    if (flag2) {
      num4 = 0;
    }
    iDst.set((((iDst.get() | 0) - num) | 0));
    iSrc.set((((iSrc.get() | 0) - num) | 0));
    sizeBlk.set((((sizeBlk.get() | 0) + num) | 0));
    sizeBlk.set((((sizeBlk.get() | 0) - num4) | 0));
    var flag3 = (sizeBlk.get() | 0) < 0;
    if (flag3) {
      sizeBlk.set(0);
    }
  }; 

  function Texture_Dispose () {
    var textureChanged = this.TextureChanged;
    var flag = textureChanged !== null;
    if (flag) {
      textureChanged(this, new ($T0B())(this, $T0C().Disposed, 0, 0, 0, 0));
    }
  }; 

  function Texture_Finalize () {
    try {
      this.Dispose();
    } finally {
      $T0D().prototype.Finalize.call(this);
    }
  }; 

  function Texture_get_Height () {
    return (this._imageData).get_Height();
  }; 

  function Texture_get_IsEmpty () {
    return (((this.get_Width() | 0) <= 0) || ((this.get_Height() | 0) <= 0));
  }; 

  function Texture_get_PixelData () {
    return this._imageData.ImageData$PixelData$value;
  }; 

  function Texture_get_PixelFormat () {
    return (this._imageData).get_PixelFormat();
  }; 

  function Texture_get_Width () {
    return (this._imageData).get_Width();
  }; 

  function Texture_remove_TextureChanged (value) {
    var eventHandler = this.TextureChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T08().Remove(eventHandler2, value);
      eventHandler = $T09().CompareExchange$b1($T07())(/* ref */ new JSIL.MemberReference(this, "TextureChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function Texture_ScanLines (xSrc, ySrc, width, height) {
    return (this._imageData).ScanLines(xSrc, ySrc, width, height);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Texture", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat")
        ]), 
      Texture__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.IImageData")), 
      Texture__ctor$01
    );

    $.Method({Static:false, Public:true }, "add_TextureChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.TextureDataEventArgs")])), 
      Texture_add_TextureChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Blt", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Fusee.Base.Common.IImageData"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      Texture_Blt
    );

    $.Method({Static:true , Public:false}, "ClipBlt", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      Texture_ClipBlt
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Texture_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      Texture_Finalize
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.Method({Static:false, Public:true , Virtual:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture_get_Height
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean), 
      Texture_get_IsEmpty
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PixelData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      Texture_get_PixelData
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PixelFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat")), 
      Texture_get_PixelFormat
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture_get_Width
    );

    $.Method({Static:false, Public:true }, "remove_TextureChanged", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.TextureDataEventArgs")])), 
      Texture_remove_TextureChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ScanLines", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Fusee.Base.Common.ScanLine")]), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      Texture_ScanLines
    );

    $.Field({Static:false, Public:false}, "TextureChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.TextureDataEventArgs")]));

    $.Field({Static:false, Public:true , ReadOnly:true }, "SessionUniqueIdentifier", $asm0B.TypeRef("Fusee.Serialization.Suid"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_imageData", $asm01.TypeRef("Fusee.Base.Core.ImageData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "PixelData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "PixelFormat", $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmpty", $.Boolean);

    $.Event({Static:false, Public:true }, "TextureChanged", $asm0F.TypeRef("System.EventHandler`1", [$asm04.TypeRef("Fusee.Engine.Core.TextureDataEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.ITexture"), 
      /* 1 */ $asm00.TypeRef("Fusee.Base.Common.IImageData"), 
      /* 2 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Core.TextureChangedEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Core.TextureChangedEnum", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Disposed: 0, 
    RegionChanged: 1, 
  }
);

/* class Fusee.Engine.Core.TextureDataEventArgs */ 

(function TextureDataEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.TextureChangedEnum)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.EventArgs)) ();
  };


  function TextureDataEventArgs__ctor (texture, textureChangedEnum, xStart, yStart, width, height) {
    $T03().prototype._ctor.call(this);
    this._texture = texture;
    this._textureChangedEnum = textureChangedEnum;
    this._xStart = (xStart | 0);
    this._yStart = (yStart | 0);
    this._width = (width | 0);
    this._height = (height | 0);
  }; 

  function TextureDataEventArgs_get_ChangedEnum () {
    return this._textureChangedEnum;
  }; 

  function TextureDataEventArgs_get_Height () {
    return this._height;
  }; 

  function TextureDataEventArgs_get_Texture () {
    return this._texture;
  }; 

  function TextureDataEventArgs_get_Width () {
    return this._width;
  }; 

  function TextureDataEventArgs_get_XStart () {
    return this._xStart;
  }; 

  function TextureDataEventArgs_get_YStart () {
    return this._yStart;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Core.TextureDataEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Engine.Core.Texture"), $asm04.TypeRef("Fusee.Engine.Core.TextureChangedEnum"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      TextureDataEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_ChangedEnum", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.TextureChangedEnum")), 
      TextureDataEventArgs_get_ChangedEnum
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      TextureDataEventArgs_get_Height
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.Texture")), 
      TextureDataEventArgs_get_Texture
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      TextureDataEventArgs_get_Width
    );

    $.Method({Static:false, Public:true }, "get_XStart", 
      JSIL.MethodSignature.Return($.Int32), 
      TextureDataEventArgs_get_XStart
    );

    $.Method({Static:false, Public:true }, "get_YStart", 
      JSIL.MethodSignature.Return($.Int32), 
      TextureDataEventArgs_get_YStart
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_texture", $asm04.TypeRef("Fusee.Engine.Core.Texture"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_textureChangedEnum", $asm04.TypeRef("Fusee.Engine.Core.TextureChangedEnum"));

    $.Field({Static:false, Public:false}, "_xStart", $.Int32);

    $.Field({Static:false, Public:false}, "_yStart", $.Int32);

    $.Field({Static:false, Public:false}, "_width", $.Int32);

    $.Field({Static:false, Public:false}, "_height", $.Int32);

    $.Property({Static:false, Public:true }, "Texture", $asm04.TypeRef("Fusee.Engine.Core.Texture"));

    $.Property({Static:false, Public:true }, "ChangedEnum", $asm04.TypeRef("Fusee.Engine.Core.TextureChangedEnum"));

    $.Property({Static:false, Public:true }, "XStart", $.Int32);

    $.Property({Static:false, Public:true }, "YStart", $.Int32);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.TextureManager */ 

(function TextureManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm12.System.Collections.Generic.Stack$b1.Of($asm03.Fusee.Engine.Common.ITextureHandle))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.Suid, $asm03.Fusee.Engine.Common.ITextureHandle))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.ITextureHandle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm04.Fusee.Engine.Core.TextureDataEventArgs))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Engine.Core.TextureDataEventArgs)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Engine.Core.TextureChangedEnum)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm12.System.Collections.Generic.Stack$b1.Of($asm03.Fusee.Engine.Common.ITextureHandle), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0B.Fusee.Serialization.Suid, $asm03.Fusee.Engine.Common.ITextureHandle), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm04.Fusee.Engine.Core.TextureDataEventArgs]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.KeyNotFoundException, [$asm0F.System.String]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.CreateTexture)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.RemoveTextureHandle)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderContextImp.UpdateTextureRegion)) ();
  };


  function TextureManager__ctor (renderContextImp) {
    this._toBeDeletedTextureHandles = $S00().Construct();
    this._identifierToTextureHandleDictionary = $S01().Construct();
    this._renderContextImp = renderContextImp;
  }; 

  function TextureManager_Cleanup () {
    var flag = (this._toBeDeletedTextureHandles === null) || 
    (((this._toBeDeletedTextureHandles).get_Count() | 0) === 0);
    if (!flag) {

      while (((this._toBeDeletedTextureHandles).get_Count() | 0) > 0) {
        var textureHandle = $T01().prototype.Pop.call(this._toBeDeletedTextureHandles);
        this.Remove(textureHandle);
      }
    }
  }; 

  function TextureManager_GetTextureHandleFromTexture (texture, repeat) {
    var textureHandle = new JSIL.BoxedVariable(null);
    var flag = !(this._identifierToTextureHandleDictionary).TryGetValue(texture.SessionUniqueIdentifier, /* ref */ textureHandle);
    if (flag) {
      var result = this.RegisterNewTexture(texture, repeat);
    } else {
      result = textureHandle.get();
    }
    return result;
  }; 

  function TextureManager_RegisterNewTexture (texture, repeat) {
    var textureHandle = $IM00().Call(this._renderContextImp, null, texture, repeat);
    texture.add_TextureChanged($T06().New(this, null, new JSIL.MethodPointerInfo($thisType, "TextureChanged", $S02(), false, false)));
    (this._identifierToTextureHandleDictionary).Add(texture.SessionUniqueIdentifier, textureHandle);
    return textureHandle;
  }; 

  function TextureManager_Remove (textureHandle) {
    $IM01().Call(this._renderContextImp, null, textureHandle);
  }; 

  function TextureManager_TextureChanged (sender, textureDataEventArgs) {
    var textureHandle = new JSIL.BoxedVariable(null);
    var flag = !(this._identifierToTextureHandleDictionary).TryGetValue(textureDataEventArgs.get_Texture().SessionUniqueIdentifier, /* ref */ textureHandle);
    if (flag) {
      throw $S03().Construct("Texture is not registered.");
    }
    var texture = textureDataEventArgs.get_Texture();
    var changedEnum = textureDataEventArgs.get_ChangedEnum();
    if ((changedEnum.valueOf() | 0) !== 0) {
      if (changedEnum === $T0A().RegionChanged) {
        $IM02().Call(this._renderContextImp, null, 
          textureHandle.get(), 
          texture, 
          textureDataEventArgs.get_XStart(), 
          textureDataEventArgs.get_YStart(), 
          textureDataEventArgs.get_Width(), 
          textureDataEventArgs.get_Height()
        );
      }
    } else {
      $T01().prototype.Push.call(this._toBeDeletedTextureHandles, textureHandle.get());
      (this._identifierToTextureHandleDictionary).Remove(texture.SessionUniqueIdentifier);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.TextureManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp")), 
      TextureManager__ctor
    );

    $.Method({Static:false, Public:true }, "Cleanup", 
      JSIL.MethodSignature.Void, 
      TextureManager_Cleanup
    );

    $.Method({Static:false, Public:true }, "GetTextureHandleFromTexture", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITextureHandle"), [$asm04.TypeRef("Fusee.Engine.Core.Texture"), $.Boolean]), 
      TextureManager_GetTextureHandleFromTexture
    );

    $.Method({Static:false, Public:false}, "RegisterNewTexture", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITextureHandle"), [$asm04.TypeRef("Fusee.Engine.Core.Texture"), $.Boolean]), 
      TextureManager_RegisterNewTexture
    );

    $.Method({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ITextureHandle")), 
      TextureManager_Remove
    );

    $.Method({Static:false, Public:false}, "TextureChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm04.TypeRef("Fusee.Engine.Core.TextureDataEventArgs")]), 
      TextureManager_TextureChanged
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_renderContextImp", $asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp"));

    $.Field({Static:false, Public:false}, "_toBeDeletedTextureHandles", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm03.TypeRef("Fusee.Engine.Common.ITextureHandle")]));

    $.Field({Static:false, Public:false}, "_identifierToTextureHandleDictionary", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("Fusee.Serialization.Suid"), $asm03.TypeRef("Fusee.Engine.Common.ITextureHandle")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.Time */ 

(function Time$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int64)) ();
  };


  function Time__ctor () {
    this._timeScale = 1;
  }; 

  function Time_Dispose () {
  }; 

  function Time_get_DeltaTime () {
    return $thisType.get_Instance().get_TimeDeltaTime();
  }; 

  function Time_get_FramePerSecond () {
    return $thisType.get_Instance().get_TimeFramePerSecond();
  }; 

  function Time_get_Frames () {
    return $thisType.get_Instance().get_TimeFrames();
  }; 

  function Time_get_FramesPerSecondAverage () {
    return $thisType.get_Instance().get_TimeFramesPerSecondAverage();
  }; 

  function Time_get_Instance () {
    var arg_14_0 = null;
    if ((arg_14_0 = $thisType._instance) === null) {
      arg_14_0 = $thisType._instance = new $thisType();
    }
    return arg_14_0;
  }; 

  function Time_get_InstTimeScale () {
    return this._timeScale;
  }; 

  function Time_get_InstTimeSinceStart () {
    return this._time;
  }; 

  function Time_get_RealDeltaTimeMs () {
    return $thisType.get_Instance().get_TimeRealDeltaTimeMs();
  }; 

  function Time_get_RealTimeSinceStart () {
    return $thisType.get_Instance().get_TimeRealTimeSinceStart();
  }; 

  function Time_get_TimeDeltaTime () {
    return this._deltaTime;
  }; 

  function Time_get_TimeFramePerSecond () {
    return this._unsmoothedFps;
  }; 

  function Time_get_TimeFrames () {
    return this._frameCount;
  }; 

  function Time_get_TimeFramesPerSecondAverage () {
    return this._framesPerSecondAverage;
  }; 

  function Time_get_TimeRealDeltaTimeMs () {
    return this._realDeltaTime;
  }; 

  function Time_get_TimeRealTimeSinceStart () {
    return this._realTime;
  }; 

  function Time_get_TimeScale () {
    return $thisType.get_Instance().get_InstTimeScale();
  }; 

  function Time_get_TimeSinceStart () {
    return $thisType.get_Instance().get_InstTimeSinceStart();
  }; 

  function Time_set_DeltaTimeIncrement (value) {
    this._deltaTime = +value;
    this._realDeltaTime = +this._deltaTime;
    this._unsmoothedFps = +((1 / +this._deltaTime));
    this._timeSecond = +this._timeSecond + +value;
    this._framePerSecond = (((this._framePerSecond | 0) + 1) | 0);
    this._realTime = +this._realTime + +this._deltaTime;
    this._frameCount = $T01().op_Addition(this._frameCount, $T01().Create(1, 0, 0));
    this._deltaTime = +this._deltaTime * +this._timeScale;
    this._time = +this._time + +this._deltaTime;
    if (+this._timeSecond >= 1) {
      this._framesPerSecondAverage = (this._framePerSecond | 0);
      this._framePerSecond = 0;
      this._timeSecond = 0;
    }
  }; 

  function Time_set_InstTimeScale (value) {
    this._timeScale = +value;
  }; 

  function Time_set_TimeScale (value) {
    $thisType.get_Instance().set_InstTimeScale(value);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.Time", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Time__ctor
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void, 
      Time_Dispose
    );

    $.Method({Static:true , Public:true }, "get_DeltaTime", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_DeltaTime
    );

    $.Method({Static:true , Public:true }, "get_FramePerSecond", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_FramePerSecond
    );

    $.Method({Static:true , Public:true }, "get_Frames", 
      JSIL.MethodSignature.Return($.Int64), 
      Time_get_Frames
    );

    $.Method({Static:true , Public:true }, "get_FramesPerSecondAverage", 
      JSIL.MethodSignature.Return($.Int32), 
      Time_get_FramesPerSecondAverage
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      Time_get_Instance
    );

    $.Method({Static:false, Public:true }, "get_InstTimeScale", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_InstTimeScale
    );

    $.Method({Static:false, Public:true }, "get_InstTimeSinceStart", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_InstTimeSinceStart
    );

    $.Method({Static:true , Public:true }, "get_RealDeltaTimeMs", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_RealDeltaTimeMs
    );

    $.Method({Static:true , Public:true }, "get_RealTimeSinceStart", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_RealTimeSinceStart
    );

    $.Method({Static:false, Public:true }, "get_TimeDeltaTime", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_TimeDeltaTime
    );

    $.Method({Static:false, Public:true }, "get_TimeFramePerSecond", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_TimeFramePerSecond
    );

    $.Method({Static:false, Public:true }, "get_TimeFrames", 
      JSIL.MethodSignature.Return($.Int64), 
      Time_get_TimeFrames
    );

    $.Method({Static:false, Public:true }, "get_TimeFramesPerSecondAverage", 
      JSIL.MethodSignature.Return($.Int32), 
      Time_get_TimeFramesPerSecondAverage
    );

    $.Method({Static:false, Public:true }, "get_TimeRealDeltaTimeMs", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_TimeRealDeltaTimeMs
    );

    $.Method({Static:false, Public:true }, "get_TimeRealTimeSinceStart", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_TimeRealTimeSinceStart
    );

    $.Method({Static:true , Public:true }, "get_TimeScale", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_TimeScale
    );

    $.Method({Static:true , Public:true }, "get_TimeSinceStart", 
      JSIL.MethodSignature.Return($.Single), 
      Time_get_TimeSinceStart
    );

    $.Method({Static:false, Public:false}, "set_DeltaTimeIncrement", 
      JSIL.MethodSignature.Action($.Single), 
      Time_set_DeltaTimeIncrement
    );

    $.Method({Static:false, Public:true }, "set_InstTimeScale", 
      JSIL.MethodSignature.Action($.Single), 
      Time_set_InstTimeScale
    );

    $.Method({Static:true , Public:true }, "set_TimeScale", 
      JSIL.MethodSignature.Action($.Single), 
      Time_set_TimeScale
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type);

    $.Field({Static:false, Public:false}, "_deltaTime", $.Single);

    $.Field({Static:false, Public:false}, "_time", $.Single);

    $.Field({Static:false, Public:false}, "_timeScale", $.Single);

    $.Field({Static:false, Public:false}, "_frameCount", $.Int64);

    $.Field({Static:false, Public:false}, "_realTime", $.Single);

    $.Field({Static:false, Public:false}, "_framesPerSecondAverage", $.Int32);

    $.Field({Static:false, Public:false}, "_timeSecond", $.Single);

    $.Field({Static:false, Public:false}, "_framePerSecond", $.Int32);

    $.Field({Static:false, Public:false}, "_unsmoothedFps", $.Single);

    $.Field({Static:false, Public:false}, "_realDeltaTime", $.Single);

    $.Property({Static:false, Public:false}, "DeltaTimeIncrement", $.Single);

    $.Property({Static:false, Public:true }, "TimeFramesPerSecondAverage", $.Int32);

    $.Property({Static:true , Public:true }, "FramesPerSecondAverage", $.Int32);

    $.Property({Static:false, Public:true }, "TimeRealTimeSinceStart", $.Single);

    $.Property({Static:true , Public:true }, "RealTimeSinceStart", $.Single);

    $.Property({Static:false, Public:true }, "TimeFramePerSecond", $.Single);

    $.Property({Static:true , Public:true }, "FramePerSecond", $.Single);

    $.Property({Static:false, Public:true }, "TimeFrames", $.Int64);

    $.Property({Static:true , Public:true }, "Frames", $.Int64);

    $.Property({Static:false, Public:true }, "TimeDeltaTime", $.Single);

    $.Property({Static:true , Public:true }, "DeltaTime", $.Single);

    $.Property({Static:false, Public:true }, "TimeRealDeltaTimeMs", $.Single);

    $.Property({Static:true , Public:true }, "RealDeltaTimeMs", $.Single);

    $.Property({Static:false, Public:true }, "InstTimeSinceStart", $.Single);

    $.Property({Static:true , Public:true }, "TimeSinceStart", $.Single);

    $.Property({Static:false, Public:true }, "InstTimeScale", $.Single);

    $.Property({Static:true , Public:true }, "TimeScale", $.Single);

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Core.TwoPointAction */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Core.TwoPointAction", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Pinch: 1, 
    Move: 2, 
    Rotate: 3, 
  }
);

/* class Fusee.Engine.Core.TouchDevice */ 

(function TouchDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IInputDeviceImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDirection)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Fusee.Engine.Common.TouchPoints)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Engine.Core.TwoPointAction)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDescription)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisNature)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisBoundedType)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice_AxisValueCalculator)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.TouchDevice_$l$gc__DisplayClass12_0)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Single, [$asm0F.System.Single]))) ();
  };


  function TouchDevice__ctor (inpDeviceImp) {
    var $temp00, $temp01;
    this._angleVelNormalFactor = 500;
    this._midpointVelNormalFactor = 1;
    this._distanceVelNormalFactor = 1;
    this._doubleTouchMovementThreshold = 0.001;
    $T01().prototype._ctor.call(this, inpDeviceImp);
    var buttonCount = (this.get_ButtonCount() | 0);
    var num = Math.imul(buttonCount, 2);
    this._velocityIDs = JSIL.Array.New($T02(), num);
    var num2 = 6;

    for (var i = 0; i < num; i = ((i + 1) | 0)) {
      this._velocityIDs[i] = (this.RegisterVelocityAxis(
        ($temp00 = num2, 
          num2 = ((num2 + 1) | 0), 
          $temp00), 
        1, 
        0, 
        null, 
        $T03().Unknown
      ).Id | 0);
      i = ((i + 1) | 0);
      this._velocityIDs[i] = (this.RegisterVelocityAxis(
        ($temp01 = num2, 
          num2 = ((num2 + 1) | 0), 
          $temp01), 
        1, 
        0, 
        null, 
        $T03().Unknown
      ).Id | 0);
    }
    this._tpDistance = (this.RegisterTtpDistanceAxis() | 0);
    this._tpDistanceVel = (this.RegisterVelocityAxis(
      this._tpDistance, 
      2, 
      0, 
      null, 
      $T03().Unknown
    ).Id | 0);
    this._tpAngle = (this.RegisterTtpAngleAxis() | 0);
    this._tpAngleVel = (this.RegisterVelocityAxis(
      this._tpAngle, 
      2, 
      0, 
      null, 
      $T03().Unknown
    ).Id | 0);
    this._tpMidPointX = (this.RegisterTtpMidpointAxis(
      6, 
      8, 
      2, 
      3, 
      $T03().X, 
      "Double-Touch Midpoint X"
    ) | 0);
    this._tpMidPointVelX = (this.RegisterVelocityAxis(
      this._tpMidPointX, 
      2, 
      0, 
      null, 
      $T03().Unknown
    ).Id | 0);
    this._tpMidPointY = (this.RegisterTtpMidpointAxis(
      7, 
      9, 
      4, 
      5, 
      $T03().Y, 
      "Double-Touch Midpoint Y"
    ) | 0);
    this._tpMidPointVelY = (this.RegisterVelocityAxis(
      this._tpMidPointY, 
      2, 
      0, 
      null, 
      $T03().Unknown
    ).Id | 0);
  }; 

  function TouchDevice_$lRegisterTtpAngleAxis$gb__10_0 ($lp0$g) {
    var flag = !this.get_TwoPoint();
    if (flag) {
      var result = 0;
    } else {
      var position = this.GetPosition($T07().Touchpoint_0);
      var position2 = this.GetPosition($T07().Touchpoint_1);
      var float = $T06().op_Subtraction(position2.MemberwiseClone(), position);
      var num = Math.fround(Math.atan2(-float.y, float.x));
      result = num;
    }
    return result;
  }; 

  function TouchDevice_$lRegisterTtpDistanceAxis$gb__11_0 ($lp0$g) {
    var flag = !this.get_TwoPoint();
    if (flag) {
      var result = 0;
    } else {
      var position = this.GetPosition($T07().Touchpoint_0);
      var position2 = this.GetPosition($T07().Touchpoint_1);
      var length = +($T06().op_Subtraction(position2.MemberwiseClone(), position)).get_Length();
      result = length;
    }
    return result;
  }; 

  function TouchDevice_get_ActiveTouchpoints () {
    return ((this.GetAxis(1)) | 0);
  }; 

  function TouchDevice_get_TwoPoint () {
    return ((this.get_ActiveTouchpoints() | 0) >= 2);
  }; 

  function TouchDevice_get_TwoPointAngle () {
    return this.GetAxis(this._tpAngle);
  }; 

  function TouchDevice_get_TwoPointAngleVel () {
    return this.GetAxis(this._tpAngleVel);
  }; 

  function TouchDevice_get_TwoPointDistance () {
    return this.GetAxis(this._tpDistance);
  }; 

  function TouchDevice_get_TwoPointDistanceVel () {
    return this.GetAxis(this._tpDistanceVel);
  }; 

  function TouchDevice_get_TwoPointGesture () {
    var flag = !this.get_TwoPoint();
    if (flag) {
      var result = $T0A().None;
    } else {
      var num = (Math.abs((+this.get_TwoPointAngleVel() * +this._angleVelNormalFactor)));
      var num2 = +(this.get_TwoPointMidPointVel()).get_Length() * +this._midpointVelNormalFactor;
      var num3 = (Math.abs((+this.get_TwoPointDistanceVel() * +this._distanceVelNormalFactor)));
      var flag2 = !((num >= +this._doubleTouchMovementThreshold) || 
        (num2 >= +this._doubleTouchMovementThreshold)) && 
      (num3 < +this._doubleTouchMovementThreshold);
      if (flag2) {
        result = $T0A().None;
      } else {
        var flag3 = num > num2;
        if (flag3) {
          var flag4 = num > num3;
          if (flag4) {
            result = $T0A().Rotate;
          } else {
            result = $T0A().Pinch;
          }
        } else {
          var flag5 = num2 > num3;
          if (flag5) {
            result = $T0A().Move;
          } else {
            result = $T0A().Pinch;
          }
        }
      }
    }
    return result;
  }; 

  function TouchDevice_get_TwoPointMidPoint () {
    return $S00().Construct(this.GetAxis(this._tpMidPointX), this.GetAxis(this._tpMidPointY));
  }; 

  function TouchDevice_get_TwoPointMidPointVel () {
    return $S00().Construct(this.GetAxis(this._tpMidPointVelX), this.GetAxis(this._tpMidPointVelY));
  }; 

  function TouchDevice_GetPosition (touch) {
    return $S00().Construct(this.GetAxis(((Math.imul(2, ((touch - $T07().Touchpoint_0) | 0)) + 6) | 0)), this.GetAxis(((Math.imul(2, ((touch - $T07().Touchpoint_0) | 0)) + 7) | 0)));
  }; 

  function TouchDevice_GetTouchActive (touch) {
    return this.GetButton(touch.valueOf());
  }; 

  function TouchDevice_GetVelocity (touch) {
    return $S00().Construct(this.GetAxis(this._velocityIDs[Math.imul(2, ((touch - $T07().Touchpoint_0) | 0))]), this.GetAxis(this._velocityIDs[((Math.imul(2, ((touch - $T07().Touchpoint_0) | 0)) + 1) | 0)]));
  }; 

  function TouchDevice_RegisterTtpAngleAxis () {
    var newAxisID = (this.get_NewAxisID() | 0);
    var axisDescription = new ($T0B())();
    axisDescription.Id = newAxisID;
    axisDescription.Name = "Double-Touch Angle";
    axisDescription.Direction = $T03().Unknown;
    axisDescription.Nature = $T0C().Position;
    axisDescription.Bounded = $T0D().Constant;
    axisDescription.MaxValueOrAxis = 3.14159274;
    axisDescription.MinValueOrAxis = -3.14159274;
    var axisDescription2 = axisDescription;
    this.RegisterCalculatedAxis(axisDescription2.MemberwiseClone(), $T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lRegisterTtpAngleAxis$gb__10_0", $S01(), false, false)), 0);
    return axisDescription2.Id;
  }; 

  function TouchDevice_RegisterTtpDistanceAxis () {
    var newAxisID = (this.get_NewAxisID() | 0);
    var axisDescription = new ($T0B())();
    axisDescription.Id = newAxisID;
    axisDescription.Name = "Double-Touch Distance";
    axisDescription.Direction = $T03().Unknown;
    axisDescription.Nature = $T0C().Position;
    axisDescription.Bounded = $T0D().Unbound;
    var axisDescription2 = axisDescription;
    this.RegisterCalculatedAxis(axisDescription2.MemberwiseClone(), $T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lRegisterTtpDistanceAxis$gb__11_0", $S02(), false, false)), 0);
    return axisDescription2.Id;
  }; 

  function TouchDevice_RegisterTtpMidpointAxis (axId0, axId1, axIdMin, axIdMax, dir, name) {
    var $closure0 = new ($T10())();
    $closure0.$l$g4__this = this;
    $closure0.axId0 = (axId0 | 0);
    $closure0.axId1 = (axId1 | 0);
    var calculator = $T0E().New($closure0, null, new JSIL.MethodPointerInfo($asm04.Fusee.Engine.Core.TouchDevice_$l$gc__DisplayClass12_0, "$lRegisterTtpMidpointAxis$gb__0", $S03(), false, false));
    var newAxisID = (this.get_NewAxisID() | 0);
    var axisDescription = new ($T0B())();
    axisDescription.Id = newAxisID;
    axisDescription.Name = name;
    axisDescription.Direction = dir;
    axisDescription.Nature = $T0C().Position;
    axisDescription.Bounded = $T0D().OtherAxis;
    axisDescription.MinValueOrAxis = +axIdMin;
    axisDescription.MaxValueOrAxis = +axIdMax;
    var axisDescription2 = axisDescription;
    this.RegisterCalculatedAxis(axisDescription2.MemberwiseClone(), calculator, 0);
    return axisDescription2.Id;
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.InputDevice"), 
      Name: "Fusee.Engine.Core.TouchDevice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")), 
      TouchDevice__ctor
    );

    $.Method({Static:false, Public:false}, "$lRegisterTtpAngleAxis$gb__10_0", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      TouchDevice_$lRegisterTtpAngleAxis$gb__10_0
    );

    $.Method({Static:false, Public:false}, "$lRegisterTtpDistanceAxis$gb__11_0", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      TouchDevice_$lRegisterTtpDistanceAxis$gb__11_0
    );

    $.Method({Static:false, Public:true }, "get_ActiveTouchpoints", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchDevice_get_ActiveTouchpoints
    );

    $.Method({Static:false, Public:true }, "get_TwoPoint", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchDevice_get_TwoPoint
    );

    $.Method({Static:false, Public:true }, "get_TwoPointAngle", 
      JSIL.MethodSignature.Return($.Single), 
      TouchDevice_get_TwoPointAngle
    );

    $.Method({Static:false, Public:true }, "get_TwoPointAngleVel", 
      JSIL.MethodSignature.Return($.Single), 
      TouchDevice_get_TwoPointAngleVel
    );

    $.Method({Static:false, Public:true }, "get_TwoPointDistance", 
      JSIL.MethodSignature.Return($.Single), 
      TouchDevice_get_TwoPointDistance
    );

    $.Method({Static:false, Public:true }, "get_TwoPointDistanceVel", 
      JSIL.MethodSignature.Return($.Single), 
      TouchDevice_get_TwoPointDistanceVel
    );

    $.Method({Static:false, Public:true }, "get_TwoPointGesture", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Fusee.Engine.Core.TwoPointAction")), 
      TouchDevice_get_TwoPointGesture
    );

    $.Method({Static:false, Public:true }, "get_TwoPointMidPoint", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      TouchDevice_get_TwoPointMidPoint
    );

    $.Method({Static:false, Public:true }, "get_TwoPointMidPointVel", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float2")), 
      TouchDevice_get_TwoPointMidPointVel
    );

    $.Method({Static:false, Public:true }, "GetPosition", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float2"), [$asm03.TypeRef("Fusee.Engine.Common.TouchPoints")]), 
      TouchDevice_GetPosition
    );

    $.Method({Static:false, Public:true }, "GetTouchActive", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Fusee.Engine.Common.TouchPoints")]), 
      TouchDevice_GetTouchActive
    );

    $.Method({Static:false, Public:true }, "GetVelocity", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float2"), [$asm03.TypeRef("Fusee.Engine.Common.TouchPoints")]), 
      TouchDevice_GetVelocity
    );

    $.Method({Static:false, Public:false}, "RegisterTtpAngleAxis", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchDevice_RegisterTtpAngleAxis
    );

    $.Method({Static:false, Public:false}, "RegisterTtpDistanceAxis", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchDevice_RegisterTtpDistanceAxis
    );

    $.Method({Static:false, Public:false}, "RegisterTtpMidpointAxis", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm03.TypeRef("Fusee.Engine.Common.AxisDirection"), $.String
        ]), 
      TouchDevice_RegisterTtpMidpointAxis
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_velocityIDs", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpDistance", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpDistanceVel", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpAngle", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpAngleVel", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpMidPointX", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpMidPointVelX", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpMidPointY", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tpMidPointVelY", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_angleVelNormalFactor", $.Single);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_midpointVelNormalFactor", $.Single);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_distanceVelNormalFactor", $.Single);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_doubleTouchMovementThreshold", $.Single);

    $.Property({Static:false, Public:true }, "ActiveTouchpoints", $.Int32);

    $.Property({Static:false, Public:true }, "TwoPoint", $.Boolean);

    $.Property({Static:false, Public:true }, "TwoPointGesture", $asm04.TypeRef("Fusee.Engine.Core.TwoPointAction"));

    $.Property({Static:false, Public:true }, "TwoPointDistance", $.Single);

    $.Property({Static:false, Public:true }, "TwoPointDistanceVel", $.Single);

    $.Property({Static:false, Public:true }, "TwoPointAngle", $.Single);

    $.Property({Static:false, Public:true }, "TwoPointAngleVel", $.Single);

    $.Property({Static:false, Public:true }, "TwoPointMidPoint", $asm0A.TypeRef("Fusee.Math.Core.float2"));

    $.Property({Static:false, Public:true }, "TwoPointMidPointVel", $asm0A.TypeRef("Fusee.Math.Core.float2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.TouchDevice+<>c__DisplayClass12_0 */ 

(function $l$gc__DisplayClass12_0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.TouchDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };


  function $l$gc__DisplayClass12_0__ctor () {
  }; 

  function $l$gc__DisplayClass12_0_$lRegisterTtpMidpointAxis$gb__0 ($lp0$g) {
    var flag = !(this.$l$g4__this).get_TwoPoint();
    if (flag) {
      var result = 0;
    } else {
      var axis = +(this.$l$g4__this).GetAxis(this.axId0);
      var axis2 = +(this.$l$g4__this).GetAxis(this.axId1);
      var num = (axis + axis2) * 0.5;
      result = num;
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.TouchDevice+<>c__DisplayClass12_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass12_0__ctor
    );

    $.Method({Static:false, Public:false}, "$lRegisterTtpMidpointAxis$gb__0", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      $l$gc__DisplayClass12_0_$lRegisterTtpMidpointAxis$gb__0
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm04.TypeRef("Fusee.Engine.Core.TouchDevice"));

    $.Field({Static:false, Public:true }, "axId0", $.Int32);

    $.Field({Static:false, Public:true }, "axId1", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.VideoManager */ 

(function VideoManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoManagerImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoManagerImp.CreateVideoStreamImpFromCamera)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoManagerImp.CreateVideoStreamImpFromFile)) ();
  };


  function VideoManager__ctor () {
  }; 

  function VideoManager_get_Instance () {
    var arg_15_0 = null;
    if ((arg_15_0 = $thisType._instance) === null) {
      arg_15_0 = $thisType._instance = new $thisType();
    }
    return arg_15_0;
  }; 

  function VideoManager_LoadVideoFromCamera (cameraIndex, useAudio) {
    return $IM00().Call(this._videoManagerImp, null, cameraIndex, useAudio);
  }; 

  function VideoManager_LoadVideoFromFile (filename, loopVideo, useAudio) {
    return $IM01().Call(this._videoManagerImp, null, filename, loopVideo, useAudio);
  }; 

  function VideoManager_set_VideoManagerImp (value) {
    this._videoManagerImp = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.VideoManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      VideoManager__ctor
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      VideoManager_get_Instance
    );

    $.Method({Static:false, Public:true }, "LoadVideoFromCamera", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"), [$.Int32, $.Boolean]), 
      VideoManager_LoadVideoFromCamera
    );

    $.Method({Static:false, Public:true }, "LoadVideoFromFile", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"), [
          $.String, $.Boolean, 
          $.Boolean
        ]), 
      VideoManager_LoadVideoFromFile
    );

    $.Method({Static:false, Public:false}, "set_VideoManagerImp", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IVideoManagerImp")), 
      VideoManager_set_VideoManagerImp
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type);

    $.Field({Static:false, Public:false}, "_videoManagerImp", $asm03.TypeRef("Fusee.Engine.Common.IVideoManagerImp"));

    $.Property({Static:false, Public:false}, "VideoManagerImp", $asm03.TypeRef("Fusee.Engine.Common.IVideoManagerImp"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Core.VideoStream */ 

(function VideoStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoStreamImp)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoStreamImp.GetCurrentFrame)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoStreamImp.Start)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm03.Fusee.Engine.Common.IVideoStreamImp.Stop)) ();
  };


  function VideoStream__ctor () {
  }; 

  function VideoStream_GetCurrentFrame () {
    return $IM00().Call(this._imp, null);
  }; 

  function VideoStream_Start () {
    $IM01().Call(this._imp, null);
  }; 

  function VideoStream_Stop () {
    $IM02().Call(this._imp, null);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Core.VideoStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      VideoStream__ctor
    );

    $.Method({Static:false, Public:true }, "GetCurrentFrame", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.IImageData")), 
      VideoStream_GetCurrentFrame
    );

    $.Method({Static:false, Public:true }, "Start", 
      JSIL.MethodSignature.Void, 
      VideoStream_Start
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      VideoStream_Stop
    );

    $.Field({Static:false, Public:true }, "_imp", $asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };


  function $lPrivateImplementationDetails$g_ComputeStringHash (s) {
    if (s !== null) {
      var num = 2166136261;

      for (var i = 0; i < (s.length | 0); i = ((i + 1) | 0)) {
        num = (Math.imul((((s[i]).charCodeAt(0) | 0) ^ num), 16777619) >>> 0);
      }
    }
    return num;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String]), 
      $lPrivateImplementationDetails$g_ComputeStringHash
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

