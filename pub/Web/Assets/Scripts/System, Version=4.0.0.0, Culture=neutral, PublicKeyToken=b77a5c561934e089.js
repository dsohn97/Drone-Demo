/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm12 = JSIL.DeclareAssembly("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* enum MatchState */ 

JSIL.MakeEnum(
  {
    FullName: "MatchState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    HasSymbol: 1, 
    HasMatch: 2, 
    HasSymbolAndMatch: 3, 
  }
);

/* struct Interop+SChannel+SCHANNEL_ALERT_TOKEN */ 

(function SCHANNEL_ALERT_TOKEN$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Interop+SChannel+SCHANNEL_ALERT_TOKEN", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwTokenType", $.UInt32);

    $.Field({Static:false, Public:true }, "dwAlertType", $.UInt32);

    $.Field({Static:false, Public:true }, "dwAlertNumber", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.VisualBasic");
JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.CodeDom");
JSIL.DeclareNamespace("System.CodeDom.Compiler");
JSIL.DeclareNamespace("System.ComponentModel");
/* class System.ComponentModel.Component */ 

(function Component$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.MarshalByRefObject"), 
      Name: "System.ComponentModel.Component", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanRaiseEvents", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanRaiseEventsInternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DesignMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Site", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.ComponentModel.ISite"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetService", 
      new JSIL.MethodSignature($.Object, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventDisposed", $.Object);

    $.Field({Static:false, Public:false}, "site", $asm12.TypeRef("System.ComponentModel.ISite"));

    $.Field({Static:false, Public:false}, "events", $asm12.TypeRef("System.ComponentModel.EventHandlerList"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanRaiseEvents", $.Boolean);

    $.Property({Static:false, Public:false}, "CanRaiseEventsInternal", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Site", $asm12.TypeRef("System.ComponentModel.ISite"));

    $.Property({Static:false, Public:false}, "DesignMode", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.ComponentModel.IComponent"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.CodeDom.Compiler.CodeDomProvider */ 

(function CodeDomProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Component"), 
      Name: "System.CodeDom.Compiler.CodeDomProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateProvider", 
      new JSIL.MethodSignature($.Type, [$.String, $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:false}, "get_Config", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.CodeDom.Compiler.CodeDomCompilationConfiguration"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCompilerInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.CodeDom.Compiler.CompilerInfo"), [$.String])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:false}, "GetCompilerInfoForLanguageNoThrow", 
      new JSIL.MethodSignature($asm12.TypeRef("System.CodeDom.Compiler.CompilerInfo"), [$.String])
    );

    $.Property({Static:true , Public:false}, "Config", $asm12.TypeRef("System.CodeDom.Compiler.CodeDomCompilationConfiguration"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.VisualBasic.VBCodeProvider */ 

(function VBCodeProvider$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
      Name: "Microsoft.VisualBasic.VBCodeProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.Field({Static:false, Public:false}, "generator", $asm12.TypeRef("Microsoft.VisualBasic.VBCodeGenerator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.CodeGenerator */ 

(function CodeGenerator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.CodeDom.Compiler.CodeGenerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.CodeCompiler */ 

(function CodeCompiler$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.CodeDom.Compiler.CodeGenerator"), 
      Name: "System.CodeDom.Compiler.CodeCompiler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.VBCodeGenerator */ 

(function VBCodeGenerator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.CodeDom.Compiler.CodeCompiler"), 
      Name: "Microsoft.VisualBasic.VBCodeGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.Field({Static:false, Public:false}, "provOptions", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "keywords", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.String])]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.CSharp");
/* class Microsoft.CSharp.CSharpCodeProvider */ 

(function CSharpCodeProvider$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
      Name: "Microsoft.CSharp.CSharpCodeProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.Field({Static:false, Public:false}, "generator", $asm12.TypeRef("Microsoft.CSharp.CSharpCodeGenerator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.CSharp.CSharpCodeGenerator */ 

(function CSharpCodeGenerator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.CSharp.CSharpCodeGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.Field({Static:false, Public:false}, "provOptions", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "keywords", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.String])]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Win32");
/* class Microsoft.Win32.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;



























  JSIL.MakeStaticClass("Microsoft.Win32.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "AdjustTokenPrivileges", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean, 
          $asm12.TypeRef("Microsoft.Win32.NativeMethods+TokenPrivileges"), $.Int32, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateFileMapping", 
      new JSIL.MethodSignature($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeFileMappingHandle"), [
          $.IntPtr, $asm12.TypeRef("Microsoft.Win32.NativeMethods+SECURITY_ATTRIBUTES"), 
          $.Int32, $.Int32, 
          $.Int32, $.String
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CreateToolhelp32Snapshot", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32, $.Int32]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DuplicateHandle", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle")]), 
          $.Int32, $.Boolean, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "EnumProcesses", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "psapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "EnumProcessModules", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "psapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetCurrentProcess", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetCurrentProcessId", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetExitCodeProcess", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetModuleBaseName", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Int32
        ]), 
      {
        Module: "psapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetModuleFileNameEx", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Int32
        ]), 
      {
        Module: "psapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetModuleInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm12.TypeRef("Microsoft.Win32.NativeMethods+NtModuleInfo"), $.Int32
        ]), 
      {
        Module: "psapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetProcessTimes", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LookupPrivilegeValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Microsoft.Win32.NativeMethods+LUID")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPTStr"
          }, 
          {
            NativeType: "LPTStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "Module32First", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "Module32Next", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "NtQueryInformationProcess", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $.Int32, 
          $asm12.TypeRef("Microsoft.Win32.NativeMethods+NtProcessBasicInfo"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "ntdll.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "NtQuerySystemInformation", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ntdll.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "OpenFileMapping", 
      new JSIL.MethodSignature($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeFileMappingHandle"), [
          $.Int32, $.Boolean, 
          $.String
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenProcess", 
      new JSIL.MethodSignature($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), [
          $.Int32, $.Boolean, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenProcessToken", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "Process32First", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "Process32Next", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "Thread32First", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm12.TypeRef("Microsoft.Win32.NativeMethods+WinThreadEntry")]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "Thread32Next", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm12.TypeRef("Microsoft.Win32.NativeMethods+WinThreadEntry")]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "VirtualQuery", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeFileMapViewHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Microsoft.Win32.NativeMethods+MEMORY_BASIC_INFORMATION")]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "NullHandleRef", $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "INVALID_HANDLE_VALUE", $.IntPtr);

    $.Field({Static:true , Public:true , ReadOnly:true }, "HKEY_LOCAL_MACHINE", $.IntPtr);


    function NativeMethods__cctor () {
      $thisType.NullHandleRef = new $asm0F.System.Runtime.InteropServices.HandleRef();
      $thisType.INVALID_HANDLE_VALUE = new $asm0F.System.IntPtr();
      $thisType.HKEY_LOCAL_MACHINE = new $asm0F.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NativeMethods__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+TEXTMETRIC */ 

(function TEXTMETRIC$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+TEXTMETRIC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+SECURITY_ATTRIBUTES */ 

(function SECURITY_ATTRIBUTES$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+SECURITY_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "nLength", $.Int32);

    $.Field({Static:false, Public:true }, "lpSecurityDescriptor", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeLocalMemHandle"));

    $.Field({Static:false, Public:true }, "bInheritHandle", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+PERF_COUNTER_BLOCK */ 

(function PERF_COUNTER_BLOCK$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+PERF_COUNTER_BLOCK", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "ByteLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+PERF_COUNTER_DEFINITION */ 

(function PERF_COUNTER_DEFINITION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+PERF_COUNTER_DEFINITION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "ByteLength", $.Int32);

    $.Field({Static:false, Public:true }, "CounterNameTitleIndex", $.Int32);

    $.Field({Static:false, Public:true }, "CounterNameTitlePtr", $.Int32);

    $.Field({Static:false, Public:true }, "CounterHelpTitleIndex", $.Int32);

    $.Field({Static:false, Public:true }, "CounterType", $.Int32);

    $.Field({Static:false, Public:true }, "CounterOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+PERF_DATA_BLOCK */ 

(function PERF_DATA_BLOCK$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+PERF_DATA_BLOCK", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "TotalByteLength", $.Int32);

    $.Field({Static:false, Public:true }, "HeaderLength", $.Int32);

    $.Field({Static:false, Public:true }, "NumObjectTypes", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+PERF_INSTANCE_DEFINITION */ 

(function PERF_INSTANCE_DEFINITION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+PERF_INSTANCE_DEFINITION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "ByteLength", $.Int32);

    $.Field({Static:false, Public:true }, "NameOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+PERF_OBJECT_TYPE */ 

(function PERF_OBJECT_TYPE$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+PERF_OBJECT_TYPE", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "TotalByteLength", $.Int32);

    $.Field({Static:false, Public:true }, "DefinitionLength", $.Int32);

    $.Field({Static:false, Public:true }, "HeaderLength", $.Int32);

    $.Field({Static:false, Public:true }, "ObjectNameTitleIndex", $.Int32);

    $.Field({Static:false, Public:true }, "ObjectHelpTitleIndex", $.Int32);

    $.Field({Static:false, Public:true }, "NumCounters", $.Int32);

    $.Field({Static:false, Public:true }, "NumInstances", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+NtModuleInfo */ 

(function NtModuleInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+NtModuleInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "BaseOfDll", $.IntPtr);

    $.Field({Static:false, Public:true }, "SizeOfImage", $.Int32);

    $.Field({Static:false, Public:true }, "EntryPoint", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+WinProcessEntry */ 

(function WinProcessEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+WinProcessEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cntUsage", $.Int32);

    $.Field({Static:false, Public:true }, "th32ProcessID", $.Int32);

    $.Field({Static:false, Public:true }, "th32DefaultHeapID", $.IntPtr);

    $.Field({Static:false, Public:true }, "th32ModuleID", $.Int32);

    $.Field({Static:false, Public:true }, "pcPriClassBase", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+WinThreadEntry */ 

(function WinThreadEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+WinThreadEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "dwSize", $.Int32);

    $.Field({Static:false, Public:true }, "th32ThreadID", $.Int32);

    $.Field({Static:false, Public:true }, "th32OwnerProcessID", $.Int32);

    $.Field({Static:false, Public:true }, "tpBasePri", $.Int32);

    $.Field({Static:false, Public:true }, "tpDeltaPri", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+WinModuleEntry */ 

(function WinModuleEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+WinModuleEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "th32ModuleID", $.Int32);

    $.Field({Static:false, Public:true }, "modBaseAddr", $.IntPtr);

    $.Field({Static:false, Public:true }, "modBaseSize", $.Int32);

    $.Field({Static:false, Public:true }, "hModule", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+NtProcessBasicInfo */ 

(function NtProcessBasicInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+NtProcessBasicInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "PebBaseAddress", $.IntPtr);

    $.Field({Static:false, Public:true }, "AffinityMask", $.IntPtr);

    $.Field({Static:false, Public:true }, "UniqueProcessId", $.IntPtr);

    $.Field({Static:false, Public:true }, "InheritedFromUniqueProcessId", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.NativeMethods+LUID */ 

(function LUID$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.NativeMethods+LUID", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.NativeMethods+TokenPrivileges */ 

(function TokenPrivileges$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods+TokenPrivileges", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "PrivilegeCount", $.Int32);

    $.Field({Static:false, Public:true }, "Luid", $asm12.TypeRef("Microsoft.Win32.NativeMethods+LUID"));

    $.Field({Static:false, Public:true }, "Attributes", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.NativeMethods+MEMORY_BASIC_INFORMATION */ 

(function MEMORY_BASIC_INFORMATION$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.NativeMethods+MEMORY_BASIC_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "RegionSize", $.UIntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("Microsoft.Win32.SafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FormatMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.IntPtr, 
          $.UInt32, $.Int32, 
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.IntPtr])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetComputerName", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetStockObject", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32]), 
      {
        Module: "gdi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetTextMetrics", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $asm12.TypeRef("Microsoft.Win32.NativeMethods+TEXTMETRIC")]), 
      {
        Module: "gdi32.dll", 
        CharSet: 'auto',
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "InterlockedCompareExchange", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $.Int32
        ])
    );

    $.PInvokeMethod({Static:true , Public:true }, "IsWow64Process", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "MessageBox", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.String, 
          $.String, $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "MessageBoxSystem", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "user32.dll", 
        CharSet: 'unicode',
        EntryPoint: "MessageBoxW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OutputDebugString", 
      JSIL.MethodSignature.Action($.String), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "QueryPerformanceCounter", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "QueryPerformanceFrequency", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])]), 
      {
        Module: "kernel32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;


















  JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "_AppPolicyGetClrCompat", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Microsoft.Win32.UnsafeNativeMethods+AppPolicyClrCompat")])]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "AppPolicyGetClrCompat", 
        Result: {
          NativeType: "I4"
        }
      }
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "_GetCurrentPackageId", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Byte])]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "GetCurrentPackageId", 
        Result: {
          NativeType: "I4"
        }
      }
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "_IsPackagedProcess", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DoesWin32MethodExist", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentProcessToken", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetDC", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "user32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetModuleHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetNumberOfEventLogRecords", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetOldestEventLogRecord", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetSystemMetrics", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "user32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetTokenInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "NotifyChangeEventLog", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle")]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ReadEventLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ReleaseDC", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $.IntPtr]), 
      {
        Module: "user32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ReportEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int16, 
          $.UInt16, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int16, 
          $.Int32, $asm0F.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SelectObject", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.IntPtr]), 
      {
        Module: "gdi32.dll", 
        CharSet: 'auto',
      }
    );

    $.Field({Static:true , Public:false}, "IsPackagedProcess", $asm0F.TypeRef("System.Lazy`1", [$.Boolean]))
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.UnsafeNativeMethods+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__152_0", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Win32.InternetSecurityManager */ 

(function InternetSecurityManager$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.InternetSecurityManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["7b8a2d94-0ac9-11d1-896c-00c04Fb6bfc4"]; });

})();

/* interface Microsoft.Win32.IInternetSecurityManager */ 

JSIL.MakeInterface(
  "Microsoft.Win32.IInternetSecurityManager", false, [], function ($) {
    $.Method({}, "MapUrlToZone", new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]));
  }, [])
  .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
  .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["79eac9ee-baf9-11ce-8c82-00aa004ba90b"]; })
  .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm0F.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

JSIL.DeclareNamespace("System.Net");
JSIL.DeclareNamespace("System.Net.Cache");
/* class System.Net.Cache.RequestCache */ 

(function RequestCache$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.RequestCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrivateCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Retrieve", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Cache.RequestCacheEntry")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Store", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [
          $.String, $.Int64, 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryRemove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryRetrieve", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Cache.RequestCacheEntry")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryStore", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int64, 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryUpdate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnlockEntry", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "LineSplits", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "_IsPrivateCache", $.Boolean);

    $.Field({Static:false, Public:false}, "_CanWrite", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrivateCache", $.Boolean);

    $.Property({Static:false, Public:false}, "CanWrite", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.WinInetCache */ 

(function WinInetCache$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.RequestCache"), 
      Name: "Microsoft.Win32.WinInetCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineMetaInfo", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Collections.Specialized.StringCollection"), $asm12.TypeRef("System.Collections.Specialized.StringCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWriteStream", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [
          $.String, $.Int64, 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Lookup", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Cache.RequestCacheEntry")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Retrieve", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Cache.RequestCacheEntry")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Store", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [
          $.String, $.Int64, 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryRemove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryRemove", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryRetrieve", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Cache.RequestCacheEntry")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryStore", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int64, 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryUpdate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnlockEntry", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "async", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_MinDateTimeUtcForFileTimeUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_MaxTimeSpanForInt32", $asm0F.TypeRef("System.TimeSpan"));


    function WinInetCache__cctor () {
      $thisType.s_MinDateTimeUtcForFileTimeUtc = new $asm0F.System.DateTime();
      $thisType.s_MaxTimeSpanForInt32 = new $asm0F.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      WinInetCache__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.WinInetCache+ReadStream */ 

(function ReadStream$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.FileStream"), 
      Name: "Microsoft.Win32.WinInetCache+ReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Cache._WinInetCache+Entry"), $asm12.TypeRef("System.Net.SafeUnlockUrlCacheEntryFile"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.IRequestLifetimeTracker.TrackRequestLifetime", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Overrides($asm12.TypeRef("System.Net.IRequestLifetimeTracker"), "TrackRequestLifetime");

    $.ExternalMethod({Static:false, Public:false}, "UnlockEntry", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_Key", $.String);

    $.Field({Static:false, Public:false}, "m_ReadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_WriteTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_Handle", $asm12.TypeRef("System.Net.SafeUnlockUrlCacheEntryFile"));

    $.Field({Static:false, Public:false}, "m_Disposed", $.Int32);

    $.Field({Static:false, Public:false}, "m_CallNesting", $.Int32);

    $.Field({Static:false, Public:false}, "m_Event", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "m_Aborted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_RequestLifetimeSetter", $asm12.TypeRef("System.Net.RequestLifetimeSetter"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.ICloseEx"), 
      /* 2 */ $asm12.TypeRef("System.Net.IRequestLifetimeTracker")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.WinInetCache+WriteStream */ 

(function WriteStream$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.FileStream"), 
      Name: "Microsoft.Win32.WinInetCache+WriteStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Cache._WinInetCache+Entry"), $.Boolean, 
          $.Int64, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_Entry", $asm12.TypeRef("System.Net.Cache._WinInetCache+Entry"));

    $.Field({Static:false, Public:false}, "m_IsThrow", $.Boolean);

    $.Field({Static:false, Public:false}, "m_StreamSize", $.Int64);

    $.Field({Static:false, Public:false}, "m_Aborted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ReadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_WriteTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_Disposed", $.Int32);

    $.Field({Static:false, Public:false}, "m_CallNesting", $.Int32);

    $.Field({Static:false, Public:false}, "m_Event", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "m_OneWriteSucceeded", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Win32.SafeHandles");
/* class Microsoft.Win32.SafeHandles.SafeEventLogReadHandle */ 

(function SafeEventLogReadHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeEventLogReadHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "OpenEventLog", 
      new JSIL.MethodSignature($.Type, [$.String, $.String]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeEventLogWriteHandle */ 

(function SafeEventLogWriteHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeEventLogWriteHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "RegisterEventSource", 
      new JSIL.MethodSignature($.Type, [$.String, $.String]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeFileMappingHandle */ 

(function SafeFileMappingHandle$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeFileMappingHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeFileMapViewHandle */ 

(function SafeFileMapViewHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeFileMapViewHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "MapViewOfFile", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeFileMappingHandle"), $.Int32, 
          $.Int32, $.Int32, 
          $.UIntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeLibraryHandle */ 

(function SafeLibraryHandle$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeLibraryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeLocalMemHandle */ 

(function SafeLocalMemHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeLocalMemHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.PInvokeMethod({Static:true , Public:false}, "ConvertStringSecurityDescriptorToSecurityDescriptor", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.IntPtr
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeProcessHandle */ 

(function SafeProcessHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeProcessHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.PInvokeMethod({Static:true , Public:false}, "OpenProcess", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Boolean, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.Field({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeX509ChainHandle */ 

(function SafeX509ChainHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeX509ChainHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.AppContextDefaultValues */ 

(function AppContextDefaultValues$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.AppContextDefaultValues", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ParseTargetFrameworkName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PopulateDefaultValues", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PopulateDefaultValuesPartial", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseFrameworkName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.LocalAppContextSwitches */ 

(function LocalAppContextSwitches$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.LocalAppContextSwitches", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_DoNotUseNativeZipLibraryForDecompression", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontCheckCertificateEKUs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontEnableSchSendAuxRecord", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontEnableSchUseStrongCrypto", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontEnableStrictRFC3986ReservedCharacterSets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontEnableSystemDefaultTlsVersions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontEnableTlsAlerts", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontKeepUnicodeBidiFormattingCharacters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "_dontEnableStrictRFC3986ReservedCharacterSets", $.Int32);

    $.Field({Static:true , Public:false}, "_dontKeepUnicodeBidiFormattingCharacters", $.Int32);

    $.Field({Static:true , Public:false}, "_dontEnableSchUseStrongCrypto", $.Int32);

    $.Field({Static:true , Public:false}, "_dontEnableSchSendAuxRecord", $.Int32);

    $.Field({Static:true , Public:false}, "_dontEnableSystemSystemDefaultTlsVersions", $.Int32);

    $.Field({Static:true , Public:false}, "_dontEnableTlsAlerts", $.Int32);

    $.Field({Static:true , Public:false}, "_dontCheckCertificateEKUs", $.Int32);

    $.Field({Static:true , Public:false}, "_doNotUseNativeZipLibraryForDecompression", $.Int32);

    $.Property({Static:true , Public:true }, "DontEnableStrictRFC3986ReservedCharacterSets", $.Boolean);

    $.Property({Static:true , Public:true }, "DontKeepUnicodeBidiFormattingCharacters", $.Boolean);

    $.Property({Static:true , Public:true }, "DontEnableSchUseStrongCrypto", $.Boolean);

    $.Property({Static:true , Public:true }, "DontEnableSchSendAuxRecord", $.Boolean);

    $.Property({Static:true , Public:true }, "DontEnableSystemDefaultTlsVersions", $.Boolean);

    $.Property({Static:true , Public:true }, "DontEnableTlsAlerts", $.Boolean);

    $.Property({Static:true , Public:true }, "DontCheckCertificateEKUs", $.Boolean);

    $.Property({Static:true , Public:true }, "DoNotUseNativeZipLibraryForDecompression", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ThrowHelper */ 

(function ThrowHelper$Members () {
  var $, $thisType;














  JSIL.MakeStaticClass("System.ThrowHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetArgumentName", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.ExceptionArgument")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceName", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.ExceptionResource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IfNullAndNullsAreIllegalThenThrow", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.ExceptionArgument")], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgumentException", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.ExceptionResource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgumentNullException", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.ExceptionArgument"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgumentOutOfRangeException", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.ExceptionArgument"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgumentOutOfRangeException", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.ExceptionArgument"), $asm12.TypeRef("System.ExceptionResource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidOperationException", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.ExceptionResource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowKeyNotFoundException", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowNotSupportedException", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.ExceptionResource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowSerializationException", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.ExceptionResource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowWrongKeyTypeArgumentException", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowWrongValueTypeArgumentException", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.ExceptionArgument */ 

JSIL.MakeEnum(
  {
    FullName: "System.ExceptionArgument", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    obj: 0, 
    dictionary: 1, 
    array: 2, 
    info: 3, 
    key: 4, 
    collection: 5, 
    match: 6, 
    converter: 7, 
    queue: 8, 
    stack: 9, 
    capacity: 10, 
    index: 11, 
    startIndex: 12, 
    value: 13, 
    count: 14, 
    arrayIndex: 15, 
    item: 16, 
  }
);

/* enum System.ExceptionResource */ 

JSIL.MakeEnum(
  {
    FullName: "System.ExceptionResource", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Argument_ImplementIComparable: 0, 
    ArgumentOutOfRange_NeedNonNegNum: 1, 
    ArgumentOutOfRange_NeedNonNegNumRequired: 2, 
    Arg_ArrayPlusOffTooSmall: 3, 
    Argument_AddingDuplicate: 4, 
    Serialization_InvalidOnDeser: 5, 
    Serialization_MismatchedCount: 6, 
    Serialization_MissingValues: 7, 
    Arg_RankMultiDimNotSupported: 8, 
    Arg_NonZeroLowerBound: 9, 
    Argument_InvalidArrayType: 10, 
    NotSupported_KeyCollectionSet: 11, 
    ArgumentOutOfRange_SmallCapacity: 12, 
    ArgumentOutOfRange_Index: 13, 
    Argument_InvalidOffLen: 14, 
    NotSupported_ReadOnlyCollection: 15, 
    InvalidOperation_CannotRemoveFromStackOrQueue: 16, 
    InvalidOperation_EmptyCollection: 17, 
    InvalidOperation_EmptyQueue: 18, 
    InvalidOperation_EnumOpCantHappen: 19, 
    InvalidOperation_EnumFailedVersion: 20, 
    InvalidOperation_EmptyStack: 21, 
    InvalidOperation_EnumNotStarted: 22, 
    InvalidOperation_EnumEnded: 23, 
    NotSupported_SortedListNestedWrite: 24, 
    NotSupported_ValueCollectionSet: 25, 
  }
);

/* class System.UriParser */ 

(function UriParser$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.UriParser", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.UriSyntaxFlags"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOrFetchAsUnknownV1Syntax", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultPort", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DontEnableStrictRFC3986ReservedCharacterSets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DontKeepUnicodeBidiFormattingCharacters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Flags", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.UriSyntaxFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSimple", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldUseLegacyV2Quirks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetComponents", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.UriComponents"), 
          $asm12.TypeRef("System.UriFormat")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSyntax", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InFact", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.UriSyntaxFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeAndValidate", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriFormatException")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetComponents", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.UriComponents"), 
          $asm12.TypeRef("System.UriFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIsBaseOf", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalOnNewUri", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalResolve", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Uri"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriFormatException")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidate", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriFormatException")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAllSet", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.UriSyntaxFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsBaseOf", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFullMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.UriSyntaxFlags"), $asm12.TypeRef("System.UriSyntaxFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotAny", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.UriSyntaxFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnNewUri", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Uri"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriFormatException")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpdatableFlags", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.UriSyntaxFlags"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_Table", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]));

    $.Field({Static:true , Public:false}, "m_TempTable", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]));

    $.Field({Static:false, Public:false}, "m_Flags", $asm12.TypeRef("System.UriSyntaxFlags"));

    $.Field({Static:false, Public:false}, "m_UpdatableFlags", $asm12.TypeRef("System.UriSyntaxFlags"));

    $.Field({Static:false, Public:false}, "m_UpdatableFlagsUsed", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "m_Port", $.Int32);

    $.Field({Static:false, Public:false}, "m_Scheme", $.String);

    $.Field({Static:true , Public:false}, "HttpUri", $.Type);

    $.Field({Static:true , Public:false}, "HttpsUri", $.Type);

    $.Field({Static:true , Public:false}, "WsUri", $.Type);

    $.Field({Static:true , Public:false}, "WssUri", $.Type);

    $.Field({Static:true , Public:false}, "FtpUri", $.Type);

    $.Field({Static:true , Public:false}, "FileUri", $.Type);

    $.Field({Static:true , Public:false}, "GopherUri", $.Type);

    $.Field({Static:true , Public:false}, "NntpUri", $.Type);

    $.Field({Static:true , Public:false}, "NewsUri", $.Type);

    $.Field({Static:true , Public:false}, "MailToUri", $.Type);

    $.Field({Static:true , Public:false}, "UuidUri", $.Type);

    $.Field({Static:true , Public:false}, "TelnetUri", $.Type);

    $.Field({Static:true , Public:false}, "LdapUri", $.Type);

    $.Field({Static:true , Public:false}, "NetTcpUri", $.Type);

    $.Field({Static:true , Public:false}, "NetPipeUri", $.Type);

    $.Field({Static:true , Public:false}, "VsMacrosUri", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_QuirksVersion", $asm12.TypeRef("System.UriParser+UriQuirksVersion"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "HttpSyntaxFlags", $asm12.TypeRef("System.UriSyntaxFlags"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FileSyntaxFlags", $asm12.TypeRef("System.UriSyntaxFlags"));

    $.Property({Static:false, Public:false}, "SchemeName", $.String);

    $.Property({Static:false, Public:false}, "DefaultPort", $.Int32);

    $.Property({Static:true , Public:false}, "ShouldUseLegacyV2Quirks", $.Boolean);

    $.Property({Static:true , Public:false}, "DontEnableStrictRFC3986ReservedCharacterSets", $.Boolean);

    $.Property({Static:true , Public:false}, "DontKeepUnicodeBidiFormattingCharacters", $.Boolean);

    $.Property({Static:false, Public:false}, "Flags", $asm12.TypeRef("System.UriSyntaxFlags"));

    $.Property({Static:false, Public:false}, "IsSimple", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.UriParser+UriQuirksVersion */ 

JSIL.MakeEnum(
  {
    FullName: "System.UriParser+UriQuirksVersion", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    V2: 2, 
    V3: 3, 
  }
);

/* class System.UriParser+BuiltInUriParser */ 

(function BuiltInUriParser$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.UriParser"), 
      Name: "System.UriParser+BuiltInUriParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm12.TypeRef("System.UriSyntaxFlags")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Uri */ 

(function Uri$Members () {
  var $, $thisType;

























































































































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Uri", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri+Flags"), $asm12.TypeRef("System.UriParser"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllowIdnStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.UriParser"), $asm12.TypeRef("System.Uri+Flags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateCaseInsensitiveHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAuthorityHelper", 
      new JSIL.MethodSignature($.UInt16, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $.UInt16, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.ParsingError")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri+Flags")]), $asm12.TypeRef("System.UriParser"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAuthorityHelperHandleAnyHostIri", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32, $.Boolean, 
          $.Boolean, $asm12.TypeRef("System.UriParser"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri+Flags")]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.ParsingError")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAuthorityHelperHandleDnsIri", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $.Int32, $.Int32, 
          $.Boolean, $.Boolean, 
          $asm12.TypeRef("System.UriParser"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri+Flags")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.ParsingError")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCanonical", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri+Check"), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt16]), 
          $.UInt16, $.Char
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForConfigLoad", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForEscapedUnreserved", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForUnicode", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckKnownSchemes", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Int64]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriParser")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckSchemeName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckSchemeSyntax", 
      new JSIL.MethodSignature($asm12.TypeRef("System.ParsingError"), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriParser")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineUri", 
      new JSIL.MethodSignature($.String, [
          $.Type, $.String, 
          $asm12.TypeRef("System.UriFormat")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Type, 
          $asm12.TypeRef("System.UriComponents"), $asm12.TypeRef("System.UriFormat"), 
          $asm0F.TypeRef("System.StringComparison")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compress", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm12.TypeRef("System.UriParser")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateHelper", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Boolean, 
          $asm12.TypeRef("System.UriKind"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriFormatException")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateHostString", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateHostStringHelper", 
      new JSIL.MethodSignature($.String, [
          $.String, $.UInt16, 
          $.UInt16, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri+Flags")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateThis", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm12.TypeRef("System.UriKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateThisFromUri", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUri", 
      new JSIL.MethodSignature(null, [
          $.Type, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUriInfo", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri+Flags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureHostString", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureParseRemaining", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureUriInfo", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri+UriInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "EscapeDataString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EscapeUnescapeIri", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32, $asm12.TypeRef("System.UriComponents")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindEndOfComponent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt16]), 
          $.UInt16, $.Char
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindEndOfComponent", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt16]), 
          $.UInt16, $.Char
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHex", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AbsolutePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AbsoluteUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowIdn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsSafeHost", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fragment", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasAuthority", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Host", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostNameType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.UriHostNameType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HostType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri+Flags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdnHost", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InitializeLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAbsoluteUri", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefaultPort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDosPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsImplicitFile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLoopback", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNotAbsoluteUri", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUnc", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUncOrDosPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUncPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OriginalStringSwitched", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PathAndQuery", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Port", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrivateAbsolutePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Query", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scheme", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SecuredPathIndex", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Segments", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Syntax", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.UriParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserDrivenParsing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserEscaped", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserInfo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCanonicalPath", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm12.TypeRef("System.UriFormat")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCombinedString", 
      new JSIL.MethodSignature($asm12.TypeRef("System.ParsingError"), [
          $.Type, $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetComponents", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.UriComponents"), $asm12.TypeRef("System.UriFormat")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComponentsHelper", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.UriComponents"), $asm12.TypeRef("System.UriFormat")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEscapedParts", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.UriComponents")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetException", 
      new JSIL.MethodSignature($asm12.TypeRef("System.UriFormatException"), [$asm12.TypeRef("System.ParsingError")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHostViaCustomSyntax", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocalPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParts", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.UriComponents"), $asm12.TypeRef("System.UriFormat")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRelativeSerializationString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.UriFormat")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnescapedParts", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.UriComponents"), $asm12.TypeRef("System.UriFormat")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUriPartsFromUserString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.UriComponents")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InFact", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri+Flags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeUri", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.ParsingError"), $asm12.TypeRef("System.UriKind"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriFormatException")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeUriConfig", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalEscapeString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IriParsingStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.UriParser")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAsciiLetter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAsciiLetterOrDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBaseOf", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBaseOfHelper", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBidiControlCharacter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsGenDelim", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsHexDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsIntranet", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLWS", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotAny", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri+Flags")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMinimal", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.UriFormatException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRemaining", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseScheme", 
      new JSIL.MethodSignature($asm12.TypeRef("System.ParsingError"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri+Flags")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriParser")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSchemeCheckImplicitFile", 
      new JSIL.MethodSignature($.UInt16, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.ParsingError")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri+Flags")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriParser")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrivateParseMinimal", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.ParsingError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrivateParseMinimalIri", 
      new JSIL.MethodSignature(null, [$.String, $.UInt16])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReCreateParts", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.UriComponents"), $.UInt16, 
          $asm12.TypeRef("System.UriFormat")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveHelper", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.UriFormatException")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetEscapedDotSlashSettings", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Configuration.UriSectionInternal"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUserDrivenParsing", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticInFact", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri+Flags"), $asm12.TypeRef("System.Uri+Flags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticIsFile", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.UriParser")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticNotAny", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri+Flags"), $asm12.TypeRef("System.Uri+Flags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StripBidiControlCharacter", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm12.TypeRef("System.UriKind"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnescapeDataString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeOnly", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Char, 
          $.Char, $.Char
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeFile", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeFtp", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeGopher", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeHttp", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeHttps", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "UriSchemeWs", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "UriSchemeWss", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeMailto", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeNews", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeNntp", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeNetTcp", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UriSchemeNetPipe", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SchemeDelimiter", $.String, "://");

    $.Field({Static:false, Public:false}, "m_String", $.String);

    $.Field({Static:false, Public:false}, "m_originalUnicodeString", $.String);

    $.Field({Static:false, Public:false}, "m_Syntax", $asm12.TypeRef("System.UriParser"));

    $.Field({Static:false, Public:false}, "m_DnsSafeHost", $.String);

    $.Field({Static:false, Public:false}, "m_Flags", $asm12.TypeRef("System.Uri+Flags"));

    $.Field({Static:false, Public:false}, "m_Info", $asm12.TypeRef("System.Uri+UriInfo"));

    $.Field({Static:false, Public:false}, "m_iriParsing", $.Boolean);

    $.Field({Static:true , Public:false}, "s_ManagerRef", $asm12.TypeRef("Microsoft.Win32.IInternetSecurityManager"), null);

    $.Field({Static:true , Public:false}, "s_IntranetLock", $.Object);

    $.Field({Static:true , Public:false}, "s_ConfigInitialized", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_ConfigInitializing", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_IdnScope", $asm12.TypeRef("System.UriIdnScope"), function ($pi) {
        return $asm12.System.UriIdnScope.None;
      });

    $.Field({Static:true , Public:false}, "s_IriParsing", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_initLock", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "HexLowerChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_WSchars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false}, "IsImplicitFile", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUncOrDosPath", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDosPath", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUncPath", $.Boolean);

    $.Property({Static:false, Public:false}, "HostType", $asm12.TypeRef("System.Uri+Flags"));

    $.Property({Static:false, Public:false}, "Syntax", $asm12.TypeRef("System.UriParser"));

    $.Property({Static:false, Public:false}, "IsNotAbsoluteUri", $.Boolean);

    $.Property({Static:false, Public:false}, "AllowIdn", $.Boolean);

    $.Property({Static:false, Public:false}, "UserDrivenParsing", $.Boolean);

    $.Property({Static:false, Public:false}, "SecuredPathIndex", $.UInt16);

    $.Property({Static:false, Public:true }, "AbsolutePath", $.String);

    $.Property({Static:false, Public:false}, "PrivateAbsolutePath", $.String);

    $.Property({Static:false, Public:true }, "AbsoluteUri", $.String);

    $.Property({Static:false, Public:true }, "LocalPath", $.String);

    $.Property({Static:false, Public:true }, "HostNameType", $asm12.TypeRef("System.UriHostNameType"));

    $.Property({Static:false, Public:true }, "IsDefaultPort", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLoopback", $.Boolean);

    $.Property({Static:false, Public:true }, "PathAndQuery", $.String);

    $.Property({Static:false, Public:true }, "Segments", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "IsUnc", $.Boolean);

    $.Property({Static:false, Public:true }, "Host", $.String);

    $.Property({Static:true , Public:false}, "InitializeLock", $.Object);

    $.Property({Static:false, Public:true }, "Port", $.Int32);

    $.Property({Static:false, Public:true }, "Query", $.String);

    $.Property({Static:false, Public:true }, "Fragment", $.String);

    $.Property({Static:false, Public:true }, "Scheme", $.String);

    $.Property({Static:false, Public:false}, "OriginalStringSwitched", $.Boolean);

    $.Property({Static:false, Public:true }, "OriginalString", $.String);

    $.Property({Static:false, Public:true }, "DnsSafeHost", $.String);

    $.Property({Static:false, Public:true }, "IdnHost", $.String);

    $.Property({Static:false, Public:true }, "IsAbsoluteUri", $.Boolean);

    $.Property({Static:false, Public:true }, "UserEscaped", $.Boolean);

    $.Property({Static:false, Public:true }, "UserInfo", $.String);

    $.Property({Static:false, Public:false}, "HasAuthority", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Uri+Flags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Uri+Flags", 
    BaseType: $asm0F.TypeRef("System.UInt64"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    HostNotParsed: 0, 
    Zero: 0, 
    SchemeNotCanonical: 1, 
    UserNotCanonical: 2, 
    HostNotCanonical: 4, 
    PortNotCanonical: 8, 
    PathNotCanonical: 16, 
    QueryNotCanonical: 32, 
    FragmentNotCanonical: 64, 
    CannotDisplayCanonical: 127, 
    E_UserNotCanonical: 128, 
    E_HostNotCanonical: 256, 
    E_PortNotCanonical: 512, 
    E_PathNotCanonical: 1024, 
    E_QueryNotCanonical: 2048, 
    E_FragmentNotCanonical: 4096, 
    E_CannotDisplayCanonical: 8064, 
    ShouldBeCompressed: 8192, 
    FirstSlashAbsent: 16384, 
    BackslashInPath: 32768, 
    IndexMask: 65535, 
    IPv6HostType: 65536, 
    IPv4HostType: 131072, 
    DnsHostType: 196608, 
    UncHostType: 262144, 
    BasicHostType: 327680, 
    UnusedHostType: 393216, 
    UnknownHostType: 458752, 
    HostTypeMask: 458752, 
    UserEscaped: 524288, 
    AuthorityFound: 1048576, 
    HasUserInfo: 2097152, 
    LoopbackHost: 4194304, 
    NotDefaultPort: 8388608, 
    UserDrivenParsing: 16777216, 
    CanonicalDnsHost: 33554432, 
    ErrorOrParsingRecursion: 67108864, 
    DosPath: 134217728, 
    UncPath: 268435456, 
    ImplicitFile: 536870912, 
    MinimalUriInfoSet: 1073741824, 
    AllUriInfoSet: 2147483648, 
    IdnHost: 4294967296, 
    HasUnicode: 8589934592, 
    HostUnicodeNormalized: 17179869184, 
    RestUnicodeNormalized: 34359738368, 
    UnicodeHost: 68719476736, 
    IntranetUri: 137438953472, 
    UseOrigUncdStrOffset: 274877906944, 
    UserIriCanonical: 549755813888, 
    PathIriCanonical: 1099511627776, 
    QueryIriCanonical: 2199023255552, 
    FragmentIriCanonical: 4398046511104, 
    IriCanonical: 8246337208320, 
  }
);

/* class System.Uri+UriInfo */ 

(function UriInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Uri+UriInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Host", $.String);

    $.Field({Static:false, Public:true }, "ScopeId", $.String);

    $.Field({Static:false, Public:true }, "Offset", $asm12.TypeRef("System.Uri+Offset"));

    $.Field({Static:false, Public:true }, "DnsSafeHost", $.String);

    $.Field({Static:false, Public:true }, "MoreInfo", $asm12.TypeRef("System.Uri+MoreInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Uri+Offset */ 

(function Offset$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Uri+Offset", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Scheme", $.UInt16);

    $.Field({Static:false, Public:true }, "User", $.UInt16);

    $.Field({Static:false, Public:true }, "Host", $.UInt16);

    $.Field({Static:false, Public:true }, "PortValue", $.UInt16);

    $.Field({Static:false, Public:true }, "Path", $.UInt16);

    $.Field({Static:false, Public:true }, "Query", $.UInt16);

    $.Field({Static:false, Public:true }, "Fragment", $.UInt16);

    $.Field({Static:false, Public:true }, "End", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Uri+MoreInfo */ 

(function MoreInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Uri+MoreInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Path", $.String);

    $.Field({Static:false, Public:true }, "Query", $.String);

    $.Field({Static:false, Public:true }, "Fragment", $.String);

    $.Field({Static:false, Public:true }, "AbsoluteUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Uri+Check */ 

JSIL.MakeEnum(
  {
    FullName: "System.Uri+Check", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    EscapedCanonical: 1, 
    DisplayCanonical: 2, 
    DotSlashAttn: 4, 
    FoundNonAscii: 8, 
    BackslashInPath: 16, 
    ReservedFound: 32, 
    NotIriCanonical: 64, 
    DotSlashEscaped: 128, 
  }
);

/* class System.UriBuilder */ 

(function UriBuilder$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.UriBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertSlashes", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Scheme", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFieldsFromUri", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_changed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fragment", $.String);

    $.Field({Static:false, Public:false}, "m_host", $.String);

    $.Field({Static:false, Public:false}, "m_password", $.String);

    $.Field({Static:false, Public:false}, "m_path", $.String);

    $.Field({Static:false, Public:false}, "m_port", $.Int32);

    $.Field({Static:false, Public:false}, "m_query", $.String);

    $.Field({Static:false, Public:false}, "m_scheme", $.String);

    $.Field({Static:false, Public:false}, "m_schemeDelimiter", $.String);

    $.Field({Static:false, Public:false}, "m_uri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_username", $.String);

    $.Property({Static:false, Public:true }, "Path", $.String);

    $.Property({Static:false, Public:true }, "Scheme", $.String);

    $.Property({Static:false, Public:true }, "Uri", $asm12.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.UriFormatException */ 

(function UriFormatException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.FormatException"), 
      Name: "System.UriFormatException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.UriHostNameType */ 

JSIL.MakeEnum(
  {
    FullName: "System.UriHostNameType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Basic: 1, 
    Dns: 2, 
    IPv4: 3, 
    IPv6: 4, 
  }
);

/* class System.DomainNameHelper */ 

(function DomainNameHelper$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.DomainNameHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ContainsCharactersUnsafeForNormalizedHost", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IdnEquivalent", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IdnEquivalent", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IdnEquivalent", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsASCIILetterOrDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIdnAce", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIdnAce", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidByIri", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidDomainLabelCharacter", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseCanonicalName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnicodeEquivalent", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnicodeEquivalent", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_UnsafeForNormalizedHost", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IPv4AddressHelper */ 

(function IPv4AddressHelper$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.IPv4AddressHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidCanonical", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseCanonical", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseCanonicalName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseHostNumber", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseNonCanonical", 
      new JSIL.MethodSignature($.Int64, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IPv6AddressHelper */ 

(function IPv6AddressHelper$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.IPv6AddressHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateCanonicalName", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Pointer", [$.UInt16])])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCompressionRange", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $.Int32]), [$jsilcore.TypeRef("JSIL.Pointer", [$.UInt16])])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalIsValid", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidStrict", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$.UInt16]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseCanonicalName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldHaveIpv4Embedded", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Pointer", [$.UInt16])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.UncNameHelper */ 

(function UncNameHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.UncNameHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseCanonicalName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.UriSyntaxFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.UriSyntaxFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    MustHaveAuthority: 1, 
    OptionalAuthority: 2, 
    MayHaveUserInfo: 4, 
    MayHavePort: 8, 
    MayHavePath: 16, 
    MayHaveQuery: 32, 
    MayHaveFragment: 64, 
    AllowEmptyHost: 128, 
    AllowUncHost: 256, 
    AllowDnsHost: 512, 
    AllowIPv4Host: 1024, 
    AllowIPv6Host: 2048, 
    AllowAnInternetHost: 3584, 
    AllowAnyOtherHost: 4096, 
    FileLikeUri: 8192, 
    MailToLikeUri: 16384, 
    V1_UnknownUri: 65536, 
    SimpleUserSyntax: 131072, 
    BuiltInSyntax: 262144, 
    ParserSchemeOnly: 524288, 
    AllowDOSPath: 1048576, 
    PathIsRooted: 2097152, 
    ConvertPathSlashes: 4194304, 
    CompressPath: 8388608, 
    CanonicalizeAsFilePath: 16777216, 
    UnEscapeDotsAndSlashes: 33554432, 
    AllowIdn: 67108864, 
    AllowIriParsing: 268435456, 
  }
);

/* enum System.UriKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.UriKind", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    RelativeOrAbsolute: 0, 
    Absolute: 1, 
    Relative: 2, 
  }
);

/* enum System.UriComponents */ 

JSIL.MakeEnum(
  {
    FullName: "System.UriComponents", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    SerializationInfoString: -2147483648, 
    Scheme: 1, 
    UserInfo: 2, 
    Host: 4, 
    Port: 8, 
    SchemeAndServer: 13, 
    Path: 16, 
    Query: 32, 
    PathAndQuery: 48, 
    HttpRequestUrl: 61, 
    Fragment: 64, 
    AbsoluteUri: 127, 
    StrongPort: 128, 
    HostAndPort: 132, 
    StrongAuthority: 134, 
    NormalizedHost: 256, 
    KeepDelimiter: 1073741824, 
  }
);

/* enum System.UriFormat */ 

JSIL.MakeEnum(
  {
    FullName: "System.UriFormat", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    UriEscaped: 1, 
    Unescaped: 2, 
    SafeUnescaped: 3, 
  }
);

/* enum System.UriIdnScope */ 

JSIL.MakeEnum(
  {
    FullName: "System.UriIdnScope", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    AllExceptIntranet: 1, 
    All: 2, 
  }
);

/* enum System.ParsingError */ 

JSIL.MakeEnum(
  {
    FullName: "System.ParsingError", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    BadFormat: 1, 
    BadScheme: 2, 
    BadAuthority: 3, 
    EmptyUriString: 4, 
    LastRelativeUriOkErrIndex: 4, 
    SchemeLimit: 5, 
    SizeLimit: 6, 
    MustRootedPath: 7, 
    BadHostName: 8, 
    NonEmptyHost: 9, 
    BadPort: 10, 
    BadAuthorityTerminator: 11, 
    CannotCreateRelative: 12, 
  }
);

/* enum System.UnescapeMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.UnescapeMode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    CopyOnly: 0, 
    Escape: 1, 
    Unescape: 2, 
    EscapeUnescape: 3, 
    V1ToStringFlag: 4, 
    UnescapeAll: 8, 
    UnescapeAllOrThrow: 24, 
  }
);

/* class System.IriHelper */ 

(function IriHelper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.IriHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CheckIriUnicodeRange", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIriUnicodeRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.Char, $.Char, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIsReserved", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $asm12.TypeRef("System.UriComponents")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeUnescapeIri", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.UriComponents")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.UriHelper */ 

(function UriHelper$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("System.UriHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureDestinationSize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int16, 
          $.Int16, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeAsciiChar", 
      new JSIL.MethodSignature(null, [
          $.Char, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapedAscii", 
      new JSIL.MethodSignature($.Char, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Boolean, 
          $.Char, $.Char, 
          $.Char
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Is3986Unreserved", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNotSafeForUnescape", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsReservedUnreservedOrHash", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnreserved", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchUTF8Sequence", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestForSubPath", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.UInt16, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Char, 
          $.Char, $.Char, 
          $asm12.TypeRef("System.UnescapeMode"), $asm12.TypeRef("System.UriParser"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Char, 
          $.Char, $.Char, 
          $asm12.TypeRef("System.UnescapeMode"), $asm12.TypeRef("System.UriParser"), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "HexUpperChars", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.GenericUriParserOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.GenericUriParserOptions", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Default: 0, 
    GenericAuthority: 1, 
    AllowEmptyAuthority: 2, 
    NoUserInfo: 4, 
    NoPort: 8, 
    NoQuery: 16, 
    NoFragment: 32, 
    DontConvertPathBackslashes: 64, 
    DontCompressPath: 128, 
    DontUnescapePathDotsAndSlashes: 256, 
    Idn: 512, 
    IriParsing: 1024, 
  }
);

/* class System.SecurityUtils */ 

(function SecurityUtils$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.SecurityUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConstructorInfoInvoke", 
      new JSIL.MethodSignature($.Object, [$asm0F.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "DemandGrantSet", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Assembly"))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DemandReflectionAccess", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MemberAccessPermission", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Permissions.ReflectionPermission"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RestrictedMemberAccessPermission", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Permissions.ReflectionPermission"))
    );

    $.Field({Static:true , Public:false}, "memberAccessPermission", $asm0F.TypeRef("System.Security.Permissions.ReflectionPermission"));

    $.Field({Static:true , Public:false}, "restrictedMemberAccessPermission", $asm0F.TypeRef("System.Security.Permissions.ReflectionPermission"));

    $.Property({Static:true , Public:false}, "MemberAccessPermission", $asm0F.TypeRef("System.Security.Permissions.ReflectionPermission"));

    $.Property({Static:true , Public:false}, "RestrictedMemberAccessPermission", $asm0F.TypeRef("System.Security.Permissions.ReflectionPermission"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.EnvironmentHelpers */ 

(function EnvironmentHelpers$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.EnvironmentHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_IsAppContainerProcess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "HasAppContainerToken", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_IsAppContainerProcess", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_IsAppContainerProcessInitalized", $asm0F.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:true }, "IsAppContainerProcess", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.PinnableBufferCache */ 

(function PinnableBufferCache$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.PinnableBufferCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0F.TypeRef("System.Func`1", [$.Object])])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AgePendingBuffers", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Allocate", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "AllocateBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNewBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FreeBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "Gen2GcCallbackFunc", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Restock", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Object]))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TrimFreeListIfNeeded", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_CacheName", $.String);

    $.Field({Static:false, Public:false}, "m_factory", $asm0F.TypeRef("System.Func`1", [$.Object]));

    $.Field({Static:false, Public:false}, "m_FreeList", $asm0F.TypeRef("System.Collections.Concurrent.ConcurrentStack`1", [$.Object]));

    $.Field({Static:false, Public:false}, "m_NotGen2", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Object]));

    $.Field({Static:false, Public:false}, "m_gen1CountAtLastRestock", $.Int32);

    $.Field({Static:false, Public:false}, "m_msecNoUseBeyondFreeListSinceThisTime", $.Int32);

    $.Field({Static:false, Public:false}, "m_moreThanFreeListNeeded", $.Boolean);

    $.Field({Static:false, Public:false}, "m_buffersUnderManagement", $.Int32);

    $.Field({Static:false, Public:false}, "m_restockSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_trimmingExperimentInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "m_minBufferCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_numAllocCalls", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.PinnableBufferCache+<>c__DisplayClass0_0 */ 

(function $l$gc__DisplayClass0_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.PinnableBufferCache+<>c__DisplayClass0_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:true }, "numberOfElements", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Gen2GcCallback */ 

(function Gen2GcCallback$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Runtime.ConstrainedExecution.CriticalFinalizerObject"), 
      Name: "System.Gen2GcCallback", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize")
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Register", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Func`2", [$.Object, $.Boolean]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Setup", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Func`2", [$.Object, $.Boolean]), $.Object])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_callback", $asm0F.TypeRef("System.Func`2", [$.Object, $.Boolean]));

    $.Field({Static:false, Public:false}, "m_weakTargetObj", $asm0F.TypeRef("System.Runtime.InteropServices.GCHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.PinnableBufferCacheEventSource */ 

(function PinnableBufferCacheEventSource$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Diagnostics.Tracing.EventSource"), 
      Name: "System.PinnableBufferCacheEventSource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddressOf", 
      new JSIL.MethodSignature($.UInt64, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddressOfByteArray", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "AgePendingBuffersResults", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [20]; });

    $.ExternalMethod({Static:false, Public:true }, "AllocateBuffer", 
      new JSIL.MethodSignature(null, [
          $.String, $.UInt64, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [5]; });

    $.ExternalMethod({Static:false, Public:true }, "AllocateBufferAged", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [8]; });

    $.ExternalMethod({Static:false, Public:true }, "AllocateBufferCreatingNewBuffers", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [7]; });

    $.ExternalMethod({Static:false, Public:true }, "AllocateBufferFreeListEmpty", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [9]; });

    $.ExternalMethod({Static:false, Public:true }, "AllocateBufferFromNotGen2", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [6]; });

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [4]; });

    $.ExternalMethod({Static:false, Public:true }, "DebugMessage", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [1]; });

    $.ExternalMethod({Static:false, Public:true }, "DebugMessage1", 
      new JSIL.MethodSignature(null, [$.String, $.Int64])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [2]; });

    $.ExternalMethod({Static:false, Public:true }, "DebugMessage2", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.Int64
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [3]; });

    $.ExternalMethod({Static:false, Public:true }, "DebugMessage3", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.Int64, $.Int64
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [18]; });

    $.ExternalMethod({Static:false, Public:true }, "FreeBuffer", 
      new JSIL.MethodSignature(null, [
          $.String, $.UInt64, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [10]; });

    $.ExternalMethod({Static:false, Public:true }, "FreeBufferNull", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [22]; });

    $.ExternalMethod({Static:false, Public:true }, "FreeBufferStillTooYoung", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [11]; });

    $.ExternalMethod({Static:false, Public:true }, "TrimCheck", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Boolean, $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [13]; });

    $.ExternalMethod({Static:false, Public:true }, "TrimExperiment", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [15]; });

    $.ExternalMethod({Static:false, Public:true }, "TrimFlush", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [17]; });

    $.ExternalMethod({Static:false, Public:true }, "TrimFree", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [14]; });

    $.ExternalMethod({Static:false, Public:true }, "TrimFreeSizeOK", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [16]; });

    $.ExternalMethod({Static:false, Public:true }, "WalkFreeListResult", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [21]; });

    $.Field({Static:true , Public:true , ReadOnly:true }, "Log", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Diagnostics.Tracing.EventSourceAttribute"));

})();

/* class System.LocalAppContext */ 

(function LocalAppContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };



  function LocalAppContext_get_DisableCaching () {
    return $thisType.LocalAppContext$DisableCaching$value;
  }; 





  function LocalAppContext_set_DisableCaching (value) {
    $thisType.LocalAppContext$DisableCaching$value = value;
  }; 


  JSIL.MakeStaticClass("System.LocalAppContext", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DefineSwitchDefault", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Method({Static:true , Public:false}, "get_DisableCaching", 
      JSIL.MethodSignature.Return($.Boolean), 
      LocalAppContext_get_DisableCaching
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValueInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSwitchEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSwitchEnabledLocal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Method({Static:true , Public:false}, "set_DisableCaching", 
      JSIL.MethodSignature.Action($.Boolean), 
      LocalAppContext_set_DisableCaching
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupDelegate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "TryGetSwitchFromCentralAppContext", $asm12.TypeRef("System.LocalAppContext+TryGetSwitchDelegate"));

    $.Field({Static:true , Public:false}, "s_canForwardCalls", $.Boolean);

    $.Field({Static:true , Public:false}, "s_switchMap", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_syncLock", $.Object);

    $.Field({Static:true , Public:false}, "LocalAppContext$DisableCaching$value", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:false}, "DisableCaching", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.LocalAppContext+TryGetSwitchDelegate */ 

JSIL.MakeDelegate("System.LocalAppContext+TryGetSwitchDelegate", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [$asm0F.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Boolean")])]));

/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0F.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.SchemeSettingElement */ 

(function SchemeSettingElement$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.SchemeSettingElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GenericUriParserOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.GenericUriParserOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "$name", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "genericUriParserOptions", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "GenericUriParserOptions", $asm12.TypeRef("System.GenericUriParserOptions"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["genericUriParserOptions"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.SchemeSettingInternal */ 

(function SchemeSettingInternal$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Configuration.SchemeSettingInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.GenericUriParserOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.GenericUriParserOptions"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "options", $asm12.TypeRef("System.GenericUriParserOptions"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Options", $asm12.TypeRef("System.GenericUriParserOptions"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.SchemeSettingElementCollection */ 

(function SchemeSettingElementCollection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Configuration.SchemeSettingElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Configuration.SchemeSettingElement.__Type__]; });

})();

/* class System.Configuration.UriSectionData */ 

(function UriSectionData$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Configuration.UriSectionData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdnScope", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$asm12.TypeRef("System.UriIdnScope")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IriParsing", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemeSettings", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm12.TypeRef("System.Configuration.SchemeSettingInternal")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IdnScope", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Nullable`1", [$asm12.TypeRef("System.UriIdnScope")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IriParsing", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.Field({Static:false, Public:false}, "idnScope", $asm0F.TypeRef("System.Nullable`1", [$asm12.TypeRef("System.UriIdnScope")]));

    $.Field({Static:false, Public:false}, "iriParsing", $asm0F.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "schemeSettings", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm12.TypeRef("System.Configuration.SchemeSettingInternal")]));

    $.Property({Static:false, Public:true }, "IdnScope", $asm0F.TypeRef("System.Nullable`1", [$asm12.TypeRef("System.UriIdnScope")]));

    $.Property({Static:false, Public:true }, "IriParsing", $asm0F.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "SchemeSettings", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm12.TypeRef("System.Configuration.SchemeSettingInternal")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.UriSectionReader */ 

(function UriSectionReader$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Configuration.UriSectionReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Configuration.UriSectionData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreEqual", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearSchemeSetting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionData", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Configuration.UriSectionData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEndElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Configuration.UriSectionData"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Configuration.UriSectionData"), [$.String, $asm12.TypeRef("System.Configuration.UriSectionData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAddSchemeSetting", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadConfiguration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIdnScope", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIriParsing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRemoveSchemeSetting", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSchemeSettings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadToUriSection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "configFilePath", $.String);

    $.Field({Static:false, Public:false}, "reader", $asm24.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "sectionData", $asm12.TypeRef("System.Configuration.UriSectionData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.UriSection */ 

(function UriSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Configuration.UriSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Idn", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Configuration.IdnElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IriParsing", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Configuration.IriParsingElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemeSettings", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Configuration.SchemeSettingElementCollection"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "idn", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "iriParsing", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "schemeSettings", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Idn", $asm12.TypeRef("System.Configuration.IdnElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["idn"]; });

    $.Property({Static:false, Public:true }, "IriParsing", $asm12.TypeRef("System.Configuration.IriParsingElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["iriParsing"]; });

    $.Property({Static:false, Public:true }, "SchemeSettings", $asm12.TypeRef("System.Configuration.SchemeSettingElementCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["schemeSettings"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.UriSectionInternal */ 

(function UriSectionInternal$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Configuration.UriSectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Configuration.UriSection"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.UriIdnScope"), $.Boolean, 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm12.TypeRef("System.Configuration.SchemeSettingInternal")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IdnScope", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.UriIdnScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IriParsing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemeSetting", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Configuration.SchemeSettingInternal"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWebConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadUsingCustomParser", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadUsingSystemConfiguration", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "classSyncObject", $.Object);

    $.Field({Static:false, Public:false}, "idnScope", $asm12.TypeRef("System.UriIdnScope"));

    $.Field({Static:false, Public:false}, "iriParsing", $.Boolean);

    $.Field({Static:false, Public:false}, "schemeSettings", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm12.TypeRef("System.Configuration.SchemeSettingInternal")]));

    $.Property({Static:false, Public:false}, "IdnScope", $asm12.TypeRef("System.UriIdnScope"));

    $.Property({Static:false, Public:false}, "IriParsing", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.IriParsingElement */ 

(function IriParsingElement$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.IriParsingElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "enabled", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enabled"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.IdnElement */ 

(function IdnElement$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.IdnElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.UriIdnScope"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "enabled", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Enabled", $asm12.TypeRef("System.UriIdnScope"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enabled"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationManagerInternalFactory */ 

(function ConfigurationManagerInternalFactory$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Configuration.ConfigurationManagerInternalFactory", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.Internal.IConfigurationManagerInternal"))
    );

    $.Field({Static:true , Public:false}, "s_instance", $asm14.TypeRef("System.Configuration.Internal.IConfigurationManagerInternal"));

    $.Property({Static:true , Public:false}, "Instance", $asm14.TypeRef("System.Configuration.Internal.IConfigurationManagerInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.TypeUtil */ 

(function TypeUtil$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Configuration.TypeUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceWithReflectionPermission", 
      new JSIL.MethodSignature($.Object, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.PrivilegedConfigurationManager */ 

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.IAuthenticationManager */ 

JSIL.MakeInterface(
  "System.Net.IAuthenticationManager", false, [], function ($) {
    $.Method({}, "get_CredentialPolicy", JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentialPolicy")));
    $.Method({}, "get_SpnDictionary", JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SpnDictionary")));
    $.Method({}, "get_SspSupportsExtendedProtection", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Authenticate", new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ]));
    $.Method({}, "PreAuthenticate", new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")]));
    $.Method({}, "BindModule", new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.Authorization"), 
          $asm12.TypeRef("System.Net.IAuthenticationModule")
        ]));
    $.Property({}, "CredentialPolicy");
    $.Property({}, "SpnDictionary");
    $.Property({}, "SspSupportsExtendedProtection");
  }, []);

/* interface System.Net.ICredentialPolicy */ 

JSIL.MakeInterface(
  "System.Net.ICredentialPolicy", true, [], function ($) {
    $.Method({}, "ShouldSendCredential", new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.NetworkCredential"), $asm12.TypeRef("System.Net.IAuthenticationModule")
        ]));
  }, []);

/* class System.Net.AuthenticationManager */ 

(function AuthenticationManager$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AuthenticationManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindModule", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.Authorization"), 
          $asm12.TypeRef("System.Net.IAuthenticationModule")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSubstringNotInQuotes", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CredentialPolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentialPolicy"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IAuthenticationManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SpnDictionary", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SpnDictionary"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SspSupportsExtendedProtection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGroupAuthorization", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $asm12.TypeRef("System.Net.IAuthenticationModule"), $.String, 
          $.Boolean, $asm12.TypeRef("System.Net.NTAuthentication"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadPrefixLookupMaxEntriesConfig", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectAuthenticationManagerInstance", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IAuthenticationManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitNoQuotes", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:true , Public:false}, "instanceLock", $.Object);

    $.Field({Static:true , Public:false}, "internalInstance", $asm12.TypeRef("System.Net.IAuthenticationManager"), null);

    $.Property({Static:true , Public:false}, "Instance", $asm12.TypeRef("System.Net.IAuthenticationManager"));

    $.Property({Static:true , Public:true }, "CredentialPolicy", $asm12.TypeRef("System.Net.ICredentialPolicy"));

    $.Property({Static:true , Public:false}, "SpnDictionary", $asm12.TypeRef("System.Net.SpnDictionary"));

    $.Property({Static:true , Public:false}, "SspSupportsExtendedProtection", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.AuthenticationManagerBase */ 

(function AuthenticationManagerBase$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AuthenticationManagerBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindModule", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.Authorization"), 
          $asm12.TypeRef("System.Net.IAuthenticationModule")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "generalize", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CredentialPolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentialPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SpnDictionary", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SpnDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SspSupportsExtendedProtection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.Field({Static:true , Public:false}, "m_SpnDictionary", $asm12.TypeRef("System.Net.SpnDictionary"));

    $.Field({Static:true , Public:false}, "s_OSSupportsExtendedProtection", $asm12.TypeRef("System.Net.TriState"), function ($pi) {
        return $asm12.System.Net.TriState.Unspecified;
      });

    $.Field({Static:true , Public:false}, "s_SspSupportsExtendedProtection", $asm12.TypeRef("System.Net.TriState"), function ($pi) {
        return $asm12.System.Net.TriState.Unspecified;
      });

    $.Property({Static:false, Public:true , Virtual:true }, "CredentialPolicy", $asm12.TypeRef("System.Net.ICredentialPolicy"));

    $.Property({Static:false, Public:true , Virtual:true }, "SpnDictionary", $asm12.TypeRef("System.Net.SpnDictionary"));

    $.Property({Static:false, Public:true , Virtual:true }, "SspSupportsExtendedProtection", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IAuthenticationManager")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.AuthenticationManagerDefault */ 

(function AuthenticationManagerDefault$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.AuthenticationManagerBase"), 
      Name: "System.Net.AuthenticationManagerDefault", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindModule", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.Authorization"), 
          $asm12.TypeRef("System.Net.IAuthenticationModule")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "findModule", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IAuthenticationModule"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ModuleList", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveAuthenticationType", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.ArrayList"), $.String])
    );

    $.Field({Static:false, Public:false}, "moduleBinding", $asm12.TypeRef("System.Net.PrefixLookup"));

    $.Property({Static:false, Public:false}, "ModuleList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.AuthenticationManager2 */ 

(function AuthenticationManager2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.AuthenticationManagerBase"), 
      Name: "System.Net.AuthenticationManager2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindModule", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.Authorization"), 
          $asm12.TypeRef("System.Net.IAuthenticationModule")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeModuleList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.Field({Static:false, Public:false}, "moduleBinding", $asm12.TypeRef("System.Net.PrefixLookup"));

    $.Field({Static:false, Public:false}, "moduleList", $asm0F.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm12.TypeRef("System.Net.IAuthenticationModule")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.AuthenticationManager2+<>c__DisplayClass12_0 */ 

(function $l$gc__DisplayClass12_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AuthenticationManager2+<>c__DisplayClass12_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInitializeModuleList$gb__0", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IAuthenticationModule"), [$.String, $asm12.TypeRef("System.Net.IAuthenticationModule")])
    );

    $.Field({Static:false, Public:true }, "moduleToRegister", $asm12.TypeRef("System.Net.IAuthenticationModule"));

    $.Field({Static:false, Public:true }, "$l$g9__0", $asm0F.TypeRef("System.Func`3", [
          $.String, $asm12.TypeRef("System.Net.IAuthenticationModule"), 
          $asm12.TypeRef("System.Net.IAuthenticationModule")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Authorization */ 

(function Authorization$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Authorization", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Complete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionGroupId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MutuallyAuthenticated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectionRealm", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MutuallyAuthenticated", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProtectionRealm", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetComplete", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_Message", $.String);

    $.Field({Static:false, Public:false}, "m_Complete", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ConnectionGroupId", $.String);

    $.Field({Static:false, Public:false}, "m_MutualAuth", $.Boolean);

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "ConnectionGroupId", $.String);

    $.Property({Static:false, Public:true }, "Complete", $.Boolean);

    $.Property({Static:false, Public:true }, "ProtectionRealm", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "MutuallyAuthenticated", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.BaseWebProxyFinder */ 

(function BaseWebProxyFinder$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.BaseWebProxyFinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Engine", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUnrecognizedScheme", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.BaseWebProxyFinder+AutoWebProxyState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxies", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.BaseWebProxyFinder+AutoWebProxyState"))
    );

    $.Field({Static:false, Public:false}, "engine", $asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "IsUnrecognizedScheme", $.Boolean);

    $.Property({Static:false, Public:false}, "State", $asm12.TypeRef("System.Net.BaseWebProxyFinder+AutoWebProxyState"));

    $.Property({Static:false, Public:false}, "Engine", $asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IWebProxyFinder"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.BaseWebProxyFinder+AutoWebProxyState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.BaseWebProxyFinder+AutoWebProxyState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Uninitialized: 0, 
    DiscoveryFailure: 1, 
    DownloadFailure: 2, 
    CompilationFailure: 3, 
    UnrecognizedScheme: 4, 
    Completed: 5, 
  }
);

/* class System.Net.CertPolicyValidationCallback */ 

(function CertPolicyValidationCallback$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CertPolicyValidationCallback", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Callback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CertificatePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICertificatePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsesDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Invoke", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm12.TypeRef("System.Net.ServicePoint"), 
          $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_CertificatePolicy", $asm12.TypeRef("System.Net.ICertificatePolicy"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Context", $asm0F.TypeRef("System.Threading.ExecutionContext"));

    $.Property({Static:false, Public:false}, "CertificatePolicy", $asm12.TypeRef("System.Net.ICertificatePolicy"));

    $.Property({Static:false, Public:false}, "UsesDefault", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CertPolicyValidationCallback+CallbackContext */ 

(function CallbackContext$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CertPolicyValidationCallback+CallbackContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.PolicyWrapper"), $.String, 
          $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), 
          $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "policyWrapper", $asm12.TypeRef("System.Net.PolicyWrapper"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "hostName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "certificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "chain", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "sslPolicyErrors", $asm12.TypeRef("System.Net.Security.SslPolicyErrors"));

    $.Field({Static:false, Public:false}, "result", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ServerCertValidationCallback */ 

(function ServerCertValidationCallback$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ServerCertValidationCallback", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Callback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationCallback", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Invoke", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ValidationCallback", $asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Context", $asm0F.TypeRef("System.Threading.ExecutionContext"));

    $.Property({Static:false, Public:false}, "ValidationCallback", $asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ServerCertValidationCallback+CallbackContext */ 

(function CallbackContext$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ServerCertValidationCallback+CallbackContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "request", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "certificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "chain", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "sslPolicyErrors", $asm12.TypeRef("System.Net.Security.SslPolicyErrors"));

    $.Field({Static:false, Public:false}, "result", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.GeneralAsyncDelegate */ 

JSIL.MakeDelegate("System.Net.GeneralAsyncDelegate", false, [], 
  new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Object"), $asm0F.TypeRef("System.Object")]));

/* delegate System.Net.CreateConnectionDelegate */ 

JSIL.MakeDelegate("System.Net.CreateConnectionDelegate", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.Net.PooledStream"), [$asm12.TypeRef("System.Net.ConnectionPool")]));

/* class System.Net.ConnectionPool */ 

(function ConnectionPool$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ConnectionPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ServicePoint"), $.Int32, 
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.Net.CreateConnectionDelegate")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AsyncThread", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelErrorCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CancelErrorCallbackWrapper", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupCallbackWrapper", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.PooledStream"), [$asm12.TypeRef("System.Net.CreateConnectionDelegate")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Destroy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.PooledStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Get", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.PooledStream"), [
          $.Object, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Threading.WaitHandle")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreationMutex", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.Mutex"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorEvent", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.ManualResetEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorOccurred", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Semaphore", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Semaphore"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServicePoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServicePoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.PooledStream"), [
          $.Object, $asm12.TypeRef("System.Net.GeneralAsyncDelegate"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromPool", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.PooledStream"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PutConnection", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.PooledStream"), $.Object, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutConnection", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.PooledStream"), $.Object, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutNew", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.PooledStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QueueRequest", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectionPool+AsyncConnectionPoolRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReclaimEmancipatedObjects", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UserCreateRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.PooledStream"))
    );

    $.Field({Static:true , Public:false}, "s_CleanupCallback", $asm12.TypeRef("System.Net.TimerThread+Callback"), function ($pi) {
        return $asm12.System.Net.TimerThread_Callback.New(null, null, new JSIL.MethodPointerInfo($thisType, "CleanupCallbackWrapper", new JSIL.MethodSignature(null, [
                $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
                $.Object
              ]), true, false));
      });

    $.Field({Static:true , Public:false}, "s_CancelErrorCallback", $asm12.TypeRef("System.Net.TimerThread+Callback"), function ($pi) {
        return $asm12.System.Net.TimerThread_Callback.New(null, null, new JSIL.MethodPointerInfo($thisType, "CancelErrorCallbackWrapper", new JSIL.MethodSignature(null, [
                $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
                $.Object
              ]), true, false));
      });

    $.Field({Static:true , Public:false}, "s_CancelErrorQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_CleanupQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:false, Public:false}, "m_StackOld", $asm12.TypeRef("System.Net.InterlockedStack"));

    $.Field({Static:false, Public:false}, "m_StackNew", $asm12.TypeRef("System.Net.InterlockedStack"));

    $.Field({Static:false, Public:false}, "m_WaitHandles", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Threading.WaitHandle")]));

    $.Field({Static:false, Public:false}, "m_ResError", $asm0F.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "m_ErrorOccured", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "m_ErrorTimer", $asm12.TypeRef("System.Net.TimerThread+Timer"));

    $.Field({Static:false, Public:false}, "m_ObjectList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_TotalObjects", $.Int32);

    $.Field({Static:false, Public:false}, "m_MinPoolSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Property({Static:false, Public:false}, "CreationMutex", $asm0F.TypeRef("System.Threading.Mutex"));

    $.Property({Static:false, Public:false}, "ErrorEvent", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Property({Static:false, Public:false}, "Semaphore", $asm12.TypeRef("System.Net.Semaphore"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Property({Static:false, Public:false}, "MaxPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "MinPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "ErrorOccurred", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.ConnectionPool+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.ConnectionPool+State", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Initializing: 0, 
    Running: 1, 
    ShuttingDown: 2, 
  }
);

/* class System.Net.ConnectionPool+AsyncConnectionPoolRequest */ 

(function AsyncConnectionPoolRequest$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ConnectionPool+AsyncConnectionPoolRequest", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ConnectionPool"), $.Object, 
          $asm12.TypeRef("System.Net.GeneralAsyncDelegate"), $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.InterlockedStack */ 

(function InterlockedStack$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.InterlockedStack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stack", $asm0F.TypeRef("System.Collections.Stack"));

    $.Field({Static:false, Public:false}, "_count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ConnectionPoolManager */ 

(function ConnectionPoolManager$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ConnectionPoolManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GenerateKey", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConnectionPool", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ConnectionPool"), [
          $asm12.TypeRef("System.Net.ServicePoint"), $.String, 
          $asm12.TypeRef("System.Net.CreateConnectionDelegate")
        ])
    );

    $.Field({Static:true , Public:false}, "m_ConnectionPools", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.CookieVariant */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.CookieVariant", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Plain: 1, 
    Default: 2, 
    Rfc2109: 2, 
    Rfc2965: 3, 
  }
);

/* class System.Net.Cookie */ 

(function Cookie$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cookie", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DomainCharsTest", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Domain", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Port", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comment", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Domain", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DomainKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Plain", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PortList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Secure", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Variant", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.CookieVariant"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComparer", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IComparer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSetName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDomainEqualToHost", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Comment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CommentUri", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Discard", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Domain", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Expires", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HttpOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Port", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Secure", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifySetDefaults", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.CookieVariant"), $asm12.TypeRef("System.Uri"), 
          $.Boolean, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "PortSplitDelimiters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Reserved2Name", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Reserved2Value", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "staticComparer", $asm12.TypeRef("System.Net.Comparer"));

    $.Field({Static:false, Public:false}, "m_comment", $.String);

    $.Field({Static:false, Public:false}, "m_commentUri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_cookieVariant", $asm12.TypeRef("System.Net.CookieVariant"));

    $.Field({Static:false, Public:false}, "m_discard", $.Boolean);

    $.Field({Static:false, Public:false}, "m_domain", $.String);

    $.Field({Static:false, Public:false}, "m_domain_implicit", $.Boolean);

    $.Field({Static:false, Public:false}, "m_expires", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_path", $.String);

    $.Field({Static:false, Public:false}, "m_path_implicit", $.Boolean);

    $.Field({Static:false, Public:false}, "m_port", $.String);

    $.Field({Static:false, Public:false}, "m_port_implicit", $.Boolean);

    $.Field({Static:false, Public:false}, "m_port_list", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_secure", $.Boolean);

    $.Field({Static:false, Public:false}, "m_httpOnly", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "m_timeStamp", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_value", $.String);

    $.Field({Static:false, Public:false}, "m_version", $.Int32);

    $.Field({Static:false, Public:false}, "m_domainKey", $.String);

    $.Field({Static:false, Public:false}, "IsQuotedVersion", $.Boolean);

    $.Field({Static:false, Public:false}, "IsQuotedDomain", $.Boolean);

    $.Property({Static:false, Public:true }, "Comment", $.String);

    $.Property({Static:false, Public:true }, "CommentUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "HttpOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Discard", $.Boolean);

    $.Property({Static:false, Public:true }, "Domain", $.String);

    $.Property({Static:false, Public:false}, "_Domain", $.String);

    $.Property({Static:false, Public:true }, "Expired", $.Boolean);

    $.Property({Static:false, Public:true }, "Expires", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Path", $.String);

    $.Property({Static:false, Public:false}, "_Path", $.String);

    $.Property({Static:false, Public:false}, "Plain", $.Boolean);

    $.Property({Static:false, Public:true }, "Port", $.String);

    $.Property({Static:false, Public:false}, "PortList", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:false}, "_Port", $.String);

    $.Property({Static:false, Public:true }, "Secure", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:false}, "Variant", $asm12.TypeRef("System.Net.CookieVariant"));

    $.Property({Static:false, Public:false}, "DomainKey", $.String);

    $.Property({Static:false, Public:true }, "Version", $.Int32);

    $.Property({Static:false, Public:false}, "_Version", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.CookieToken */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.CookieToken", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Nothing: 0, 
    NameValuePair: 1, 
    Attribute: 2, 
    EndToken: 3, 
    EndCookie: 4, 
    End: 5, 
    Equals: 6, 
    Comment: 7, 
    CommentUrl: 8, 
    CookieName: 9, 
    Discard: 10, 
    Domain: 11, 
    Expires: 12, 
    MaxAge: 13, 
    Path: 14, 
    Port: 15, 
    Secure: 16, 
    HttpOnly: 17, 
    Unknown: 18, 
    Version: 19, 
  }
);

/* class System.Net.CookieTokenizer */ 

(function CookieTokenizer$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CookieTokenizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Extract", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNext", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CookieToken"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndOfCookie", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Eof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Quoted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Token", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.CookieToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Next", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CookieToken"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EndOfCookie", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Quoted", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Token", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CookieToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TokenFromName", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CookieToken"), [$.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_eofCookie", $.Boolean);

    $.Field({Static:false, Public:false}, "m_index", $.Int32);

    $.Field({Static:false, Public:false}, "m_length", $.Int32);

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_quoted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_start", $.Int32);

    $.Field({Static:false, Public:false}, "m_token", $asm12.TypeRef("System.Net.CookieToken"));

    $.Field({Static:false, Public:false}, "m_tokenLength", $.Int32);

    $.Field({Static:false, Public:false}, "m_tokenStream", $.String);

    $.Field({Static:false, Public:false}, "m_value", $.String);

    $.Field({Static:true , Public:false}, "RecognizedAttributes", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.CookieTokenizer+RecognizedAttribute")]));

    $.Field({Static:true , Public:false}, "RecognizedServerAttributes", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.CookieTokenizer+RecognizedAttribute")]));

    $.Property({Static:false, Public:false}, "EndOfCookie", $.Boolean);

    $.Property({Static:false, Public:false}, "Eof", $.Boolean);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Quoted", $.Boolean);

    $.Property({Static:false, Public:false}, "Token", $asm12.TypeRef("System.Net.CookieToken"));

    $.Property({Static:false, Public:false}, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.CookieTokenizer+RecognizedAttribute */ 

(function RecognizedAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.CookieTokenizer+RecognizedAttribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.CookieToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Token", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.CookieToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEqualTo", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_token", $asm12.TypeRef("System.Net.CookieToken"));

    $.Property({Static:false, Public:false}, "Token", $asm12.TypeRef("System.Net.CookieToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CookieParser */ 

(function CookieParser$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CookieParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckQuoted", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndofHeader", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Get", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cookie"))
    );

    $.Field({Static:false, Public:false}, "m_tokenizer", $asm12.TypeRef("System.Net.CookieTokenizer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Comparer */ 

(function Comparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Comparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IComparer.Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IComparer"), "Compare");

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CookieCollection */ 

(function CookieCollection$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CookieCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cookie"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOtherVersionSeen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cookie"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Net.Cookie")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAdd", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Net.Cookie"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TimeStamp", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.DateTime"), [$asm12.TypeRef("System.Net.CookieCollection+Stamp")])
    );

    $.Field({Static:false, Public:false}, "m_version", $.Int32);

    $.Field({Static:false, Public:false}, "m_list", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_TimeStamp", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_has_other_versions", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsReadOnly", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Net.Cookie"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "IsOtherVersionSeen", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.CookieCollection+Stamp */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.CookieCollection+Stamp", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Check: 0, 
    Set: 1, 
    SetToUnused: 2, 
    SetToMaxUsed: 3, 
  }
);

/* class System.Net.CookieCollection+CookieCollectionEnumerator */ 

(function CookieCollectionEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CookieCollection+CookieCollectionEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CookieCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "m_cookies", $asm12.TypeRef("System.Net.CookieCollection"));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Field({Static:false, Public:false}, "m_index", $.Int32);

    $.Field({Static:false, Public:false}, "m_version", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.HeaderVariantInfo */ 

(function HeaderVariantInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.HeaderVariantInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.CookieVariant")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Variant", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.CookieVariant"))
    );

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_variant", $asm12.TypeRef("System.Net.CookieVariant"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Variant", $asm12.TypeRef("System.Net.CookieVariant"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CookieContainer */ 

(function CookieContainer$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CookieContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Cookie"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRemoveDomain", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.PathList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AgeCookies", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildCookieCollectionFromDomainMatches", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $.Boolean, 
          $.Int32, $asm12.TypeRef("System.Net.CookieCollection"), 
          $asm0F.TypeRef("System.Collections.Generic.List`1", [$.String]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CookieCutter", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CookieCollection"), [
          $asm12.TypeRef("System.Uri"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpireCollection", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Net.CookieCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCookieHeader", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetCookies", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CookieCollection"), [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalDomain", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeUpdateCollections", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.CookieCollection"), $asm12.TypeRef("System.Net.CookieCollection"), 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "HeaderInfo", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.HeaderVariantInfo")]));

    $.Field({Static:false, Public:false}, "m_domainTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "m_maxCookieSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_maxCookies", $.Int32);

    $.Field({Static:false, Public:false}, "m_maxCookiesPerDomain", $.Int32);

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Field({Static:false, Public:false}, "m_fqdnMyDomain", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.PathList */ 

(function PathList$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.PathList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCookiesCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "m_list", $asm0F.TypeRef("System.Collections.SortedList"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Values", $asm0F.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "SyncRoot", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.PathList+PathListComparer */ 

(function PathListComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.PathList+PathListComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IComparer.Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IComparer"), "Compare");

    $.Field({Static:true , Public:false, ReadOnly:true }, "StaticInstance", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CookieException */ 

(function CookieException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.FormatException"), 
      Name: "System.Net.CookieException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CredentialCache */ 

(function CredentialCache$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CredentialCache", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefaultInCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCredential", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.NetworkCredential"), [$asm12.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.Property({Static:false, Public:false}, "IsDefaultInCache", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.ICredentials"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CredentialCache+CredentialEnumerator */ 

(function CredentialEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CredentialCache+CredentialEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.CredentialCache"), $asm0F.TypeRef("System.Collections.Hashtable"), 
          $asm0F.TypeRef("System.Collections.Hashtable"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "m_cache", $asm12.TypeRef("System.Net.CredentialCache"));

    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.ICredentials")]));

    $.Field({Static:false, Public:false}, "m_index", $.Int32);

    $.Field({Static:false, Public:false}, "m_version", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkCredential */ 

(function NetworkCredential$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkCredential", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCredential", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetDomain", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetDomainUserName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetPassword", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetUserName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Domain", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UserName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "lockingObject", $.Object);

    $.Field({Static:false, Public:false}, "m_domain", $.String);

    $.Field({Static:false, Public:false}, "m_userName", $.String);

    $.Field({Static:false, Public:false}, "m_password", $asm0F.TypeRef("System.Security.SecureString"));

    $.Property({Static:false, Public:true }, "UserName", $.String);

    $.Property({Static:false, Public:true }, "Password", $.String);

    $.Property({Static:false, Public:true }, "Domain", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.ICredentials")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SystemNetworkCredential */ 

(function SystemNetworkCredential$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.NetworkCredential"), 
      Name: "System.Net.SystemNetworkCredential", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultCredential", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CredentialKey */ 

(function CredentialKey$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CredentialKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPrefix", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "UriPrefix", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "UriPrefixLength", $.Int32);

    $.Field({Static:false, Public:false}, "AuthenticationType", $.String);

    $.Field({Static:false, Public:false}, "m_HashCode", $.Int32);

    $.Field({Static:false, Public:false}, "m_ComputedHashCode", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Dns */ 

(function Dns$Members () {
  var $, $thisType;


















  JSIL.MakeStaticClass("System.Net.Dns", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CompareHosts", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndGetHostAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]), [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAddrInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPHostEntry"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHostAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnresolveAnswer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPHostEntry"), [$asm12.TypeRef("System.Net.IPAddress")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HostResolutionBeginHelper", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HostResolutionEndHelper", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPHostEntry"), [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalGetHostByAddress", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPHostEntry"), [$asm12.TypeRef("System.Net.IPAddress"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalGetHostByName", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPHostEntry"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NativeToHostEntry", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPHostEntry"), [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetAddrInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPHostEntry")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetAddrInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $.String, $asm12.TypeRef("System.Net.AddressInfoHints"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPHostEntry")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetNameInfo", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.IPAddress"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketError")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryInternalResolve", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPHostEntry")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNormalizeHost", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeBeginGetHostAddresses", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $.String, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.Field({Static:true , Public:false}, "s_DnsPermission", $asm12.TypeRef("System.Net.DnsPermission"));

    $.Field({Static:true , Public:false}, "resolveCallback", $asm0F.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm0F.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ResolveCallback", JSIL.MethodSignature.Action($.Object), true, false));
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.LazyAsyncResult */ 

(function LazyAsyncResult$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.LazyAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Complete", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncCallback", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.AsyncCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.WaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentThreadContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.LazyAsyncResult+ThreadContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndCalled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalPeekCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Result", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWaitForCompletion", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LazilyCreateEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.ManualResetEvent")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProtectedInvokeCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AsyncCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.AsyncCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EndCalled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ErrorCode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Result", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitForCompletion", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WorkerThreadComplete", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:false}, "t_ThreadContext", $asm12.TypeRef("System.Net.LazyAsyncResult+ThreadContext"));

    $.Field({Static:false, Public:false}, "m_AsyncObject", $.Object);

    $.Field({Static:false, Public:false}, "m_AsyncState", $.Object);

    $.Field({Static:false, Public:false}, "m_AsyncCallback", $asm0F.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "m_Result", $.Object);

    $.Field({Static:false, Public:false}, "m_ErrorCode", $.Int32);

    $.Field({Static:false, Public:false}, "m_IntCompleted", $.Int32);

    $.Field({Static:false, Public:false}, "m_EndCalled", $.Boolean);

    $.Field({Static:false, Public:false}, "m_UserEvent", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Event", $.Object);

    $.Property({Static:true , Public:false}, "CurrentThreadContext", $asm12.TypeRef("System.Net.LazyAsyncResult+ThreadContext"));

    $.Property({Static:false, Public:false}, "AsyncObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:false}, "AsyncCallback", $asm0F.TypeRef("System.AsyncCallback"));

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm0F.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalPeekCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "Result", $.Object);

    $.Property({Static:false, Public:false}, "EndCalled", $.Boolean);

    $.Property({Static:false, Public:false}, "ErrorCode", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.LazyAsyncResult+ThreadContext */ 

(function ThreadContext$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.LazyAsyncResult+ThreadContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_NestedIOCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ContextAwareResult */ 

(function ContextAwareResult$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.ContextAwareResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Object, 
          $.Object, $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CaptureOrComplete", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.ExecutionContext")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Complete", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishPostingAsyncOp", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishPostingAsyncOp", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.CallbackClosure")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContextCopy", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.ExecutionContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identity", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeCaptureIdenity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartPostingAsyncOp", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartPostingAsyncOp", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.Field({Static:false, Public:false}, "_Context", $asm0F.TypeRef("System.Threading.ExecutionContext"));

    $.Field({Static:false, Public:false}, "_Lock", $.Object);

    $.Field({Static:false, Public:false}, "_Flags", $asm12.TypeRef("System.Net.ContextAwareResult+StateFlags"));

    $.Field({Static:false, Public:false}, "_Wi", $asm0F.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:false, Public:false}, "ContextCopy", $asm0F.TypeRef("System.Threading.ExecutionContext"));

    $.Property({Static:false, Public:false}, "Identity", $asm0F.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.ContextAwareResult+StateFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.ContextAwareResult+StateFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    CaptureIdentity: 1, 
    CaptureContext: 2, 
    ThreadSafeContextCopy: 4, 
    PostBlockStarted: 8, 
    PostBlockFinished: 16, 
  }
);

/* class System.Net.Dns+ResolveAsyncResult */ 

(function ResolveAsyncResult$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.ContextAwareResult"), 
      Name: "System.Net.Dns+ResolveAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Boolean, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.IPAddress"), $.Object, 
          $.Boolean, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "hostName", $.String);

    $.Field({Static:false, Public:false}, "includeIPv6", $.Boolean);

    $.Field({Static:false, Public:false}, "address", $asm12.TypeRef("System.Net.IPAddress"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.EndPoint */ 

(function EndPoint$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.EndPoint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Net.SocketAddress")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AddressFamily", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.AddressFamily"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Serialize", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SocketAddress"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AddressFamily", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.DnsEndPoint */ 

(function DnsEndPoint$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.EndPoint"), 
      Name: "System.Net.DnsEndPoint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AddressFamily", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.AddressFamily"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Host", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Port", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "Host", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AddressFamily", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Property({Static:false, Public:true }, "Port", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.DnsPermission */ 

(function DnsPermission$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Net.DnsPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:false, Public:false}, "m_noRestriction", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm0F.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebRequest */ 

(function WebRequest$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Net.WebRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginGetResponse", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [$asm0F.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Uri"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndGetResponse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebResponse"), [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationLevel", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.AuthenticationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CachePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheProtocol", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionGroupName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultCachePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultTimerQueue", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TimerThread+Queue"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ImpersonationLevel", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Principal.TokenImpersonationLevel"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalDefaultWebProxy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Method", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PrefixList", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RequestUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectingContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ContextAwareResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetReadingContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ContextAwareResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebResponse"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWritingContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ContextAwareResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitEtwMethods", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSetCachePolicy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LogBeginGetResponse", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogEndGetResponse", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RequestCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CachePolicy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheProtocol", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.RequestCacheProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionGroupName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Method", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PreAuthenticate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Proxy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupCacheProtocol", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:true , Public:false}, "s_PrefixList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "s_DefaultTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:false, Public:false}, "m_AuthenticationLevel", $asm12.TypeRef("System.Net.Security.AuthenticationLevel"));

    $.Field({Static:false, Public:false}, "m_ImpersonationLevel", $asm0F.TypeRef("System.Security.Principal.TokenImpersonationLevel"));

    $.Field({Static:false, Public:false}, "m_CachePolicy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Field({Static:false, Public:false}, "m_CacheProtocol", $asm12.TypeRef("System.Net.Cache.RequestCacheProtocol"));

    $.Field({Static:false, Public:false}, "m_CacheBinding", $asm12.TypeRef("System.Net.Cache.RequestCacheBinding"));

    $.Field({Static:true , Public:false}, "webRequestCreate", $asm12.TypeRef("System.Net.WebRequest+DesignerWebRequestCreate"));

    $.Field({Static:true , Public:false}, "s_DefaultWebProxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Field({Static:true , Public:false}, "s_DefaultWebProxyInitialized", $asm0F.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "DefaultTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Property({Static:true , Public:false}, "PrefixList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:true , Public:true }, "DefaultCachePolicy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Property({Static:false, Public:true , Virtual:true }, "CachePolicy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Property({Static:false, Public:true , Virtual:true }, "Method", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RequestUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionGroupName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "Proxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $.Int32);

    $.Property({Static:false, Public:false}, "CacheProtocol", $asm12.TypeRef("System.Net.Cache.RequestCacheProtocol"));

    $.Property({Static:false, Public:true }, "AuthenticationLevel", $asm12.TypeRef("System.Net.Security.AuthenticationLevel"));

    $.Property({Static:false, Public:true }, "ImpersonationLevel", $asm0F.TypeRef("System.Security.Principal.TokenImpersonationLevel"));

    $.Property({Static:true , Public:false}, "InternalDefaultWebProxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebRequest+DesignerWebRequestCreate */ 

(function DesignerWebRequestCreate$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebRequest+DesignerWebRequestCreate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebRequest"), [$asm12.TypeRef("System.Uri")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IWebRequestCreate")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebRequest+WebProxyWrapperOpaque */ 

(function WebProxyWrapperOpaque$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebRequest+WebProxyWrapperOpaque", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebProxy"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxies", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ProxyChain"), [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxy", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsBypassed", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "webProxy", $asm12.TypeRef("System.Net.WebProxy"));

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IAutoWebProxy"), 
      /* 1 */ $asm12.TypeRef("System.Net.IWebProxy")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebRequest+WebProxyWrapper */ 

(function WebProxyWrapper$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebRequest+WebProxyWrapperOpaque"), 
      Name: "System.Net.WebRequest+WebProxyWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebProxy"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.WebRequest+DelEtwFireBeginWRGet */ 

JSIL.MakeDelegate("System.Net.WebRequest+DelEtwFireBeginWRGet", false, [], 
  new JSIL.MethodSignature(null, [
      $asm0F.TypeRef("System.Object"), $asm0F.TypeRef("System.String"), 
      $asm0F.TypeRef("System.Boolean"), $asm0F.TypeRef("System.Boolean")
    ]));

/* delegate System.Net.WebRequest+DelEtwFireEndWRGet */ 

JSIL.MakeDelegate("System.Net.WebRequest+DelEtwFireEndWRGet", false, [], 
  new JSIL.MethodSignature(null, [
      $asm0F.TypeRef("System.Object"), $asm0F.TypeRef("System.Boolean"), 
      $asm0F.TypeRef("System.Boolean")
    ]));

/* delegate System.Net.WebRequest+DelEtwFireEndWRespGet */ 

JSIL.MakeDelegate("System.Net.WebRequest+DelEtwFireEndWRespGet", false, [], 
  new JSIL.MethodSignature(null, [
      $asm0F.TypeRef("System.Object"), $asm0F.TypeRef("System.Boolean"), 
      $asm0F.TypeRef("System.Boolean"), $asm0F.TypeRef("System.Int32")
    ]));

/* class System.Net.FileWebRequest */ 

(function FileWebRequest$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebRequest"), 
      Name: "System.Net.FileWebRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginGetResponse", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [$asm0F.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndGetResponse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebResponse"), [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Aborted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionGroupName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Method", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RequestUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRequestStreamCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebResponse"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResponseCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionGroupName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Method", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PreAuthenticate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Proxy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:false}, "UnblockReader", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_GetRequestStreamCallback", $asm0F.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm0F.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "GetRequestStreamCallback", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false}, "s_GetResponseCallback", $asm0F.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm0F.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "GetResponseCallback", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false}, "s_WrappedGetRequestStreamCallback", $asm0F.TypeRef("System.Threading.ContextCallback"), function ($pi) {
        return $asm0F.System.Threading.ContextCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "GetRequestStreamCallback", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false}, "s_WrappedResponseCallback", $asm0F.TypeRef("System.Threading.ContextCallback"), function ($pi) {
        return $asm0F.System.Threading.ContextCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "GetResponseCallback", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:false, Public:false}, "m_connectionGroupName", $.String);

    $.Field({Static:false, Public:false}, "m_contentLength", $.Int64);

    $.Field({Static:false, Public:false}, "m_credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.Field({Static:false, Public:false}, "m_fileAccess", $asm0F.TypeRef("System.IO.FileAccess"));

    $.Field({Static:false, Public:false}, "m_headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Field({Static:false, Public:false}, "m_method", $.String);

    $.Field({Static:false, Public:false}, "m_preauthenticate", $.Boolean);

    $.Field({Static:false, Public:false}, "m_proxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Field({Static:false, Public:false}, "m_readerEvent", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "m_readPending", $.Boolean);

    $.Field({Static:false, Public:false}, "m_response", $asm12.TypeRef("System.Net.WebResponse"));

    $.Field({Static:false, Public:false}, "m_stream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_syncHint", $.Boolean);

    $.Field({Static:false, Public:false}, "m_timeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_uri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_writePending", $.Boolean);

    $.Field({Static:false, Public:false}, "m_writing", $.Boolean);

    $.Field({Static:false, Public:false}, "m_WriteAResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Field({Static:false, Public:false}, "m_ReadAResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Field({Static:false, Public:false}, "m_Aborted", $.Int32);

    $.Property({Static:false, Public:false}, "Aborted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionGroupName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Method", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Proxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "RequestUri", $asm12.TypeRef("System.Uri"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.FileWebRequestCreator */ 

(function FileWebRequestCreator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.FileWebRequestCreator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebRequest"), [$asm12.TypeRef("System.Uri")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IWebRequestCreate")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.FileWebStream */ 

(function FileWebStream$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.FileStream"), 
      Name: "System.Net.FileWebStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.FileWebRequest"), $.String, 
          $asm0F.TypeRef("System.IO.FileMode"), $asm0F.TypeRef("System.IO.FileAccess"), 
          $asm0F.TypeRef("System.IO.FileShare")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.FileWebRequest"), $.String, 
          $asm0F.TypeRef("System.IO.FileMode"), $asm0F.TypeRef("System.IO.FileAccess"), 
          $asm0F.TypeRef("System.IO.FileShare"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_request", $asm12.TypeRef("System.Net.FileWebRequest"));

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebResponse */ 

(function WebResponse$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Net.WebResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsCacheFresh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFromCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsMutuallyAuthenticated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ResponseUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalSetFromCache", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalSetIsCacheFresh", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "m_IsCacheFresh", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsFromCache", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsFromCache", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalSetFromCache", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsCacheFresh", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalSetIsCacheFresh", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsMutuallyAuthenticated", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ResponseUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.FileWebResponse */ 

(function FileWebResponse$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebResponse"), 
      Name: "System.Net.FileWebResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.FileWebRequest"), $asm12.TypeRef("System.Uri"), 
          $asm0F.TypeRef("System.IO.FileAccess"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ResponseUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "m_closed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_contentLength", $.Int64);

    $.Field({Static:false, Public:false}, "m_fileAccess", $asm0F.TypeRef("System.IO.FileAccess"));

    $.Field({Static:false, Public:false}, "m_headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Field({Static:false, Public:false}, "m_stream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_uri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ResponseUri", $asm12.TypeRef("System.Uri"));

    $.ImplementInterfaces(
      /* 2 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.FtpStatusCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.FtpStatusCode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Undefined: 0, 
    RestartMarker: 110, 
    ServiceTemporarilyNotAvailable: 120, 
    DataAlreadyOpen: 125, 
    OpeningData: 150, 
    CommandOK: 200, 
    CommandExtraneous: 202, 
    DirectoryStatus: 212, 
    FileStatus: 213, 
    SystemType: 215, 
    SendUserCommand: 220, 
    ClosingControl: 221, 
    ClosingData: 226, 
    EnteringPassive: 227, 
    LoggedInProceed: 230, 
    ServerWantsSecureSession: 234, 
    FileActionOK: 250, 
    PathnameCreated: 257, 
    SendPasswordCommand: 331, 
    NeedLoginAccount: 332, 
    FileCommandPending: 350, 
    ServiceNotAvailable: 421, 
    CantOpenData: 425, 
    ConnectionClosed: 426, 
    ActionNotTakenFileUnavailableOrBusy: 450, 
    ActionAbortedLocalProcessingError: 451, 
    ActionNotTakenInsufficientSpace: 452, 
    CommandSyntaxError: 500, 
    ArgumentSyntaxError: 501, 
    CommandNotImplemented: 502, 
    BadCommandSequence: 503, 
    NotLoggedIn: 530, 
    AccountNeeded: 532, 
    ActionNotTakenFileUnavailable: 550, 
    ActionAbortedUnknownPageType: 551, 
    FileActionAborted: 552, 
    ActionNotTakenFilenameNotAllowed: 553, 
  }
);

/* enum System.Net.FtpOperation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.FtpOperation", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DownloadFile: 0, 
    ListDirectory: 1, 
    ListDirectoryDetails: 2, 
    UploadFile: 3, 
    UploadFileUnique: 4, 
    AppendFile: 5, 
    DeleteFile: 6, 
    GetDateTimestamp: 7, 
    GetFileSize: 8, 
    Rename: 9, 
    MakeDirectory: 10, 
    RemoveDirectory: 11, 
    PrintWorkingDirectory: 12, 
    Other: 13, 
  }
);

/* enum System.Net.FtpMethodFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.FtpMethodFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    IsDownload: 1, 
    IsUpload: 2, 
    TakesParameter: 4, 
    MayTakeParameter: 8, 
    DoesNotTakeParameter: 16, 
    ParameterIsDirectory: 32, 
    ShouldParseForResponseUri: 64, 
    HasHttpCommand: 128, 
    MustChangeWorkingDirectoryToPath: 256, 
  }
);

/* class System.Net.FtpMethodInfo */ 

(function FtpMethodInfo$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.FtpMethodInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.FtpOperation"), 
          $asm12.TypeRef("System.Net.FtpMethodFlags"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasHttpCommand", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCommandOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDownload", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUpload", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ShouldParseForResponseUri", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.FtpMethodFlags")])
    );

    $.Property({Static:false, Public:false}, "IsCommandOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUpload", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDownload", $.Boolean);

    $.Property({Static:false, Public:false}, "HasHttpCommand", $.Boolean);

    $.Property({Static:false, Public:false}, "ShouldParseForResponseUri", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.FtpWebRequest */ 

(function FtpWebRequest$Members () {
  var $, $thisType;





























































  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebRequest"), 
      Name: "System.Net.FtpWebRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncCallbackWrapper", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AsyncRequestCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "AttemptedRecovery", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginGetResponse", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [$asm0F.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCacheRetrieveBeforeSubmit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCacheRetrieveOnResponse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCacheUpdateOnResponse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFtpConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.PooledStream"), [$asm12.TypeRef("System.Net.ConnectionPool")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataStreamClosed", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndGetResponse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebResponse"), [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureFtpWebResponse", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishRequestStage", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.FtpWebRequest+RequestStage"), [$asm12.TypeRef("System.Net.FtpWebRequest+RequestStage")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Aborted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientCertificates", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionGroupName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentOffset", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultNetworkCredential", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableSsl", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpProxyMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InUse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeepAlive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Method", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.FtpMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadWriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemainingTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RenameTo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RequestUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServicePoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServicePoint"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimerQueue", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TimerThread+Queue"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseBinary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UsePassive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionGroupLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHttpWebRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebResponse"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStatusCode", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Net.WebException")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStatusCode", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Net.FtpWebResponse")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUserString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWritingContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ContextAwareResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QueueOrCreateConnection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.FtpControlStream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RequestCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionGroupName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeepAlive", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Method", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PreAuthenticate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Proxy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetException", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SubmitRequest", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncRequestCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "TimedSubmitRequestHelper", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TimerCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_AsyncCallback", $asm12.TypeRef("System.Net.GeneralAsyncDelegate"), function ($pi) {
        return $asm12.System.Net.GeneralAsyncDelegate.New(null, null, new JSIL.MethodPointerInfo($thisType, "AsyncCallbackWrapper", new JSIL.MethodSignature(null, [$.Object, $.Object]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_CreateConnectionCallback", $asm12.TypeRef("System.Net.CreateConnectionDelegate"), function ($pi) {
        return $asm12.System.Net.CreateConnectionDelegate.New(null, null, new JSIL.MethodPointerInfo($thisType, "CreateFtpConnection", new JSIL.MethodSignature($asm12.TypeRef("System.Net.PooledStream"), [$asm12.TypeRef("System.Net.ConnectionPool")]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultFtpNetworkCredential", $asm12.TypeRef("System.Net.NetworkCredential"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_DefaultTimeout", $.Int32, 100000);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_DefaultTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Property({Static:false, Public:false}, "MethodInfo", $asm12.TypeRef("System.Net.FtpMethodInfo"));

    $.Property({Static:true , Public:false}, "DefaultNetworkCredential", $asm12.TypeRef("System.Net.NetworkCredential"));

    $.Property({Static:false, Public:true , Virtual:true }, "Method", $.String);

    $.Property({Static:false, Public:true }, "RenameTo", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequestUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $.Int32);

    $.Property({Static:false, Public:false}, "RemainingTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "ReadWriteTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "ContentOffset", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Proxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionGroupName", $.String);

    $.Property({Static:false, Public:true }, "ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Property({Static:false, Public:false}, "Aborted", $.Boolean);

    $.Property({Static:false, Public:false}, "TimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Property({Static:false, Public:true }, "KeepAlive", $.Boolean);

    $.Property({Static:false, Public:true }, "UseBinary", $.Boolean);

    $.Property({Static:false, Public:true }, "UsePassive", $.Boolean);

    $.Property({Static:false, Public:true }, "ClientCertificates", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Property({Static:false, Public:true }, "EnableSsl", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:false}, "InUse", $.Boolean);

    $.Property({Static:false, Public:false}, "HttpProxyMode", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.FtpWebRequest+RequestStage */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.FtpWebRequest+RequestStage", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CheckForError: 0, 
    RequestStarted: 1, 
    WriteReady: 2, 
    ReadReady: 3, 
    ReleaseConnection: 4, 
  }
);

/* class System.Net.FtpWebRequestCreator */ 

(function FtpWebRequestCreator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.FtpWebRequestCreator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebRequest"), [$asm12.TypeRef("System.Uri")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IWebRequestCreate")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.FtpWebResponse */ 

(function FtpWebResponse$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebResponse"), 
      Name: "System.Net.FtpWebResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $.Int64, 
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.FtpStatusCode"), 
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpProxyMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastModified", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ResponseUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatusCode", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.FtpStatusCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContentLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetResponseStream", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateStatus", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.FtpStatusCode"), $.String, 
          $.String
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ResponseUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "StatusCode", $asm12.TypeRef("System.Net.FtpStatusCode"));

    $.Property({Static:false, Public:true }, "LastModified", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "HttpProxyMode", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.FtpWebResponse+EmptyStream */ 

(function EmptyStream$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.MemoryStream"), 
      Name: "System.Net.FtpWebResponse+EmptyStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.HttpResponseHeader */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.HttpResponseHeader", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CacheControl: 0, 
    Connection: 1, 
    Date: 2, 
    KeepAlive: 3, 
    Pragma: 4, 
    Trailer: 5, 
    TransferEncoding: 6, 
    Upgrade: 7, 
    Via: 8, 
    Warning: 9, 
    Allow: 10, 
    ContentLength: 11, 
    ContentType: 12, 
    ContentEncoding: 13, 
    ContentLanguage: 14, 
    ContentLocation: 15, 
    ContentMd5: 16, 
    ContentRange: 17, 
    Expires: 18, 
    LastModified: 19, 
    AcceptRanges: 20, 
    Age: 21, 
    ETag: 22, 
    Location: 23, 
    ProxyAuthenticate: 24, 
    RetryAfter: 25, 
    Server: 26, 
    SetCookie: 27, 
    Vary: 28, 
    WwwAuthenticate: 29, 
  }
);

/* enum System.Net.HttpStatusCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.HttpStatusCode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Continue: 100, 
    SwitchingProtocols: 101, 
    OK: 200, 
    Created: 201, 
    Accepted: 202, 
    NonAuthoritativeInformation: 203, 
    NoContent: 204, 
    ResetContent: 205, 
    PartialContent: 206, 
    MultipleChoices: 300, 
    Ambiguous: 300, 
    MovedPermanently: 301, 
    Moved: 301, 
    Redirect: 302, 
    Found: 302, 
    SeeOther: 303, 
    RedirectMethod: 303, 
    NotModified: 304, 
    UseProxy: 305, 
    Unused: 306, 
    RedirectKeepVerb: 307, 
    TemporaryRedirect: 307, 
    BadRequest: 400, 
    Unauthorized: 401, 
    PaymentRequired: 402, 
    Forbidden: 403, 
    NotFound: 404, 
    MethodNotAllowed: 405, 
    NotAcceptable: 406, 
    ProxyAuthenticationRequired: 407, 
    RequestTimeout: 408, 
    Conflict: 409, 
    Gone: 410, 
    LengthRequired: 411, 
    PreconditionFailed: 412, 
    RequestEntityTooLarge: 413, 
    RequestUriTooLong: 414, 
    UnsupportedMediaType: 415, 
    RequestedRangeNotSatisfiable: 416, 
    ExpectationFailed: 417, 
    UpgradeRequired: 426, 
    InternalServerError: 500, 
    NotImplemented: 501, 
    BadGateway: 502, 
    ServiceUnavailable: 503, 
    GatewayTimeout: 504, 
    HttpVersionNotSupported: 505, 
  }
);

/* class System.Net.HttpVersion */ 

(function HttpVersion$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HttpVersion", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Version10", $asm0F.TypeRef("System.Version"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Version11", $asm0F.TypeRef("System.Version"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.DecompressionMethods */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.DecompressionMethods", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    GZip: 1, 
    Deflate: 2, 
  }
);

/* class System.Net.HttpWebRequest */ 

(function HttpWebRequest$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm12.System.Security.Authentication.SslProtocols)) ();
  };























































  function HttpWebRequest_get_CheckCertificateRevocationList () {
    return this.HttpWebRequest$CheckCertificateRevocationList$value;
  }; 












































  function HttpWebRequest_get_RtcState () {
    return this.HttpWebRequest$RtcState$value;
  }; 





  function HttpWebRequest_get_ServerCertValidationCallback () {
    return this.HttpWebRequest$ServerCertValidationCallback$value;
  }; 


  function HttpWebRequest_get_SslProtocols () {
    return this.HttpWebRequest$SslProtocols$value;
  }; 







































  function HttpWebRequest_set_CheckCertificateRevocationList (value) {
    this.HttpWebRequest$CheckCertificateRevocationList$value = value;
  }; 






















  function HttpWebRequest_set_SslProtocols (value) {
    this.HttpWebRequest$SslProtocols$value = value;
  }; 



























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebRequest"), 
      Name: "System.Net.HttpWebRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.ServicePoint")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Uri"), 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Exception"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AbortWrapper", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      new JSIL.MethodSignature(null, [$.String, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AuthHeader", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.HttpResponseHeader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginGetResponse", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [$asm0F.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginSubmitRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallContinueDelegateCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCacheRetrieveBeforeSubmit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCacheRetrieveOnResponse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCacheUpdateOnResponse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectPermission", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Uri"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDeferredCallDone", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckProtocol", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckResubmit", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckResubmitForAuth", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckResubmitForCache", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckWriteSideResponseProcessing", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAuthenticatedConnectionResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearRequestForResubmit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteContinueGate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ContinueTimeoutCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoSubmitRequestProcessing", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.HttpProcessingResult"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndGetResponse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebResponse"), [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndSubmitRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndWriteHeaders", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndWriteHeaders_Part2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWriteHeaders_Part2Wrapper", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrorStatusCodeNotify", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Connection"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindServicePoint", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ServicePoint"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishContinueWait", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishRequest", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebResponse"), $asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeWriteBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateConnectionGroup", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Text.StringBuilder"), [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConnectRequestLine", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateFtpProxyRequestLine", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateProxyRequestLine", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateRequestLine", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Aborted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AllowAutoRedirect", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AllowWriteStreamBuffering", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Async", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutomaticDecompression", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.DecompressionMethods"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BodyStarted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanGetRequestStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanGetResponseStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChallengedUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.Method({Static:false, Public:false}, "get_CheckCertificateRevocationList", 
      JSIL.MethodSignature.Return($.Boolean), 
      HttpWebRequest_get_CheckCertificateRevocationList
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ClientCertificates", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionAsyncResult", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionGroupName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionReaderAsyncResult", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueDelegate", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpContinueDelegate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContinueTimerQueue", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TimerThread+Queue"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CookieContainer", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.CookieContainer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentAuthenticationState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.AuthenticationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentMethod", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.KnownHttpVerb"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultMaximumErrorResponseLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultMaximumResponseHeadersLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpectContinue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasEntityBody", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HaveResponse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HeadersCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpWriteMode", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpWriteMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IdentityRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalProxy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOutstandingGetRequestStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTunnelRequest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsVersionHttp10", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWebSocketRequest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeepAlive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockConnection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumResponseHeadersLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Method", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedsToReadForResponse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NtlmKeepAlive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pipelined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProxyAuthenticationState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.AuthenticationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProxySet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadWriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestContinueCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestSubmitted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RequestUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseStatusCode", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpStatusCode"))
    );

    $.Method({Static:false, Public:false}, "get_RtcState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.RtcState")), 
      HttpWebRequest_get_RtcState
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Saw100Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SendChunked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerAuthenticationState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.AuthenticationState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServerCertificateValidationCallback", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback"))
    );

    $.Method({Static:false, Public:false}, "get_ServerCertValidationCallback", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServerCertValidationCallback")), 
      HttpWebRequest_get_ServerCertValidationCallback
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ServicePoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServicePoint"))
    );

    $.Method({Static:false, Public:false}, "get_SslProtocols", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Authentication.SslProtocols")), 
      HttpWebRequest_get_SslProtocols
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimerQueue", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TimerThread+Queue"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransferEncoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UniqueGroupId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnlockConnectionDelegate", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.UnlockConnectionDelegate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnsafeAuthenticatedConnectionSharing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnsafeOrProxyAuthenticatedConnectionSharing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseCustomHost", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserAgent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserRetrievedWriteStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsesProxy", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsesProxySemantics", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteBufferLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectingContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ContextAwareResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionGroupLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDelegateId", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHostAndPortString", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetReadingContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ContextAwareResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRemoteResourceUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebResponse"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSafeHostAndPort", 
      new JSIL.MethodSignature($.String, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSafeHostAndPort", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Uri"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStatusCode", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Net.HttpWebResponse")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWritingContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ContextAwareResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasRedirectPermission", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitLifetimeTracking", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebResponse"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeGetRequestStreamCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeMemoryStream", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [$asm0F.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedEndSubmitRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenWriteSideResponseWindow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PostSwitchToContentLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResponse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeHeaders", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AbortDelegate", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpAbortDelegate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Accept", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Async", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_CheckCertificateRevocationList", 
      JSIL.MethodSignature.Action($.Boolean), 
      HttpWebRequest_set_CheckCertificateRevocationList
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionGroupName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CurrentAuthenticationState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AuthenticationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CurrentMethod", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.KnownHttpVerb"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ExpectContinue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HeadersCompleted", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HttpWriteMode", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWriteMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalConnectionGroup", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalProxy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsTunnelRequest", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeepAlive", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LockConnection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Method", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NeedsToReadForResponse", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NtlmKeepAlive", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pipelined", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PreAuthenticate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Proxy", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProxySet", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Saw100Continue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ServerAuthenticationState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AuthenticationState"))
    );

    $.Method({Static:false, Public:false}, "set_SslProtocols", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Authentication.SslProtocols")), 
      HttpWebRequest_set_SslProtocols
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UnlockConnectionDelegate", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.UnlockConnectionDelegate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UserAgent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAndOrProcessResponse", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetExceptionIfRequired", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetExceptionIfRequired", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRequestContinue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRequestContinue", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CoreResponseData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRequestSubmitDone", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRequestSubmitted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetResponse", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CoreResponseData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetResponse", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSpecialHeaders", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWriteBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldWaitFor100Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartAsync100ContinueTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContinueWait", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SubmitRequest", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ServicePoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchToContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:true , Public:false}, "TimeoutCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrimScopeID", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetHostUri", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateHeaders", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCallDone", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.ConnectStream"), $asm12.TypeRef("System.Net.ConnectionReturnResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHeadersCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.WebExceptionStatus"), $asm12.TypeRef("System.Net.ConnectStream"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_Saw100Continue", $.Boolean);

    $.Field({Static:false, Public:false}, "m_KeepAlive", $.Boolean);

    $.Field({Static:false, Public:false}, "m_LockConnection", $.Boolean);

    $.Field({Static:false, Public:false}, "m_NtlmKeepAlive", $.Boolean);

    $.Field({Static:false, Public:false}, "m_AutomaticDecompression", $asm12.TypeRef("System.Net.DecompressionMethods"));

    $.Field({Static:false, Public:false}, "m_Aborted", $.Int32);

    $.Field({Static:false, Public:false}, "m_OnceFailed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Pipelined", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Retry", $.Boolean);

    $.Field({Static:false, Public:false}, "m_HeadersCompleted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsCurrentAuthenticationStateProxy", $.Boolean);

    $.Field({Static:false, Public:false}, "m_NeedsToReadForResponse", $.Boolean);

    $.Field({Static:false, Public:false}, "m_BodyStarted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_RequestSubmitted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_OriginallyBuffered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Extra401Retry", $.Boolean);

    $.Field({Static:false, Public:false}, "m_StartTimestamp", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "HttpBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EndWriteHeaders_Part2Callback", $asm0F.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm0F.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "EndWriteHeaders_Part2Wrapper", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ContinueTimeoutCallback", $asm12.TypeRef("System.Net.TimerThread+Callback"), function ($pi) {
        return $asm12.System.Net.TimerThread_Callback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ContinueTimeoutCallback", new JSIL.MethodSignature(null, [
                $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
                $.Object
              ]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ContinueTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_TimeoutCallback", $asm12.TypeRef("System.Net.TimerThread+Callback"), function ($pi) {
        return $asm12.System.Net.TimerThread_Callback.New(null, null, new JSIL.MethodPointerInfo($thisType, "TimeoutCallback", new JSIL.MethodSignature(null, [
                $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
                $.Object
              ]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_AbortWrapper", $asm0F.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm0F.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "AbortWrapper", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false}, "s_UniqueGroupId", $.Int32);

    $.Field({Static:false, Public:false}, "_Booleans", $asm12.TypeRef("System.Net.HttpWebRequest+Booleans"));

    $.Field({Static:false, Public:false}, "m_ContinueTimer", $asm12.TypeRef("System.Net.TimerThread+Timer"));

    $.Field({Static:false, Public:false}, "m_ContinueGate", $asm12.TypeRef("System.Net.InterlockedGate"));

    $.Field({Static:false, Public:false}, "m_ContinueTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_ContinueTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:false, Public:false}, "m_PendingReturnResult", $.Object);

    $.Field({Static:false, Public:false}, "_WriteAResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Field({Static:false, Public:false}, "_ReadAResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Field({Static:false, Public:false}, "_ConnectionAResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Field({Static:false, Public:false}, "_ConnectionReaderAResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Field({Static:false, Public:false}, "_RequestIsAsync", $asm12.TypeRef("System.Net.TriState"));

    $.Field({Static:false, Public:false}, "_ContinueDelegate", $asm12.TypeRef("System.Net.HttpContinueDelegate"));

    $.Field({Static:false, Public:false}, "_ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Field({Static:false, Public:false}, "_HttpResponse", $asm12.TypeRef("System.Net.HttpWebResponse"));

    $.Field({Static:false, Public:false}, "_CoreResponse", $.Object);

    $.Field({Static:false, Public:false}, "_NestedWriteSideCheck", $.Int32);

    $.Field({Static:false, Public:false}, "_Verb", $asm12.TypeRef("System.Net.KnownHttpVerb"));

    $.Field({Static:false, Public:false}, "_OriginVerb", $asm12.TypeRef("System.Net.KnownHttpVerb"));

    $.Field({Static:false, Public:false}, "_HostHasPort", $.Boolean);

    $.Field({Static:false, Public:false}, "_HostUri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_HttpRequestHeaders", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Field({Static:false, Public:false}, "_WriteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_WriteBufferLength", $.Int32);

    $.Field({Static:true , Public:false}, "_WriteBufferCache", $asm12.TypeRef("System.PinnableBufferCache"));

    $.Field({Static:false, Public:false}, "_WriteBufferFromPinnableCache", $.Boolean);

    $.Field({Static:false, Public:false}, "_HttpWriteMode", $asm12.TypeRef("System.Net.HttpWriteMode"));

    $.Field({Static:false, Public:false}, "_Uri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_OriginUri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_MediaType", $.String);

    $.Field({Static:false, Public:false}, "_ContentLength", $.Int64);

    $.Field({Static:false, Public:false}, "_Proxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Field({Static:false, Public:false}, "_ProxyChain", $asm12.TypeRef("System.Net.ProxyChain"));

    $.Field({Static:false, Public:false}, "_ConnectionGroupName", $.String);

    $.Field({Static:false, Public:false}, "m_InternalConnectionGroup", $.Boolean);

    $.Field({Static:false, Public:false}, "_ProxyAuthenticationState", $asm12.TypeRef("System.Net.AuthenticationState"));

    $.Field({Static:false, Public:false}, "_ServerAuthenticationState", $asm12.TypeRef("System.Net.AuthenticationState"));

    $.Field({Static:false, Public:false}, "_AbortDelegate", $asm12.TypeRef("System.Net.HttpAbortDelegate"));

    $.Field({Static:false, Public:false}, "_SubmitWriteStream", $asm12.TypeRef("System.Net.ConnectStream"));

    $.Field({Static:false, Public:false}, "_OldSubmitWriteStream", $asm12.TypeRef("System.Net.ConnectStream"));

    $.Field({Static:false, Public:false}, "_MaximumAllowedRedirections", $.Int32);

    $.Field({Static:false, Public:false}, "_AutoRedirects", $.Int32);

    $.Field({Static:false, Public:false}, "_RedirectedToDifferentHost", $.Boolean);

    $.Field({Static:false, Public:false}, "_RerequestCount", $.Int32);

    $.Field({Static:false, Public:false}, "_Timeout", $.Int32);

    $.Field({Static:false, Public:false}, "_Timer", $asm12.TypeRef("System.Net.TimerThread+Timer"));

    $.Field({Static:false, Public:false}, "_TimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:false, Public:false}, "_RequestContinueCount", $.Int32);

    $.Field({Static:false, Public:false}, "_ReadWriteTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_CookieContainer", $asm12.TypeRef("System.Net.CookieContainer"));

    $.Field({Static:false, Public:false}, "_MaximumResponseHeadersLength", $.Int32);

    $.Field({Static:false, Public:false}, "_UnlockDelegate", $asm12.TypeRef("System.Net.UnlockConnectionDelegate"));

    $.Field({Static:false, Public:false}, "_returnResponseOnFailureStatusCode", $.Boolean);

    $.Field({Static:false, Public:false}, "_resendRequestContent", $asm0F.TypeRef("System.Action`1", [$asm0F.TypeRef("System.IO.Stream")]));

    $.Field({Static:false, Public:false}, "_originalContentLength", $.Int64);

    $.Field({Static:false, Public:false}, "_ClientCertificates", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Field({Static:false, Public:false}, "HttpWebRequest$CheckCertificateRevocationList$value", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "HttpWebRequest$SslProtocols$value", $asm12.TypeRef("System.Security.Authentication.SslProtocols"))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "HttpWebRequest$RtcState$value", $asm12.TypeRef("System.Net.RtcState"))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "HttpWebRequest$ServerCertValidationCallback$value", $asm12.TypeRef("System.Net.ServerCertValidationCallback"))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "CheckCertificateRevocationList", $.Boolean);

    $.Property({Static:false, Public:false}, "SslProtocols", $asm12.TypeRef("System.Security.Authentication.SslProtocols"));

    $.Property({Static:false, Public:false}, "RtcState", $asm12.TypeRef("System.Net.RtcState"));

    $.Property({Static:false, Public:false}, "Aborted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AllowAutoRedirect", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AllowWriteStreamBuffering", $.Boolean);

    $.Property({Static:false, Public:false}, "ExpectContinue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HaveResponse", $.Boolean);

    $.Property({Static:false, Public:false}, "NtlmKeepAlive", $.Boolean);

    $.Property({Static:false, Public:false}, "NeedsToReadForResponse", $.Boolean);

    $.Property({Static:false, Public:false}, "BodyStarted", $.Boolean);

    $.Property({Static:false, Public:true }, "KeepAlive", $.Boolean);

    $.Property({Static:false, Public:false}, "LockConnection", $.Boolean);

    $.Property({Static:false, Public:true }, "Pipelined", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:false}, "ProxySet", $.Boolean);

    $.Property({Static:false, Public:false}, "RequestSubmitted", $.Boolean);

    $.Property({Static:false, Public:false}, "Saw100Continue", $.Boolean);

    $.Property({Static:false, Public:true }, "UnsafeAuthenticatedConnectionSharing", $.Boolean);

    $.Property({Static:false, Public:false}, "UnsafeOrProxyAuthenticatedConnectionSharing", $.Boolean);

    $.Property({Static:false, Public:false}, "IsVersionHttp10", $.Boolean);

    $.Property({Static:false, Public:true }, "SendChunked", $.Boolean);

    $.Property({Static:false, Public:true }, "AutomaticDecompression", $asm12.TypeRef("System.Net.DecompressionMethods"));

    $.Property({Static:false, Public:false}, "HttpWriteMode", $asm12.TypeRef("System.Net.HttpWriteMode"));

    $.Property({Static:true , Public:true }, "DefaultMaximumResponseHeadersLength", $.Int32);

    $.Property({Static:true , Public:true }, "DefaultMaximumErrorResponseLength", $.Int32);

    $.Property({Static:false, Public:true }, "MaximumResponseHeadersLength", $.Int32);

    $.Property({Static:false, Public:false}, "AbortDelegate", $asm12.TypeRef("System.Net.HttpAbortDelegate"));

    $.Property({Static:false, Public:false}, "ConnectionAsyncResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Property({Static:false, Public:false}, "ConnectionReaderAsyncResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Property({Static:false, Public:false}, "UserRetrievedWriteStream", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOutstandingGetRequestStream", $.Boolean);

    $.Property({Static:false, Public:false}, "Async", $.Boolean);

    $.Property({Static:false, Public:false}, "UnlockConnectionDelegate", $asm12.TypeRef("System.Net.UnlockConnectionDelegate"));

    $.Property({Static:false, Public:false}, "UsesProxy", $.Boolean);

    $.Property({Static:false, Public:false}, "ResponseStatusCode", $asm12.TypeRef("System.Net.HttpStatusCode"));

    $.Property({Static:false, Public:false}, "UsesProxySemantics", $.Boolean);

    $.Property({Static:false, Public:false}, "ChallengedUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "ProxyAuthenticationState", $asm12.TypeRef("System.Net.AuthenticationState"));

    $.Property({Static:false, Public:false}, "ServerAuthenticationState", $asm12.TypeRef("System.Net.AuthenticationState"));

    $.Property({Static:false, Public:false}, "CurrentAuthenticationState", $asm12.TypeRef("System.Net.AuthenticationState"));

    $.Property({Static:false, Public:true }, "ClientCertificates", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "CookieContainer", $asm12.TypeRef("System.Net.CookieContainer"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequestUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $.Int32);

    $.Property({Static:false, Public:false}, "TimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Property({Static:false, Public:true }, "ReadWriteTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "ContinueTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "ContinueTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Property({Static:false, Public:false}, "HeadersCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "CanGetRequestStream", $.Boolean);

    $.Property({Static:false, Public:false}, "CanGetResponseStream", $.Boolean);

    $.Property({Static:false, Public:false}, "HasEntityBody", $.Boolean);

    $.Property({Static:false, Public:true }, "Address", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "ContinueDelegate", $asm12.TypeRef("System.Net.HttpContinueDelegate"));

    $.Property({Static:false, Public:true }, "ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Property({Static:false, Public:false}, "UseCustomHost", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Method", $.String);

    $.Property({Static:false, Public:false}, "CurrentMethod", $asm12.TypeRef("System.Net.KnownHttpVerb"));

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.Property({Static:false, Public:false}, "IsTunnelRequest", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWebSocketRequest", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionGroupName", $.String);

    $.Property({Static:false, Public:false}, "InternalConnectionGroup", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Proxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Property({Static:false, Public:false}, "InternalProxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm0F.TypeRef("System.Version"));

    $.Property({Static:false, Public:true }, "TransferEncoding", $.String);

    $.Property({Static:false, Public:true }, "Connection", $.String);

    $.Property({Static:false, Public:true }, "Accept", $.String);

    $.Property({Static:false, Public:true }, "UserAgent", $.String);

    $.Property({Static:false, Public:false}, "WriteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "WriteBufferLength", $.Int32);

    $.Property({Static:false, Public:false}, "RequestContinueCount", $.Int32);

    $.Property({Static:false, Public:false}, "IdentityRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerCertValidationCallback", $asm12.TypeRef("System.Net.ServerCertValidationCallback"));

    $.Property({Static:false, Public:true }, "ServerCertificateValidationCallback", $asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback"));

    $.Property({Static:true , Public:false}, "UniqueGroupId", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.HttpWebRequest+Booleans */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.HttpWebRequest+Booleans", 
    BaseType: $asm0F.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    AllowAutoRedirect: 1, 
    AllowWriteStreamBuffering: 2, 
    ExpectContinue: 4, 
    Default: 7, 
    ProxySet: 16, 
    UnsafeAuthenticatedConnectionSharing: 64, 
    IsVersionHttp10: 128, 
    SendChunked: 256, 
    EnableDecompression: 512, 
    IsTunnelRequest: 1024, 
    IsWebSocketRequest: 2048, 
  }
);

/* class System.Net.RtcState */ 

(function RtcState$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.RtcState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "get_IsAborted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "inputData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "outputData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "connectComplete", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "result", $.Int32);

    $.Field({Static:false, Public:false}, "isAborted", $.Int32);

    $.Property({Static:false, Public:false}, "IsAborted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HttpWebResponse */ 

(function HttpWebResponse$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebResponse"), 
      Name: "System.Net.HttpWebResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.KnownHttpVerb"), 
          $asm12.TypeRef("System.Net.CoreResponseData"), $.String, 
          $.Boolean, $asm12.TypeRef("System.Net.DecompressionMethods"), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionGroupName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoreResponseData", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.CoreResponseData"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsMutuallyAuthenticated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWebSocketResponse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeepAlive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastModified", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ResponseUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StatusCode", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpStatusCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StatusDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResponseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Cookies", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CookieCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalSetIsMutuallyAuthenticated", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseStream", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "m_Uri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_Verb", $asm12.TypeRef("System.Net.KnownHttpVerb"));

    $.Field({Static:false, Public:false}, "m_StatusCode", $asm12.TypeRef("System.Net.HttpStatusCode"));

    $.Field({Static:false, Public:false}, "m_StatusDescription", $.String);

    $.Field({Static:false, Public:false}, "m_ConnectStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_CoreResponseData", $asm12.TypeRef("System.Net.CoreResponseData"));

    $.Field({Static:false, Public:false}, "m_HttpResponseHeaders", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Field({Static:false, Public:false}, "m_ContentLength", $.Int64);

    $.Field({Static:false, Public:false}, "m_MediaType", $.String);

    $.Field({Static:false, Public:false}, "m_IsVersionHttp11", $.Boolean);

    $.Field({Static:false, Public:false}, "m_cookies", $asm12.TypeRef("System.Net.CookieCollection"));

    $.Field({Static:false, Public:false}, "m_propertiesDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_UsesProxySemantics", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsMutuallyAuthenticated", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsWebSocketResponse", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ConnectionGroupName", $.String);

    $.Property({Static:false, Public:false}, "IsWebSocketResponse", $.Boolean);

    $.Property({Static:false, Public:false}, "ConnectionGroupName", $.String);

    $.Property({Static:false, Public:false}, "ResponseStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "CoreResponseData", $asm12.TypeRef("System.Net.CoreResponseData"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsMutuallyAuthenticated", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalSetIsMutuallyAuthenticated", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Cookies", $asm12.TypeRef("System.Net.CookieCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:true }, "LastModified", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "StatusCode", $asm12.TypeRef("System.Net.HttpStatusCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "StatusDescription", $.String);

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm0F.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "KeepAlive", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ResponseUri", $asm12.TypeRef("System.Uri"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO");
JSIL.DeclareNamespace("System.IO.Compression");
/* class System.IO.Compression.GZipStream */ 

(function GZipStream$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.IO.Compression.GZipStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.IO.Compression.CompressionMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "deflateStream", $asm12.TypeRef("System.IO.Compression.DeflateStream"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true }, "BaseStream", $asm0F.TypeRef("System.IO.Stream"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.GZipWrapperStream */ 

(function GZipWrapperStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.IO.Compression.GZipStream"), 
      Name: "System.Net.GZipWrapperStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.IO.Compression.CompressionMode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.IRequestLifetimeTracker.TrackRequestLifetime", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Overrides($asm12.TypeRef("System.Net.IRequestLifetimeTracker"), "TrackRequestLifetime");

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.DeflateStream */ 

(function DeflateStream$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.IO.Compression.DeflateStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.IO.Compression.CompressionMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm12.TypeRef("System.IO.Compression.IFileFormatReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.IO.Compression.CompressionMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.IO.Compression.CompressionLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.IO.Compression.CompressionLevel"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AwaitAsyncResultCompletion", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.DeflateStreamAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEndXxxxLegalStateAndParams", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDeflater", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.IDeflater"), [$asm0F.TypeRef("System.Nullable`1", [$asm12.TypeRef("System.IO.Compression.CompressionLevel")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInflater", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.IInflater"), [$asm12.TypeRef("System.IO.Compression.IFileFormatReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DoMaintenance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoWrite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCompressionMode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDecompressionMode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureNotDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDeflaterType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.DeflateStream+WorkerType"))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetInflaterType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.DeflateStream+WorkerType"))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InternalWrite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PurgeBuffers", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFileFormatWriter", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.IFileFormatWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateParameters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDeflaterOutput", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_stream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_mode", $asm12.TypeRef("System.IO.Compression.CompressionMode"));

    $.Field({Static:false, Public:false}, "_leaveOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "inflater", $asm12.TypeRef("System.IO.Compression.IInflater"));

    $.Field({Static:false, Public:false}, "deflater", $asm12.TypeRef("System.IO.Compression.IDeflater"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_CallBack", $asm0F.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_AsyncWriterDelegate", $asm12.TypeRef("System.IO.Compression.DeflateStream+AsyncWriteDelegate"));

    $.Field({Static:false, Public:false}, "formatWriter", $asm12.TypeRef("System.IO.Compression.IFileFormatWriter"));

    $.Field({Static:false, Public:false}, "wroteHeader", $.Boolean);

    $.Field({Static:false, Public:false}, "wroteBytes", $.Boolean);

    $.Field({Static:true , Public:false}, "deflaterType", $asm12.TypeRef("System.IO.Compression.DeflateStream+WorkerType"), function ($pi) {
        return $asm12.System.IO.Compression.DeflateStream_WorkerType.Unknown;
      });

    $.Field({Static:true , Public:false}, "inflaterType", $asm12.TypeRef("System.IO.Compression.DeflateStream+WorkerType"), function ($pi) {
        return $asm12.System.IO.Compression.DeflateStream_WorkerType.Unknown;
      });

    $.Property({Static:false, Public:true }, "BaseStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.IO.Compression.DeflateStream+AsyncWriteDelegate */ 

JSIL.MakeDelegate("System.IO.Compression.DeflateStream+AsyncWriteDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Byte")]), $asm0F.TypeRef("System.Int32"), 
      $asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Boolean")
    ]));

/* enum System.IO.Compression.DeflateStream+WorkerType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.DeflateStream+WorkerType", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Managed: 0, 
    ZLib: 1, 
    Unknown: 2, 
  }
);

/* class System.Net.DeflateWrapperStream */ 

(function DeflateWrapperStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.IO.Compression.DeflateStream"), 
      Name: "System.Net.DeflateWrapperStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.IO.Compression.CompressionMode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.IRequestLifetimeTracker.TrackRequestLifetime", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Overrides($asm12.TypeRef("System.Net.IRequestLifetimeTracker"), "TrackRequestLifetime");

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HybridWebProxyFinder */ 

(function HybridWebProxyFinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HybridWebProxyFinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxies", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])])])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeFallbackSettings", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "allowFallback", $.Boolean);

    $.Field({Static:false, Public:false}, "winHttpFinder", $asm12.TypeRef("System.Net.WinHttpWebProxyFinder"));

    $.Field({Static:false, Public:false}, "currentFinder", $asm12.TypeRef("System.Net.BaseWebProxyFinder"));

    $.Field({Static:false, Public:false}, "engine", $asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsValid", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IWebProxyFinder"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.IAuthenticationModule */ 

JSIL.MakeInterface(
  "System.Net.IAuthenticationModule", true, [], function ($) {
    $.Method({}, "Authenticate", new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ]));
    $.Method({}, "PreAuthenticate", new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")]));
    $.Method({}, "get_CanPreAuthenticate", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_AuthenticationType", JSIL.MethodSignature.Return($.String));
    $.Property({}, "CanPreAuthenticate");
    $.Property({}, "AuthenticationType");
  }, []);

/* interface System.Net.ICertificatePolicy */ 

JSIL.MakeInterface(
  "System.Net.ICertificatePolicy", true, [], function ($) {
    $.Method({}, "CheckValidationResult", new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.ServicePoint"), $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Net.WebRequest"), $.Int32
        ]));
  }, []);

/* interface System.Net.ICredentials */ 

JSIL.MakeInterface(
  "System.Net.ICredentials", true, [], function ($) {
    $.Method({}, "GetCredential", new JSIL.MethodSignature($asm12.TypeRef("System.Net.NetworkCredential"), [$asm12.TypeRef("System.Uri"), $.String]));
  }, []);

/* class System.Net.IntPtrHelper */ 

(function IntPtrHelper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.IntPtrHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.InternalException */ 

(function InternalException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.SystemException"), 
      Name: "System.Net.InternalException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NclUtilities */ 

(function NclUtilities$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("System.Net.NclUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DemandCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ContextRelativeDemandCallback", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.ContextCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_HasShutdownStarted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LocalAddresses", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LocalAddressesLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocalAddresses", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GuessWhetherHostIsLoopback", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAddressLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.IPAddress")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFatal", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsThreadPoolLow", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "s_ContextRelativeDemandCallback", $asm0F.TypeRef("System.Threading.ContextCallback"));

    $.Field({Static:true , Public:false}, "_LocalAddresses", $asm12.TypeRef("System.Array"));

    $.Field({Static:true , Public:false}, "_LocalAddressesLock", $.Object);

    $.Field({Static:true , Public:false}, "s_AddressChange", $asm12.TypeRef("System.Net.NetworkAddressChangePolled"));

    $.Property({Static:true , Public:false}, "HasShutdownStarted", $.Boolean);

    $.Property({Static:true , Public:false}, "ContextRelativeDemandCallback", $asm0F.TypeRef("System.Threading.ContextCallback"));

    $.Property({Static:true , Public:false}, "LocalAddresses", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]));

    $.Property({Static:true , Public:false}, "LocalAddressesLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NclConstants */ 

(function NclConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Net.NclConstants", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "Sentinel", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Object, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyUriArray", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Uri")]), function ($pi) {
        return JSIL.Array.New($asm12.System.Uri, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "CRLF", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ChunkTerminator", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.InterlockedGate */ 

(function InterlockedGate$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.InterlockedGate", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishSignaling", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishTriggering", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSignaling", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartTriggering", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Trigger", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_State", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkAddressChangePolled */ 

(function NetworkAddressChangePolled$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkAddressChangePolled", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAndReset", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Setup", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkInformation.StartIPOptions"))
    );

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "ipv4Socket", $asm12.TypeRef("System.Net.SafeCloseSocketAndEvent"));

    $.Field({Static:false, Public:false}, "ipv6Socket", $asm12.TypeRef("System.Net.SafeCloseSocketAndEvent"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ComNetOS */ 

(function ComNetOS$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.ComNetOS", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetWindowsInstallType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WindowsInstallationType"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsAspNetServer", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsWin7orLater", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsWin7Sp1orLater", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsWin8orLater", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InstallationType", $asm12.TypeRef("System.Net.WindowsInstallationType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ValidationHelper */ 

(function ValidationHelper$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.Net.ValidationHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ExceptionMessage", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "HashString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsBlankString", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsInvalidHttpString", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeEmptyArrayNull", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeStringNull", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateTcpPort", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Field({Static:true , Public:true }, "EmptyArray", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm0F.System.String, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidMethodChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidParamChars", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ExceptionHelper */ 

(function ExceptionHelper$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.Net.ExceptionHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_CacheEntryNotFoundException", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsolatedException", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodNotImplementedException", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.NotImplementedException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodNotSupportedException", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.NotSupportedException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyNotImplementedException", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.NotImplementedException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyNotSupportedException", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.NotSupportedException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequestAbortedException", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequestProhibitedByCachePolicyException", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebException"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "KeyContainerPermissionOpen", $asm0F.TypeRef("System.Security.Permissions.KeyContainerPermission"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "WebPermissionUnrestricted", $asm12.TypeRef("System.Net.WebPermission"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UnmanagedPermission", $asm0F.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UnrestrictedSocketPermission", $asm12.TypeRef("System.Net.SocketPermission"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "InfrastructurePermission", $asm0F.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ControlPolicyPermission", $asm0F.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ControlPrincipalPermission", $asm0F.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Property({Static:true , Public:false}, "MethodNotImplementedException", $asm0F.TypeRef("System.NotImplementedException"));

    $.Property({Static:true , Public:false}, "PropertyNotImplementedException", $asm0F.TypeRef("System.NotImplementedException"));

    $.Property({Static:true , Public:false}, "MethodNotSupportedException", $asm0F.TypeRef("System.NotSupportedException"));

    $.Property({Static:true , Public:false}, "PropertyNotSupportedException", $asm0F.TypeRef("System.NotSupportedException"));

    $.Property({Static:true , Public:false}, "IsolatedException", $asm12.TypeRef("System.Net.WebException"));

    $.Property({Static:true , Public:false}, "RequestAbortedException", $asm12.TypeRef("System.Net.WebException"));

    $.Property({Static:true , Public:false}, "CacheEntryNotFoundException", $asm12.TypeRef("System.Net.WebException"));

    $.Property({Static:true , Public:false}, "RequestProhibitedByCachePolicyException", $asm12.TypeRef("System.Net.WebException"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.WindowsInstallationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WindowsInstallationType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Client: 1, 
    Server: 2, 
    ServerCore: 3, 
    Embedded: 4, 
  }
);

/* enum System.Net.SecurityStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.SecurityStatus", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OutOfMemory: -2146893056, 
    InvalidHandle: -2146893055, 
    Unsupported: -2146893054, 
    TargetUnknown: -2146893053, 
    InternalError: -2146893052, 
    PackageNotFound: -2146893051, 
    NotOwner: -2146893050, 
    CannotInstall: -2146893049, 
    InvalidToken: -2146893048, 
    CannotPack: -2146893047, 
    QopNotSupported: -2146893046, 
    NoImpersonation: -2146893045, 
    LogonDenied: -2146893044, 
    UnknownCredentials: -2146893043, 
    NoCredentials: -2146893042, 
    MessageAltered: -2146893041, 
    OutOfSequence: -2146893040, 
    NoAuthenticatingAuthority: -2146893039, 
    IncompleteMessage: -2146893032, 
    IncompleteCredentials: -2146893024, 
    BufferNotEnough: -2146893023, 
    WrongPrincipal: -2146893022, 
    TimeSkew: -2146893020, 
    UntrustedRoot: -2146893019, 
    IllegalMessage: -2146893018, 
    CertUnknown: -2146893017, 
    CertExpired: -2146893016, 
    AlgorithmMismatch: -2146893007, 
    SecurityQosFailed: -2146893006, 
    SmartcardLogonRequired: -2146892994, 
    UnsupportedPreauth: -2146892989, 
    BadBinding: -2146892986, 
    OK: 0, 
    ContinueNeeded: 590610, 
    CompleteNeeded: 590611, 
    CompAndContinue: 590612, 
    ContextExpired: 590615, 
    CredentialsNeeded: 590624, 
    Renegotiate: 590625, 
  }
);

/* enum System.Net.ContextAttribute */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.ContextAttribute", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Sizes: 0, 
    Names: 1, 
    Lifespan: 2, 
    DceInfo: 3, 
    StreamSizes: 4, 
    Authority: 6, 
    PackageInfo: 10, 
    NegotiationInfo: 12, 
    UniqueBindings: 25, 
    EndpointBindings: 26, 
    ClientSpecifiedSpn: 27, 
    RemoteCertificate: 83, 
    LocalCertificate: 84, 
    RootStore: 85, 
    IssuerListInfoEx: 89, 
    ConnectionInfo: 90, 
    UiInfo: 104, 
  }
);

/* enum System.Net.Endianness */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Endianness", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Network: 0, 
    Native: 16, 
  }
);

/* enum System.Net.CredentialUse */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.CredentialUse", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Inbound: 1, 
    Outbound: 2, 
    Both: 3, 
  }
);

/* enum System.Net.BufferType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.BufferType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ReadOnlyFlag: -2147483648, 
    Empty: 0, 
    Data: 1, 
    Token: 2, 
    Parameters: 3, 
    Missing: 4, 
    Extra: 5, 
    Trailer: 6, 
    Header: 7, 
    Padding: 9, 
    Stream: 10, 
    ChannelBindings: 14, 
    TargetHost: 16, 
    ReadOnlyWithChecksum: 268435456, 
  }
);

/* enum System.Net.IgnoreCertProblem */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.IgnoreCertProblem", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    not_time_valid: 1, 
    ctl_not_time_valid: 2, 
    not_time_nested: 4, 
    all_not_time_valid: 7, 
    invalid_basic_constraints: 8, 
    allow_unknown_ca: 16, 
    wrong_usage: 32, 
    invalid_name: 64, 
    invalid_policy: 128, 
    end_rev_unknown: 256, 
    ctl_signer_rev_unknown: 512, 
    ca_rev_unknown: 1024, 
    root_rev_unknown: 2048, 
    all_rev_unknown: 3840, 
    none: 4095, 
  }
);

/* struct System.Net.ChainPolicyParameter */ 

(function ChainPolicyParameter$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.ChainPolicyParameter", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbSize", $.UInt32);

    $.Field({Static:false, Public:true }, "dwFlags", $.UInt32);

    $.Field({Static:false, Public:true }, "pvExtraPolicyPara", $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Net.SSL_EXTRA_CERT_CHAIN_POLICY_PARA")]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "StructSize", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.SSL_EXTRA_CERT_CHAIN_POLICY_PARA */ 

(function SSL_EXTRA_CERT_CHAIN_POLICY_PARA$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.SSL_EXTRA_CERT_CHAIN_POLICY_PARA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "u", $asm12.TypeRef("System.Net.SSL_EXTRA_CERT_CHAIN_POLICY_PARA+U"));

    $.Field({Static:false, Public:false}, "dwAuthType", $.Int32);

    $.Field({Static:false, Public:false}, "fdwChecks", $.UInt32);

    $.Field({Static:false, Public:false}, "pwszServerName", $jsilcore.TypeRef("JSIL.Pointer", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StructSize", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.SSL_EXTRA_CERT_CHAIN_POLICY_PARA+U */ 

(function U$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.SSL_EXTRA_CERT_CHAIN_POLICY_PARA+U", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "cbStruct", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 0}, "cbSize", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.ChainPolicyStatus */ 

(function ChainPolicyStatus$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.ChainPolicyStatus", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbSize", $.UInt32);

    $.Field({Static:false, Public:true }, "dwError", $.UInt32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "StructSize", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net._CERT_CHAIN_ELEMENT */ 

(function _CERT_CHAIN_ELEMENT$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net._CERT_CHAIN_ELEMENT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbSize", $.UInt32);

    $.Field({Static:false, Public:true }, "pCertContext", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.IssuerListInfoEx */ 

(function IssuerListInfoEx$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.IssuerListInfoEx", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "aIssuers", $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:true }, "cIssuers", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.SecureCredential */ 

(function SecureCredential$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.SecureCredential", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Net.SecureCredential+Flags"), $asm12.TypeRef("System.Net.SchProtocols"), 
          $asm12.TypeRef("System.Net.Security.EncryptionPolicy")
        ])
    );

    $.Field({Static:false, Public:true }, "version", $.Int32);

    $.Field({Static:false, Public:true }, "cCreds", $.Int32);

    $.Field({Static:false, Public:true }, "certContextArray", $.IntPtr);

    $.Field({Static:false, Public:false, ReadOnly:true }, "rootStore", $.IntPtr);

    $.Field({Static:false, Public:true }, "cMappers", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "phMappers", $.IntPtr);

    $.Field({Static:false, Public:true }, "cSupportedAlgs", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "palgSupportedAlgs", $.IntPtr);

    $.Field({Static:false, Public:true }, "grbitEnabledProtocols", $asm12.TypeRef("System.Net.SchProtocols"));

    $.Field({Static:false, Public:true }, "dwMinimumCipherStrength", $.Int32);

    $.Field({Static:false, Public:true }, "dwMaximumCipherStrength", $.Int32);

    $.Field({Static:false, Public:true }, "dwSessionLifespan", $.Int32);

    $.Field({Static:false, Public:true }, "dwFlags", $asm12.TypeRef("System.Net.SecureCredential+Flags"));

    $.Field({Static:false, Public:true }, "reserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.SecureCredential+Flags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.SecureCredential+Flags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Zero: 0, 
    NoSystemMapper: 2, 
    NoNameCheck: 4, 
    ValidateManual: 8, 
    NoDefaultCred: 16, 
    ValidateAuto: 32, 
    SendAuxRecord: 2097152, 
    UseStrongCrypto: 4194304, 
  }
);

/* struct System.Net.SecurityBufferStruct */ 

(function SecurityBufferStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.SecurityBufferStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "type", $asm12.TypeRef("System.Net.BufferType"));

    $.Field({Static:false, Public:true }, "token", $.IntPtr);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SecurityBuffer */ 

(function SecurityBuffer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SecurityBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.BufferType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Net.BufferType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm12.TypeRef("System.Net.BufferType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"))
    );

    $.Field({Static:false, Public:true }, "size", $.Int32);

    $.Field({Static:false, Public:true }, "type", $asm12.TypeRef("System.Net.BufferType"));

    $.Field({Static:false, Public:true }, "token", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "offset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SecurityBufferDescriptor */ 

(function SecurityBufferDescriptor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SecurityBufferDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Version", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Count", $.Int32);

    $.Field({Static:false, Public:true }, "UnmanagedPointer", $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SecChannelBindings */ 

(function SecChannelBindings$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SecChannelBindings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebRequestPrefixElement */ 

(function WebRequestPrefixElement$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebRequestPrefixElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Creator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IWebRequestCreate"))
    );

    $.Field({Static:false, Public:true }, "Prefix", $.String);

    $.Field({Static:false, Public:false}, "creator", $asm12.TypeRef("System.Net.IWebRequestCreate"));

    $.Field({Static:false, Public:false}, "creatorType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Creator", $asm12.TypeRef("System.Net.IWebRequestCreate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HttpRequestCreator */ 

(function HttpRequestCreator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HttpRequestCreator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebRequest"), [$asm12.TypeRef("System.Uri")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IWebRequestCreate")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CoreResponseData */ 

(function CoreResponseData$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CoreResponseData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:true }, "m_StatusCode", $asm12.TypeRef("System.Net.HttpStatusCode"));

    $.Field({Static:false, Public:true }, "m_StatusDescription", $.String);

    $.Field({Static:false, Public:true }, "m_IsVersionHttp11", $.Boolean);

    $.Field({Static:false, Public:true }, "m_ContentLength", $.Int64);

    $.Field({Static:false, Public:true }, "m_ResponseHeaders", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Field({Static:false, Public:true }, "m_ConnectStream", $asm0F.TypeRef("System.IO.Stream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.HttpAbortDelegate */ 

JSIL.MakeDelegate("System.Net.HttpAbortDelegate", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.WebException")]));

/* delegate System.Net.HttpContinueDelegate */ 

JSIL.MakeDelegate("System.Net.HttpContinueDelegate", true, [], 
  new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Int32"), $asm12.TypeRef("System.Net.WebHeaderCollection")]));

/* enum System.Net.HttpWriteMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.HttpWriteMode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    ContentLength: 1, 
    Chunked: 2, 
    Buffer: 3, 
    None: 4, 
  }
);

/* delegate System.Net.UnlockConnectionDelegate */ 

JSIL.MakeDelegate("System.Net.UnlockConnectionDelegate", false, [], 
  JSIL.MethodSignature.Void);

/* enum System.Net.HttpBehaviour */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.HttpBehaviour", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    HTTP10: 1, 
    HTTP11PartiallyCompliant: 2, 
    HTTP11: 3, 
  }
);

/* enum System.Net.HttpProcessingResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.HttpProcessingResult", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Continue: 0, 
    ReadWait: 1, 
    WriteWait: 2, 
  }
);

/* class System.Net.KnownHttpVerb */ 

(function KnownHttpVerb$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.KnownHttpVerb", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.Field({Static:false, Public:false}, "Name", $.String);

    $.Field({Static:false, Public:false}, "RequireContentBody", $.Boolean);

    $.Field({Static:false, Public:false}, "ContentBodyNotAllowed", $.Boolean);

    $.Field({Static:false, Public:false}, "ConnectRequest", $.Boolean);

    $.Field({Static:false, Public:false}, "ExpectNoContentResponse", $.Boolean);

    $.Field({Static:true , Public:false}, "NamedHeaders", $asm12.TypeRef("System.Collections.Specialized.ListDictionary"));

    $.Field({Static:true , Public:false}, "Get", $.Type);

    $.Field({Static:true , Public:false}, "Connect", $.Type);

    $.Field({Static:true , Public:false}, "Head", $.Type);

    $.Field({Static:true , Public:false}, "Put", $.Type);

    $.Field({Static:true , Public:false}, "Post", $.Type);

    $.Field({Static:true , Public:false}, "MkCol", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HttpProtocolUtils */ 

(function HttpProtocolUtils$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HttpProtocolUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "string2date", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.DateTime"), [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.PolicyWrapper */ 

(function PolicyWrapper$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.PolicyWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ICertificatePolicy"), $asm12.TypeRef("System.Net.ServicePoint"), 
          $asm12.TypeRef("System.Net.WebRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Accept", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckErrors", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChainErrors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [
          $.String, $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapErrorCode", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IgnoreCertProblem"), [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyChainPolicy", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Net.SafeFreeCertChain"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ChainPolicyParameter")])])
    );

    $.Field({Static:false, Public:false}, "fwdPolicy", $asm12.TypeRef("System.Net.ICertificatePolicy"));

    $.Field({Static:false, Public:false}, "srvPoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Field({Static:false, Public:false}, "request", $asm12.TypeRef("System.Net.WebRequest"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.DefaultCertPolicy */ 

(function DefaultCertPolicy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.DefaultCertPolicy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckValidationResult", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.ServicePoint"), $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Net.WebRequest"), $.Int32
        ])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.ICertificatePolicy")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.TriState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.TriState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: -1, 
    False: 0, 
    True: 1, 
  }
);

/* struct System.Net.hostent */ 

(function hostent$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.hostent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "h_name", $.IntPtr);

    $.Field({Static:false, Public:true }, "h_aliases", $.IntPtr);

    $.Field({Static:false, Public:true }, "h_addr_list", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SplitWritesState */ 

(function SplitWritesState$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SplitWritesState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDone", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextBuffers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.Field({Static:false, Public:false}, "_UserBuffers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]));

    $.Field({Static:false, Public:false}, "_Index", $.Int32);

    $.Field({Static:false, Public:false}, "_LastBufferConsumed", $.Int32);

    $.Field({Static:false, Public:false}, "_RealBuffers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]));

    $.Property({Static:false, Public:false}, "IsDone", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.IPAddress */ 

(function IPAddress$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.IPAddress", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt16]), $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddressFamily", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.AddressFamily"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsIPv4MappedToIPv6", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ScopeId", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAddressBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalParse", 
      new JSIL.MethodSignature($.Type, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsLoopback", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "MapToIPv6", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Snapshot", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Any", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Loopback", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Broadcast", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "None", $.Type, function ($pi) {
        return $pi.Broadcast;
      });

    $.Field({Static:false, Public:false}, "m_Address", $.Int64);

    $.Field({Static:true , Public:true , ReadOnly:true }, "IPv6Any", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "IPv6Loopback", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "IPv6None", $.Type);

    $.Field({Static:false, Public:false}, "m_Family", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Field({Static:false, Public:false}, "m_Numbers", $jsilcore.TypeRef("System.Array", [$.UInt16]));

    $.Field({Static:false, Public:false}, "m_ScopeId", $.Int64);

    $.Property({Static:false, Public:true }, "AddressFamily", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Property({Static:false, Public:true }, "ScopeId", $.Int64);

    $.Property({Static:false, Public:true }, "IsIPv4MappedToIPv6", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.IPEndPoint */ 

(function IPEndPoint$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.EndPoint"), 
      Name: "System.Net.IPEndPoint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.IPAddress"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.EndPoint"), [$asm12.TypeRef("System.Net.SocketAddress")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AddressFamily", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.AddressFamily"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Port", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Serialize", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SocketAddress"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Snapshot", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_Address", $asm12.TypeRef("System.Net.IPAddress"));

    $.Field({Static:false, Public:false}, "m_Port", $.Int32);

    $.Field({Static:true , Public:false}, "Any", $.Type);

    $.Field({Static:true , Public:false}, "IPv6Any", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "AddressFamily", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Property({Static:false, Public:true }, "Address", $asm12.TypeRef("System.Net.IPAddress"));

    $.Property({Static:false, Public:true }, "Port", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.IPHostEntry */ 

(function IPHostEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.IPHostEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddressList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Aliases", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AddressList", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Aliases", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "hostName", $.String);

    $.Field({Static:false, Public:false}, "aliases", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "addressList", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]));

    $.Field({Static:false, Public:false}, "isTrustedHost", $.Boolean);

    $.Property({Static:false, Public:true }, "HostName", $.String);

    $.Property({Static:false, Public:true }, "Aliases", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "AddressList", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.IWebProxy */ 

JSIL.MakeInterface(
  "System.Net.IWebProxy", true, [], function ($) {
    $.Method({}, "GetProxy", new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$asm12.TypeRef("System.Uri")]));
    $.Method({}, "IsBypassed", new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")]));
    $.Method({}, "get_Credentials", JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials")));
    $.Method({}, "set_Credentials", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials")));
    $.Property({}, "Credentials");
  }, []);

/* interface System.Net.IWebProxyFinder */ 

JSIL.MakeInterface(
  "System.Net.IWebProxyFinder", false, [], function ($) {
    $.Method({}, "GetProxies", new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])])]));
    $.Method({}, "Abort", JSIL.MethodSignature.Void);
    $.Method({}, "Reset", JSIL.MethodSignature.Void);
    $.Method({}, "get_IsValid", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "IsValid");
  }, [$asm0F.TypeRef("System.IDisposable")]);

/* interface System.Net.IWebRequestCreate */ 

JSIL.MakeInterface(
  "System.Net.IWebRequestCreate", true, [], function ($) {
    $.Method({}, "Create", new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebRequest"), [$asm12.TypeRef("System.Uri")]));
  }, []);

/* class System.Net.Logging */ 

(function Logging$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Logging", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AppDomainUnloadEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Associate", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.IntPtr, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.String, 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.TraceSource"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exception", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $asm0F.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exit", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exit", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.String, 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exit", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exit", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exit", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exit", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.TraceSource"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_On", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequestCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Sockets", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Web", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WebSockets", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMaxDumpSizeSetting", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Diagnostics.TraceSource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetObjectLogHash", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetObjectName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetThreadId", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUseProtocolTextSetting", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Diagnostics.TraceSource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeLogging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsVerbose", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Diagnostics.TraceSource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintError", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.TraceSource"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintError", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintInfo", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.TraceSource"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintInfo", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintInfo", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintLine", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $asm12.TypeRef("System.Diagnostics.TraceEventType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintWarning", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.TraceSource"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintWarning", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceSource"), $.Object, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessExitEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSettings", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Diagnostics.TraceSource"), $asm12.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.Field({Static:true , Public:false}, "s_LoggingEnabled", $asm0F.TypeRef("System.Boolean"), true);

    $.Field({Static:true , Public:false}, "s_LoggingInitialized", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_AppDomainShutdown", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SupportedAttributes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "s_WebTraceSource", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Field({Static:true , Public:false}, "s_HttpListenerTraceSource", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Field({Static:true , Public:false}, "s_SocketsTraceSource", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Field({Static:true , Public:false}, "s_WebSocketsTraceSource", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Field({Static:true , Public:false}, "s_CacheTraceSource", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Field({Static:true , Public:false}, "s_TraceSourceHttpName", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "On", $.Boolean);

    $.Property({Static:true , Public:false}, "Web", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Property({Static:true , Public:false}, "Sockets", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Property({Static:true , Public:false}, "RequestCache", $asm12.TypeRef("System.Diagnostics.TraceSource"));

    $.Property({Static:true , Public:false}, "WebSockets", $asm12.TypeRef("System.Diagnostics.TraceSource"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics");
/* class System.Diagnostics.TraceSource */ 

(function TraceSource$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.TraceSource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Diagnostics.SourceLevels")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_pruneCachedTraceSources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSwitch", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Switch", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SourceSwitch"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NoConfigInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.Field({Static:true , Public:false}, "tracesources", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.WeakReference")]));

    $.Field({Static:true , Public:false}, "s_LastCollectionCount", $.Int32);

    $.Field({Static:false, Public:false}, "internalSwitch", $asm12.TypeRef("System.Diagnostics.SourceSwitch"));

    $.Field({Static:false, Public:false}, "listeners", $asm12.TypeRef("System.Diagnostics.TraceListenerCollection"));

    $.Field({Static:false, Public:false}, "attributes", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Field({Static:false, Public:false}, "switchLevel", $asm12.TypeRef("System.Diagnostics.SourceLevels"));

    $.Field({Static:false, Public:false}, "sourceName", $asm0F.TypeRef("System.String"));

    $.Field({Static:false, Public:false}, "_initCalled", $asm0F.TypeRef("System.Boolean"));

    $.Property({Static:false, Public:true }, "Attributes", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Switch", $asm12.TypeRef("System.Diagnostics.SourceSwitch"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Logging+NclTraceSource */ 

(function NclTraceSource$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TraceSource"), 
      Name: "System.Net.Logging+NclTraceSource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.RegistryConfiguration */ 

(function RegistryConfiguration$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Net.RegistryConfiguration", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AppConfigReadInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "AppConfigReadString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAppConfigPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAppConfigValueName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNetFrameworkVersionedPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GlobalConfigReadInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadConfig", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $asm0F.TypeRef("Microsoft.Win32.RegistryValueKind")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetWebProxyFinder */ 

(function NetWebProxyFinder$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.BaseWebProxyFinder"), 
      Name: "System.Net.NetWebProxyFinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AbortWrapper", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "DetectScriptLocation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DownloadAndCompile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.BaseWebProxyFinder+AutoWebProxyState"), [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureEngineAvailable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxies", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseScriptResult", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequestTimeoutCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDetectAutoProxyUrl", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+WinHttp+AutoDetectType")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.NetworkAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.NetworkAccess", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Connect: 64, 
    Accept: 128, 
  }
);

/* class System.Net.ProtocolViolationException */ 

(function ProtocolViolationException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.InvalidOperationException"), 
      Name: "System.Net.ProtocolViolationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TransportContext */ 

(function TransportContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.TransportContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBindingKind")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ConnectStreamContext */ 

(function ConnectStreamContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.TransportContext"), 
      Name: "System.Net.ConnectStreamContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBindingKind")])
    );

    $.Field({Static:false, Public:false}, "connectStream", $asm12.TypeRef("System.Net.ConnectStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CachedTransportContext */ 

(function CachedTransportContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.TransportContext"), 
      Name: "System.Net.CachedTransportContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBindingKind")])
    );

    $.Field({Static:false, Public:false}, "binding", $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.SecurityProtocolType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.SecurityProtocolType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    SystemDefault: 0, 
    Ssl3: 48, 
    Tls: 192, 
    Tls11: 768, 
    Tls12: 3072, 
  }
);

/* delegate System.Net.BindIPEndPoint */ 

JSIL.MakeDelegate("System.Net.BindIPEndPoint", true, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPEndPoint"), [
      $asm12.TypeRef("System.Net.ServicePoint"), $asm12.TypeRef("System.Net.IPEndPoint"), 
      $asm0F.TypeRef("System.Int32")
    ]));

/* class System.Net.ServicePoint */ 

(function ServicePoint$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ServicePoint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.TimerThread+Queue"), 
          $.Int32, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindUsingDelegate", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Sockets.Socket"), $asm12.TypeRef("System.Net.IPEndPoint")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseConnectionGroup", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseConnectionGroupHelper", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteGetConnection", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.Socket"), $asm12.TypeRef("System.Net.Sockets.Socket"), 
          $asm12.TypeRef("System.Net.Sockets.Socket"), $asm12.TypeRef("System.Net.IPAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectSocket", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebExceptionStatus"), [
          $asm12.TypeRef("System.Net.Sockets.Socket"), $asm12.TypeRef("System.Net.Sockets.Socket"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.Socket")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPAddress")]), 
          $asm12.TypeRef("System.Net.ServicePoint+ConnectSocketState"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectSocketCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectSocketInternal", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.WebExceptionStatus"), [
          $.Boolean, $asm12.TypeRef("System.Net.Sockets.Socket"), 
          $asm12.TypeRef("System.Net.Sockets.Socket"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.Socket")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPAddress")]), $asm12.TypeRef("System.Net.ServicePoint+ConnectSocketState"), 
          $asm0F.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateConnectionGroupTimer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.TimerThread+Timer"), [$asm12.TypeRef("System.Net.ConnectionGroup")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Failed", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindConnectionGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ConnectionGroup"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BindIPEndPointDelegate", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.BindIPEndPoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CachedChannelBinding", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionLeaseTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionLeaseTimerQueue", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TimerThread+Queue"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expect100Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTimedOut", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Hostname", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpBehaviour", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpBehaviour"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalAddress", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalProxyServicePoint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTrustedHost", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LookupString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxIdleTime", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Port", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReceiveBufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportsPipelining", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Understands100Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseNagleAlgorithm", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.Socket"), [
          $asm12.TypeRef("System.Net.PooledStream"), $.Object, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPAddress")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.Socket")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.Socket")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIPAddressInfoList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IdleConnectionGroupTimeoutCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAddressListLoopback", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseAllConnectionGroups", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseConnectionGroup", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveConnectionLimit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HttpBehaviour", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpBehaviour"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Understands100Continue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAddressList", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IPHostEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCachedChannelBinding", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnicastReusePortForSocket", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupHandshakeDoneProcedure", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Security.RemoteCertValidationCallback"), [$asm12.TypeRef("System.Net.TlsStream"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubmitRequest", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateClientCertificate", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateCurrentIndex", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateServerCertificate", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.Field({Static:false, Public:false}, "m_ConnectionLeaseTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_ConnectionLeaseTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:false, Public:false}, "m_ProxyServicePoint", $.Boolean);

    $.Field({Static:false, Public:false}, "m_UserChangedLimit", $.Boolean);

    $.Field({Static:false, Public:false}, "m_UseNagleAlgorithm", $.Boolean);

    $.Field({Static:false, Public:false}, "m_HostLoopbackGuess", $asm12.TypeRef("System.Net.TriState"));

    $.Field({Static:false, Public:false}, "m_ReceiveBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_Expect100Continue", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Understands100Continue", $.Boolean);

    $.Field({Static:false, Public:false}, "m_HttpBehaviour", $asm12.TypeRef("System.Net.HttpBehaviour"));

    $.Field({Static:false, Public:false}, "m_LookupString", $.String);

    $.Field({Static:false, Public:false}, "m_ConnectionLimit", $.Int32);

    $.Field({Static:false, Public:false}, "m_ConnectionGroupList", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "m_Address", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_Host", $.String);

    $.Field({Static:false, Public:false}, "m_Port", $.Int32);

    $.Field({Static:false, Public:false}, "m_IdlingQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:false, Public:false}, "m_ExpiringTimer", $asm12.TypeRef("System.Net.TimerThread+Timer"));

    $.Field({Static:false, Public:false}, "m_IdleSince", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_ConnectionName", $.String);

    $.Field({Static:false, Public:false}, "m_CurrentConnections", $.Int32);

    $.Field({Static:false, Public:false}, "m_HostMode", $.Boolean);

    $.Field({Static:false, Public:false}, "m_BindIPEndPointDelegate", $asm12.TypeRef("System.Net.BindIPEndPoint"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_ConnectCallbackDelegate", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ConnectSocketCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_IdleConnectionGroupTimeoutDelegate", $asm12.TypeRef("System.Net.TimerThread+Callback"));

    $.Field({Static:false, Public:false}, "m_ServerCertificateOrBytes", $.Object);

    $.Field({Static:false, Public:false}, "m_ClientCertificateOrBytes", $.Object);

    $.Field({Static:false, Public:false}, "m_UseTcpKeepAlive", $.Boolean);

    $.Field({Static:false, Public:false}, "m_TcpKeepAliveTime", $.Int32);

    $.Field({Static:false, Public:false}, "m_TcpKeepAliveInterval", $.Int32);

    $.Field({Static:false, Public:false}, "m_HostName", $.String);

    $.Field({Static:false, Public:false}, "m_IsTrustedHost", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IPAddressInfoList", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]));

    $.Field({Static:false, Public:false}, "m_CurrentAddressInfoIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_ConnectedSinceDns", $.Boolean);

    $.Field({Static:false, Public:false}, "m_AddressListFailed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_LastDnsResolve", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_IPAddressesAreLoopback", $.Boolean);

    $.Property({Static:false, Public:false}, "LookupString", $.String);

    $.Property({Static:false, Public:false}, "Hostname", $.String);

    $.Property({Static:false, Public:false}, "IsTrustedHost", $.Boolean);

    $.Property({Static:false, Public:true }, "BindIPEndPointDelegate", $asm12.TypeRef("System.Net.BindIPEndPoint"));

    $.Property({Static:false, Public:false}, "CachedChannelBinding", $.Object);

    $.Property({Static:false, Public:true }, "ConnectionLeaseTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionLeaseTimerQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Property({Static:false, Public:false}, "InternalAddress", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "Host", $.String);

    $.Property({Static:false, Public:false}, "Port", $.Int32);

    $.Property({Static:false, Public:true }, "MaxIdleTime", $.Int32);

    $.Property({Static:false, Public:true }, "UseNagleAlgorithm", $.Boolean);

    $.Property({Static:false, Public:true }, "ReceiveBufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "Expect100Continue", $.Boolean);

    $.Property({Static:false, Public:false}, "HttpBehaviour", $asm12.TypeRef("System.Net.HttpBehaviour"));

    $.Property({Static:false, Public:true }, "ConnectionLimit", $.Int32);

    $.Property({Static:false, Public:true }, "SupportsPipelining", $.Boolean);

    $.Property({Static:false, Public:false}, "Understands100Continue", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalProxyServicePoint", $.Boolean);

    $.Property({Static:false, Public:false}, "HasTimedOut", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ServicePoint+HandshakeDoneProcedure */ 

(function HandshakeDoneProcedure$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ServicePoint+HandshakeDoneProcedure", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ServicePoint"), $asm12.TypeRef("System.Net.TlsStream"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CertValidationCallback", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAdapter", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Security.RemoteCertValidationCallback"), [
          $asm12.TypeRef("System.Net.ServicePoint"), $asm12.TypeRef("System.Net.TlsStream"), 
          $.Object
        ])
    );

    $.Field({Static:false, Public:false}, "m_SecureStream", $asm12.TypeRef("System.Net.TlsStream"));

    $.Field({Static:false, Public:false}, "m_Request", $.Object);

    $.Field({Static:false, Public:false}, "m_ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ServicePoint+ConnectSocketState */ 

(function ConnectSocketState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ServicePoint+ConnectSocketState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ServicePoint"), $asm12.TypeRef("System.Net.PooledStream"), 
          $.Object, $asm12.TypeRef("System.Net.Sockets.Socket"), 
          $asm12.TypeRef("System.Net.Sockets.Socket")
        ])
    );

    $.Field({Static:false, Public:false}, "servicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Field({Static:false, Public:false}, "s4", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Field({Static:false, Public:false}, "s6", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Field({Static:false, Public:false}, "owner", $.Object);

    $.Field({Static:false, Public:false}, "addresses", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]));

    $.Field({Static:false, Public:false}, "currentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "i", $.Int32);

    $.Field({Static:false, Public:false}, "unsuccessfulAttempts", $.Int32);

    $.Field({Static:false, Public:false}, "connectFailure", $.Boolean);

    $.Field({Static:false, Public:false}, "pooledStream", $asm12.TypeRef("System.Net.PooledStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ServicePointManager */ 

(function ServicePointManager$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ServicePointManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureConfigurationLoaded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FindServicePoint", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ServicePoint"), [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.IWebProxy")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindServicePoint", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ServicePoint"), [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.IWebProxy"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ProxyChain")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.HttpAbortDelegate")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindServicePoint", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ServicePoint"), [$asm12.TypeRef("System.Net.ProxyChain")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindServicePointHelper", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ServicePoint"), [$asm12.TypeRef("System.Uri"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllowDangerousUnicodeDecompositions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CertPolicyValidationCallback", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.CertPolicyValidationCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CheckCertificateName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CheckCertificateRevocationList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConfigTable", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DisableCertificateEKUs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DisableSendAuxRecord", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DisableStrongCrypto", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DisableSystemDefaultTlsVersions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DnsRefreshTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EnableDnsRoundRobin", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Expect100Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IdleServicePointTimeoutDelegate", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TimerThread+Callback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalConnectionLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PersistentConnectionLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ReusePort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReusePortSupported", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecurityProtocol", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SecurityProtocolType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ServerCertificateValidationCallback", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServerCertValidationCallback", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServerCertValidationCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UseHttpPipeliningAndBufferPooling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UseNagleAlgorithm", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UseSafeSynchronousClose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UseStrictRfcInterimResponseHandling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLegacyCertificatePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICertificatePolicy"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IdleServicePointTimeoutCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadAllowDangerousUnicodeDecompositionsConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadConfiguration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadDisableCertificateEKUsConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadDisableSendAuxRecordConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadDisableStrongCryptoConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadDisableSystemDefaultTlsVersionsConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadReusePortConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadSecureProtocolConfiguration", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.SslProtocols"), [$asm12.TypeRef("System.Security.Authentication.SslProtocols")])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadUseHttpPipeliningAndBufferPoolingConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadUseSafeSynchronousClose", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadUseStrictRfcInterimResponseHandlingConfiguration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeQueryString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeQueryString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Uri"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_ReusePortSupported", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSecurityProtocol", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.SecurityProtocolType"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SpecialConnectGroupName", $.String, "/.NET/NetClasses/HttpWebRequest/CONNECT__Group$$/");

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_IdleServicePointTimeoutDelegate", $asm12.TypeRef("System.Net.TimerThread+Callback"), function ($pi) {
        return $asm12.System.Net.TimerThread_Callback.New(null, null, new JSIL.MethodPointerInfo($thisType, "IdleServicePointTimeoutCallback", new JSIL.MethodSignature(null, [
                $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
                $.Object
              ]), true, false));
      });

    $.Field({Static:true , Public:false}, "s_ServicePointTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "s_ServicePointIdlingQueue", $asm12.TypeRef("System.Net.TimerThread+Queue"));

    $.Field({Static:true , Public:false}, "s_MaxServicePoints", $.Int32, 0);

    $.Field({Static:true , Public:false}, "s_CertPolicyValidationCallback", $asm12.TypeRef("System.Net.CertPolicyValidationCallback"));

    $.Field({Static:true , Public:false}, "s_ServerCertValidationCallback", $asm12.TypeRef("System.Net.ServerCertValidationCallback"), null);

    $.Field({Static:true , Public:false}, "s_SecurityProtocolType", $asm12.TypeRef("System.Net.SecurityProtocolType"));

    $.Field({Static:true , Public:false}, "s_reusePort", $.Boolean);

    $.Field({Static:true , Public:false}, "s_reusePortSupported", $asm0F.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:true , Public:false}, "s_disableStrongCrypto", $.Boolean);

    $.Field({Static:true , Public:false}, "s_disableSendAuxRecord", $.Boolean);

    $.Field({Static:true , Public:false}, "s_disableSystemDefaultTlsVersions", $.Boolean);

    $.Field({Static:true , Public:false}, "s_defaultSslProtocols", $asm12.TypeRef("System.Security.Authentication.SslProtocols"));

    $.Field({Static:true , Public:false}, "s_disableCertificateEKUs", $.Boolean);

    $.Field({Static:true , Public:false}, "s_useHttpPipeliningAndBufferPooling", $.Boolean);

    $.Field({Static:true , Public:false}, "s_useStrictRfcInterimResponseHandling", $.Boolean);

    $.Field({Static:true , Public:false}, "s_allowDangerousUnicodeDecompositions", $.Boolean);

    $.Field({Static:true , Public:false}, "s_useSafeSynchronousClose", $.Boolean);

    $.Field({Static:true , Public:false}, "s_ConfigTable", $asm0F.TypeRef("System.Collections.Hashtable"), null);

    $.Field({Static:true , Public:false}, "s_ConnectionLimit", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:true , Public:false}, "s_UseTcpKeepAlive", $asm0F.TypeRef("System.Boolean"), false);

    $.Field({Static:true , Public:false}, "s_TcpKeepAliveTime", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:true , Public:false}, "s_TcpKeepAliveInterval", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:true , Public:false}, "s_UserChangedLimit", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_configurationLoadedLock", $.Object);

    $.Field({Static:true , Public:false}, "s_configurationLoaded", $asm0F.TypeRef("System.Boolean"), false);


    function ServicePointManager__cctor () {
      $thisType.s_reusePortSupported = null;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ServicePointManager__cctor
    );

    $.Property({Static:true , Public:false}, "InternalConnectionLimit", $.Int32);

    $.Property({Static:true , Public:false}, "PersistentConnectionLimit", $.Int32);

    $.Property({Static:true , Public:false}, "ConfigTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:true , Public:false}, "IdleServicePointTimeoutDelegate", $asm12.TypeRef("System.Net.TimerThread+Callback"));

    $.Property({Static:true , Public:true }, "SecurityProtocol", $asm12.TypeRef("System.Net.SecurityProtocolType"));

    $.Property({Static:true , Public:false}, "DisableStrongCrypto", $.Boolean);

    $.Property({Static:true , Public:false}, "DisableSystemDefaultTlsVersions", $.Boolean);

    $.Property({Static:true , Public:false}, "DisableSendAuxRecord", $.Boolean);

    $.Property({Static:true , Public:false}, "DisableCertificateEKUs", $.Boolean);

    $.Property({Static:true , Public:false}, "UseHttpPipeliningAndBufferPooling", $.Boolean);

    $.Property({Static:true , Public:false}, "UseStrictRfcInterimResponseHandling", $.Boolean);

    $.Property({Static:true , Public:false}, "AllowDangerousUnicodeDecompositions", $.Boolean);

    $.Property({Static:true , Public:false}, "UseSafeSynchronousClose", $.Boolean);

    $.Property({Static:true , Public:true }, "UseNagleAlgorithm", $.Boolean);

    $.Property({Static:true , Public:true }, "Expect100Continue", $.Boolean);

    $.Property({Static:true , Public:true }, "EnableDnsRoundRobin", $.Boolean);

    $.Property({Static:true , Public:true }, "DnsRefreshTimeout", $.Int32);

    $.Property({Static:true , Public:false}, "CertPolicyValidationCallback", $asm12.TypeRef("System.Net.CertPolicyValidationCallback"));

    $.Property({Static:true , Public:true }, "ServerCertificateValidationCallback", $asm12.TypeRef("System.Net.Security.RemoteCertificateValidationCallback"));

    $.Property({Static:true , Public:false}, "ServerCertValidationCallback", $asm12.TypeRef("System.Net.ServerCertValidationCallback"));

    $.Property({Static:true , Public:true }, "ReusePort", $.Boolean);

    $.Property({Static:true , Public:false}, "ReusePortSupported", $asm0F.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:true , Public:true }, "CheckCertificateRevocationList", $.Boolean);

    $.Property({Static:true , Public:false}, "CheckCertificateName", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SocketAddress */ 

(function SocketAddress$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SocketAddress", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Sockets.AddressFamily"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.IPAddress"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyAddressSizeIntoBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Family", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.AddressFamily"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIPAddress", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIPEndPoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPEndPoint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_Size", $.Int32);

    $.Field({Static:false, Public:false}, "m_Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_changed", $.Boolean);

    $.Property({Static:false, Public:true }, "Family", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Property({Static:false, Public:true }, "Size", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SocketPermission */ 

(function SocketPermission$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Net.SocketPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.NetworkAccess"), $asm12.TypeRef("System.Net.TransportType"), 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPermission", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.NetworkAccess"), $asm12.TypeRef("System.Net.TransportType"), 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermission", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NetworkAccess"), $asm12.TypeRef("System.Net.EndpointPermission")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupDNS", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSubset", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.ArrayList"), $asm0F.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:true , Public:false}, "intersectLists", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.ArrayList"), $asm0F.TypeRef("System.Collections.ArrayList"), 
          $asm0F.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseAddXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Security.SecurityElement"), $asm0F.TypeRef("System.Collections.ArrayList"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:false, Public:false}, "m_connectList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_acceptList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_noRestriction", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm0F.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.EndpointPermission */ 

(function EndpointPermission$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.EndpointPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm12.TypeRef("System.Net.TransportType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckEndPointName", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.EndpointPermission+EndPointType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hostname", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDns", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidWildcard", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Port", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transport", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TransportType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Intersect", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchAddress", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchWildcard", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resolve", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SubsetMatch", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "hostname", $.String);

    $.Field({Static:false, Public:false}, "port", $.Int32);

    $.Field({Static:false, Public:false}, "transport", $asm12.TypeRef("System.Net.TransportType"));

    $.Field({Static:false, Public:false}, "wildcard", $.Boolean);

    $.Field({Static:true , Public:false}, "DotSeparator", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:true }, "Hostname", $.String);

    $.Property({Static:false, Public:true }, "Transport", $asm12.TypeRef("System.Net.TransportType"));

    $.Property({Static:false, Public:true }, "Port", $.Int32);

    $.Property({Static:false, Public:false}, "IsDns", $.Boolean);

    $.Property({Static:false, Public:false}, "IsValidWildcard", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.EndpointPermission+EndPointType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.EndpointPermission+EndPointType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Invalid: 0, 
    IPv6: 1, 
    DnsOrWildcard: 2, 
    IPv4: 3, 
  }
);

/* enum System.Net.TransportType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.TransportType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Connectionless: 1, 
    Udp: 1, 
    ConnectionOriented: 2, 
    Tcp: 2, 
    All: 3, 
  }
);

/* class System.Net.UnsafeNclNativeMethods */ 

(function UnsafeNclNativeMethods$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CancelIoEx", 
      new JSIL.MethodSignature($.UInt32, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CoCreateInstance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")]), $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      {
        Module: "ole32.dll", 
        Parameters: [
          {
            NativeType: "IUnknown", 
            Out: true
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateSemaphore", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.Int32, 
          $.Int32, $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentThreadId", 
      JSIL.MethodSignature.Return($.UInt32), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.String]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "ReleaseSemaphore", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+RegistryHelper */ 

(function RegistryHelper$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+RegistryHelper", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "RegNotifyChangeKeyValue", 
      new JSIL.MethodSignature($.UInt32, [
          $asm12.TypeRef("System.Net.SafeRegistryHandle"), $.Boolean, 
          $.UInt32, $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.Boolean
        ]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RegOpenCurrentUser", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeRegistryHandle")])]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RegOpenKeyEx", 
      new JSIL.MethodSignature($.UInt32, [
          $.IntPtr, $.String, 
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeRegistryHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RegOpenKeyEx", 
      new JSIL.MethodSignature($.UInt32, [
          $asm12.TypeRef("System.Net.SafeRegistryHandle"), $.String, 
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeRegistryHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RegQueryValueEx", 
      new JSIL.MethodSignature($.UInt32, [
          $asm12.TypeRef("System.Net.SafeRegistryHandle"), $.String, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "HKEY_CURRENT_USER", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "HKEY_LOCAL_MACHINE", $.IntPtr);


    function RegistryHelper__cctor () {
      $thisType.HKEY_CURRENT_USER = new $asm0F.System.IntPtr();
      $thisType.HKEY_LOCAL_MACHINE = new $asm0F.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RegistryHelper__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+RasHelper */ 

(function RasHelper$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.UnsafeNclNativeMethods+RasHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RasSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentConnectoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.PInvokeMethod({Static:true , Public:false}, "RasConnectionNotification", 
      new JSIL.MethodSignature($.UInt32, [
          $.IntPtr, $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.UInt32
        ]), 
      {
        Module: "rasapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RasEnumConnections", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+RasHelper+RASCONN")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "rasapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RasGetConnectStatus", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+RasHelper+RASCONNSTATUS")])]), 
      {
        Module: "rasapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_RasSupported", $.Boolean, true);

    $.Field({Static:false, Public:false}, "m_RasEvent", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "m_Suppressed", $.Boolean);

    $.Property({Static:true , Public:false}, "RasSupported", $.Boolean);

    $.Property({Static:false, Public:false}, "HasChanged", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+RasHelper+RASCONN */ 

(function RASCONN$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+RasHelper+RASCONN", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwSize", $.UInt32);

    $.Field({Static:false, Public:false}, "hrasconn", $.IntPtr);

    $.Field({Static:false, Public:false}, "szEntryName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+RasHelper+RASCONNSTATUS */ 

(function RASCONNSTATUS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+RasHelper+RASCONNSTATUS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwSize", $.UInt32);

    $.Field({Static:false, Public:false}, "rasconnstate", $asm12.TypeRef("System.Net.UnsafeNclNativeMethods+RasHelper+RASCONNSTATE"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.UnsafeNclNativeMethods+RasHelper+RASCONNSTATE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.UnsafeNclNativeMethods+RasHelper+RASCONNSTATE", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    RASCS_OpenPort: 0, 
    RASCS_PortOpened: 1, 
    RASCS_ConnectDevice: 2, 
    RASCS_DeviceConnected: 3, 
    RASCS_AllDevicesConnected: 4, 
    RASCS_Authenticate: 5, 
    RASCS_AuthNotify: 6, 
    RASCS_AuthRetry: 7, 
    RASCS_AuthCallback: 8, 
    RASCS_AuthChangePassword: 9, 
    RASCS_AuthProject: 10, 
    RASCS_AuthLinkSpeed: 11, 
    RASCS_AuthAck: 12, 
    RASCS_ReAuthenticate: 13, 
    RASCS_Authenticated: 14, 
    RASCS_PrepareForCallback: 15, 
    RASCS_WaitForModemReset: 16, 
    RASCS_WaitForCallback: 17, 
    RASCS_Projected: 18, 
    RASCS_StartAuthentication: 19, 
    RASCS_CallbackComplete: 20, 
    RASCS_LogonNetwork: 21, 
    RASCS_SubEntryConnected: 22, 
    RASCS_SubEntryDisconnected: 23, 
    RASCS_Interactive: 4096, 
    RASCS_RetryAuthentication: 4097, 
    RASCS_CallbackSetByCaller: 4098, 
    RASCS_PasswordExpired: 4099, 
    RASCS_InvokeEapUI: 4100, 
    RASCS_Connected: 8192, 
    RASCS_Disconnected: 8193, 
  }
);

/* class System.Net.UnsafeNclNativeMethods+SafeNetHandles_SECURITY */ 

(function SafeNetHandles_SECURITY$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+SafeNetHandles_SECURITY", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), 
          $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcquireCredentialsHandleW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AuthIdentity")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcquireCredentialsHandleW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcquireCredentialsHandleW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $asm12.TypeRef("System.Net.SafeSspiAuthDataHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcquireCredentialsHandleW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecureCredential")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ApplyControlToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), $asm12.TypeRef("System.Net.SecurityBufferDescriptor")]), 
      {
        Module: "secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CompleteAuthToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), $asm12.TypeRef("System.Net.SecurityBufferDescriptor")]), 
      {
        Module: "secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EnumerateSecurityPackagesW", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeContextBuffer_SECURITY")])]), 
      {
        Module: "secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "InitializeSecurityContextW", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $.Int32, $asm12.TypeRef("System.Net.Endianness"), 
          $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "QueryContextAttributesW", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")])
        ]), 
      {
        Module: "secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetContextAttributesW", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ]), 
      {
        Module: "secur32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+SafeNetHandlesSafeOverlappedFree */ 

(function SafeNetHandlesSafeOverlappedFree$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+SafeNetHandlesSafeOverlappedFree", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeOverlappedFree"), [$.Int32, $.UIntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+SafeNetHandlesXPOrLater */ 

(function SafeNetHandlesXPOrLater$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+SafeNetHandlesXPOrLater", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetAddrInfoW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AddressInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeAddrInfo")])
        ]), 
      {
        Module: "ws2_32.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+SafeNetHandles */ 

(function SafeNetHandles$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+SafeNetHandles", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "accept", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeCloseSocket+InnerSafeCloseSocket"), [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetModuleHandleW", 
      new JSIL.MethodSignature($.IntPtr, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibraryExW", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeLoadLibrary"), [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $.UInt32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeLocalFree"), [$.Int32, $.UIntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RetrieveUrlCacheEntryFileW", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "wininet.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+OSSOCK */ 

(function OSSOCK$Members () {
  var $, $thisType;



































  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+OSSOCK", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "$bind", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "gethostbyaddr", 
      new JSIL.MethodSignature($.IntPtr, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $asm12.TypeRef("System.Net.Sockets.ProtocolFamily")
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "gethostbyname", 
      new JSIL.MethodSignature($.IntPtr, [$.String]), 
      {
        Module: "ws2_32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNameInfoW", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "ws2_32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "getpeername", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "getsockname", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "getsockopt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), 
          $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "getsockopt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), 
          $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Linger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "getsockopt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), 
          $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPMulticastRequest")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "getsockopt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), 
          $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.IPv6MulticastRequest")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ioctlsocket", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "listen", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [$asm12.TypeRef("System.Net.SafeCloseSocket"), $.Int32]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "recv", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags")
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "select", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.TimeValue")])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "select", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $.IntPtr
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "send", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags")
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "setsockopt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), 
          $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "setsockopt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), 
          $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "setsockopt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), 
          $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.Int32
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "shutdown", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [$asm12.TypeRef("System.Net.SafeCloseSocket"), $.Int32]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAAddressToString", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.IntPtr, $asm0F.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAConnect", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAEnumNetworkEvents", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.NetworkEvents")])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAEventSelect", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $asm12.TypeRef("System.Net.Sockets.AsyncEventBits")
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAEventSelect", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $.IntPtr, 
          $asm12.TypeRef("System.Net.Sockets.AsyncEventBits")
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAGetOverlappedResult", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketFlags")])
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAIoctl_Blocking", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "ws2_32.dll", 
        EntryPoint: "WSAIoctl", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSARecv", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WSABuffer")]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketFlags")]), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSASend", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WSABuffer")]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm12.TypeRef("System.Net.Sockets.SocketFlags"), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSASend", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WSABuffer")]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm12.TypeRef("System.Net.Sockets.SocketFlags"), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "ws2_32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSASend_Blocking", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WSABuffer")]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm12.TypeRef("System.Net.Sockets.SocketFlags"), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "ws2_32.dll", 
        EntryPoint: "WSASend", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSASocket", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeCloseSocket+InnerSafeCloseSocket"), [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $asm12.TypeRef("System.Net.Sockets.SocketType"), 
          $asm12.TypeRef("System.Net.Sockets.ProtocolType"), $.IntPtr, 
          $.UInt32, $asm12.TypeRef("System.Net.SocketConstructorFlags")
        ]), 
      {
        Module: "ws2_32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAStartup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [$.Int16, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WSAData")])]), 
      {
        Module: "ws2_32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WSAStringToAddress", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $.String, $asm12.TypeRef("System.Net.Sockets.AddressFamily"), 
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ws2_32.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+OSSOCK+WSAPROTOCOL_INFO */ 

(function WSAPROTOCOL_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+OSSOCK+WSAPROTOCOL_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+OSSOCK+ControlData */ 

(function ControlData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+OSSOCK+ControlData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+OSSOCK+ControlDataIPv6 */ 

(function ControlDataIPv6$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+OSSOCK+ControlDataIPv6", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+OSSOCK+WSAMsg */ 

(function WSAMsg$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+OSSOCK+WSAMsg", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+NativePKI */ 

(function NativePKI$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+NativePKI", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CertVerifyCertificateChainPolicy", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $asm12.TypeRef("System.Net.SafeFreeCertChain"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ChainPolicyParameter")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ChainPolicyStatus")])
        ]), 
      {
        Module: "crypt32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+NativeNTSSPI */ 

(function NativeNTSSPI$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+NativeNTSSPI", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "DecryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.UInt32])
        ]), 
      {
        Module: "secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EncryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SSPIHandle")]), $.UInt32, 
          $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), $.UInt32
        ]), 
      {
        Module: "secur32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+WinHttp */ 

(function WinHttp$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+WinHttp", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "WinHttpDetectAutoProxyConfigUrl", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+WinHttp+AutoDetectType"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeGlobalFree")])]), 
      {
        Module: "winhttp.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WinHttpGetIEProxyConfigForCurrentUser", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_CURRENT_USER_IE_PROXY_CONFIG")])]), 
      {
        Module: "winhttp.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WinHttpGetProxyForUrl", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.SafeInternetHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_AUTOPROXY_OPTIONS")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_PROXY_INFO")])
        ]), 
      {
        Module: "winhttp.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WinHttpOpen", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeInternetHandle"), [
          $.String, $asm12.TypeRef("System.Net.UnsafeNclNativeMethods+WinHttp+AccessType"), 
          $.String, $.String, 
          $.Int32
        ]), 
      {
        Module: "winhttp.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WinHttpSetTimeouts", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.SafeInternetHandle"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "winhttp.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_CURRENT_USER_IE_PROXY_CONFIG */ 

(function WINHTTP_CURRENT_USER_IE_PROXY_CONFIG$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_CURRENT_USER_IE_PROXY_CONFIG", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.UnsafeNclNativeMethods+WinHttp+AutoProxyFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.UnsafeNclNativeMethods+WinHttp+AutoProxyFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    AutoDetect: 1, 
    AutoProxyConfigUrl: 2, 
    RunInProcess: 65536, 
    RunOutProcessOnly: 131072, 
  }
);

/* enum System.Net.UnsafeNclNativeMethods+WinHttp+AccessType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.UnsafeNclNativeMethods+WinHttp+AccessType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DefaultProxy: 0, 
    NoProxy: 1, 
    NamedProxy: 3, 
  }
);

/* enum System.Net.UnsafeNclNativeMethods+WinHttp+AutoDetectType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.UnsafeNclNativeMethods+WinHttp+AutoDetectType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Dhcp: 1, 
    DnsA: 2, 
  }
);

/* struct System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_AUTOPROXY_OPTIONS */ 

(function WINHTTP_AUTOPROXY_OPTIONS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_AUTOPROXY_OPTIONS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_PROXY_INFO */ 

(function WINHTTP_PROXY_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_PROXY_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+UnsafeWinInetCache */ 

(function UnsafeWinInetCache$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+UnsafeWinInetCache", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CommitUrlCacheEntryW", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm12.TypeRef("System.Net.Cache._WinInetCache+FILETIME"), $asm12.TypeRef("System.Net.Cache._WinInetCache+FILETIME"), 
          $asm12.TypeRef("System.Net.Cache._WinInetCache+EntryType"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $.String, 
          $.String
        ]), 
      {
        Module: "wininet.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateUrlCacheEntryW", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $.String, $asm0F.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "wininet.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DeleteUrlCacheEntryW", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      {
        Module: "wininet.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetUrlCacheEntryInfoW", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wininet.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetUrlCacheEntryInfoW", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $asm12.TypeRef("System.Net.Cache._WinInetCache+Entry_FC")
        ]), 
      {
        Module: "wininet.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "UnlockUrlCacheEntryFileW", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32]), 
      {
        Module: "wininet.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+SspiHelper */ 

(function SspiHelper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+SspiHelper", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "SspiEncodeStringsAsAuthIdentity", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityStatus"), [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeSspiAuthDataHandle")])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+HttpApi+HTTP_RESPONSE_HEADER_ID */ 

(function HTTP_RESPONSE_HEADER_ID$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+HttpApi+HTTP_RESPONSE_HEADER_ID", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "m_Hashtable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "m_Strings", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+SecureStringHelper */ 

(function SecureStringHelper$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods+SecureStringHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateSecureString", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.SecureString"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateString", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Security.SecureString")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+AppXHelper */ 

(function AppXHelper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.UnsafeNclNativeMethods+AppXHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetGUIThreadInfo", 
      new JSIL.MethodSignature($.UInt32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+AppXHelper+GuiThreadInfo")])]), 
      {
        Module: "user32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrimaryWindowHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetWindowThreadProcessId", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "user32.dll", 
      }
    );

    $.Field({Static:true , Public:false}, "PrimaryWindowHandle", $asm0F.TypeRef("System.Lazy`1", [$.IntPtr]))
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.UnsafeNclNativeMethods+AppXHelper+GuiThreadInfo */ 

(function GuiThreadInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.UnsafeNclNativeMethods+AppXHelper+GuiThreadInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbSize", $.Int32);

    $.Field({Static:false, Public:true }, "hwndActive", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.UnsafeNclNativeMethods+AppXHelper+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.UnsafeNclNativeMethods+AppXHelper+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__6_0", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.WebException */ 

(function WebException$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.InvalidOperationException"), 
      Name: "System.Net.WebException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.WebExceptionStatus")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.WebExceptionStatus"), 
          $asm12.TypeRef("System.Net.WebExceptionInternalStatus"), $asm0F.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.Exception"), 
          $asm12.TypeRef("System.Net.WebExceptionStatus"), $asm12.TypeRef("System.Net.WebResponse")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0F.TypeRef("System.Exception"), $asm12.TypeRef("System.Net.WebExceptionStatus"), 
          $asm12.TypeRef("System.Net.WebResponse")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.Exception"), 
          $asm12.TypeRef("System.Net.WebExceptionStatus"), $asm12.TypeRef("System.Net.WebResponse"), 
          $asm12.TypeRef("System.Net.WebExceptionInternalStatus")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0F.TypeRef("System.Exception"), $asm12.TypeRef("System.Net.WebExceptionStatus"), 
          $asm12.TypeRef("System.Net.WebResponse"), $asm12.TypeRef("System.Net.WebExceptionInternalStatus")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalStatus", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebExceptionInternalStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Response", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebResponse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebExceptionStatus"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "m_Status", $asm12.TypeRef("System.Net.WebExceptionStatus"));

    $.Field({Static:false, Public:false}, "m_Response", $asm12.TypeRef("System.Net.WebResponse"));

    $.Field({Static:false, Public:false}, "m_InternalStatus", $asm12.TypeRef("System.Net.WebExceptionInternalStatus"));

    $.Property({Static:false, Public:true }, "Status", $asm12.TypeRef("System.Net.WebExceptionStatus"));

    $.Property({Static:false, Public:true }, "Response", $asm12.TypeRef("System.Net.WebResponse"));

    $.Property({Static:false, Public:false}, "InternalStatus", $asm12.TypeRef("System.Net.WebExceptionInternalStatus"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.WebExceptionInternalStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebExceptionInternalStatus", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    RequestFatal: 0, 
    ServicePointFatal: 1, 
    Recoverable: 2, 
    Isolated: 3, 
  }
);

/* enum System.Net.WebExceptionStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebExceptionStatus", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    NameResolutionFailure: 1, 
    ConnectFailure: 2, 
    ReceiveFailure: 3, 
    SendFailure: 4, 
    PipelineFailure: 5, 
    RequestCanceled: 6, 
    ProtocolError: 7, 
    ConnectionClosed: 8, 
    TrustFailure: 9, 
    SecureChannelFailure: 10, 
    ServerProtocolViolation: 11, 
    KeepAliveFailure: 12, 
    Pending: 13, 
    Timeout: 14, 
    ProxyNameResolutionFailure: 15, 
    UnknownError: 16, 
    MessageLengthLimitExceeded: 17, 
    CacheEntryNotFound: 18, 
    RequestProhibitedByCachePolicy: 19, 
    RequestProhibitedByProxy: 20, 
  }
);

/* class System.Net.WebExceptionMapping */ 

(function WebExceptionMapping$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.WebExceptionMapping", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetWebStatusString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.WebExceptionStatus")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_Mapping", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm0F.System.String, 21);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.WebHeaderCollectionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebHeaderCollectionType", 
    BaseType: $asm0F.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    WebRequest: 1, 
    WebResponse: 2, 
    HttpWebRequest: 3, 
    HttpWebResponse: 4, 
    HttpListenerRequest: 5, 
    HttpListenerResponse: 6, 
    FtpWebRequest: 7, 
    FtpWebResponse: 8, 
    FileWebRequest: 9, 
    FileWebResponse: 10, 
  }
);

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Specialized");
/* class System.Collections.Specialized.NameObjectCollectionBase */ 

(function NameObjectCollectionBase$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.NameObjectCollectionBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.IEqualityComparer"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0F.TypeRef("System.Collections.IEqualityComparer")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DBNull"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGet", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGet", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGetKey", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseSet", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindEntry", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false}, "_readOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "_entriesArray", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_keyComparer", $asm0F.TypeRef("System.Collections.IEqualityComparer"));

    $.Field({Static:false, Public:false}, "_entriesTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_nullKeyEntry", $asm12.TypeRef("System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry"));

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:true , Public:false}, "defaultComparer", $asm0F.TypeRef("System.StringComparer"));

    $.Property({Static:false, Public:false}, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 3 */ $asm0F.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry */ 

(function NameObjectEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "Key", $.String);

    $.Field({Static:false, Public:false}, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.NameObjectCollectionBase+NameObjectKeysEnumerator */ 

(function NameObjectKeysEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.NameObjectCollectionBase+NameObjectKeysEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_pos", $.Int32);

    $.Field({Static:false, Public:false}, "_coll", $asm12.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"));

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.NameValueCollection */ 

(function NameValueCollection$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"), 
      Name: "System.Collections.Specialized.NameValueCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0F.TypeRef("System.Collections.IEqualityComparer")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DBNull"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAsOneString", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAsStringArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm0F.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidateCachedArrays", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "_all", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_allKeys", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebHeaderCollection */ 

(function WebHeaderCollection$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Collections.Specialized.NameValueCollection"), 
      Name: "System.Net.WebHeaderCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebHeaderCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInternal", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInternalNotCommon", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeInternal", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckBadChars", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsNonAsciiChars", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowHttpResponseHeader", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheControl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContentLength", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Date", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ETag", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Expires", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerCollection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.HttpResponseHeader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastModified", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProxyAuthenticate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Server", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SetCookie", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SetCookie2", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Via", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAsString", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Collections.Specialized.NameValueCollection"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidToken", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizeCommonHeaders", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseHeaders", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WebParseError")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseHeadersStrict", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WebParseError")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveInternal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAddVerified", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnRestrictedHeader", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "HInfo", $asm12.TypeRef("System.Net.HeaderInfoTable"));

    $.Field({Static:false, Public:false}, "m_CommonHeaders", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "m_NumCommonHeaders", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_CommonHeaderNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_CommonHeaderHints", $jsilcore.TypeRef("System.Array", [$.SByte]));

    $.Field({Static:false, Public:false}, "m_InnerCollection", $asm12.TypeRef("System.Collections.Specialized.NameValueCollection"));

    $.Field({Static:false, Public:false}, "m_Type", $asm12.TypeRef("System.Net.WebHeaderCollectionType"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "HttpTrimCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "RfcCharMap", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WebHeaderCollection+RfcChar")]));

    $.Property({Static:false, Public:false}, "ContentLength", $.String);

    $.Property({Static:false, Public:false}, "CacheControl", $.String);

    $.Property({Static:false, Public:false}, "Date", $.String);

    $.Property({Static:false, Public:false}, "Expires", $.String);

    $.Property({Static:false, Public:false}, "ETag", $.String);

    $.Property({Static:false, Public:false}, "LastModified", $.String);

    $.Property({Static:false, Public:false}, "Location", $.String);

    $.Property({Static:false, Public:false}, "ProxyAuthenticate", $.String);

    $.Property({Static:false, Public:false}, "SetCookie2", $.String);

    $.Property({Static:false, Public:false}, "SetCookie", $.String);

    $.Property({Static:false, Public:false}, "Server", $.String);

    $.Property({Static:false, Public:false}, "Via", $.String);

    $.Property({Static:false, Public:false}, "InnerCollection", $asm12.TypeRef("System.Collections.Specialized.NameValueCollection"));

    $.Property({Static:false, Public:false}, "AllowHttpResponseHeader", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Net.WebHeaderCollection+HeaderEncoding */ 

(function HeaderEncoding$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Net.WebHeaderCollection+HeaderEncoding", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DecodeUtf8FromString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytes", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.WebHeaderCollection+RfcChar */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebHeaderCollection+RfcChar", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    High: 0, 
    Reg: 1, 
    Ctl: 2, 
    CR: 3, 
    LF: 4, 
    WS: 5, 
    Colon: 6, 
    Delim: 7, 
  }
);

/* class System.Net.CaseInsensitiveAscii */ 

(function CaseInsensitiveAscii$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CaseInsensitiveAscii", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FastGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "StaticInstance", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "AsciiToLower", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEqualityComparer"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HostHeaderString */ 

(function HostHeaderString$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HostHeaderString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Convert", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ByteCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Bytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_Converted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_String", $.String);

    $.Field({Static:false, Public:false}, "m_Bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "ByteCount", $.Int32);

    $.Property({Static:false, Public:false}, "Bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.DelayedRegex */ 

(function DelayedRegex$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.DelayedRegex", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsRegex", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false}, "AsRegex", $asm12.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebPermission */ 

(function WebPermission$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Net.WebPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkAccess"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NetworkAccess"), $asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAsPattern", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NetworkAccess"), $asm12.TypeRef("System.Net.DelayedRegex")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPermission", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NetworkAccess"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermission", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NetworkAccess"), $asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:true , Public:false}, "intersectList", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.ArrayList"), $asm0F.TypeRef("System.Collections.ArrayList"), 
          $asm0F.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "intersectPair", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "isMatchedURI", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm0F.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:true , Public:false}, "isSpecialSubsetCase", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm0F.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:false, Public:false}, "m_noRestriction", $.Boolean);

    $.Field({Static:false, Public:false}, "m_UnrestrictedConnect", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "m_UnrestrictedAccept", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "m_connectList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_acceptList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
      /* 3 */ $asm0F.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebProxyData */ 

(function WebProxyData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebProxyData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "bypassOnLocal", $.Boolean);

    $.Field({Static:false, Public:false}, "automaticallyDetectSettings", $.Boolean);

    $.Field({Static:false, Public:false}, "proxyAddress", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "proxyHostAddresses", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "scriptLocation", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "bypassList", $asm0F.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebProxy */ 

(function WebProxy$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebProxy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Uri"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AbortGetProxiesAuto", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:true , Public:false}, "AreAllBypassed", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteScriptEngine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScriptEngine", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseDefaultCredentials", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProxiesAuto", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Uri")]), [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxy", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProxyAuto", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProxyAutoFailover", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsBypassed", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBypassedAuto", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBypassedManual", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalInProxyHash", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatchInBypassList", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProxyUri", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Address", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AutoDetect", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BypassList", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BypassProxyOnLocal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ScriptEngine", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ScriptLocation", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.IAutoWebProxy.GetProxies", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ProxyChain"), [$asm12.TypeRef("System.Uri")])
    )
      .Overrides($asm12.TypeRef("System.Net.IAutoWebProxy"), "GetProxies");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:false}, "UnsafeUpdateFromRegistry", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Update", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebProxyData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateRegExList", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_UseRegistry", $.Boolean);

    $.Field({Static:false, Public:false}, "_BypassOnLocal", $.Boolean);

    $.Field({Static:false, Public:false}, "m_EnableAutoproxy", $.Boolean);

    $.Field({Static:false, Public:false}, "_ProxyAddress", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_BypassList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.Field({Static:false, Public:false}, "_RegExBypassList", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Text.RegularExpressions.Regex")]));

    $.Field({Static:false, Public:false}, "_ProxyHostAddresses", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "m_ScriptEngine", $asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"));

    $.Property({Static:false, Public:true }, "Address", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "AutoDetect", $.Boolean);

    $.Property({Static:false, Public:false}, "ScriptLocation", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "BypassProxyOnLocal", $.Boolean);

    $.Property({Static:false, Public:true }, "BypassList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.Property({Static:false, Public:true }, "UseDefaultCredentials", $.Boolean);

    $.Property({Static:false, Public:false}, "ScriptEngine", $asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IAutoWebProxy"), 
      /* 1 */ $asm12.TypeRef("System.Net.IWebProxy"), 
      /* 2 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WinHttpWebProxyFinder */ 

(function WinHttpWebProxyFinder$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.BaseWebProxyFinder"), 
      Name: "System.Net.WinHttpWebProxyFinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AutoWebProxyScriptEngine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLastWin32Error", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxies", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProxies", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Uri"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStateFromErrorCode", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.BaseWebProxyFinder+AutoWebProxyState"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsErrorFatalForAutoDetect", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRecoverableAutoProxyError", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveWhitespaces", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WinHttpGetProxyForUrl", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.UnsafeNclNativeMethods+WinHttp+WINHTTP_AUTOPROXY_OPTIONS")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.Field({Static:false, Public:false}, "session", $asm12.TypeRef("System.Net.SafeInternetHandle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.AuthenticationState */ 

(function AuthenticationState$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AuthenticationState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AttemptAuthenticate", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAuthReq", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearSession", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearSession", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticateHeader", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpResponseHeader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthorizationHeader", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StatusCodeMatch", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpStatusCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransportContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TransportContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComputeSpn", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SpnToken"), [$asm12.TypeRef("System.Net.HttpWebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSecurityContext", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.NTAuthentication"), [$asm12.TypeRef("System.Net.IAuthenticationModule")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreAuthIfNeeded", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TransportContext", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.TransportContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSecurityContext", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NTAuthentication"), $asm12.TypeRef("System.Net.IAuthenticationModule")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Update", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.Field({Static:false, Public:false}, "TriedPreAuth", $.Boolean);

    $.Field({Static:false, Public:false}, "Authorization", $asm12.TypeRef("System.Net.Authorization"));

    $.Field({Static:false, Public:false}, "Module", $asm12.TypeRef("System.Net.IAuthenticationModule"));

    $.Field({Static:false, Public:false}, "UniqueGroupId", $.String);

    $.Field({Static:false, Public:false}, "IsProxyAuth", $.Boolean);

    $.Field({Static:false, Public:false}, "ChallengedUri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "ChallengedSpn", $asm12.TypeRef("System.Net.SpnToken"));

    $.Field({Static:false, Public:false}, "_TransportContext", $asm12.TypeRef("System.Net.TransportContext"));

    $.Property({Static:false, Public:false}, "TransportContext", $asm12.TypeRef("System.Net.TransportContext"));

    $.Property({Static:false, Public:false}, "AuthenticateHeader", $asm12.TypeRef("System.Net.HttpResponseHeader"));

    $.Property({Static:false, Public:false}, "AuthorizationHeader", $.String);

    $.Property({Static:false, Public:false}, "StatusCodeMatch", $asm12.TypeRef("System.Net.HttpStatusCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.AutoWebProxyScriptEngine */ 

(function AutoWebProxyScriptEngine$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AutoWebProxyScriptEngine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.WebProxy"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForChanges", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectoidChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterLock", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitLock", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AutomaticallyDetectSettings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AutomaticConfigurationScript", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProxies", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProxies", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$.String])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWebProxyData", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebProxyData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ListenForRegistry", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ListenForRegistryHelper", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeRegistryHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.AutoResetEvent")]), 
          $.IntPtr, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegistryChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AutomaticallyDetectSettings", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AutomaticConfigurationScript", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "automaticallyDetectSettings", $.Boolean);

    $.Field({Static:false, Public:false}, "automaticConfigurationScript", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "webProxy", $asm12.TypeRef("System.Net.WebProxy"));

    $.Field({Static:false, Public:false}, "webProxyFinder", $asm12.TypeRef("System.Net.IWebProxyFinder"));

    $.Field({Static:false, Public:false}, "m_LockHeld", $.Boolean);

    $.Field({Static:false, Public:false}, "m_UseRegistry", $.Boolean);

    $.Field({Static:false, Public:false}, "m_NetworkChangeStatus", $.Int32);

    $.Field({Static:false, Public:false}, "m_AutoDetector", $asm12.TypeRef("System.Net.AutoWebProxyScriptEngine+AutoDetector"));

    $.Field({Static:false, Public:false}, "hkcu", $asm12.TypeRef("System.Net.SafeRegistryHandle"));

    $.Field({Static:false, Public:false}, "m_Identity", $asm0F.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "regKey", $asm12.TypeRef("System.Net.SafeRegistryHandle"));

    $.Field({Static:false, Public:false}, "regKeyLM", $asm12.TypeRef("System.Net.SafeRegistryHandle"));

    $.Field({Static:false, Public:false}, "regKeyPolicy", $asm12.TypeRef("System.Net.SafeRegistryHandle"));

    $.Field({Static:false, Public:false}, "registryChangeEvent", $asm0F.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "registryChangeEventLM", $asm0F.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "registryChangeEventPolicy", $asm0F.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "registrySuppress", $.Boolean);

    $.Property({Static:false, Public:false}, "AutomaticallyDetectSettings", $.Boolean);

    $.Property({Static:false, Public:false}, "AutomaticConfigurationScript", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.AutoWebProxyScriptEngine+AutoDetector */ 

(function AutoDetector$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AutoWebProxyScriptEngine+AutoDetector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForNetworkChanges", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connectoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentAutoDetector", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NetworkChangeStatus", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_AddressChange", $asm12.TypeRef("System.Net.NetworkAddressChangePolled"));

    $.Field({Static:true , Public:false}, "s_RasHelper", $asm12.TypeRef("System.Net.UnsafeNclNativeMethods+RasHelper"));

    $.Field({Static:true , Public:false}, "s_CurrentVersion", $.Int32);

    $.Field({Static:true , Public:false}, "s_CurrentAutoDetector", $asm12.TypeRef("System.Net.AutoWebProxyScriptEngine+AutoDetector"));

    $.Field({Static:true , Public:false}, "s_Initialized", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_LockObject", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Connectoid", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_CurrentVersion", $.Int32);

    $.Property({Static:true , Public:false}, "CurrentAutoDetector", $.Type);

    $.Property({Static:false, Public:false}, "Connectoid", $.String);

    $.Property({Static:false, Public:false}, "NetworkChangeStatus", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebProxyScriptHelper */ 

(function WebProxyScriptHelper$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebProxyScriptHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false}, "MAX_IPADDRESS_LIST_LENGTH", $.Int32, 1024);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.IWebProxyScript */ 

JSIL.MakeInterface(
  "System.Net.IWebProxyScript", true, [], function ($) {
    $.Method({}, "Load", new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Uri"), $.String, 
          $asm0F.TypeRef("System.Type")
        ]));
    $.Method({}, "Run", new JSIL.MethodSignature($.String, [$.String, $.String]));
    $.Method({}, "Close", JSIL.MethodSignature.Void);
  }, []);

/* class System.Net.AutoWebProxyScriptWrapper */ 

(function AutoWebProxyScriptWrapper$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AutoWebProxyScriptWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CloseAppDomain", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "CloseAppDomainCallback", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Timer"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Uri"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAppDomain", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false}, "FindProxyForURL", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastModified", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScriptBody", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "OnDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Buffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LastModified", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.Property({Static:false, Public:false}, "ScriptBody", $.String);

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "LastModified", $asm0F.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.BasicClient */ 

(function BasicClient$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.BasicClient", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodingRightGetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanPreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Lookup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.Field({Static:true , Public:false}, "Signature", $.String);

    $.Field({Static:true , Public:false}, "SignatureSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanPreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AuthenticationType", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IAuthenticationModule")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.BufferOffsetSize */ 

(function BufferOffsetSize$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.BufferOffsetSize", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "Offset", $.Int32);

    $.Field({Static:false, Public:false}, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ChunkParser */ 

(function ChunkParser$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ChunkParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAsyncResult", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteMetaDataReadOperation", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompletePayloadReadOperation", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteUserRead", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAsync", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandlePayload", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.DataParseStatus"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTokenChar", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseChunkLength", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.DataParseStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCRLF", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExtension", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.DataParseStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExtensionNameValuePairs", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePayloadEnd", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.DataParseStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQuotedString", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseToken", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTrailer", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.DataParseStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseWhitespaces", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareBufferForMoreData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResponse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetReadParameters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransitionToErrorState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetLeftoverBytes", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetMoreData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "tokenChars", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Boolean, 128);
      });

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "bufferCurrentPos", $.Int32);

    $.Field({Static:false, Public:false}, "bufferFillLength", $.Int32);

    $.Field({Static:false, Public:false}, "maxBufferLength", $.Int32);

    $.Field({Static:false, Public:false}, "dataSource", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "readState", $asm12.TypeRef("System.Net.ChunkParser+ReadState"));

    $.Field({Static:false, Public:false}, "currentChunkLength", $.Int32);

    $.Property({Static:false, Public:false}, "IsAsync", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.ChunkParser+ReadState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.ChunkParser+ReadState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ChunkLength: 0, 
    Extension: 1, 
    Payload: 2, 
    PayloadEnd: 3, 
    Trailer: 4, 
    Done: 5, 
    Error: 6, 
  }
);

/* class System.Net.PooledStream */ 

(function PooledStream$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.PooledStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ConnectionPool"), $asm0F.TypeRef("System.TimeSpan"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Activate", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm12.TypeRef("System.Net.GeneralAsyncDelegate")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Activate", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Boolean, 
          $asm12.TypeRef("System.Net.GeneralAsyncDelegate")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMultipleWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelPendingIoAndCloseIfSafe", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckLifetime", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseConnectingSockets", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseSocket", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ConnectionCallback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0F.TypeRef("System.Exception"), 
          $asm12.TypeRef("System.Net.Sockets.Socket"), $asm12.TypeRef("System.Net.IPAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EndMultipleWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBePooled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmancipated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInitalizing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JustConnected", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NetworkStream", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.NetworkStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pool", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerAddress", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServicePoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServicePoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Socket", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsingSecureStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InterlockedOr", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MultipleWrite", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Poll", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm12.TypeRef("System.Net.Sockets.SelectMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PollRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "PostPop", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrePush", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CanBePooled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NetworkStream", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.NetworkStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSocketTimeoutOption", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.SocketShutdown"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryCloseNetworkStream", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnsafeBeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnsafeBeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateLifetime", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_CheckLifetime", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Lifetime", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_CreateTime", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_ConnectionIsDoomed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ConnectionPool", $asm12.TypeRef("System.Net.ConnectionPool"));

    $.Field({Static:false, Public:false}, "m_Owner", $asm0F.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "m_PooledCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_Initalizing", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ServerAddress", $asm12.TypeRef("System.Net.IPAddress"));

    $.Field({Static:false, Public:false}, "m_NetworkStream", $asm12.TypeRef("System.Net.Sockets.NetworkStream"));

    $.Field({Static:false, Public:false}, "m_AbortSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Field({Static:false, Public:false}, "m_AbortSocket6", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Field({Static:false, Public:false}, "m_JustConnected", $.Boolean);

    $.Field({Static:false, Public:false}, "m_SynchronousIOClosingState", $.Int32);

    $.Field({Static:false, Public:false}, "m_AsyncCallback", $asm12.TypeRef("System.Net.GeneralAsyncDelegate"));

    $.Property({Static:false, Public:false}, "JustConnected", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerAddress", $asm12.TypeRef("System.Net.IPAddress"));

    $.Property({Static:false, Public:false}, "IsInitalizing", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBePooled", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmancipated", $.Boolean);

    $.Property({Static:false, Public:false}, "Pool", $asm12.TypeRef("System.Net.ConnectionPool"));

    $.Property({Static:false, Public:false, Virtual:true }, "ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Property({Static:false, Public:false}, "UsingSecureStream", $.Boolean);

    $.Property({Static:false, Public:false}, "NetworkStream", $asm12.TypeRef("System.Net.Sockets.NetworkStream"));

    $.Property({Static:false, Public:false}, "Socket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CommandStream */ 

(function CommandStream$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.PooledStream"), 
      Name: "System.Net.CommandStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ConnectionPool"), $asm0F.TypeRef("System.TimeSpan"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Abort", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildCommandsList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.CommandStream+PipelineEntry")]), [$asm12.TypeRef("System.Net.WebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContinuePipeline", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValid", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.ResponseDescription"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueCommandPipeline", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$asm12.TypeRef("System.Net.WebExceptionStatus"), $asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $asm12.TypeRef("System.Net.FtpStatusCode"), $.String, 
          $asm0F.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecoverableFailure", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitCommandPipeline", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.WebRequest"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.CommandStream+PipelineEntry")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeRequestCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkAsRecoverableFailure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PipelineCallback", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CommandStream+PipelineInstruction"), [
          $asm12.TypeRef("System.Net.CommandStream+PipelineEntry"), $asm12.TypeRef("System.Net.ResponseDescription"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostReadCommandProcessing", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostSendCommandProcessing", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReceiveCommandResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ResponseDescription"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReceiveCommandResponseCallback", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.ReceiveState"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Encoding", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SubmitRequest", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [
          $asm12.TypeRef("System.Net.WebRequest"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_WriteCallbackDelegate", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "WriteCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_ReadCallbackDelegate", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ReadCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false}, "m_RecoverableFailure", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Request", $asm12.TypeRef("System.Net.WebRequest"));

    $.Field({Static:false, Public:false}, "m_Async", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Aborted", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Commands", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.CommandStream+PipelineEntry")]));

    $.Field({Static:false, Public:false}, "m_Index", $.Int32);

    $.Field({Static:false, Public:false}, "m_DoRead", $.Boolean);

    $.Field({Static:false, Public:false}, "m_DoSend", $.Boolean);

    $.Field({Static:false, Public:false}, "m_CurrentResponseDescription", $asm12.TypeRef("System.Net.ResponseDescription"));

    $.Field({Static:false, Public:false}, "m_AbortReason", $.String);

    $.Field({Static:false, Public:false}, "m_Buffer", $.String);

    $.Field({Static:false, Public:false}, "m_Encoding", $asm0F.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "m_Decoder", $asm0F.TypeRef("System.Text.Decoder"));

    $.Property({Static:false, Public:false}, "RecoverableFailure", $.Boolean);

    $.Property({Static:false, Public:false}, "Encoding", $asm0F.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.CommandStream+PipelineInstruction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.CommandStream+PipelineInstruction", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Abort: 0, 
    Advance: 1, 
    Pause: 2, 
    Reread: 3, 
    GiveStream: 4, 
  }
);

/* enum System.Net.CommandStream+PipelineEntryFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.CommandStream+PipelineEntryFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    UserCommand: 1, 
    GiveDataStream: 2, 
    CreateDataConnection: 4, 
    DontLogParameter: 8, 
  }
);

/* class System.Net.CommandStream+PipelineEntry */ 

(function PipelineEntry$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CommandStream+PipelineEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.CommandStream+PipelineEntryFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.CommandStream+PipelineEntryFlags")])
    );

    $.Field({Static:false, Public:false}, "Command", $.String);

    $.Field({Static:false, Public:false}, "Flags", $asm12.TypeRef("System.Net.CommandStream+PipelineEntryFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ResponseDescription */ 

(function ResponseDescription$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ResponseDescription", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidStatusCode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PermanentFailure", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PositiveCompletion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PositiveIntermediate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransientFailure", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "Status", $.Int32);

    $.Field({Static:false, Public:false}, "StatusDescription", $.String);

    $.Field({Static:false, Public:false}, "StatusBuffer", $asm0F.TypeRef("System.Text.StringBuilder"));

    $.Property({Static:false, Public:false}, "PositiveIntermediate", $.Boolean);

    $.Property({Static:false, Public:false}, "PositiveCompletion", $.Boolean);

    $.Property({Static:false, Public:false}, "TransientFailure", $.Boolean);

    $.Property({Static:false, Public:false}, "PermanentFailure", $.Boolean);

    $.Property({Static:false, Public:false}, "InvalidStatusCode", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ReceiveState */ 

(function ReceiveState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ReceiveState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CommandStream"))
    );

    $.Field({Static:false, Public:false}, "Resp", $asm12.TypeRef("System.Net.ResponseDescription"));

    $.Field({Static:false, Public:false}, "ValidThrough", $.Int32);

    $.Field({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "Connection", $asm12.TypeRef("System.Net.CommandStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.ReadState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.ReadState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Start: 0, 
    StatusLine: 1, 
    Headers: 2, 
    Data: 3, 
  }
);

/* enum System.Net.DataParseStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.DataParseStatus", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NeedMoreData: 0, 
    ContinueParsing: 1, 
    Done: 2, 
    Invalid: 3, 
    DataTooBig: 4, 
  }
);

/* enum System.Net.WebParseErrorSection */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebParseErrorSection", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Generic: 0, 
    ResponseHeader: 1, 
    ResponseStatusLine: 2, 
    ResponseBody: 3, 
  }
);

/* enum System.Net.WebParseErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebParseErrorCode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Generic: 0, 
    InvalidHeaderName: 1, 
    InvalidContentLength: 2, 
    IncompleteHeaderLine: 3, 
    CrLfError: 4, 
    InvalidChunkFormat: 5, 
    UnexpectedServerResponse: 6, 
  }
);

/* struct System.Net.WebParseError */ 

(function WebParseError$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.WebParseError", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Section", $asm12.TypeRef("System.Net.WebParseErrorSection"));

    $.Field({Static:false, Public:true }, "Code", $asm12.TypeRef("System.Net.WebParseErrorCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.TunnelStateObject */ 

(function TunnelStateObject$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.TunnelStateObject", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.Connection")])
    );

    $.Field({Static:false, Public:false}, "Connection", $asm12.TypeRef("System.Net.Connection"));

    $.Field({Static:false, Public:false}, "OriginalRequest", $asm12.TypeRef("System.Net.HttpWebRequest"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ConnectionReturnResult */ 

(function ConnectionReturnResult$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ConnectionReturnResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $asm12.TypeRef("System.Net.HttpWebRequest"), 
          $asm12.TypeRef("System.Net.CoreResponseData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddExceptionRange", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.HttpWebRequest")]), 
          $asm0F.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddExceptionRange", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.HttpWebRequest")]), 
          $asm0F.TypeRef("System.Exception"), $asm0F.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNotEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeConnectionCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "SetResponses", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_InvokeConnectionCallback", $asm0F.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm0F.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "InvokeConnectionCallback", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:false, Public:false}, "m_Context", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Net.ConnectionReturnResult+RequestContext")]));

    $.Property({Static:false, Public:false}, "IsNotEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.ConnectionReturnResult+RequestContext */ 

(function RequestContext$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.ConnectionReturnResult+RequestContext", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $.Object])
    );

    $.Field({Static:false, Public:false}, "Request", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:false}, "CoreResponse", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Connection */ 

(function Connection$Members () {
  var $, $thisType;


























































  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.PooledStream"), 
      Name: "System.Net.Connection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectionGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AbortOrDisassociate", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.WebException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AbortSocket", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIdle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNextRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNonIdle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStartReceive", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearReaderState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseOnIdle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteConnection", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm12.TypeRef("System.Net.HttpWebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteConnectionWrapper", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteStartConnection", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm12.TypeRef("System.Net.HttpWebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteStartRequest", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm12.TypeRef("System.Net.HttpWebRequest"), 
          $asm12.TypeRef("System.Net.TriState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false}, "FreeReadBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AtLeastOneResponseReceived", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BusyCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionGroup", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ConnectionGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IISVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeepAlive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockedRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NonKeepAliveRequestPipelined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServicePoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServicePoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleConnectStreamException", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $asm12.TypeRef("System.Net.WebExceptionStatus"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")]), 
          $asm0F.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $asm12.TypeRef("System.Net.WebExceptionStatus"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleErrorWithReadDone", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.WebExceptionStatus"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeParseStatusLine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteStartNextRequest", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.HttpWebRequest"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.TriState")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.HttpWebRequest")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConnectionReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkAsReserved", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseResponseData", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.CoreResponseData")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStatusLine", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WebParseError")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseStatusLineStrict", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm12.TypeRef("System.Net.Connection+StatusLineValues"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WebParseError")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStreamData", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.DataParseStatus"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PollAndRead", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostReceive", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PostReceiveWrapper", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareCloseConnectionSocket", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessHeaderData", 
      new JSIL.MethodSignature($.Int64, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm12.TypeRef("System.Net.HttpWebRequest"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadCallbackWrapper", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadComplete", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm12.TypeRef("System.Net.WebExceptionStatus")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStartNextRequest", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.WebRequest"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromConnectionList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LockedRequest", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLeftoverBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStatusLineParsed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartRequest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.TriState"), [$asm12.TypeRef("System.Net.HttpWebRequest"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubmitRequest", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.HttpWebRequest"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncRead", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.HttpWebRequest"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TunnelThroughProxy", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.HttpWebRequest"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TunnelThroughProxyWrapper", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UnlockIfNeeded", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UnlockRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ScatterGatherBuffers"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartNextRequest", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ConnectionReturnResult")])])
    );

    $.Field({Static:true , Public:false}, "t_SyncReadNesting", $.Int32);

    $.Field({Static:true , Public:false}, "s_PinnableBufferCache", $asm12.TypeRef("System.PinnableBufferCache"));

    $.Field({Static:false, Public:false}, "m_Error", $asm12.TypeRef("System.Net.WebExceptionStatus"));

    $.Field({Static:false, Public:false}, "m_InnerException", $asm0F.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "m_IISVersion", $.Int32);

    $.Field({Static:false, Public:false}, "m_ReadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_ReadBufferFromPinnableCache", $.Boolean);

    $.Field({Static:false, Public:false}, "m_BytesRead", $.Int32);

    $.Field({Static:false, Public:false}, "m_BytesScanned", $.Int32);

    $.Field({Static:false, Public:false}, "m_TotalResponseHeadersLength", $.Int32);

    $.Field({Static:false, Public:false}, "m_MaximumResponseHeadersLength", $.Int32);

    $.Field({Static:false, Public:false}, "m_MaximumUnauthorizedUploadLength", $.Int64);

    $.Field({Static:false, Public:false}, "m_ResponseData", $asm12.TypeRef("System.Net.CoreResponseData"));

    $.Field({Static:false, Public:false}, "m_ReadState", $asm12.TypeRef("System.Net.ReadState"));

    $.Field({Static:false, Public:false}, "m_StatusLineValues", $asm12.TypeRef("System.Net.Connection+StatusLineValues"));

    $.Field({Static:false, Public:false}, "m_StatusState", $.Int32);

    $.Field({Static:false, Public:false}, "m_WaitList", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Net.Connection+WaitListItem")]));

    $.Field({Static:false, Public:false}, "m_WriteList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_LastAsyncResult", $asm0F.TypeRef("System.IAsyncResult"));

    $.Field({Static:false, Public:false}, "m_RecycleTimer", $asm12.TypeRef("System.Net.TimerThread+Timer"));

    $.Field({Static:false, Public:false}, "m_ParseError", $asm12.TypeRef("System.Net.WebParseError"));

    $.Field({Static:false, Public:false}, "m_AtLeastOneResponseReceived", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_PostReceiveDelegate", $asm0F.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm0F.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "PostReceiveWrapper", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_ReadCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ReadCallbackWrapper", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_TunnelCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "TunnelThroughProxyWrapper", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false}, "s_NullBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Byte, 0);
      });

    $.Field({Static:false, Public:false}, "m_AbortDelegate", $asm12.TypeRef("System.Net.HttpAbortDelegate"));

    $.Field({Static:false, Public:false}, "m_ConnectionGroup", $asm12.TypeRef("System.Net.ConnectionGroup"));

    $.Field({Static:false, Public:false}, "m_ConnectionUnlock", $asm12.TypeRef("System.Net.UnlockConnectionDelegate"));

    $.Field({Static:false, Public:false}, "m_PrepareCloseConnectionSocketCalledUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_AbortSocketCalledUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_IdleSinceUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_LockedRequest", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:false}, "m_CurrentRequest", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:false}, "m_CanPipeline", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Free", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Idle", $.Boolean);

    $.Field({Static:false, Public:false}, "m_KeepAlive", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Pipelining", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ReservedCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_ReadDone", $.Boolean);

    $.Field({Static:false, Public:false}, "m_WriteDone", $.Boolean);

    $.Field({Static:false, Public:false}, "m_RemovedFromConnectionList", $.Boolean);

    $.Field({Static:false, Public:false}, "m_NonKeepAliveRequestPipelined", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsPipelinePaused", $.Boolean);

    $.Field({Static:true , Public:false}, "s_MaxPipelinedCount", $.Int32, 10);

    $.Field({Static:true , Public:false}, "s_MinPipelinedCount", $.Int32, 5);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ShortcutStatusDescriptions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Property({Static:false, Public:false}, "ConnectionGroup", $asm12.TypeRef("System.Net.ConnectionGroup"));

    $.Property({Static:false, Public:false}, "LockedRequest", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Property({Static:false, Public:false}, "BusyCount", $.Int32);

    $.Property({Static:false, Public:false}, "IISVersion", $.Int32);

    $.Property({Static:false, Public:false}, "AtLeastOneResponseReceived", $.Boolean);

    $.Property({Static:false, Public:false}, "KeepAlive", $.Boolean);

    $.Property({Static:false, Public:false}, "NonKeepAliveRequestPipelined", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Connection+StatusLineValues */ 

(function StatusLineValues$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Connection+StatusLineValues", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "MajorVersion", $.Int32);

    $.Field({Static:false, Public:false}, "MinorVersion", $.Int32);

    $.Field({Static:false, Public:false}, "StatusCode", $.Int32);

    $.Field({Static:false, Public:false}, "StatusDescription", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Connection+WaitListItem */ 

(function WaitListItem$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Connection+WaitListItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QueueStartTime", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Request", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.Field({Static:false, Public:false}, "request", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:false}, "queueStartTime", $.Int64);

    $.Property({Static:false, Public:true }, "Request", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Property({Static:false, Public:true }, "QueueStartTime", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Connection+AsyncTriState */ 

(function AsyncTriState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Connection+AsyncTriState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.TriState"))
    );

    $.Field({Static:false, Public:true }, "Value", $asm12.TypeRef("System.Net.TriState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Connection+<>c__DisplayClass107_0 */ 

(function $l$gc__DisplayClass107_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Connection+<>c__DisplayClass107_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAbortOrDisassociate$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.Connection+WaitListItem")])
    );

    $.Field({Static:false, Public:true }, "request", $asm12.TypeRef("System.Net.HttpWebRequest"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.ConnectionGroup */ 

(function ConnectionGroup$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ConnectionGroup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.ServicePoint"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.WebException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Associate", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Connection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelIdleTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionGoneIdle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisableKeepAliveOnConnections", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Disassociate", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Connection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Connection"), [
          $asm12.TypeRef("System.Net.HttpWebRequest"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindConnectionAuthenticationGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Connection"), [$asm12.TypeRef("System.Net.HttpWebRequest"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMatchingConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Connection"), [
          $asm12.TypeRef("System.Net.HttpWebRequest"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Connection")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.ManualResetEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticationRequestQueue", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Queue"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentConnections", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServicePoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ServicePoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeQueryStr", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PruneAbortedRequests", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PruneExcesiveConnections", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AuthenticationRequestQueue", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Queue"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConnectionLimit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Field({Static:false, Public:false}, "m_Name", $.String);

    $.Field({Static:false, Public:false}, "m_ConnectionLimit", $.Int32);

    $.Field({Static:false, Public:false}, "m_ConnectionList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_Event", $.Object);

    $.Field({Static:false, Public:false}, "m_AuthenticationRequestQueue", $asm0F.TypeRef("System.Collections.Queue"));

    $.Field({Static:false, Public:false}, "m_AuthenticationGroup", $.Boolean);

    $.Field({Static:false, Public:false}, "m_AbortDelegate", $asm12.TypeRef("System.Net.HttpAbortDelegate"));

    $.Field({Static:false, Public:false}, "m_NtlmNegGroup", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IISVersion", $.Int32);

    $.Field({Static:false, Public:false}, "m_ActiveConnections", $.Int32);

    $.Field({Static:false, Public:false}, "m_ExpiringTimer", $asm12.TypeRef("System.Net.TimerThread+Timer"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "ServicePoint", $asm12.TypeRef("System.Net.ServicePoint"));

    $.Property({Static:false, Public:false}, "CurrentConnections", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionLimit", $.Int32);

    $.Property({Static:false, Public:false}, "AsyncWaitHandle", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Property({Static:false, Public:false}, "AuthenticationRequestQueue", $asm0F.TypeRef("System.Collections.Queue"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.WriteHeadersCallbackState */ 

(function WriteHeadersCallbackState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.WriteHeadersCallbackState", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.ConnectStream")])
    );

    $.Field({Static:false, Public:false}, "request", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:false}, "stream", $asm12.TypeRef("System.Net.ConnectStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ConnectStream */ 

(function ConnectStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
































  function ConnectStream_get_FinishedAfterWrite () {
    return this.ConnectStream$FinishedAfterWrite$value;
  }; 


































  function ConnectStream_set_FinishedAfterWrite (value) {
    this.ConnectStream$FinishedAfterWrite$value = value;
  }; 













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.ConnectStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Connection"), $asm12.TypeRef("System.Net.HttpWebRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Connection"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Int64, $.Boolean, 
          $asm12.TypeRef("System.Net.HttpWebRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginReadWithoutValidation", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallDone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallDone", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectionReturnResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseInternal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseInternal", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DrainSocket", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnableWriteBuffering", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndReadWithoutValidation", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrorResponseNotify", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExchangeCallNesting", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FatalResponseNotify", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FillFromBufferedData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BufferedData", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ScatterGatherBuffers"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BufferOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BytesLeftToWrite", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Connection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Eof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorInStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_FinishedAfterWrite", 
      JSIL.MethodSignature.Return($.Boolean), 
      ConnectStream_get_FinishedAfterWrite
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreSocketErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSocket", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPostStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteChunked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBindingKind")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChunkHeader", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResponseDrainTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleWriteHeadersException", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Exception"), $asm12.TypeRef("System.Net.WebExceptionStatus")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalRead", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IOError", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IOError", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Exception"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PollAndRead", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessWriteCallback", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IAsyncResult"), $asm12.TypeRef("System.Net.LazyAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessWriteCallDone", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectionReturnResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWithoutValidation", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWithoutValidation", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResubmitWrite", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResumeClose_Part2", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResumeClose_Part2_Wrapper", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResumeInternalClose", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeSetSocketTimeout", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.SocketShutdown"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BufferedData", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ScatterGatherBuffers"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BytesLeftToWrite", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Method({Static:false, Public:false}, "set_FinishedAfterWrite", 
      JSIL.MethodSignature.Action($.Boolean), 
      ConnectStream_set_FinishedAfterWrite
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SuppressWrite", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRtcOption", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchToContentLength", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.IRequestLifetimeTracker.TrackRequestLifetime", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Overrides($asm12.TypeRef("System.Net.IRequestLifetimeTracker"), "TrackRequestLifetime");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHeaders", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteHeadersCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "m_CallNesting", $.Int32);

    $.Field({Static:false, Public:false}, "m_BufferedData", $asm12.TypeRef("System.Net.ScatterGatherBuffers"));

    $.Field({Static:false, Public:false}, "m_SuppressWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "m_BufferOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "m_BytesLeftToWrite", $.Int64);

    $.Field({Static:false, Public:false}, "m_BytesAlreadyTransferred", $.Int32);

    $.Field({Static:false, Public:false}, "m_Connection", $asm12.TypeRef("System.Net.Connection"));

    $.Field({Static:false, Public:false}, "m_ReadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_ReadOffset", $.Int32);

    $.Field({Static:false, Public:false}, "m_ReadBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_ReadBytes", $.Int64);

    $.Field({Static:false, Public:false}, "m_Chunked", $.Boolean);

    $.Field({Static:false, Public:false}, "m_DoneCalled", $.Int32);

    $.Field({Static:false, Public:false}, "m_ShutDown", $.Int32);

    $.Field({Static:false, Public:false}, "m_ErrorException", $asm0F.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "m_ChunkEofRecvd", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ChunkParser", $asm12.TypeRef("System.Net.ChunkParser"));

    $.Field({Static:false, Public:false}, "m_HttpWriteMode", $asm12.TypeRef("System.Net.HttpWriteMode"));

    $.Field({Static:false, Public:false}, "m_ReadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_WriteTimeout", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ReadCallbackDelegate", $asm0F.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_WriteCallbackDelegate", $asm0F.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_WriteHeadersCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "WriteHeadersCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ZeroLengthRead", $.Object);

    $.Field({Static:false, Public:false}, "m_Request", $asm12.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:true , Public:false}, "responseDrainTimeoutMilliseconds", $asm0F.TypeRef("System.Int32"), -1);

    $.Field({Static:false, Public:false}, "ConnectStream$FinishedAfterWrite$value", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "m_IgnoreSocketErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ErrorResponseStatus", $.Boolean);

    $.Field({Static:true , Public:false}, "s_DrainingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Byte, 4096);
      });

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "FinishedAfterWrite", $.Boolean);

    $.Property({Static:false, Public:false}, "IgnoreSocketErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "SuppressWrite", $.Boolean);

    $.Property({Static:false, Public:false}, "Connection", $asm12.TypeRef("System.Net.Connection"));

    $.Property({Static:false, Public:false}, "BufferOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "BufferedData", $asm12.TypeRef("System.Net.ScatterGatherBuffers"));

    $.Property({Static:false, Public:false}, "WriteChunked", $.Boolean);

    $.Property({Static:false, Public:false}, "BytesLeftToWrite", $.Int64);

    $.Property({Static:false, Public:false}, "WriteStream", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPostStream", $.Boolean);

    $.Property({Static:false, Public:false}, "ErrorInStream", $.Boolean);

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "Eof", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SyncMemoryStream */ 

(function SyncMemoryStream$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.MemoryStream"), 
      Name: "System.Net.SyncMemoryStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrackRequestLifetime", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "m_ReadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_WriteTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CallbackClosure */ 

(function CallbackClosure$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.CallbackClosure", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Threading.ExecutionContext"), $asm0F.TypeRef("System.AsyncCallback")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncCallback", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.AsyncCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.ExecutionContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.AsyncCallback")])
    );

    $.Field({Static:false, Public:false}, "savedCallback", $asm0F.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "savedContext", $asm0F.TypeRef("System.Threading.ExecutionContext"));

    $.Property({Static:false, Public:false}, "AsyncCallback", $asm0F.TypeRef("System.AsyncCallback"));

    $.Property({Static:false, Public:false}, "Context", $asm0F.TypeRef("System.Threading.ExecutionContext"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.CookieModule */ 

(function CookieModule$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Net.CookieModule", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "OnReceivedHeaders", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnSendingHeaders", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.DigestClient */ 

(function DigestClient$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.DigestClient", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckQOP", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.HttpDigestChallenge")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ClearSession", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanPreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WDigestAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RefineDigestChallenge", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm12.TypeRef("System.Net.WebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "XPDoAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.HttpWebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "XPUpdate", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm12.TypeRef("System.Net.HttpWebRequest")])
    );

    $.Field({Static:true , Public:false}, "Signature", $.String);

    $.Field({Static:true , Public:false}, "SignatureSize", $.Int32);

    $.Field({Static:true , Public:false}, "challengeCache", $asm12.TypeRef("System.Net.PrefixLookup"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "singleSpaceArray", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "_WDigestAvailable", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanPreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AuthenticationType", $.String);

    $.Property({Static:true , Public:false}, "WDigestAvailable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.ISessionAuthenticationModule"), 
      /* 1 */ $asm12.TypeRef("System.Net.IAuthenticationModule")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HttpDigestChallenge */ 

(function HttpDigestChallenge$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HttpDigestChallenge", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyAndIncrementNonce", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "defineAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFromRequest", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToBlob", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "HostName", $.String);

    $.Field({Static:false, Public:false}, "Realm", $.String);

    $.Field({Static:false, Public:false}, "ChallengedUri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "Uri", $.String);

    $.Field({Static:false, Public:false}, "Nonce", $.String);

    $.Field({Static:false, Public:false}, "Opaque", $.String);

    $.Field({Static:false, Public:false}, "Stale", $.Boolean);

    $.Field({Static:false, Public:false}, "Algorithm", $.String);

    $.Field({Static:false, Public:false}, "Method", $.String);

    $.Field({Static:false, Public:false}, "Domain", $.String);

    $.Field({Static:false, Public:false}, "QualityOfProtection", $.String);

    $.Field({Static:false, Public:false}, "ClientNonce", $.String);

    $.Field({Static:false, Public:false}, "NonceCount", $.Int32);

    $.Field({Static:false, Public:false}, "Charset", $.String);

    $.Field({Static:false, Public:false}, "ServiceName", $.String);

    $.Field({Static:false, Public:false}, "ChannelBinding", $.String);

    $.Field({Static:false, Public:false}, "UTF8Charset", $.Boolean);

    $.Field({Static:false, Public:false}, "QopPresent", $.Boolean);

    $.Field({Static:false, Public:false}, "MD5provider", $asm0F.TypeRef("System.Security.Cryptography.MD5CryptoServiceProvider"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HttpDigest */ 

(function HttpDigest$Members () {
  var $, $thisType;

















  JSIL.MakeStaticClass("System.Net.HttpDigest", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $asm12.TypeRef("System.Net.HttpDigestChallenge"), $asm12.TypeRef("System.Net.NetworkCredential"), 
          $.String, $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharsetEncode", 
      new JSIL.MethodSignature($.String, [$.String, $asm12.TypeRef("System.Net.HttpDigest+Charset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "computeSecret", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Net.HttpDigestChallenge"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "createNonce", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "createUpgradedNonce", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.HttpDigestChallenge")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetectCharset", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.HttpDigest+Charset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "formatChannelBindingForHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "hashChannelBinding", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), $asm0F.TypeRef("System.Security.Cryptography.MD5CryptoServiceProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "hashString", 
      new JSIL.MethodSignature($.String, [$.String, $asm0F.TypeRef("System.Security.Cryptography.MD5CryptoServiceProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "hexEncode", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Interpret", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.HttpDigestChallenge"), [
          $.String, $.Int32, 
          $asm12.TypeRef("System.Net.HttpWebRequest")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUpgraded", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "pair", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadSuppressExtendedProtectionRegistryValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "responseValue", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Net.HttpDigestChallenge"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "unquote", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "suppressExtendedProtection", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RandomGenerator", $asm0F.TypeRef("System.Security.Cryptography.RNGCryptoServiceProvider"));

    $.Field({Static:true , Public:false}, "InitiatorTypeOffset", $.Int32);

    $.Field({Static:true , Public:false}, "InitiatorLengthOffset", $.Int32);

    $.Field({Static:true , Public:false}, "InitiatorOffsetOffset", $.Int32);

    $.Field({Static:true , Public:false}, "AcceptorTypeOffset", $.Int32);

    $.Field({Static:true , Public:false}, "AcceptorLengthOffset", $.Int32);

    $.Field({Static:true , Public:false}, "AcceptorOffsetOffset", $.Int32);

    $.Field({Static:true , Public:false}, "ApplicationDataLengthOffset", $.Int32);

    $.Field({Static:true , Public:false}, "ApplicationDataOffsetOffset", $.Int32);

    $.Field({Static:true , Public:false}, "SizeOfInt", $.Int32);

    $.Field({Static:true , Public:false}, "MinimumFormattedBindingLength", $.Int32, function ($pi) {
        return Math.imul(5, $pi.SizeOfInt);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.HttpDigest+Charset */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.HttpDigest+Charset", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ASCII: 0, 
    ANSI: 1, 
    UTF8: 2, 
  }
);

/* class System.Net.EmptyWebProxy */ 

(function EmptyWebProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.EmptyWebProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProxy", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsBypassed", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.IAutoWebProxy.GetProxies", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ProxyChain"), [$asm12.TypeRef("System.Uri")])
    )
      .Overrides($asm12.TypeRef("System.Net.IAutoWebProxy"), "GetProxies");

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm12.TypeRef("System.Net.ICredentials"));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.IAutoWebProxy"), 
      /* 1 */ $asm12.TypeRef("System.Net.IWebProxy")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.FtpLoginState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.FtpLoginState", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotLoggedIn: 0, 
    LoggedIn: 1, 
    LoggedInButNeedsRelogin: 2, 
    ReloginFailed: 3, 
  }
);

/* class System.Net.FtpControlStream */ 

(function FtpControlStream$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.CommandStream"), 
      Name: "System.Net.FtpControlStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.ConnectionPool"), $asm0F.TypeRef("System.TimeSpan"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AbortConnect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AcceptCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildCommandsList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.CommandStream+PipelineEntry")]), [$asm12.TypeRef("System.Net.WebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValid", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.ResponseDescription"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFtpDataSocket", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.Socket"), [$asm12.TypeRef("System.Net.FtpWebRequest"), $asm12.TypeRef("System.Net.Sockets.Socket")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFtpListenerSocket", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.FtpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FormatAddress", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.IPAddress"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FormatAddressV6", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.IPAddress"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FormatFtpCommand", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BannerMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Credentials", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExitMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastModified", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseUri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WelcomeMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContentLengthFrom213Response", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLastModifiedFrom213Response", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLoginDirectory", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathInfo", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.FtpControlStream+GetPathOption"), $asm12.TypeRef("System.Uri"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPortCommandLine", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.FtpWebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPortV4", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPortV6", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFtpDataStreamWriteable", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TriState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PipelineCallback", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CommandStream+PipelineInstruction"), [
          $asm12.TypeRef("System.Net.CommandStream+PipelineEntry"), $asm12.TypeRef("System.Net.ResponseDescription"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueueOrCreateDataConection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CommandStream+PipelineInstruction"), [
          $asm12.TypeRef("System.Net.CommandStream+PipelineEntry"), $asm12.TypeRef("System.Net.ResponseDescription"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueueOrCreateFtpDataStream", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.CommandStream+PipelineInstruction"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Quit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Credentials", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SSLHandshakeCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryUpdateContentLength", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryUpdateResponseUri", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.FtpWebRequest")])
    );

    $.Field({Static:false, Public:false}, "m_DataSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Field({Static:false, Public:false}, "m_CurrentTypeSetting", $.String);

    $.Field({Static:false, Public:false}, "m_ContentLength", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_AcceptCallbackDelegate", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "AcceptCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_ConnectCallbackDelegate", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ConnectCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_SSLHandshakeCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "SSLHandshakeCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Property({Static:false, Public:false}, "Credentials", $asm12.TypeRef("System.Net.NetworkCredential"));

    $.Property({Static:false, Public:false}, "ContentLength", $.Int64);

    $.Property({Static:false, Public:false}, "LastModified", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "ResponseUri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "BannerMessage", $.String);

    $.Property({Static:false, Public:false}, "WelcomeMessage", $.String);

    $.Property({Static:false, Public:false}, "ExitMessage", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.FtpControlStream+GetPathOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.FtpControlStream+GetPathOption", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Normal: 0, 
    AssumeFilename: 1, 
    AssumeNoFilename: 2, 
  }
);

/* class System.Net.FtpDataStream */ 

(function FtpDataStream$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.FtpDataStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.NetworkStream"), $asm12.TypeRef("System.Net.FtpWebRequest"), 
          $asm12.TypeRef("System.Net.TriState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AsyncReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSocketTimeoutOption", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.SocketShutdown"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_Request", $asm12.TypeRef("System.Net.FtpWebRequest"));

    $.Field({Static:false, Public:false}, "m_NetworkStream", $asm12.TypeRef("System.Net.Sockets.NetworkStream"));

    $.Field({Static:false, Public:false}, "m_Writeable", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Readable", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsFullyRead", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Closing", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.HeaderParser */ 

JSIL.MakeDelegate("System.Net.HeaderParser", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.String")]), [$asm0F.TypeRef("System.String")]));

/* class System.Net.HeaderInfo */ 

(function HeaderInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HeaderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm12.TypeRef("System.Net.HeaderParser")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsRequestRestricted", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsResponseRestricted", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parser", $asm12.TypeRef("System.Net.HeaderParser"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "HeaderName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "AllowMultiValues", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HeaderInfoTable */ 

(function HeaderInfoTable$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.HeaderInfoTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.HeaderInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDuringExpiresAttributeParsing", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMultiValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSetCookieValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSingleValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseValueHelper", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.Boolean])
    );

    $.Field({Static:true , Public:false}, "HeaderHashTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "UnknownHeaderInfo", $asm12.TypeRef("System.Net.HeaderInfo"));

    $.Field({Static:true , Public:false}, "SingleParser", $asm12.TypeRef("System.Net.HeaderParser"), function ($pi) {
        return $asm12.System.Net.HeaderParser.New(null, null, new JSIL.MethodPointerInfo($thisType, "ParseSingleValue", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String]), true, false));
      });

    $.Field({Static:true , Public:false}, "MultiParser", $asm12.TypeRef("System.Net.HeaderParser"), function ($pi) {
        return $asm12.System.Net.HeaderParser.New(null, null, new JSIL.MethodPointerInfo($thisType, "ParseMultiValue", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String]), true, false));
      });

    $.Field({Static:true , Public:false}, "SetCookieParser", $asm12.TypeRef("System.Net.HeaderParser"), function ($pi) {
        return $asm12.System.Net.HeaderParser.New(null, null, new JSIL.MethodPointerInfo($thisType, "ParseSetCookieValue", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String]), true, false));
      });

    $.Property({Static:false, Public:false}, "Item", $asm12.TypeRef("System.Net.HeaderInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.HttpDateParse */ 

(function HttpDateParse$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Net.HttpDateParse", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "MAKE_UPPER", 
      new JSIL.MethodSignature($.Char, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapDayMonthToDword", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseHttpDate", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.DateTime")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.IRequestLifetimeTracker */ 

JSIL.MakeInterface(
  "System.Net.IRequestLifetimeTracker", false, [], function ($) {
    $.Method({}, "TrackRequestLifetime", JSIL.MethodSignature.Action($.Int64));
  }, []);

/* interface System.Net.ISessionAuthenticationModule */ 

JSIL.MakeInterface(
  "System.Net.ISessionAuthenticationModule", false, [], function ($) {
    $.Method({}, "Update", new JSIL.MethodSignature($.Boolean, [$.String, $asm12.TypeRef("System.Net.WebRequest")]));
    $.Method({}, "ClearSession", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebRequest")));
  }, [$asm12.TypeRef("System.Net.IAuthenticationModule")]);

/* enum System.Net.CloseExState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.CloseExState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Normal: 0, 
    Abort: 1, 
    Silent: 2, 
  }
);

/* interface System.Net.ICloseEx */ 

JSIL.MakeInterface(
  "System.Net.ICloseEx", false, [], function ($) {
    $.Method({}, "CloseEx", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState")));
  }, []);

/* class System.Net.KerberosClient */ 

(function KerberosClient$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.KerberosClient", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ClearSession", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanPreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm12.TypeRef("System.Net.WebRequest")])
    );

    $.Field({Static:true , Public:false}, "Signature", $.String);

    $.Field({Static:true , Public:false}, "SignatureSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanPreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AuthenticationType", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.ISessionAuthenticationModule"), 
      /* 1 */ $asm12.TypeRef("System.Net.IAuthenticationModule")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.GlobalSSPI */ 

(function GlobalSSPI$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Net.GlobalSSPI", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false}, "SSPIAuth", $asm12.TypeRef("System.Net.SSPIInterface"));

    $.Field({Static:true , Public:false}, "SSPISecureChannel", $asm12.TypeRef("System.Net.SSPIInterface"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.SSPIInterface */ 

JSIL.MakeInterface(
  "System.Net.SSPIInterface", false, [], function ($) {
    $.Method({}, "get_SecurityPackages", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")])));
    $.Method({}, "set_SecurityPackages", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")])));
    $.Method({}, "EnumerateSecurityPackages", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeContextBuffer")])]));
    $.Method({}, "AcquireCredentialsHandle", new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AuthIdentity")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ]));
    $.Method({}, "AcquireCredentialsHandle", new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeSspiAuthDataHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ]));
    $.Method({}, "AcquireCredentialsHandle", new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecureCredential")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ]));
    $.Method({}, "AcquireDefaultCredential", new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ]));
    $.Method({}, "AcceptSecurityContext", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ]));
    $.Method({}, "AcceptSecurityContext", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ]));
    $.Method({}, "InitializeSecurityContext", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $.String, $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ]));
    $.Method({}, "InitializeSecurityContext", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $.String, $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ]));
    $.Method({}, "EncryptMessage", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ]));
    $.Method({}, "DecryptMessage", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ]));
    $.Method({}, "MakeSignature", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ]));
    $.Method({}, "VerifySignature", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ]));
    $.Method({}, "QueryContextChannelBinding", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeContextBufferChannelBinding")])
        ]));
    $.Method({}, "QueryContextAttributes", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")])
        ]));
    $.Method({}, "SetContextAttributes", new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]));
    $.Method({}, "CompleteAuthToken", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])]));
    $.Method({}, "ApplyControlToken", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])]));
    $.Property({}, "SecurityPackages");
  }, []);

/* class System.Net.SSPISecureChannelType */ 

(function SSPISecureChannelType$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SSPISecureChannelType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AuthIdentity")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeSspiAuthDataHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecureCredential")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireDefaultCredential", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyControlToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteAuthToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnumerateSecurityPackages", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeContextBuffer")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityPackages", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $.String, $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $.String, $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeSignature", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QueryContextChannelBinding", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeContextBufferChannelBinding")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SecurityPackages", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifySignature", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityPackages", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")]));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.SSPIInterface")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SSPIAuthType */ 

(function SSPIAuthType$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SSPIAuthType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AuthIdentity")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeSspiAuthDataHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecureCredential")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AcquireDefaultCredential", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyControlToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteAuthToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnumerateSecurityPackages", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeContextBuffer")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityPackages", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $.String, $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $.String, $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeSignature", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QueryContextChannelBinding", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeContextBufferChannelBinding")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SecurityPackages", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifySignature", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityPackages", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")]));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.SSPIInterface")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NegotiateClient */ 

(function NegotiateClient$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NegotiateClient", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ClearSession", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanPreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSignatureIndex", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm12.TypeRef("System.Net.WebRequest")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanPreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AuthenticationType", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.ISessionAuthenticationModule"), 
      /* 1 */ $asm12.TypeRef("System.Net.IAuthenticationModule")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NestedMultipleAsyncResult */ 

(function NestedMultipleAsyncResult$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.NestedMultipleAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")])
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NestedSingleAsyncResult */ 

(function NestedSingleAsyncResult$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.NestedSingleAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "Offset", $.Int32);

    $.Field({Static:false, Public:false}, "Size", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetRes */ 

(function NetRes$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetRes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetWebStatusCodeString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.HttpStatusCode"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetWebStatusCodeString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.FtpStatusCode"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetWebStatusString", 
      new JSIL.MethodSignature($.String, [$.String, $asm12.TypeRef("System.Net.WebExceptionStatus")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetWebStatusString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.WebExceptionStatus")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.NetworkingPerfCounterName */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.NetworkingPerfCounterName", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SocketConnectionsEstablished: 0, 
    SocketBytesReceived: 1, 
    SocketBytesSent: 2, 
    SocketDatagramsReceived: 3, 
    SocketDatagramsSent: 4, 
    HttpWebRequestCreated: 5, 
    HttpWebRequestAvgLifeTime: 6, 
    HttpWebRequestAvgLifeTimeBase: 7, 
    HttpWebRequestQueued: 8, 
    HttpWebRequestAvgQueueTime: 9, 
    HttpWebRequestAvgQueueTimeBase: 10, 
    HttpWebRequestAborted: 11, 
    HttpWebRequestFailed: 12, 
  }
);

/* class System.Net.NetworkingPerfCounters */ 

(function NetworkingPerfCounters$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkingPerfCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CounterAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateCounterPair", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.NetworkingPerfCounters+CounterPair"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExceptionEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInstanceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTimestamp", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "Increment", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkingPerfCounterName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Increment", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NetworkingPerfCounterName"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementAverage", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.NetworkingPerfCounterName"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ReplaceInvalidChars", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnloadEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.EventArgs")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "counterNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "instance", $asm12.TypeRef("System.Net.NetworkingPerfCounters"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:false, Public:false}, "initDone", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "initSuccessful", $.Boolean);

    $.Field({Static:false, Public:false}, "counters", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.NetworkingPerfCounters+CounterPair")]));

    $.Field({Static:false, Public:false}, "enabled", $.Boolean);

    $.Field({Static:false, Public:false}, "cleanupCalled", $asm0F.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkingPerfCounters+CounterPair */ 

(function CounterPair$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkingPerfCounters+CounterPair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.PerformanceCounter"), $asm12.TypeRef("System.Diagnostics.PerformanceCounter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalCounter", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.PerformanceCounter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InstanceCounter", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.PerformanceCounter"))
    );

    $.Field({Static:false, Public:false}, "instanceCounter", $asm12.TypeRef("System.Diagnostics.PerformanceCounter"));

    $.Field({Static:false, Public:false}, "globalCounter", $asm12.TypeRef("System.Diagnostics.PerformanceCounter"));

    $.Property({Static:false, Public:true }, "InstanceCounter", $asm12.TypeRef("System.Diagnostics.PerformanceCounter"));

    $.Property({Static:false, Public:true }, "GlobalCounter", $asm12.TypeRef("System.Diagnostics.PerformanceCounter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.ContextFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.ContextFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Zero: 0, 
    Delegate: 1, 
    MutualAuth: 2, 
    ReplayDetect: 4, 
    SequenceDetect: 8, 
    Confidentiality: 16, 
    UseSessionKey: 32, 
    InitUseSuppliedCreds: 128, 
    AllocateMemory: 256, 
    Connection: 2048, 
    InitExtendedError: 16384, 
    InitStream: 32768, 
    AcceptExtendedError: 32768, 
    InitIntegrity: 65536, 
    AcceptStream: 65536, 
    AcceptIntegrity: 131072, 
    InitIdentify: 131072, 
    AcceptIdentify: 524288, 
    InitManualCredValidation: 524288, 
    ProxyBindings: 67108864, 
    AllowMissingBindings: 268435456, 
    UnverifiedTargetName: 536870912, 
  }
);

/* class System.Net.NTAuthentication */ 

(function NTAuthentication$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NTAuthentication", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.NetworkCredential"), 
          $asm12.TypeRef("System.Net.SpnToken"), $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $asm12.TypeRef("System.Net.NetworkCredential"), $.String, 
          $asm12.TypeRef("System.Net.ContextFlags"), $asm12.TypeRef("System.Net.ContextAwareResult"), 
          $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $asm12.TypeRef("System.Net.NetworkCredential"), $.String, 
          $asm12.TypeRef("System.Net.ContextFlags"), $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChannelBinding", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsKerberos", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMutualAuthFlag", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OSSupportsExtendedProtection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UniqueUserId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHttpContextFlags", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ContextFlags"), [$asm12.TypeRef("System.Net.WebRequest"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutgoingBlob", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutgoingBlob", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecurityStatus")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutgoingDigestBlob", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecurityStatus")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $asm12.TypeRef("System.Net.NetworkCredential"), $.String, 
          $asm12.TypeRef("System.Net.ContextFlags"), $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Property({Static:false, Public:false}, "UniqueUserId", $.String);

    $.Property({Static:false, Public:false}, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "IsValidContext", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMutualAuthFlag", $.Boolean);

    $.Property({Static:false, Public:false}, "OSSupportsExtendedProtection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsKerberos", $.Boolean);

    $.Property({Static:false, Public:false}, "ProtocolName", $.String);

    $.Property({Static:false, Public:false}, "ChannelBinding", $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NTAuthentication+InitializeCallbackContext */ 

(function InitializeCallbackContext$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NTAuthentication+InitializeCallbackContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.NTAuthentication"), $.Boolean, 
          $.String, $asm12.TypeRef("System.Net.NetworkCredential"), 
          $.String, $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "thisPtr", $asm12.TypeRef("System.Net.NTAuthentication"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "isServer", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "$package", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "credential", $asm12.TypeRef("System.Net.NetworkCredential"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "spn", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "requestedContextFlags", $asm12.TypeRef("System.Net.ContextFlags"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "channelBinding", $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.AuthIdentity */ 

(function AuthIdentity$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.AuthIdentity", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NtlmClient */ 

(function NtlmClient$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NtlmClient", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ClearSession", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [
          $.String, $asm12.TypeRef("System.Net.WebRequest"), 
          $asm12.TypeRef("System.Net.ICredentials"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanPreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreAuthenticate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Authorization"), [$asm12.TypeRef("System.Net.WebRequest"), $asm12.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm12.TypeRef("System.Net.WebRequest")])
    );

    $.Field({Static:true , Public:false}, "Signature", $.String);

    $.Field({Static:true , Public:false}, "SignatureSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanPreAuthenticate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AuthenticationType", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Net.ISessionAuthenticationModule"), 
      /* 1 */ $asm12.TypeRef("System.Net.IAuthenticationModule")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.IPMulticastRequest */ 

(function IPMulticastRequest$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.IPMulticastRequest", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "MulticastAddress", $.Int32);

    $.Field({Static:false, Public:false}, "InterfaceAddress", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Linger */ 

(function Linger$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Linger", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "OnOff", $.UInt16);

    $.Field({Static:false, Public:false}, "Time", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.WSABuffer */ 

(function WSABuffer$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.WSABuffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Length", $.Int32);

    $.Field({Static:false, Public:false}, "Pointer", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.WSAData */ 

(function WSAData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.WSAData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.AddressInfo */ 

(function AddressInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.AddressInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "ai_flags", $asm12.TypeRef("System.Net.AddressInfoHints"));

    $.Field({Static:false, Public:false}, "ai_family", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Field({Static:false, Public:false}, "ai_addrlen", $.Int32);

    $.Field({Static:false, Public:false}, "ai_canonname", $jsilcore.TypeRef("JSIL.Pointer", [$.SByte]));

    $.Field({Static:false, Public:false}, "ai_addr", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]));

    $.Field({Static:false, Public:false}, "ai_next", $jsilcore.TypeRef("JSIL.Pointer", [$.Type]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.AddressInfoHints */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.AddressInfoHints", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    AI_PASSIVE: 1, 
    AI_CANONNAME: 2, 
    AI_NUMERICHOST: 4, 
    AI_FQDN: 131072, 
  }
);

/* struct System.Net.IPv6MulticastRequest */ 

(function IPv6MulticastRequest$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.IPv6MulticastRequest", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "MulticastAddress", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "InterfaceIndex", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.SocketConstructorFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.SocketConstructorFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    WSA_FLAG_OVERLAPPED: 1, 
    WSA_FLAG_MULTIPOINT_C_ROOT: 2, 
    WSA_FLAG_MULTIPOINT_C_LEAF: 4, 
    WSA_FLAG_MULTIPOINT_D_ROOT: 8, 
    WSA_FLAG_MULTIPOINT_D_LEAF: 16, 
  }
);

/* class System.Net.PrefixLookup */ 

(function PrefixLookup$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.PrefixLookup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Lookup", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Field({Static:false, Public:false}, "capacity", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "lruList", $asm12.TypeRef("System.Collections.Generic.LinkedList`1", [$asm12.TypeRef("System.Net.PrefixLookup+PrefixValuePair")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.PrefixLookup+PrefixValuePair */ 

(function PrefixValuePair$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.PrefixLookup+PrefixValuePair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.IAutoWebProxy */ 

JSIL.MakeInterface(
  "System.Net.IAutoWebProxy", false, [], function ($) {
    $.Method({}, "GetProxies", new JSIL.MethodSignature($asm12.TypeRef("System.Net.ProxyChain"), [$asm12.TypeRef("System.Uri")]));
  }, [$asm12.TypeRef("System.Net.IWebProxy")]);

/* class System.Net.ProxyChain */ 

(function ProxyChain$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ProxyChain", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Destination", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Enumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm12.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpAbortDelegate", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpAbortDelegate"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm12.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetNextProxy", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HttpAbort", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.HttpWebRequest"), $asm12.TypeRef("System.Net.WebException")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_MainEnumerator", $asm12.TypeRef("System.Net.ProxyChain+ProxyEnumerator"));

    $.Field({Static:false, Public:false}, "m_Destination", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_HttpAbortDelegate", $asm12.TypeRef("System.Net.HttpAbortDelegate"));

    $.Property({Static:false, Public:false}, "Enumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm12.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:false}, "Destination", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "HttpAbortDelegate", $asm12.TypeRef("System.Net.HttpAbortDelegate"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm12.TypeRef("System.Uri")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ProxyChain+ProxyEnumerator */ 

(function ProxyEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ProxyChain+ProxyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ProxyChain"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "m_Chain", $asm12.TypeRef("System.Net.ProxyChain"));

    $.Field({Static:false, Public:false}, "m_CurrentIndex", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm12.TypeRef("System.Uri")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ProxyScriptChain */ 

(function ProxyScriptChain$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.ProxyChain"), 
      Name: "System.Net.ProxyScriptChain", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.WebProxy"), $asm12.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetNextProxy", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri")])])
    );

    $.Field({Static:false, Public:false}, "m_Proxy", $asm12.TypeRef("System.Net.WebProxy"));

    $.Field({Static:false, Public:false}, "m_ScriptProxies", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "m_CurrentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_SyncStatus", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.DirectProxy */ 

(function DirectProxy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.ProxyChain"), 
      Name: "System.Net.DirectProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetNextProxy", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Uri")])])
    );

    $.Field({Static:false, Public:false}, "m_ProxyRetrieved", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebProxyDataBuilder */ 

(function WebProxyDataBuilder$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebProxyDataBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Build", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebProxyData"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildInternal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BypassStringEscape", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertRegexReservedChars", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidProxyStringException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.FormatException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseBypassList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ArrayList"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseProtocolProxies", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Hashtable"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseProxyUri", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Uri"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAutoDetectSettings", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAutoProxyUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProxyAndBypassList", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "m_Result", $asm12.TypeRef("System.Net.WebProxyData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.RegBlobWebProxyDataBuilder */ 

(function RegBlobWebProxyDataBuilder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebProxyDataBuilder"), 
      Name: "System.Net.RegBlobWebProxyDataBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.SafeRegistryHandle")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildInternal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRegSettings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_Connectoid", $.String);

    $.Field({Static:false, Public:false}, "m_Registry", $asm12.TypeRef("System.Net.SafeRegistryHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.RequestLifetimeSetter */ 

(function RequestLifetimeSetter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.RequestLifetimeSetter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "Report", 
      JSIL.MethodSignature.Action($.Type)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WinHttpWebProxyBuilder */ 

(function WinHttpWebProxyBuilder$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebProxyDataBuilder"), 
      Name: "System.Net.WinHttpWebProxyBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildInternal", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeAddrInfo */ 

(function SafeFreeAddrInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeFreeAddrInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetAddrInfo", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AddressInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeInternetHandle */ 

(function SafeInternetHandle$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeInternetHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeSspiAuthDataHandle */ 

(function SafeSspiAuthDataHandle$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeSspiAuthDataHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.SecurDll */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.SecurDll", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SECURITY: 0, 
    SECUR32: 1, 
    SCHANNEL: 2, 
  }
);

/* class System.Net.SafeFreeContextBuffer */ 

(function SafeFreeContextBuffer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeFreeContextBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEmptyHandle", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Net.SecurDll")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumeratePackages", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $asm12.TypeRef("System.Net.ContextAttribute"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryContextAttributes_SECURITY", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:true }, "SetContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $asm12.TypeRef("System.Net.ContextAttribute"), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetContextAttributes_SECURITY", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeContextBuffer_SECURITY */ 

(function SafeFreeContextBuffer_SECURITY$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.SafeFreeContextBuffer"), 
      Name: "System.Net.SafeFreeContextBuffer_SECURITY", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeLocalFree */ 

(function SafeLocalFree$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeLocalFree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "LocalAlloc", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.Field({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeGlobalFree */ 

(function SafeGlobalFree$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeGlobalFree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeOverlappedFree */ 

(function SafeOverlappedFree$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeOverlappedFree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Alloc", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Alloc", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Net.SafeCloseSocket")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:false, Public:false}, "_socketHandle", $asm12.TypeRef("System.Net.SafeCloseSocket"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class System.Net.SafeLoadLibrary */ 

(function SafeLoadLibrary$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeLoadLibrary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "LoadLibraryEx", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeCertChain */ 

(function SafeFreeCertChain$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeFreeCertChain", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeCertContext */ 

(function SafeFreeCertContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeFreeCertContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.SSPIHandle */ 

(function SSPIHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.SSPIHandle", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_IsZero", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToInvalid", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "IsZero", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeCredentials */ 

(function SafeFreeCredentials$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Net.SafeFreeCredentials", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $.String, 
          $asm12.TypeRef("System.Net.CredentialUse"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AuthIdentity")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm12.TypeRef("System.Net.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeSspiAuthDataHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $.String, 
          $asm12.TypeRef("System.Net.CredentialUse"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecureCredential")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireDefaultCredential", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $.String, 
          $asm12.TypeRef("System.Net.CredentialUse"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeCredentialReference */ 

(function SafeCredentialReference$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid"), 
      Name: "System.Net.SafeCredentialReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.SafeFreeCredentials"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReference", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Net.SafeFreeCredentials")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_Target", $asm12.TypeRef("System.Net.SafeFreeCredentials"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeCredential_SECURITY */ 

(function SafeFreeCredential_SECURITY$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.SafeFreeCredentials"), 
      Name: "System.Net.SafeFreeCredential_SECURITY", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeDeleteContext */ 

(function SafeDeleteContext$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Net.SafeDeleteContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyControlToken", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteAuthToken", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.String, 
          $asm12.TypeRef("System.Net.ContextFlags"), $asm12.TypeRef("System.Net.Endianness"), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRunAcceptSecurityContext_SECURITY", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $.Type, 
          $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")]), 
          $asm12.TypeRef("System.Net.SafeFreeContextBuffer")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRunInitializeSecurityContext_SECURITY", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $.Type, $asm12.TypeRef("System.Net.SecurityBufferDescriptor"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")]), $asm12.TypeRef("System.Net.SafeFreeContextBuffer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "dummyBytes", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Byte, 1);
      });

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeDeleteContext_SECURITY */ 

(function SafeDeleteContext_SECURITY$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.SafeDeleteContext"), 
      Name: "System.Net.SafeDeleteContext_SECURITY", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeNativeOverlapped */ 

(function SafeNativeOverlapped$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Net.SafeNativeOverlapped", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Threading.NativeOverlapped")]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Zero", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeCloseSocket */ 

(function SafeCloseSocket$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid"), 
      Name: "System.Net.SafeCloseSocket", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Accept", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseAsIs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSocket", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Net.SafeCloseSocket+InnerSafeCloseSocket")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSocket", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.SafeCloseSocket+InnerSafeCloseSocket"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWSASocket", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $asm12.TypeRef("System.Net.Sockets.SocketType"), 
          $asm12.TypeRef("System.Net.Sockets.ProtocolType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerSocket", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.SafeCloseSocket+InnerSafeCloseSocket"))
    );

    $.Field({Static:false, Public:false}, "m_InnerSocket", $asm12.TypeRef("System.Net.SafeCloseSocket+InnerSafeCloseSocket"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeCloseSocket+InnerSafeCloseSocket */ 

(function InnerSafeCloseSocket$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid"), 
      Name: "System.Net.SafeCloseSocket+InnerSafeCloseSocket", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Accept", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BlockingRelease", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWSASocket", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $asm12.TypeRef("System.Net.Sockets.SocketType"), 
          $asm12.TypeRef("System.Net.Sockets.ProtocolType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "tempBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Byte, 1);
      });

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeCloseSocketAndEvent */ 

(function SafeCloseSocketAndEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.SafeCloseSocket"), 
      Name: "System.Net.SafeCloseSocketAndEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteInitialization", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWSASocketWithEvent", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $asm12.TypeRef("System.Net.Sockets.SocketType"), 
          $asm12.TypeRef("System.Net.Sockets.ProtocolType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEventHandle", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.WaitHandle"))
    );

    $.Field({Static:false, Public:false}, "waitHandle", $asm0F.TypeRef("System.Threading.AutoResetEvent"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security");
JSIL.DeclareNamespace("System.Security.Authentication");
JSIL.DeclareNamespace("System.Security.Authentication.ExtendedProtection");
/* class System.Security.Authentication.ExtendedProtection.ChannelBinding */ 

(function ChannelBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Security.Authentication.ExtendedProtection.ChannelBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Size", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeContextBufferChannelBinding */ 

(function SafeFreeContextBufferChannelBinding$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), 
      Name: "System.Net.SafeFreeContextBufferChannelBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEmptyHandle", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Net.SecurDll")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryContextChannelBinding", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurDll"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $asm12.TypeRef("System.Net.ContextAttribute"), $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Net.Bindings")]), 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryContextChannelBinding_SECURITY", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Net.Bindings")]), $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Size", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeFreeContextBufferChannelBinding_SECURITY */ 

(function SafeFreeContextBufferChannelBinding_SECURITY$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.SafeFreeContextBufferChannelBinding"), 
      Name: "System.Net.SafeFreeContextBufferChannelBinding_SECURITY", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeUnlockUrlCacheEntryFile */ 

(function SafeUnlockUrlCacheEntryFile$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeUnlockUrlCacheEntryFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndLockFile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRunGetAndLockFile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Type
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeRegistryHandle */ 

(function SafeRegistryHandle$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeRegistryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "QueryValue", 
      new JSIL.MethodSignature($.UInt32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegCloseKey", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RegNotifyChangeKeyValue", 
      new JSIL.MethodSignature($.UInt32, [
          $.Boolean, $.UInt32, 
          $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RegOpenCurrentUser", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RegOpenKeyEx", 
      new JSIL.MethodSignature($.UInt32, [
          $.IntPtr, $.String, 
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegOpenKeyEx", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.UInt32, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.Field({Static:false, Public:false}, "resClose", $.UInt32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SafeWebSocketHandle */ 

(function SafeWebSocketHandle$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Net.SafeWebSocketHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ScatterGatherBuffers */ 

(function ScatterGatherBuffers$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ScatterGatherBuffers", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateMemoryChunk", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.ScatterGatherBuffers+MemoryChunk"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBuffers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "headChunk", $asm12.TypeRef("System.Net.ScatterGatherBuffers+MemoryChunk"));

    $.Field({Static:false, Public:false}, "currentChunk", $asm12.TypeRef("System.Net.ScatterGatherBuffers+MemoryChunk"));

    $.Field({Static:false, Public:false}, "nextChunkLength", $.Int32);

    $.Field({Static:false, Public:false}, "totalLength", $.Int32);

    $.Field({Static:false, Public:false}, "chunkCount", $.Int32);

    $.Property({Static:false, Public:false}, "Empty", $.Boolean);

    $.Property({Static:false, Public:false}, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.ScatterGatherBuffers+MemoryChunk */ 

(function MemoryChunk$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.ScatterGatherBuffers+MemoryChunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "FreeOffset", $.Int32);

    $.Field({Static:false, Public:false}, "Next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Semaphore */ 

(function Semaphore$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Threading.WaitHandle"), 
      Name: "System.Net.Semaphore", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseSemaphore", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.StringDictionary */ 

(function StringDictionary$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.StringDictionary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AsGenericDictionary", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsValue", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceHashtable", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "contents", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm0F.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm0F.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.StringDictionary+GenericAdapter */ 

(function GenericAdapter$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.StringDictionary+GenericAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.Add", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.String")])]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.String")])]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.String")])]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.String")])]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false}, "m_stringDictionary", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Field({Static:false, Public:false}, "_values", $asm12.TypeRef("System.Collections.Specialized.StringDictionary+GenericAdapter+ICollectionToGenericCollectionAdapter"));

    $.Field({Static:false, Public:false}, "_keys", $asm12.TypeRef("System.Collections.Specialized.StringDictionary+GenericAdapter+ICollectionToGenericCollectionAdapter"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Collections.Specialized.StringDictionary+GenericAdapter+KeyOrValue */ 

JSIL.MakeEnum(
  {
    FullName: "System.Collections.Specialized.StringDictionary+GenericAdapter+KeyOrValue", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Key: 0, 
    Value: 1, 
  }
);

/* class System.Collections.Specialized.StringDictionary+GenericAdapter+ICollectionToGenericCollectionAdapter */ 

(function ICollectionToGenericCollectionAdapter$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.StringDictionary+GenericAdapter+ICollectionToGenericCollectionAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Specialized.StringDictionary"), $asm12.TypeRef("System.Collections.Specialized.StringDictionary+GenericAdapter+KeyOrValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnderlyingCollection", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true }, "ThrowNotSupportedException", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_internal", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Field({Static:false, Public:false}, "_keyOrValue", $asm12.TypeRef("System.Collections.Specialized.StringDictionary+GenericAdapter+KeyOrValue"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.StringDictionary+GenericAdapter+ICollectionToGenericCollectionAdapter+<GetEnumerator>d__14 */ 

(function $lGetEnumerator$gd__14$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.StringDictionary+GenericAdapter+ICollectionToGenericCollectionAdapter+<GetEnumerator>d__14", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.String")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm12.TypeRef("System.Collections.Specialized.StringDictionary+GenericAdapter+ICollectionToGenericCollectionAdapter"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Specialized.StringDictionary+GenericAdapter+<GetEnumerator>d__25 */ 

(function $lGetEnumerator$gd__25$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.StringDictionary+GenericAdapter+<GetEnumerator>d__25", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.get_Current", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.String")])]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm12.TypeRef("System.Collections.Specialized.StringDictionary+GenericAdapter"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.Current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.SpnDictionary */ 

(function SpnDictionary$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Collections.Specialized.StringDictionary"), 
      Name: "System.Net.SpnDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckCopyToArguments", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsValue", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCanonicalKey", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGet", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SpnToken"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSet", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Net.SpnToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "m_SyncTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm0F.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm0F.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SpnDictionary+ValueCollection */ 

(function ValueCollection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SpnDictionary+ValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.SpnDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SpnDictionary+ValueCollection+<GetEnumerator>d__9 */ 

(function $lGetEnumerator$gd__9$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SpnDictionary+ValueCollection+<GetEnumerator>d__9", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm12.TypeRef("System.Net.SpnDictionary+ValueCollection"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.SpnDictionary+<GetEnumerator>d__23 */ 

(function $lGetEnumerator$gd__23$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SpnDictionary+<GetEnumerator>d__23", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm12.TypeRef("System.Net.SpnDictionary"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.SpnToken */ 

(function SpnToken$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SpnToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTrusted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Spn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false}, "IsTrusted", $.Boolean);

    $.Property({Static:false, Public:false}, "Spn", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SSPIWrapper */ 

(function SSPIWrapper$Members () {
  var $, $thisType;






















  JSIL.MakeStaticClass("System.Net.SSPIWrapper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeFreeCredentials"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $asm12.TypeRef("System.Net.ContextFlags"), 
          $asm12.TypeRef("System.Net.Endianness"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeFreeCredentials"), [
          $asm12.TypeRef("System.Net.SSPIInterface"), $.String, 
          $asm12.TypeRef("System.Net.CredentialUse"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.AuthIdentity")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeFreeCredentials"), [
          $asm12.TypeRef("System.Net.SSPIInterface"), $.String, 
          $asm12.TypeRef("System.Net.CredentialUse"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeSspiAuthDataHandle")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeFreeCredentials"), [
          $asm12.TypeRef("System.Net.SSPIInterface"), $.String, 
          $asm12.TypeRef("System.Net.CredentialUse"), $asm12.TypeRef("System.Net.SecureCredential")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireDefaultCredential", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeFreeCredentials"), [
          $asm12.TypeRef("System.Net.SSPIInterface"), $.String, 
          $asm12.TypeRef("System.Net.CredentialUse")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ApplyAlertToken", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), 
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $asm12.TypeRef("System.Net.Security.TlsAlertType"), 
          $asm12.TypeRef("System.Net.Security.TlsAlertMessage")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyControlToken", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteAuthToken", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DecryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncryptDecryptHelper", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIWrapper+OP"), $asm12.TypeRef("System.Net.SSPIInterface"), 
          $asm12.TypeRef("System.Net.SafeDeleteContext"), $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerateSecurityPackages", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityPackageInfoClass")]), [$asm12.TypeRef("System.Net.SSPIInterface")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVerifyPackageInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityPackageInfoClass"), [$asm12.TypeRef("System.Net.SSPIInterface"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVerifyPackageInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityPackageInfoClass"), [
          $asm12.TypeRef("System.Net.SSPIInterface"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeFreeCredentials")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $.String, 
          $asm12.TypeRef("System.Net.ContextFlags"), $asm12.TypeRef("System.Net.Endianness"), 
          $asm12.TypeRef("System.Net.SecurityBuffer"), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeFreeCredentials"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeDeleteContext")]), $.String, 
          $asm12.TypeRef("System.Net.ContextFlags"), $asm12.TypeRef("System.Net.Endianness"), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SecurityBuffer")]), $asm12.TypeRef("System.Net.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.ContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Object, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $asm12.TypeRef("System.Net.ContextAttribute")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Object, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $asm12.TypeRef("System.Net.ContextAttribute"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryContextChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeFreeContextBufferChannelBinding"), [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $asm12.TypeRef("System.Net.ContextAttribute")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SSPIInterface"), $asm12.TypeRef("System.Net.SafeDeleteContext"), 
          $asm12.TypeRef("System.Net.ContextAttribute"), $.Object
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.SSPIWrapper+OP */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.SSPIWrapper+OP", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Encrypt: 1, 
    Decrypt: 2, 
    MakeSignature: 3, 
    VerifySignature: 4, 
  }
);

/* class System.Net.StreamSizes */ 

(function StreamSizes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.StreamSizes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true }, "header", $.Int32);

    $.Field({Static:false, Public:true }, "trailer", $.Int32);

    $.Field({Static:false, Public:true }, "maximumMessage", $.Int32);

    $.Field({Static:false, Public:true }, "buffersCount", $.Int32);

    $.Field({Static:false, Public:true }, "blockSize", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SizeOf", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SecSizes */ 

(function SecSizes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SecSizes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "MaxToken", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "MaxSignature", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "BlockSize", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "SecurityTrailer", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SizeOf", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.SchProtocols */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.SchProtocols", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    UniClient: -2147483648, 
    ClientMask: -2147480918, 
    Unified: -1073741824, 
    Zero: 0, 
    PctServer: 1, 
    PctClient: 2, 
    Pct: 3, 
    Ssl2Server: 4, 
    Ssl2Client: 8, 
    Ssl2: 12, 
    Ssl3Server: 16, 
    Ssl3Client: 32, 
    Ssl3: 48, 
    Tls10Server: 64, 
    Tls10Client: 128, 
    Tls10: 192, 
    Ssl3Tls: 240, 
    Tls11Server: 256, 
    Tls11Client: 512, 
    Tls11: 768, 
    Tls12Server: 1024, 
    Tls12Client: 2048, 
    Tls12: 3072, 
    UniServer: 1073741824, 
    ServerMask: 1073743189, 
  }
);

/* class System.Net.SslConnectionInfo */ 

(function SslConnectionInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SslConnectionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Protocol", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataCipherAlg", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataKeySize", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataHashAlg", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataHashKeySize", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "KeyExchangeAlg", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "KeyExchKeySize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.NegotiationInfo */ 

(function NegotiationInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.NegotiationInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NegotiationStateOffest", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NegotiationInfoClass */ 

(function NegotiationInfoClass$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NegotiationInfoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int32])
    );

    $.Field({Static:false, Public:false}, "AuthenticationPackage", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.SecurityPackageInfo */ 

(function SecurityPackageInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.SecurityPackageInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NameOffest", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.SecurityPackageInfoClass */ 

(function SecurityPackageInfoClass$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.SecurityPackageInfoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "Capabilities", $.Int32);

    $.Field({Static:false, Public:false}, "Version", $.Int16);

    $.Field({Static:false, Public:false}, "RPCID", $.Int16);

    $.Field({Static:false, Public:false}, "MaxToken", $.Int32);

    $.Field({Static:false, Public:false}, "Name", $.String);

    $.Field({Static:false, Public:false}, "Comment", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Bindings */ 

(function Bindings$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Bindings", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TimerThread */ 

(function TimerThread$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Net.TimerThread", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateQueue", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.TimerThread+Queue"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOrCreateQueue", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.TimerThread+Queue"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTickBetween", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm0F.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Prod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StopTimerThread", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ThreadProc", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_Queues", $asm12.TypeRef("System.Collections.Generic.LinkedList`1", [$asm0F.TypeRef("System.WeakReference")]));

    $.Field({Static:true , Public:false}, "s_NewQueues", $asm12.TypeRef("System.Collections.Generic.LinkedList`1", [$asm0F.TypeRef("System.WeakReference")]));

    $.Field({Static:true , Public:false}, "s_ThreadState", $.Int32, 0);

    $.Field({Static:true , Public:false}, "s_ThreadReadyEvent", $asm0F.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:true , Public:false}, "s_ThreadShutdownEvent", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:true , Public:false}, "s_ThreadEvents", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Threading.WaitHandle")]));

    $.Field({Static:true , Public:false}, "s_CacheScanIteration", $.Int32);

    $.Field({Static:true , Public:false}, "s_QueuesCache", $asm0F.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TimerThread+Queue */ 

(function Queue$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.TimerThread+Queue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTimer", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TimerThread+Timer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateTimer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.TimerThread+Timer"), [$asm12.TypeRef("System.Net.TimerThread+Callback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Duration", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_DurationMilliseconds", $.Int32);

    $.Property({Static:false, Public:false}, "Duration", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TimerThread+Timer */ 

(function Timer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.TimerThread+Timer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Duration", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Expiration", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StartTime", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_StartTimeMilliseconds", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_DurationMilliseconds", $.Int32);

    $.Property({Static:false, Public:false}, "Duration", $.Int32);

    $.Property({Static:false, Public:false}, "StartTime", $.Int32);

    $.Property({Static:false, Public:false}, "Expiration", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "HasExpired", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.TimerThread+Callback */ 

JSIL.MakeDelegate("System.Net.TimerThread+Callback", false, [], 
  new JSIL.MethodSignature(null, [
      $asm12.TypeRef("System.Net.TimerThread+Timer"), $asm0F.TypeRef("System.Int32"), 
      $asm0F.TypeRef("System.Object")
    ]));

/* class System.Net.TimerThread+TimerQueue */ 

(function TimerQueue$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.TimerThread+Queue"), 
      Name: "System.Net.TimerThread+TimerQueue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateTimer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.TimerThread+Timer"), [$asm12.TypeRef("System.Net.TimerThread+Callback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fire", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Timers", $asm12.TypeRef("System.Net.TimerThread+TimerNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TimerThread+InfiniteTimerQueue */ 

(function InfiniteTimerQueue$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.TimerThread+Queue"), 
      Name: "System.Net.TimerThread+InfiniteTimerQueue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateTimer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.TimerThread+Timer"), [$asm12.TypeRef("System.Net.TimerThread+Callback"), $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TimerThread+TimerNode */ 

(function TimerNode$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.TimerThread+Timer"), 
      Name: "System.Net.TimerThread+TimerNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.TimerThread+Callback"), $.Object, 
          $.Int32, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Fire", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prev", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Prev", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "m_TimerState", $asm12.TypeRef("System.Net.TimerThread+TimerNode+TimerState"));

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Field({Static:false, Public:false}, "prev", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "HasExpired", $.Boolean);

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "Prev", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.TimerThread+TimerNode+TimerState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.TimerThread+TimerNode+TimerState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Ready: 0, 
    Fired: 1, 
    Cancelled: 2, 
    Sentinel: 3, 
  }
);

/* class System.Net.TimerThread+InfiniteTimer */ 

(function InfiniteTimer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.TimerThread+Timer"), 
      Name: "System.Net.TimerThread+InfiniteTimer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "cancelled", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "HasExpired", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Net.Sockets");
/* class System.Net.Sockets.NetworkStream */ 

(function NetworkStream$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.Sockets.NetworkStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Sockets.Socket"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginMultipleWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToNotSocketOwner", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndMultipleWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connected", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSocket", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Socket", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitNetworkStream", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Sockets.Socket"), $asm0F.TypeRef("System.IO.FileAccess")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAbortSocket", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MultipleWrite", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Poll", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm12.TypeRef("System.Net.Sockets.SelectMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PollRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSocketTimeoutOption", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.SocketShutdown"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnsafeBeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnsafeBeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_StreamSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Field({Static:false, Public:false}, "m_Readable", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Writeable", $.Boolean);

    $.Field({Static:false, Public:false}, "m_OwnsSocket", $.Boolean);

    $.Field({Static:false, Public:false}, "m_CloseTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_CleanedUp", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "m_CurrentReadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_CurrentWriteTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "Socket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Property({Static:false, Public:false}, "InternalSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "Connected", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TlsStream */ 

(function TlsStream$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Sockets.NetworkStream"), 
      Name: "System.Net.TlsStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.Sockets.NetworkStream"), 
          $.Boolean, $asm12.TypeRef("System.Security.Authentication.SslProtocols"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"), $asm12.TypeRef("System.Net.ServicePoint"), 
          $.Object, $asm0F.TypeRef("System.Threading.ExecutionContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginMultipleWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallProcessAuthentication", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteIO", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteIOCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndMultipleWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientCertificate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExceptionStatus", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebExceptionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBindingKind")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MultipleWrite", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAuthentication", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.LazyAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResumeIO", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.BufferAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResumeIOWorker", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartWakeupPendingIO", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnsafeBeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnsafeBeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WakeupPendingIO", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_Worker", $asm12.TypeRef("System.Net.Security.SslState"));

    $.Field({Static:false, Public:false}, "m_ExceptionStatus", $asm12.TypeRef("System.Net.WebExceptionStatus"));

    $.Field({Static:false, Public:false}, "m_DestinationHost", $.String);

    $.Field({Static:false, Public:false}, "m_ClientCertificates", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Field({Static:true , Public:false}, "_CompleteIOCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "CompleteIOCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false}, "_ExecutionContext", $asm0F.TypeRef("System.Threading.ExecutionContext"));

    $.Field({Static:false, Public:false}, "m_CheckCertificateRevocationList", $.Boolean);

    $.Field({Static:false, Public:false}, "m_SslProtocols", $asm12.TypeRef("System.Security.Authentication.SslProtocols"));

    $.Field({Static:false, Public:false}, "m_PendingIO", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "ExceptionStatus", $asm12.TypeRef("System.Net.WebExceptionStatus"));

    $.Property({Static:false, Public:true }, "ClientCertificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Win32 */ 

(function Win32$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Net.Win32", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false}, "OverlappedInternalHighOffset", $.Int32);

    $.Field({Static:true , Public:false}, "OverlappedOffsetOffset", $.Int32);

    $.Field({Static:true , Public:false}, "OverlappedOffsetHighOffset", $.Int32);

    $.Field({Static:true , Public:false}, "OverlappedhEventOffset", $.Int32);

    $.Field({Static:true , Public:false}, "OverlappedSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.FixedSizeReader */ 

(function FixedSizeReader$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.FixedSizeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AsyncReadPacket", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCompletionBeforeNextRead", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadPacket", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartReading", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_ReadCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ReadCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_Transport", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_Request", $asm12.TypeRef("System.Net.AsyncProtocolRequest"));

    $.Field({Static:false, Public:false}, "_TotalRead", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.BufferAsyncResult */ 

(function BufferAsyncResult$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.BufferAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), 
          $.Object, $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Object, $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Boolean, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.Field({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "Offset", $.Int32);

    $.Field({Static:false, Public:true }, "Count", $.Int32);

    $.Field({Static:false, Public:true }, "IsWrite", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.AsyncProtocolCallback */ 

JSIL.MakeDelegate("System.Net.AsyncProtocolCallback", false, [], 
  JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest")));

/* class System.Net.AsyncProtocolRequest */ 

(function AsyncProtocolRequest$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.AsyncProtocolRequest", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteRequest", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteUser", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteUser", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteWithError", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUserCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MustCompleteSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetNextRequest", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.AsyncProtocolCallback")
        ])
    );

    $.Field({Static:false, Public:false}, "_Callback", $asm12.TypeRef("System.Net.AsyncProtocolCallback"));

    $.Field({Static:false, Public:false}, "_CompletionStatus", $.Int32);

    $.Field({Static:false, Public:true }, "UserAsyncResult", $asm12.TypeRef("System.Net.LazyAsyncResult"));

    $.Field({Static:false, Public:true }, "Result", $.Int32);

    $.Field({Static:false, Public:true }, "AsyncState", $.Object);

    $.Field({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "Offset", $.Int32);

    $.Field({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "AsyncObject", $.Object);

    $.Property({Static:false, Public:true }, "MustCompleteSynchronously", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUserCompleted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.DelegatedStream */ 

(function DelegatedStream$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.DelegatedStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "stream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "netStream", $asm12.TypeRef("System.Net.Sockets.NetworkStream"));

    $.Property({Static:false, Public:false}, "BaseStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Base64Stream */ 

(function Base64Stream$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.DelegatedStream"), 
      Name: "System.Net.Base64Stream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Mime.Base64WriteStateInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecodeBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncodeBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushInternal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Base64Stream+ReadStateInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Mime.Base64WriteStateInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEncodedString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:false}, "base64DecodeMap", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "base64EncodeMap", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "lineLength", $.Int32);

    $.Field({Static:false, Public:false}, "readState", $asm12.TypeRef("System.Net.Base64Stream+ReadStateInfo"));

    $.Field({Static:false, Public:false}, "writeState", $asm12.TypeRef("System.Net.Mime.Base64WriteStateInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:false}, "ReadState", $asm12.TypeRef("System.Net.Base64Stream+ReadStateInfo"));

    $.Property({Static:false, Public:false}, "WriteState", $asm12.TypeRef("System.Net.Mime.Base64WriteStateInfo"));

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.Mime.IEncodableStream")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Base64Stream+ReadAsyncResult */ 

(function ReadAsyncResult$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.Base64Stream+ReadAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Base64Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteRead", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "End", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnRead", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "parent", $asm12.TypeRef("System.Net.Base64Stream"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "read", $.Int32);

    $.Field({Static:true , Public:false}, "onRead", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnRead", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Base64Stream+WriteAsyncResult */ 

(function WriteAsyncResult$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.Base64Stream+WriteAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Base64Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "End", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "parent", $asm12.TypeRef("System.Net.Base64Stream"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:true , Public:false}, "onWrite", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnWrite", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false}, "written", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Base64Stream+ReadStateInfo */ 

(function ReadStateInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Base64Stream+ReadStateInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pos", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Val", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Pos", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Val", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "val", $.Byte);

    $.Field({Static:false, Public:false}, "pos", $.Byte);

    $.Property({Static:false, Public:false}, "Val", $.Byte);

    $.Property({Static:false, Public:false}, "Pos", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.BufferedReadStream */ 

(function BufferedReadStream$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.DelegatedStream"), 
      Name: "System.Net.BufferedReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "storedBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "storedLength", $.Int32);

    $.Field({Static:false, Public:false}, "storedOffset", $.Int32);

    $.Field({Static:false, Public:false}, "readMore", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.BufferedReadStream+ReadAsyncResult */ 

(function ReadAsyncResult$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.BufferedReadStream+ReadAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.BufferedReadStream"), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "End", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnRead", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "parent", $asm12.TypeRef("System.Net.BufferedReadStream"));

    $.Field({Static:false, Public:false}, "read", $.Int32);

    $.Field({Static:true , Public:false}, "onRead", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnRead", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.TrackingValidationObjectDictionary */ 

(function TrackingValidationObjectDictionary$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };





  function TrackingValidationObjectDictionary_get_IsChanged () {
    return this.TrackingValidationObjectDictionary$IsChanged$value;
  }; 




  function TrackingValidationObjectDictionary_set_IsChanged (value) {
    this.TrackingValidationObjectDictionary$IsChanged$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Collections.Specialized.StringDictionary"), 
      Name: "System.Net.TrackingValidationObjectDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm12.TypeRef("System.Net.TrackingValidationObjectDictionary+ValidateAndParseValue")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_IsChanged", 
      JSIL.MethodSignature.Return($.Boolean), 
      TrackingValidationObjectDictionary_get_IsChanged
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PersistValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:false}, "set_IsChanged", 
      JSIL.MethodSignature.Action($.Boolean), 
      TrackingValidationObjectDictionary_set_IsChanged
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "internalObjects", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "validators", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm12.TypeRef("System.Net.TrackingValidationObjectDictionary+ValidateAndParseValue")]));

    $.Field({Static:false, Public:false}, "TrackingValidationObjectDictionary$IsChanged$value", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "IsChanged", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.TrackingValidationObjectDictionary+ValidateAndParseValue */ 

JSIL.MakeDelegate("System.Net.TrackingValidationObjectDictionary+ValidateAndParseValue", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Object"), [$asm0F.TypeRef("System.Object")]));

JSIL.DeclareNamespace("System.Net.WebSockets");
/* class System.Net.WebSockets.WebSocket */ 

(function WebSocket$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebSockets.WebSocket", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebSockets.WebSocketState"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStateTerminal", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.WebSockets.WebSocketState")])
    );


    function WebSocket__cctor () {
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      WebSocket__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm12.TypeRef("System.Net.WebSockets.WebSocketState"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebSockets.WebSocketBase */ 

(function WebSocketBase$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.WebSockets.WebSocket"), 
      Name: "System.Net.WebSockets.WebSocketBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanUp", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LoggingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SessionHandle", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebSockets.WebSocketState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseLocks", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TakeLocks", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Field({Static:true , Public:false}, "s_LoggingEnabled", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_CloseOutstandingOperationHelper", $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+OutstandingOperationHelper"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_CloseOutputOutstandingOperationHelper", $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+OutstandingOperationHelper"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ReceiveOutstandingOperationHelper", $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+OutstandingOperationHelper"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_SendOutstandingOperationHelper", $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+OutstandingOperationHelper"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_InnerStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_InnerStreamAsWebSocketStream", $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+IWebSocketStream"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ThisLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_InternalBuffer", $asm12.TypeRef("System.Net.WebSockets.WebSocketBuffer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_KeepAliveTracker", $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+KeepAliveTracker"));

    $.Field({Static:false, Public:false}, "m_CleanedUp", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "m_IsDisposed", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "m_State", $asm12.TypeRef("System.Net.WebSockets.WebSocketState"));

    $.Property({Static:true , Public:false}, "LoggingEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm12.TypeRef("System.Net.WebSockets.WebSocketState"));

    $.Property({Static:false, Public:false, Virtual:true }, "SessionHandle", $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebSockets.WebSocketBase+KeepAliveTracker */ 

(function KeepAliveTracker$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebSockets.WebSocketBase+KeepAliveTracker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebSockets.WebSocketBase+OutstandingOperationHelper */ 

(function OutstandingOperationHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebSockets.WebSocketBase+OutstandingOperationHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "CancelIO", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_OperationsOutstanding", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_CancellationTokenSource", $asm0F.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "m_IsDisposed", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ThisLock", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.WebSockets.WebSocketBase+IWebSocketStream */ 

JSIL.MakeInterface(
  "System.Net.WebSockets.WebSocketBase+IWebSocketStream", false, [], function ($) {
    $.Method({}, "Abort", JSIL.MethodSignature.Void);
  }, []);

/* class System.Net.WebSockets.WebSocketBuffer */ 

(function WebSocketBuffer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.WebSockets.WebSocketBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "CleanUp", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebSockets.WebSocketState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleasePinnedSendBuffer", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_SizeOfUInt", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_SizeOfBool", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_PropertyBufferSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_GCHandle", $asm0F.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Field({Static:false, Public:false}, "m_PinnedSendBuffer", $asm0F.TypeRef("System.ArraySegment`1", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_PinnedSendBufferHandle", $asm0F.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Field({Static:false, Public:false}, "m_StateWhenDisposing", $.Int32);

    $.Field({Static:false, Public:false}, "m_SendBufferState", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebSockets.WebSocketConnectionStream */ 

(function WebSocketConnectionStream$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.BufferedReadStream"), 
      Name: "System.Net.WebSockets.WebSocketConnectionStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.ConnectStream"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelWebSocketConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CanHandleException", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConsumeConnectStreamBuffer", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.ConnectStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "OnCancel", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_CanHandleException", $asm0F.TypeRef("System.Func`2", [$asm0F.TypeRef("System.Exception"), $.Boolean]), function ($pi) {
        return $asm0F.System.Func$b2.Of($asm0F.System.Exception, $asm0F.System.Boolean).New(null, null, new JSIL.MethodPointerInfo($thisType, "CanHandleException", new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Exception")]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_OnCancel", $asm0F.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm0F.System.Action$b1.Of($asm0F.System.Object).New(null, null, new JSIL.MethodPointerInfo($thisType, "OnCancel", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_OnCancelWebSocketConnection", $asm0F.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm0F.System.Action$b1.Of($asm0F.System.Object).New(null, null, new JSIL.MethodPointerInfo($asm12.System.Net.WebSockets.WebSocketConnectionStream_WebSocketConnection, "OnCancel", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_NetworkStreamType", $asm0F.TypeRef("System.Type"), function ($pi) {
        return $asm12.System.Net.Sockets.NetworkStream.__Type__;
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ConnectStream", $asm12.TypeRef("System.Net.ConnectStream"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ConnectionGroupName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_IsFastPathAllowed", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_CloseConnectStreamLock", $.Object);

    $.Field({Static:false, Public:false}, "m_InOpaqueMode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+IWebSocketStream")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebSockets.WebSocketConnectionStream+WebSocketConnection */ 

(function WebSocketConnection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.DelegatedStream"), 
      Name: "System.Net.WebSockets.WebSocketConnectionStream+WebSocketConnection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Connection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BeginMultipleWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0F.TypeRef("System.ArraySegment`1", [$.Byte])]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndMultipleWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIOCompletionTraceMsg", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnCancel", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "OnReadCompleted", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWriteCompleted", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_OnReadCompleted", $asm0F.TypeRef("System.EventHandler`1", [$asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), function ($pi) {
        return $asm0F.System.EventHandler$b1.Of($asm12.System.Net.Sockets.SocketAsyncEventArgs).New(null, null, new JSIL.MethodPointerInfo($thisType, "OnReadCompleted", new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_OnWriteCompleted", $asm0F.TypeRef("System.EventHandler`1", [$asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), function ($pi) {
        return $asm0F.System.EventHandler$b1.Of($asm12.System.Net.Sockets.SocketAsyncEventArgs).New(null, null, new JSIL.MethodPointerInfo($thisType, "OnWriteCompleted", new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_BeginMultipleWrite", $asm0F.TypeRef("System.Func`4", [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0F.TypeRef("System.ArraySegment`1", [$.Byte])]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object, $asm0F.TypeRef("System.IAsyncResult")
        ]), function ($pi) {
        return $asm0F.System.Func$b4.Of(
            $asm0F.System.Collections.Generic.IList$b1.Of($asm0F.System.ArraySegment$b1.Of($asm0F.System.Byte)), $asm0F.System.AsyncCallback, 
            $asm0F.System.Object, $asm0F.System.IAsyncResult
        ).New(null, null, new JSIL.MethodPointerInfo($thisType, "BeginMultipleWrite", new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
                $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0F.TypeRef("System.ArraySegment`1", [$.Byte])]), $asm0F.TypeRef("System.AsyncCallback"), 
                $.Object
              ]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EndMultipleWrite", $asm0F.TypeRef("System.Action`1", [$asm0F.TypeRef("System.IAsyncResult")]), function ($pi) {
        return $asm0F.System.Action$b1.Of($asm0F.System.IAsyncResult).New(null, null, new JSIL.MethodPointerInfo($thisType, "EndMultipleWrite", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_InnerStream", $asm12.TypeRef("System.Net.Connection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_SupportsMultipleWrites", $.Boolean);

    $.Field({Static:false, Public:false}, "m_InOpaqueMode", $.Boolean);

    $.Field({Static:false, Public:false}, "m_WriteEventArgs", $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs"));

    $.Field({Static:false, Public:false}, "m_ReadEventArgs", $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs"));

    $.Field({Static:false, Public:false}, "m_WriteTaskCompletionSource", $asm0F.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:false}, "m_ReadTaskCompletionSource", $asm0F.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_CleanedUp", $.Int32);

    $.Field({Static:false, Public:false}, "m_IgnoreReadError", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.WebSockets.WebSocketBase+IWebSocketStream")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.WebSockets.WebSocketError */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebSockets.WebSocketError", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    InvalidMessageType: 1, 
    Faulted: 2, 
    NativeError: 3, 
    NotAWebSocket: 4, 
    UnsupportedVersion: 5, 
    UnsupportedProtocol: 6, 
    HeaderError: 7, 
    ConnectionClosedPrematurely: 8, 
    InvalidState: 9, 
  }
);

/* class System.ComponentModel.Win32Exception */ 

(function Win32Exception$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Runtime.InteropServices.ExternalException"), 
      Name: "System.ComponentModel.Win32Exception", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorMessage", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetErrorMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm0F.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "nativeErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "NativeErrorCode", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebSockets.WebSocketException */ 

(function WebSocketException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Win32Exception"), 
      Name: "System.Net.WebSockets.WebSocketException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebSockets.WebSocketError"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.WebSockets.WebSocketError"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorMessage", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Net.WebSockets.WebSocketError")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetErrorCodeOnError", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_WebSocketErrorCode", $asm12.TypeRef("System.Net.WebSockets.WebSocketError"));

    $.Property({Static:false, Public:true , Virtual:true }, "ErrorCode", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.WebSockets.WebSocketHelpers */ 

(function WebSocketHelpers$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Net.WebSockets.WebSocketHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyPayload", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.ArraySegment`1", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfConnectionAborted", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowPlatformNotSupportedException_WSPC", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EmptyPayload", $asm0F.TypeRef("System.ArraySegment`1", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_KeyGenerator", $asm0F.TypeRef("System.Random"));

    $.Field({Static:true , Public:false}, "s_HttpSysSupportsWebSockets", $asm0F.TypeRef("System.Boolean"), function ($pi) {
        return $asm12.System.Net.ComNetOS.IsWin8orLater;
      });


    function WebSocketHelpers__cctor () {
      $thisType.s_EmptyPayload = new ($asm0F.System.ArraySegment$b1.Of($asm0F.System.Byte)) ();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      WebSocketHelpers__cctor
    );

    $.Property({Static:true , Public:false}, "EmptyPayload", $asm0F.TypeRef("System.ArraySegment`1", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Net.WebSockets.WebSocketProtocolComponent */ 

(function WebSocketProtocolComponent$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("System.Net.WebSockets.WebSocketProtocolComponent", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DrainActionQueue", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+ActionQueue")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSupportedVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalAndVerifyHttpHeader", 
      new JSIL.MethodSignature(null, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+HttpHeader")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalHttpHeaders", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+HttpHeader")]), [$.IntPtr, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Succeeded", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowOnError", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "WebSocketAbortHandle", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    );

    $.PInvokeMethod({Static:true , Public:false}, "WebSocketAbortHandle_Raw", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")), 
      {
        Module: "websocket.dll", 
        EntryPoint: "WebSocketAbortHandle", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WebSocketBeginClientHandshake_Raw", 
      new JSIL.MethodSignature($.Int32, [
          $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.IntPtr, 
          $.UInt32, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+HttpHeader")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "websocket.dll", 
        EntryPoint: "WebSocketBeginClientHandshake", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WebSocketCompleteAction_Raw", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.IntPtr, 
          $.UInt32
        ]), 
      {
        Module: "websocket.dll", 
        EntryPoint: "WebSocketCompleteAction", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WebSocketCreateClientHandle_Raw", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+Property")]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SafeWebSocketHandle")])
        ]), 
      {
        Module: "websocket.dll", 
        EntryPoint: "WebSocketCreateClientHandle", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WebSocketGetAction_Raw", 
      new JSIL.MethodSignature($.Int32, [
          $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+ActionQueue"), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+Buffer")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+Action")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+BufferType")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "websocket.dll", 
        EntryPoint: "WebSocketGetAction", 
      }
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_DllFileName", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_DummyWebsocketKeyBase64", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_WebSocketDllHandle", $asm12.TypeRef("System.Net.SafeLoadLibrary"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_SupportedVersion", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_InitialClientRequestHeaders", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+HttpHeader")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ServerFakeRequestHeaders", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WebSockets.WebSocketProtocolComponent+HttpHeader")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.WebSockets.WebSocketProtocolComponent+Action */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebSockets.WebSocketProtocolComponent+Action", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NoAction: 0, 
    SendToNetwork: 1, 
    IndicateSendComplete: 2, 
    ReceiveFromNetwork: 3, 
    IndicateReceiveComplete: 4, 
  }
);

/* enum System.Net.WebSockets.WebSocketProtocolComponent+BufferType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebSockets.WebSocketProtocolComponent+BufferType", 
    BaseType: $asm0F.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    UTF8Message: 2147483648, 
    UTF8Fragment: 2147483649, 
    BinaryMessage: 2147483650, 
    BinaryFragment: 2147483651, 
    Close: 2147483652, 
    PingPong: 2147483653, 
    UnsolicitedPong: 2147483654, 
  }
);

/* enum System.Net.WebSockets.WebSocketProtocolComponent+ActionQueue */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebSockets.WebSocketProtocolComponent+ActionQueue", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Send: 1, 
    Receive: 2, 
  }
);

/* struct System.Net.WebSockets.WebSocketProtocolComponent+Property */ 

(function Property$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.WebSockets.WebSocketProtocolComponent+Property", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.WebSockets.WebSocketProtocolComponent+Buffer */ 

(function Buffer$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.WebSockets.WebSocketProtocolComponent+Buffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.WebSockets.WebSocketProtocolComponent+HttpHeader */ 

(function HttpHeader$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.WebSockets.WebSocketProtocolComponent+HttpHeader", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Name", $.String);

    $.Field({Static:false, Public:false}, "NameLength", $.UInt32);

    $.Field({Static:false, Public:false}, "Value", $.String);

    $.Field({Static:false, Public:false}, "ValueLength", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.WebSockets.WebSocketState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.WebSockets.WebSocketState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Connecting: 1, 
    Open: 2, 
    CloseSent: 3, 
    CloseReceived: 4, 
    Closed: 5, 
    Aborted: 6, 
  }
);

JSIL.DeclareNamespace("System.Net.Mime");
/* class System.Net.Mime.WriteStateInfoBase */ 

(function WriteStateInfoBase$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Mime.WriteStateInfoBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Parameter(0, "bytes", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "AppendCRLF", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendFooter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendHeader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSpaceInBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLineLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Footer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FooterLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Header", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxLineLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_header", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_footer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_maxLineLength", $.Int32);

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_currentLineLength", $.Int32);

    $.Field({Static:false, Public:false}, "_currentBufferUsed", $.Int32);

    $.Property({Static:false, Public:false}, "FooterLength", $.Int32);

    $.Property({Static:false, Public:false}, "Footer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Header", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.Property({Static:false, Public:false}, "CurrentLineLength", $.Int32);

    $.Property({Static:false, Public:false}, "MaxLineLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Mime.Base64WriteStateInfo */ 

(function Base64WriteStateInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };



  function Base64WriteStateInfo_get_LastBits () {
    return this.Base64WriteStateInfo$LastBits$value;
  }; 

  function Base64WriteStateInfo_get_Padding () {
    return this.Base64WriteStateInfo$Padding$value;
  }; 

  function Base64WriteStateInfo_set_LastBits (value) {
    this.Base64WriteStateInfo$LastBits$value = (value | 0);
  }; 

  function Base64WriteStateInfo_set_Padding (value) {
    this.Base64WriteStateInfo$Padding$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Mime.WriteStateInfoBase"), 
      Name: "System.Net.Mime.Base64WriteStateInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Method({Static:false, Public:false}, "get_LastBits", 
      JSIL.MethodSignature.Return($.Byte), 
      Base64WriteStateInfo_get_LastBits
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Padding", 
      JSIL.MethodSignature.Return($.Int32), 
      Base64WriteStateInfo_get_Padding
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LastBits", 
      JSIL.MethodSignature.Action($.Byte), 
      Base64WriteStateInfo_set_LastBits
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Padding", 
      JSIL.MethodSignature.Action($.Int32), 
      Base64WriteStateInfo_set_Padding
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Base64WriteStateInfo$Padding$value", $.Int32)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Base64WriteStateInfo$LastBits$value", $.Byte)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Padding", $.Int32);

    $.Property({Static:false, Public:false}, "LastBits", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Mime.ContentDisposition */ 

(function ContentDisposition$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Mime.ContentDisposition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Encode", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeToBuffer", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.Text.StringBuilder"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "dispositionType", $.String);

    $.Field({Static:false, Public:false}, "parameters", $asm12.TypeRef("System.Net.TrackingValidationObjectDictionary"));

    $.Field({Static:false, Public:false}, "isChanged", $.Boolean);

    $.Field({Static:false, Public:false}, "isPersisted", $.Boolean);

    $.Field({Static:false, Public:false}, "disposition", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "dateParser", $asm12.TypeRef("System.Net.TrackingValidationObjectDictionary+ValidateAndParseValue"), function ($pi) {
        return $asm12.System.Net.TrackingValidationObjectDictionary_ValidateAndParseValue.New($asm12.System.Net.Mime.ContentDisposition_$l$gc.$l$g9, null, new JSIL.MethodPointerInfo($asm12.System.Net.Mime.ContentDisposition_$l$gc, "$l_cctor$gb__13_0", new JSIL.MethodSignature($.Object, [$.Object]), false, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "longParser", $asm12.TypeRef("System.Net.TrackingValidationObjectDictionary+ValidateAndParseValue"), function ($pi) {
        return $asm12.System.Net.TrackingValidationObjectDictionary_ValidateAndParseValue.New($asm12.System.Net.Mime.ContentDisposition_$l$gc.$l$g9, null, new JSIL.MethodPointerInfo($asm12.System.Net.Mime.ContentDisposition_$l$gc, "$l_cctor$gb__13_1", new JSIL.MethodSignature($.Object, [$.Object]), false, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "validators", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm12.TypeRef("System.Net.TrackingValidationObjectDictionary+ValidateAndParseValue")]));

    $.Property({Static:false, Public:true }, "Parameters", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Mime.ContentDisposition+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Mime.ContentDisposition+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__13_0", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__13_1", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Mime.EncodedStreamFactory */ 

(function EncodedStreamFactory$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Mime.EncodedStreamFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFooter", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateHeader", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0F.TypeRef("System.Text.Encoding"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultMaxLineLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEncoderForHeader", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Mime.IEncodableStream"), [
          $asm0F.TypeRef("System.Text.Encoding"), $.Boolean, 
          $.Int32
        ])
    );

    $.Property({Static:true , Public:false}, "DefaultMaxLineLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.Mime.IEncodableStream */ 

JSIL.MakeInterface(
  "System.Net.Mime.IEncodableStream", false, [], function ($) {
    $.Method({}, "EncodeBytes", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetEncodedString", JSIL.MethodSignature.Return($.String));
  }, []);

/* class System.Net.Mime.MailBnfHelper */ 

(function MailBnfHelper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Net.Mime.MailBnfHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CheckForUnicode", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTokenOrQuotedString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.Text.StringBuilder"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasCROrLF", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFWSAt", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.Field({Static:true , Public:false}, "Atext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "Qtext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "Dtext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "Ftext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "Ttext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false}, "Ctext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Boolean, 128);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "Ascii7bitMaxValue", $.Int32, 127);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Quote", $.Char, "\"");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Space", $.Char, " ");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Tab", $.Char, "\t");

    $.Field({Static:true , Public:false, ReadOnly:true }, "CR", $.Char, "\r");

    $.Field({Static:true , Public:false, ReadOnly:true }, "LF", $.Char, "\n");

    $.Field({Static:true , Public:false, ReadOnly:true }, "StartComment", $.Char, "(");

    $.Field({Static:true , Public:false, ReadOnly:true }, "EndComment", $.Char, ")");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Backslash", $.Char, "\\");

    $.Field({Static:true , Public:false, ReadOnly:true }, "At", $.Char, "@");

    $.Field({Static:true , Public:false, ReadOnly:true }, "EndAngleBracket", $.Char, ">");

    $.Field({Static:true , Public:false, ReadOnly:true }, "StartAngleBracket", $.Char, "<");

    $.Field({Static:true , Public:false, ReadOnly:true }, "StartSquareBracket", $.Char, "[");

    $.Field({Static:true , Public:false, ReadOnly:true }, "EndSquareBracket", $.Char, "]");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Comma", $.Char, ",");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Dot", $.Char, ".");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Whitespace", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.Char]));

    $.Field({Static:true , Public:false}, "s_months", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Mime.MimeBasePart */ 

(function MimeBasePart$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Mime.MimeBasePart", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DecodeEncoding", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Text.Encoding"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeHeaderValue", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm0F.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeHeaderValue", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm0F.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAscii", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldUseBase64Encoding", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Text.Encoding")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Mime.QEncodedStream */ 

(function QEncodedStream$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.DelegatedStream"), 
      Name: "System.Net.Mime.QEncodedStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Mime.WriteStateInfoBase"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncodeBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushInternal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Mime.WriteStateInfoBase"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEncodedString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:false}, "hexDecodeMap", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "hexEncodeMap", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "writeState", $asm12.TypeRef("System.Net.Mime.WriteStateInfoBase"));

    $.Property({Static:false, Public:false}, "WriteState", $asm12.TypeRef("System.Net.Mime.WriteStateInfoBase"));

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.Mime.IEncodableStream")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Mime.QEncodedStream+WriteAsyncResult */ 

(function WriteAsyncResult$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.Mime.QEncodedStream+WriteAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Mime.QEncodedStream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "End", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "parent", $asm12.TypeRef("System.Net.Mime.QEncodedStream"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:true , Public:false}, "onWrite", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "OnWrite", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false}, "written", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Mime.SmtpDateTime */ 

(function SmtpDateTime$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Mime.SmtpDateTime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "FormatDate", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeShortHandLookups", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm0F.TypeRef("System.TimeSpan")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.DateTime"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TimeSpanToOffset", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryParseTimeZoneString", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.TimeSpan")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAndGetTimeZoneOffsetValues", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateTimeZoneShortHandValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "validDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "allowedWhiteSpaceChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "timeZoneOffsetLookup", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm0F.TypeRef("System.TimeSpan")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "timeSpanMaxTicks", $.Int64, 3599400000000);

    $.Field({Static:true , Public:false, ReadOnly:true }, "offsetMaxValue", $.Int32, 9959);

    $.Field({Static:false, Public:false, ReadOnly:true }, "date", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "timeZone", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "unknownTimeZone", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Net.NetworkInformation");
/* enum System.Net.NetworkInformation.DuplicateAddressDetectionState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.NetworkInformation.DuplicateAddressDetectionState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Invalid: 0, 
    Tentative: 1, 
    Duplicate: 2, 
    Deprecated: 3, 
    Preferred: 4, 
  }
);

/* class System.Net.NetworkInformation.IPAddressInformation */ 

(function IPAddressInformation$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkInformation.IPAddressInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Address", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Address", $asm12.TypeRef("System.Net.IPAddress"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkInformation.IPGlobalProperties */ 

(function IPGlobalProperties$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkInformation.IPGlobalProperties", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DomainName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalGetIPGlobalProperties", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "DomainName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HostName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkInformation.UnicastIPAddressInformation */ 

(function UnicastIPAddressInformation$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.NetworkInformation.IPAddressInformation"), 
      Name: "System.Net.NetworkInformation.UnicastIPAddressInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkInformation.UnicastIPAddressInformationCollection */ 

(function UnicastIPAddressInformationCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkInformation.UnicastIPAddressInformationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAdd", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "addresses", $asm0F.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.NetworkInformation.AdapterAddressFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.NetworkInformation.AdapterAddressFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    DnsEligible: 1, 
    Transient: 2, 
  }
);

/* struct System.Net.NetworkInformation.FIXED_INFO */ 

(function FIXED_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.NetworkInformation.FIXED_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.NetworkInformation.IpSocketAddress */ 

(function IpSocketAddress$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.NetworkInformation.IpSocketAddress", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "MarshalIPAddress", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.Field({Static:false, Public:false}, "address", $.IntPtr);

    $.Field({Static:false, Public:false}, "addressLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.NetworkInformation.IpAdapterUnicastAddress */ 

(function IpAdapterUnicastAddress$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.NetworkInformation.IpAdapterUnicastAddress", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "flags", $asm12.TypeRef("System.Net.NetworkInformation.AdapterAddressFlags"));

    $.Field({Static:false, Public:false}, "next", $.IntPtr);

    $.Field({Static:false, Public:false}, "address", $asm12.TypeRef("System.Net.NetworkInformation.IpSocketAddress"));

    $.Field({Static:false, Public:false}, "prefixOrigin", $asm12.TypeRef("System.Net.NetworkInformation.PrefixOrigin"));

    $.Field({Static:false, Public:false}, "suffixOrigin", $asm12.TypeRef("System.Net.NetworkInformation.SuffixOrigin"));

    $.Field({Static:false, Public:false}, "dadState", $asm12.TypeRef("System.Net.NetworkInformation.DuplicateAddressDetectionState"));

    $.Field({Static:false, Public:false}, "validLifetime", $.UInt32);

    $.Field({Static:false, Public:false}, "preferredLifetime", $.UInt32);

    $.Field({Static:false, Public:false}, "leaseLifetime", $.UInt32);

    $.Field({Static:false, Public:false}, "prefixLength", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.NetworkInformation.IpAdapterAddresses */ 

(function IpAdapterAddresses$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.NetworkInformation.IpAdapterAddresses", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "next", $.IntPtr);

    $.Field({Static:false, Public:false}, "firstUnicastAddress", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkInformation.UnsafeNetInfoNativeMethods */ 

(function UnsafeNetInfoNativeMethods$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Net.NetworkInformation.UnsafeNetInfoNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetAdaptersAddresses", 
      new JSIL.MethodSignature($.UInt32, [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $.UInt32, 
          $.IntPtr, $asm12.TypeRef("System.Net.SafeLocalFree"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "iphlpapi.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNetworkParams", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Net.SafeLocalFree"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "iphlpapi.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.NetworkInformation.StartIPOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.NetworkInformation.StartIPOptions", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    StartIPv4: 1, 
    StartIPv6: 2, 
    Both: 3, 
  }
);

/* class System.Net.NetworkInformation.NetworkChange */ 

(function NetworkChange$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.NetworkInformation.NetworkChange", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_CanListenForNetworkChanges", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "globalLock", $.Object);

    $.Property({Static:true , Public:false}, "CanListenForNetworkChanges", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkInformation.NetworkInformationException */ 

(function NetworkInformationException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Win32Exception"), 
      Name: "System.Net.NetworkInformation.NetworkInformationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ErrorCode", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.NetworkInformation.PrefixOrigin */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.NetworkInformation.PrefixOrigin", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Other: 0, 
    Manual: 1, 
    WellKnown: 2, 
    Dhcp: 3, 
    RouterAdvertisement: 4, 
  }
);

/* enum System.Net.NetworkInformation.SuffixOrigin */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.NetworkInformation.SuffixOrigin", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Other: 0, 
    Manual: 1, 
    WellKnown: 2, 
    OriginDhcp: 3, 
    LinkLayerAddress: 4, 
    Random: 5, 
  }
);

/* class System.Net.NetworkInformation.SystemIPAddressInformation */ 

(function SystemIPAddressInformation$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.NetworkInformation.IPAddressInformation"), 
      Name: "System.Net.NetworkInformation.SystemIPAddressInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.IPAddress"), $asm12.TypeRef("System.Net.NetworkInformation.AdapterAddressFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Address", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.Field({Static:false, Public:false}, "address", $asm12.TypeRef("System.Net.IPAddress"));

    $.Field({Static:false, Public:false}, "transient", $.Boolean);

    $.Field({Static:false, Public:false}, "dnsEligible", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Address", $asm12.TypeRef("System.Net.IPAddress"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkInformation.SystemIPGlobalProperties */ 

(function SystemIPGlobalProperties$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.NetworkInformation.IPGlobalProperties"), 
      Name: "System.Net.NetworkInformation.SystemIPGlobalProperties", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DomainName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FixedInfo", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.NetworkInformation.FixedInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFixedInfo", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.NetworkInformation.FixedInfo"))
    );

    $.Field({Static:true , Public:false}, "hostName", $asm0F.TypeRef("System.String"), null);

    $.Field({Static:true , Public:false}, "domainName", $asm0F.TypeRef("System.String"), null);

    $.Field({Static:true , Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:false}, "FixedInfo", $asm12.TypeRef("System.Net.NetworkInformation.FixedInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "HostName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DomainName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.NetworkInformation.FixedInfo */ 

(function FixedInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.NetworkInformation.FixedInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkInformation.FIXED_INFO"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DomainName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false}, "HostName", $.String);

    $.Property({Static:false, Public:false}, "DomainName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.NetworkInformation.SystemUnicastIPAddressInformation */ 

(function SystemUnicastIPAddressInformation$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformation"), 
      Name: "System.Net.NetworkInformation.SystemUnicastIPAddressInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.NetworkInformation.IpAdapterUnicastAddress"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Address", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalUnicastIpAddressInformationCollection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.NetworkInformation.UnicastIPAddressInformationCollection"), [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrefixLengthToSubnetMask", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPAddress"), [$.Byte, $asm12.TypeRef("System.Net.Sockets.AddressFamily")])
    );

    $.Field({Static:false, Public:false}, "dhcpLeaseLifetime", $.Int64);

    $.Field({Static:false, Public:false}, "innerInfo", $asm12.TypeRef("System.Net.NetworkInformation.SystemIPAddressInformation"));

    $.Field({Static:false, Public:false}, "ipv4Mask", $asm12.TypeRef("System.Net.IPAddress"));

    $.Field({Static:false, Public:false}, "prefixOrigin", $asm12.TypeRef("System.Net.NetworkInformation.PrefixOrigin"));

    $.Field({Static:false, Public:false}, "suffixOrigin", $asm12.TypeRef("System.Net.NetworkInformation.SuffixOrigin"));

    $.Field({Static:false, Public:false}, "dadState", $asm12.TypeRef("System.Net.NetworkInformation.DuplicateAddressDetectionState"));

    $.Field({Static:false, Public:false}, "validLifetime", $.UInt32);

    $.Field({Static:false, Public:false}, "preferredLifetime", $.UInt32);

    $.Field({Static:false, Public:false}, "prefixLength", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Address", $asm12.TypeRef("System.Net.IPAddress"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.RequestCacheValidator */ 

(function RequestCacheValidator$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.RequestCacheValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0F.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValidator", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FailRequest", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebExceptionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FetchCacheEntry", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.RequestCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FetchRequest", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.WebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FetchResponse", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebResponse"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheEntry", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheFreshnessStatus", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheStreamLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheStreamOffset", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Policy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Request", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Response", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebResponse"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrictCacheErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnspecifiedMaxAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Uri", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationStatus", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RevalidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheStream", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheStreamLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheStreamOffset", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFreshnessStatus", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValidationStatus", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UpdateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateFreshness", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.Field({Static:false, Public:false}, "_Request", $asm12.TypeRef("System.Net.WebRequest"));

    $.Field({Static:false, Public:false}, "_Response", $asm12.TypeRef("System.Net.WebResponse"));

    $.Field({Static:false, Public:false}, "_CacheStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_Policy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Field({Static:false, Public:false}, "_Uri", $asm12.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_CacheKey", $.String);

    $.Field({Static:false, Public:false}, "_CacheEntry", $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"));

    $.Field({Static:false, Public:false}, "_ResponseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_ValidationStatus", $asm12.TypeRef("System.Net.Cache.CacheValidationStatus"));

    $.Field({Static:false, Public:false}, "_CacheFreshnessStatus", $asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"));

    $.Field({Static:false, Public:false}, "_CacheStreamOffset", $.Int64);

    $.Field({Static:false, Public:false}, "_CacheStreamLength", $.Int64);

    $.Field({Static:false, Public:false}, "_StrictCacheErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "_UnspecifiedMaxAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "StrictCacheErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "UnspecifiedMaxAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "Uri", $asm12.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "Request", $asm12.TypeRef("System.Net.WebRequest"));

    $.Property({Static:false, Public:false}, "Response", $asm12.TypeRef("System.Net.WebResponse"));

    $.Property({Static:false, Public:false}, "Policy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Property({Static:false, Public:false}, "ResponseCount", $.Int32);

    $.Property({Static:false, Public:false}, "ValidationStatus", $asm12.TypeRef("System.Net.Cache.CacheValidationStatus"));

    $.Property({Static:false, Public:false}, "CacheFreshnessStatus", $asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"));

    $.Property({Static:false, Public:false}, "CacheEntry", $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"));

    $.Property({Static:false, Public:false}, "CacheStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "CacheStreamOffset", $.Int64);

    $.Property({Static:false, Public:false}, "CacheStreamLength", $.Int64);

    $.Property({Static:false, Public:false}, "CacheKey", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.HttpRequestCacheValidator */ 

(function HttpRequestCacheValidator$Members () {
  var $, $thisType;















































































  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.RequestCacheValidator"), 
      Name: "System.Net.Cache.HttpRequestCacheValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0F.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCacheHeaders", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSystemMeta", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValidator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FetchCacheControl", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "FetchHeaderValues", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinallyUpdateCacheEntry", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheCacheControl", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.ResponseCacheControl"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheDate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheDontUpdateHeaders", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheEntityLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheExpires", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheHeaders", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheHttpVersion", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheLastModified", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheMaxAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheStatusCode", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.HttpStatusCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheStatusDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HeuristicExpiration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Policy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.HttpRequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestIfHeader1", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestIfHeader2", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestMethod", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.HttpMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestRangeCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestRangeUser", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseCacheControl", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.ResponseCacheControl"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseDate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseEntityLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseExpires", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseLastModified", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseRangeEnd", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseRangeStart", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemMeta", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseHeaderValues", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator+ParseCallback"), 
          $asm0F.TypeRef("System.Collections.IList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNameValues", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Collections.Specialized.NameValueCollection"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStatusLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseValuesCallbackMethod", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Collections.IList")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseWarningsCallbackMethod", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $asm0F.TypeRef("System.Collections.IList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWarnings_1xx", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RevalidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheAge", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheCacheControl", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.ResponseCacheControl"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheDate", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheDontUpdateHeaders", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheEntityLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheExpires", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheHeaders", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.WebHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheHttpVersion", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheLastModified", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheMaxAge", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheStatusCode", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.HttpStatusCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CacheStatusDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HeuristicExpiration", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequestIfHeader1", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequestIfHeader2", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequestMethod", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.HttpMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequestRangeCache", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequestRangeUser", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequestValidator1", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequestValidator2", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseAge", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseCacheControl", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.ResponseCacheControl"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseDate", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseEntityLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseExpires", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseLastModified", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseRangeEnd", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResponseRangeStart", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SystemMeta", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UpdateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateStringCollection", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Collections.Specialized.StringCollection"), $asm12.TypeRef("System.Collections.Specialized.NameValueCollection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateFreshness", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ZeroPrivateVars", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_StatusCode", $asm12.TypeRef("System.Net.HttpStatusCode"));

    $.Field({Static:false, Public:false}, "m_StatusDescription", $.String);

    $.Field({Static:false, Public:false}, "m_HttpVersion", $asm0F.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "m_Headers", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ParseWarningsCallback", $asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator+ParseCallback"), function ($pi) {
        return $asm12.System.Net.Cache.HttpRequestCacheValidator_ParseCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ParseWarningsCallbackMethod", new JSIL.MethodSignature(null, [
                $.String, $.Int32, 
                $.Int32, $asm0F.TypeRef("System.Collections.IList")
              ]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ParseValuesCallback", $asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator+ParseCallback"), function ($pi) {
        return $asm12.System.Net.Cache.HttpRequestCacheValidator_ParseCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ParseValuesCallbackMethod", new JSIL.MethodSignature(null, [
                $.String, $.Int32, 
                $.Int32, $asm0F.TypeRef("System.Collections.IList")
              ]), true, false));
      });

    $.Property({Static:false, Public:false}, "CacheStatusCode", $asm12.TypeRef("System.Net.HttpStatusCode"));

    $.Property({Static:false, Public:false}, "CacheStatusDescription", $.String);

    $.Property({Static:false, Public:false}, "CacheHttpVersion", $asm0F.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "CacheHeaders", $asm12.TypeRef("System.Net.WebHeaderCollection"));

    $.Property({Static:false, Public:false}, "Policy", $asm12.TypeRef("System.Net.Cache.HttpRequestCachePolicy"));

    $.Property({Static:false, Public:false}, "SystemMeta", $asm12.TypeRef("System.Collections.Specialized.NameValueCollection"));

    $.Property({Static:false, Public:false}, "RequestMethod", $asm12.TypeRef("System.Net.Cache.HttpMethod"));

    $.Property({Static:false, Public:false}, "RequestRangeCache", $.Boolean);

    $.Property({Static:false, Public:false}, "RequestRangeUser", $.Boolean);

    $.Property({Static:false, Public:false}, "RequestIfHeader1", $.String);

    $.Property({Static:false, Public:false}, "RequestValidator1", $.String);

    $.Property({Static:false, Public:false}, "RequestIfHeader2", $.String);

    $.Property({Static:false, Public:false}, "RequestValidator2", $.String);

    $.Property({Static:false, Public:false}, "CacheDontUpdateHeaders", $.Boolean);

    $.Property({Static:false, Public:false}, "CacheDate", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "CacheExpires", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "CacheLastModified", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "CacheEntityLength", $.Int64);

    $.Property({Static:false, Public:false}, "CacheAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "CacheMaxAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "HeuristicExpiration", $.Boolean);

    $.Property({Static:false, Public:false}, "CacheCacheControl", $asm12.TypeRef("System.Net.Cache.ResponseCacheControl"));

    $.Property({Static:false, Public:false}, "ResponseDate", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "ResponseExpires", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "ResponseLastModified", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "ResponseEntityLength", $.Int64);

    $.Property({Static:false, Public:false}, "ResponseRangeStart", $.Int64);

    $.Property({Static:false, Public:false}, "ResponseRangeEnd", $.Int64);

    $.Property({Static:false, Public:false}, "ResponseAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "ResponseCacheControl", $asm12.TypeRef("System.Net.Cache.ResponseCacheControl"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Cache.HttpRequestCacheValidator+RequestVars */ 

(function RequestVars$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Cache.HttpRequestCacheValidator+RequestVars", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Cache.HttpRequestCacheValidator+Vars */ 

(function Vars$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Cache.HttpRequestCacheValidator+Vars", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.Cache.HttpRequestCacheValidator+ParseCallback */ 

JSIL.MakeDelegate("System.Net.Cache.HttpRequestCacheValidator+ParseCallback", false, [], 
  new JSIL.MethodSignature(null, [
      $asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Int32"), 
      $asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Collections.IList")
    ]));

/* enum System.Net.Cache.HttpMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache.HttpMethod", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Other: -1, 
    Head: 0, 
    Get: 1, 
    Post: 2, 
    Put: 3, 
    Delete: 4, 
    Options: 5, 
    Trace: 6, 
    Connect: 7, 
  }
);

/* class System.Net.Cache.ResponseCacheControl */ 

(function ResponseCacheControl$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.ResponseCacheControl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNotEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false}, "IsNotEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.FtpRequestCacheValidator */ 

(function FtpRequestCacheValidator$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"), 
      Name: "System.Net.Cache.FtpRequestCacheValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0F.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValidator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpProxyMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Policy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RevalidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryConditionalRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UpdateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateCacheEntryOnRevalidate", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateCacheEntryOnStore", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateFreshness", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ZeroPrivateVars", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:false}, "HttpProxyMode", $.Boolean);

    $.Property({Static:false, Public:false}, "Policy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.RequestCacheEntry */ 

(function RequestCacheEntry$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.RequestCacheEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Cache._WinInetCache+Entry"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EntryMetadata", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpiresUtc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HitCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPartialEntry", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrivateEntry", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastAccessedUtc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastModifiedUtc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastSynchronizedUtc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxStale", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamSize", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemMetadata", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsageCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EntryMetadata", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ExpiresUtc", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HitCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsPartialEntry", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsPrivateEntry", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LastAccessedUtc", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LastModifiedUtc", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LastSynchronizedUtc", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MaxStale", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamSize", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SystemMetadata", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UsageCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_IsPrivateEntry", $.Boolean);

    $.Field({Static:false, Public:false}, "m_StreamSize", $.Int64);

    $.Field({Static:false, Public:false}, "m_ExpiresUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_HitCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_LastAccessedUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_LastModifiedUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_LastSynchronizedUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_MaxStale", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_UsageCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_IsPartialEntry", $.Boolean);

    $.Field({Static:false, Public:false}, "m_EntryMetadata", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "m_SystemMetadata", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:false}, "IsPrivateEntry", $.Boolean);

    $.Property({Static:false, Public:false}, "StreamSize", $.Int64);

    $.Property({Static:false, Public:false}, "ExpiresUtc", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "LastAccessedUtc", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "LastModifiedUtc", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "LastSynchronizedUtc", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "MaxStale", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "HitCount", $.Int32);

    $.Property({Static:false, Public:false}, "UsageCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsPartialEntry", $.Boolean);

    $.Property({Static:false, Public:false}, "EntryMetadata", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:false}, "SystemMetadata", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.RequestCacheManager */ 

(function RequestCacheManager$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.RequestCacheManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_IsCachingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.RequestCacheBinding"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadConfigSettings", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_CacheConfigSettings", $asm12.TypeRef("System.Net.Configuration.RequestCachingSectionInternal"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_BypassCacheBinding", $asm12.TypeRef("System.Net.Cache.RequestCacheBinding"));

    $.Field({Static:true , Public:false}, "s_DefaultGlobalBinding", $asm12.TypeRef("System.Net.Cache.RequestCacheBinding"));

    $.Field({Static:true , Public:false}, "s_DefaultHttpBinding", $asm12.TypeRef("System.Net.Cache.RequestCacheBinding"));

    $.Field({Static:true , Public:false}, "s_DefaultFtpBinding", $asm12.TypeRef("System.Net.Cache.RequestCacheBinding"));

    $.Property({Static:true , Public:false}, "IsCachingEnabled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.RequestCacheBinding */ 

(function RequestCacheBinding$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.RequestCacheBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Cache.RequestCache"), $asm12.TypeRef("System.Net.Cache.RequestCacheValidator"), 
          $asm12.TypeRef("System.Net.Cache.RequestCachePolicy")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Cache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Policy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Validator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheValidator"))
    );

    $.Field({Static:false, Public:false}, "m_RequestCache", $asm12.TypeRef("System.Net.Cache.RequestCache"));

    $.Field({Static:false, Public:false}, "m_CacheValidator", $asm12.TypeRef("System.Net.Cache.RequestCacheValidator"));

    $.Field({Static:false, Public:false}, "m_Policy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Property({Static:false, Public:false}, "Cache", $asm12.TypeRef("System.Net.Cache.RequestCache"));

    $.Property({Static:false, Public:false}, "Validator", $asm12.TypeRef("System.Net.Cache.RequestCacheValidator"));

    $.Property({Static:false, Public:false}, "Policy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Cache.RequestCacheLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache.RequestCacheLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    BypassCache: 1, 
    CacheOnly: 2, 
    CacheIfAvailable: 3, 
    Revalidate: 4, 
    Reload: 5, 
    NoCacheNoStore: 6, 
  }
);

/* class System.Net.Cache.RequestCachePolicy */ 

(function RequestCachePolicy$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.RequestCachePolicy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.RequestCacheLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_Level", $asm12.TypeRef("System.Net.Cache.RequestCacheLevel"));

    $.Property({Static:false, Public:true }, "Level", $asm12.TypeRef("System.Net.Cache.RequestCacheLevel"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Cache.HttpRequestCacheLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache.HttpRequestCacheLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    BypassCache: 1, 
    CacheOnly: 2, 
    CacheIfAvailable: 3, 
    Revalidate: 4, 
    Reload: 5, 
    NoCacheNoStore: 6, 
    CacheOrNextCacheOnly: 7, 
    Refresh: 8, 
  }
);

/* enum System.Net.Cache.HttpCacheAgeControl */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache.HttpCacheAgeControl", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    MinFresh: 1, 
    MaxAge: 2, 
    MaxAgeAndMinFresh: 3, 
    MaxStale: 4, 
    MaxAgeAndMaxStale: 6, 
  }
);

/* class System.Net.Cache.HttpRequestCachePolicy */ 

(function HttpRequestCachePolicy$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"), 
      Name: "System.Net.Cache.HttpRequestCachePolicy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.HttpRequestCacheLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Cache.HttpCacheAgeControl"), $asm0F.TypeRef("System.TimeSpan"), 
          $asm0F.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheSyncDate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalCacheSyncDateUtc", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.HttpRequestCacheLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxStale", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinFresh", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MapLevel", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.RequestCacheLevel"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "BypassCache", $.Type);

    $.Field({Static:false, Public:false}, "m_Level", $asm12.TypeRef("System.Net.Cache.HttpRequestCacheLevel"));

    $.Field({Static:false, Public:false}, "m_LastSyncDateUtc", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_MaxAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_MinFresh", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_MaxStale", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Level", $asm12.TypeRef("System.Net.Cache.HttpRequestCacheLevel"));

    $.Property({Static:false, Public:true }, "CacheSyncDate", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "InternalCacheSyncDateUtc", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "MaxAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MinFresh", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MaxStale", $asm0F.TypeRef("System.TimeSpan"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Cache.CacheFreshnessStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache.CacheFreshnessStatus", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Undefined: 0, 
    Fresh: 1, 
    Stale: 2, 
  }
);

/* enum System.Net.Cache.CacheValidationStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache.CacheValidationStatus", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DoNotUseCache: 0, 
    Fail: 1, 
    DoNotTakeFromCache: 2, 
    RetryResponseFromCache: 3, 
    RetryResponseFromServer: 4, 
    ReturnCachedResponse: 5, 
    CombineCachedAndServerResponse: 6, 
    CacheResponse: 7, 
    UpdateResponseInformation: 8, 
    RemoveFromCache: 9, 
    DoNotUpdateCache: 10, 
    Continue: 11, 
  }
);

/* class System.Net.Cache._WinInetCache */ 

(function _WinInetCache$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("System.Net.Cache._WinInetCache", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Commit", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [$asm12.TypeRef("System.Net.Cache._WinInetCache+Entry")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFileName", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [$asm12.TypeRef("System.Net.Cache._WinInetCache+Entry")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EntryFixup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [
          $asm12.TypeRef("System.Net.Cache._WinInetCache+Entry"), $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Net.Cache._WinInetCache+EntryBuffer")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEntryBufferString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Void")]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEntryHeaders", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [
          $asm12.TypeRef("System.Net.Cache._WinInetCache+Entry"), $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Net.Cache._WinInetCache+EntryBuffer")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupFile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeUnlockUrlCacheEntryFile"), [$asm12.TypeRef("System.Net.Cache._WinInetCache+Entry")])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [$asm12.TypeRef("System.Net.Cache._WinInetCache+Entry")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Remove", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [$asm12.TypeRef("System.Net.Cache._WinInetCache+Entry")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Update", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache._WinInetCache+Status"), [$asm12.TypeRef("System.Net.Cache._WinInetCache+Entry"), $asm12.TypeRef("System.Net.Cache._WinInetCache+Entry_FC")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Cache._WinInetCache+EntryType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache._WinInetCache+EntryType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Edited: 8, 
    TrackOffline: 16, 
    TrackOnline: 32, 
    NormalEntry: 65, 
    StickyEntry: 68, 
    Sparse: 65536, 
    Cookie: 1048576, 
    UrlHistory: 2097152, 
  }
);

/* enum System.Net.Cache._WinInetCache+Entry_FC */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache._WinInetCache+Entry_FC", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Attribute: 4, 
    Hitrate: 16, 
    Modtime: 64, 
    Exptime: 128, 
    Acctime: 256, 
    Synctime: 512, 
    Headerinfo: 1024, 
    ExemptDelta: 2048, 
  }
);

/* enum System.Net.Cache._WinInetCache+Status */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache._WinInetCache+Status", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    FileNotFound: 2, 
    NotEnoughStorage: 8, 
    SharingViolation: 32, 
    InvalidParameter: 87, 
    InsufficientBuffer: 122, 
    NoMoreItems: 259, 
    Warnings: 16777216, 
    FatalErrors: 16781312, 
    CorruptedHeaders: 16781313, 
    InternalError: 16781314, 
  }
);

/* struct System.Net.Cache._WinInetCache+FILETIME */ 

(function FILETIME$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Cache._WinInetCache+FILETIME", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLong", 
      JSIL.MethodSignature.Return($.Int64)
    );


    function FILETIME__cctor () {
      $thisType.Zero = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      FILETIME__cctor
    );

    $.Property({Static:false, Public:true }, "IsNull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Cache._WinInetCache+EntryBuffer */ 

(function EntryBuffer$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Cache._WinInetCache+EntryBuffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true }, "MarshalSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Cache._WinInetCache+EntryBuffer+Rsv */ 

(function Rsv$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Cache._WinInetCache+EntryBuffer+Rsv", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache._WinInetCache+Entry */ 

(function Entry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache._WinInetCache+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.BaseWrapperStream */ 

(function BaseWrapperStream$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.Cache.BaseWrapperStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WrappedStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrackRequestLifetime", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "m_WrappedStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "WrappedStream", $asm0F.TypeRef("System.IO.Stream"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.CombinedReadStream */ 

(function CombinedReadStream$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.BaseWrapperStream"), 
      Name: "System.Net.Cache.CombinedReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $asm0F.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm12.TypeRef("System.Net.CloseExState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_HeadStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_HeadEOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.CombinedReadStream+InnerAsyncResult */ 

(function InnerAsyncResult$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.Cache.CombinedReadStream+InnerAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0F.TypeRef("System.AsyncCallback"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "Offset", $.Int32);

    $.Field({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.ForwardingReadStream */ 

(function ForwardingReadStream$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.BaseWrapperStream"), 
      Name: "System.Net.Cache.ForwardingReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm0F.TypeRef("System.IO.Stream"), 
          $.Int64, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm12.TypeRef("System.Net.CloseExState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadComplete", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_ShadowStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_BytesToSkip", $.Int64);

    $.Field({Static:false, Public:false}, "m_ThrowOnWriteError", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.ForwardingReadStream+InnerAsyncResult */ 

(function InnerAsyncResult$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.LazyAsyncResult"), 
      Name: "System.Net.Cache.ForwardingReadStream+InnerAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0F.TypeRef("System.AsyncCallback"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "Offset", $.Int32);

    $.Field({Static:false, Public:true }, "Count", $.Int32);

    $.Field({Static:false, Public:true }, "IsWriteCompletion", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.MetadataUpdateStream */ 

(function MetadataUpdateStream$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.BaseWrapperStream"), 
      Name: "System.Net.Cache.MetadataUpdateStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.Net.Cache.RequestCache"), 
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm12.TypeRef("System.Net.CloseExState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_Cache", $asm12.TypeRef("System.Net.Cache.RequestCache"));

    $.Field({Static:false, Public:false}, "m_Key", $.String);

    $.Field({Static:false, Public:false}, "m_Expires", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_LastModified", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_LastSynchronized", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_MaxStale", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_EntryMetadata", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "m_SystemMetadata", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "m_IsStrictCacheErrors", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.RangeStream */ 

(function RangeStream$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.BaseWrapperStream"), 
      Name: "System.Net.Cache.RangeStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm12.TypeRef("System.Net.CloseExState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.ICloseEx.CloseEx", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.CloseExState"))
    )
      .Overrides($asm12.TypeRef("System.Net.ICloseEx"), "CloseEx");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_Offset", $.Int64);

    $.Field({Static:false, Public:false}, "m_Size", $.Int64);

    $.Field({Static:false, Public:false}, "m_Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm12.TypeRef("System.Net.ICloseEx")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.RequestCacheProtocol */ 

(function RequestCacheProtocol$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.RequestCacheProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Cache.RequestCache"), $asm12.TypeRef("System.Net.Cache.RequestCacheValidator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRetrieveBeforeSubmit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRetrieveOnResponse", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUpdateOnResponse", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCacheRemoval", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCacheFresh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtocolException", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtocolStatus", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseStreamLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Validator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRetrieveStatus", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Uri"), $asm12.TypeRef("System.Net.WebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRevalidateStatus", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.WebResponse"), $asm0F.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpdateStatus", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.WebResponse"), $asm0F.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RevalidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFreshness", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.RequestCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateResponse", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"))
    );

    $.Field({Static:false, Public:false}, "_ProtocolStatus", $asm12.TypeRef("System.Net.Cache.CacheValidationStatus"));

    $.Field({Static:false, Public:false}, "_ProtocolException", $asm0F.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_ResponseStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_ResponseStreamLength", $.Int64);

    $.Field({Static:false, Public:false}, "_Validator", $asm12.TypeRef("System.Net.Cache.RequestCacheValidator"));

    $.Field({Static:false, Public:false}, "_RequestCache", $asm12.TypeRef("System.Net.Cache.RequestCache"));

    $.Field({Static:false, Public:false}, "_IsCacheFresh", $.Boolean);

    $.Field({Static:false, Public:false}, "_CanTakeNewRequest", $.Boolean);

    $.Property({Static:false, Public:false}, "ProtocolStatus", $asm12.TypeRef("System.Net.Cache.CacheValidationStatus"));

    $.Property({Static:false, Public:false}, "ProtocolException", $asm0F.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "ResponseStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "ResponseStreamLength", $.Int64);

    $.Property({Static:false, Public:false}, "Validator", $asm12.TypeRef("System.Net.Cache.RequestCacheValidator"));

    $.Property({Static:false, Public:false}, "IsCacheFresh", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.Rfc2616 */ 

(function Rfc2616$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Cache.Rfc2616", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "OnUpdateCache", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnValidateCache", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnValidateFreshness", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnValidateRequest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnValidateResponse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Cache.Rfc2616+TriState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Cache.Rfc2616+TriState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Valid: 1, 
    Invalid: 2, 
  }
);

/* class System.Net.Cache.Rfc2616+Common */ 

(function Common$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("System.Net.Cache.Rfc2616+Common", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AsciiLettersNoCaseEqual", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForRangeRequest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.Rfc2616+TriState"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ComputeFreshness", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheFreshnessStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Construct200ok", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Construct206PartialContent", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstructConditionalRequest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstructUnconditionalRefreshRequest", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytesRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUpdateCache", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.Rfc2616+TriState"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"), $asm12.TypeRef("System.Net.HttpWebResponse")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnValidateRequest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReplaceOrUpdateCacheHeaders", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"), $asm12.TypeRef("System.Net.HttpWebResponse")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryConditionalRangeRequest", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryConditionalRequest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryResponseFromCache", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeAsciiLettersNoCaseEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateCacheAfterResponse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"), $asm12.TypeRef("System.Net.HttpWebResponse")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateCacheByClientPolicy", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCacheBySpecialCases", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.Rfc2616+TriState"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCacheByVaryHeader", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.Rfc2616+TriState"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateCacheOn5XXResponse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Cache.CacheValidationStatus"), [$asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.SingleItemRequestCache */ 

(function SingleItemRequestCache$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm12.TypeRef("Microsoft.Win32.WinInetCache"), 
      Name: "System.Net.Cache.SingleItemRequestCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Commit", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Retrieve", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Cache.RequestCacheEntry")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Store", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [
          $.String, $.Int64, 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryRemove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryRetrieve", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Cache.RequestCacheEntry")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryStore", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int64, 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryUpdate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UnlockEntry", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.DateTime"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm12.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.Field({Static:false, Public:false}, "_UseWinInet", $.Boolean);

    $.Field({Static:false, Public:false}, "_Entry", $asm12.TypeRef("System.Net.Cache.SingleItemRequestCache+FrozenCacheEntry"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.SingleItemRequestCache+FrozenCacheEntry */ 

(function FrozenCacheEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"), 
      Name: "System.Net.Cache.SingleItemRequestCache+FrozenCacheEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"), 
          $asm0F.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StreamBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0F.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "_StreamBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_Key", $.String);

    $.Property({Static:false, Public:true }, "StreamBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.SingleItemRequestCache+ReadOnlyStream */ 

(function ReadOnlyStream$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.Cache.SingleItemRequestCache+ReadOnlyStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Net.IRequestLifetimeTracker.TrackRequestLifetime", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Overrides($asm12.TypeRef("System.Net.IRequestLifetimeTracker"), "TrackRequestLifetime");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_Bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_Offset", $.Int32);

    $.Field({Static:false, Public:false}, "_Disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "_ReadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_WriteTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_RequestLifetimeSetter", $asm12.TypeRef("System.Net.RequestLifetimeSetter"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Net.IRequestLifetimeTracker")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Cache.SingleItemRequestCache+WriteOnlyStream */ 

(function WriteOnlyStream$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.Stream"), 
      Name: "System.Net.Cache.SingleItemRequestCache+WriteOnlyStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Net.Cache.SingleItemRequestCache"), 
          $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"), $asm0F.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm0F.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_Key", $.String);

    $.Field({Static:false, Public:false}, "_Cache", $asm12.TypeRef("System.Net.Cache.SingleItemRequestCache"));

    $.Field({Static:false, Public:false}, "_TempEntry", $asm12.TypeRef("System.Net.Cache.RequestCacheEntry"));

    $.Field({Static:false, Public:false}, "_RealStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_TotalSize", $.Int64);

    $.Field({Static:false, Public:false}, "_Buffers", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_Disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "_ReadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_WriteTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Net.Configuration");
/* enum System.Net.Configuration.UnicodeDecodingConformance */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Configuration.UnicodeDecodingConformance", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Auto: 0, 
    Strict: 1, 
    Compat: 2, 
    Loose: 3, 
  }
);

/* enum System.Net.Configuration.UnicodeEncodingConformance */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Configuration.UnicodeEncodingConformance", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Auto: 0, 
    Strict: 1, 
    Compat: 2, 
  }
);

/* class System.Net.Configuration.AuthenticationModuleElement */ 

(function AuthenticationModuleElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.AuthenticationModuleElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:false}, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.AuthenticationModuleElementCollection */ 

(function AuthenticationModuleElementCollection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Net.Configuration.AuthenticationModuleElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.AuthenticationModuleElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Net.Configuration.AuthenticationModuleElement.__Type__]; });

})();

/* class System.Net.Configuration.AuthenticationModulesSection */ 

(function AuthenticationModulesSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Net.Configuration.AuthenticationModulesSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationModules", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.AuthenticationModuleElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "authenticationModules", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "AuthenticationModules", $asm12.TypeRef("System.Net.Configuration.AuthenticationModuleElementCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.AuthenticationModulesSectionInternal */ 

(function AuthenticationModulesSectionInternal$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Configuration.AuthenticationModulesSectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.AuthenticationModulesSection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticationModules", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "authenticationModules", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "AuthenticationModules", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.BypassElement */ 

(function BypassElement$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.BypassElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "address", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Address", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["address"]; });

    $.Property({Static:false, Public:false}, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.BypassElementCollection */ 

(function BypassElementCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Net.Configuration.BypassElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Configuration.BypassElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ThrowOnDuplicate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Net.Configuration.BypassElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "ThrowOnDuplicate", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Net.Configuration.BypassElement.__Type__]; });

})();

/* class System.Net.Configuration.ConfigurationStrings */ 

(function ConfigurationStrings$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Net.Configuration.ConfigurationStrings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_AuthenticationModulesSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionManagementSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultProxySectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequestCachingSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SettingsSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WebRequestModulesSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Property({Static:true , Public:false}, "AuthenticationModulesSectionPath", $.String);

    $.Property({Static:true , Public:false}, "ConnectionManagementSectionPath", $.String);

    $.Property({Static:true , Public:false}, "DefaultProxySectionPath", $.String);

    $.Property({Static:true , Public:false}, "RequestCachingSectionPath", $.String);

    $.Property({Static:true , Public:false}, "SettingsSectionPath", $.String);

    $.Property({Static:true , Public:false}, "WebRequestModulesSectionPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.ConnectionManagementElement */ 

(function ConnectionManagementElement$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.ConnectionManagementElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxConnection", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "address", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "maxconnection", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Address", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["address"]; });

    $.Property({Static:false, Public:true }, "MaxConnection", $.Int32)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maxconnection"]; });

    $.Property({Static:false, Public:false}, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.ConnectionManagementElementCollection */ 

(function ConnectionManagementElementCollection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Net.Configuration.ConnectionManagementElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Net.Configuration.ConnectionManagementElement.__Type__]; });

})();

/* class System.Net.Configuration.ConnectionManagementSection */ 

(function ConnectionManagementSection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Net.Configuration.ConnectionManagementSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionManagement", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.ConnectionManagementElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "connectionManagement", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "ConnectionManagement", $asm12.TypeRef("System.Net.Configuration.ConnectionManagementElementCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.ConnectionManagementSectionInternal */ 

(function ConnectionManagementSectionInternal$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Configuration.ConnectionManagementSectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.ConnectionManagementSection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionManagement", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "connectionManagement", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "ConnectionManagement", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.DefaultProxySection */ 

(function DefaultProxySection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Net.Configuration.DefaultProxySection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BypassList", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.BypassElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Module", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.ModuleElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Proxy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.ProxyElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseDefaultCredentials", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "bypasslist", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "module", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "proxy", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "enabled", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "useDefaultCredentials", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "BypassList", $asm12.TypeRef("System.Net.Configuration.BypassElementCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["bypasslist"]; });

    $.Property({Static:false, Public:true }, "Module", $asm12.TypeRef("System.Net.Configuration.ModuleElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["module"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Proxy", $asm12.TypeRef("System.Net.Configuration.ProxyElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["proxy"]; });

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enabled"]; });

    $.Property({Static:false, Public:true }, "UseDefaultCredentials", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["useDefaultCredentials"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.DefaultProxySectionInternal */ 

(function DefaultProxySectionInternal$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Configuration.DefaultProxySectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.DefaultProxySection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WebProxy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "webProxy", $asm12.TypeRef("System.Net.IWebProxy"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "WebProxy", $asm12.TypeRef("System.Net.IWebProxy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.HttpWebRequestElement */ 

(function HttpWebRequestElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.HttpWebRequestElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumErrorResponseLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumResponseHeadersLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumUnauthorizedUploadLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseUnsafeHeaderParsing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "maximumResponseHeadersLength", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "maximumErrorResponseLength", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "maximumUnauthorizedUploadLength", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "useUnsafeHeaderParsing", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "MaximumUnauthorizedUploadLength", $.Int32)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maximumUnauthorizedUploadLength"]; });

    $.Property({Static:false, Public:true }, "MaximumErrorResponseLength", $.Int32)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maximumErrorResponseLength"]; });

    $.Property({Static:false, Public:true }, "MaximumResponseHeadersLength", $.Int32)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maximumResponseHeadersLength"]; });

    $.Property({Static:false, Public:true }, "UseUnsafeHeaderParsing", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["useUnsafeHeaderParsing"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.HttpListenerElement */ 

(function HttpListenerElement$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.HttpListenerElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timeouts", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.HttpListenerTimeoutsElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnescapeRequestUrl", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "unescapeRequestUrl", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "timeouts", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "UnescapeRequestUrl", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["unescapeRequestUrl"]; });

    $.Property({Static:false, Public:true }, "Timeouts", $asm12.TypeRef("System.Net.Configuration.HttpListenerTimeoutsElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["timeouts"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.HttpListenerTimeoutsElement */ 

(function HttpListenerTimeoutsElement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.HttpListenerTimeoutsElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateTimeSpanProperty", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Configuration.ConfigurationProperty"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DrainEntityBody", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntityBody", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HeaderWait", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdleConnection", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinSendBytesPerSecond", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestQueue", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTimeouts", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int64]))
    );

    $.Field({Static:true , Public:false}, "properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "entityBody", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "drainEntityBody", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "requestQueue", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "idleConnection", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "headerWait", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "minSendBytesPerSecond", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "EntityBody", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["entityBody"]; });

    $.Property({Static:false, Public:true }, "DrainEntityBody", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["drainEntityBody"]; });

    $.Property({Static:false, Public:true }, "RequestQueue", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["requestQueue"]; });

    $.Property({Static:false, Public:true }, "IdleConnection", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["idleConnection"]; });

    $.Property({Static:false, Public:true }, "HeaderWait", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["headerWait"]; });

    $.Property({Static:false, Public:true }, "MinSendBytesPerSecond", $.Int64)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["minSendBytesPerSecond"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.HttpListenerTimeoutsElement+TimeSpanValidator */ 

(function TimeSpanValidator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.Net.Configuration.HttpListenerTimeoutsElement+TimeSpanValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.HttpListenerTimeoutsElement+LongValidator */ 

(function LongValidator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.Net.Configuration.HttpListenerTimeoutsElement+LongValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.HttpCachePolicyElement */ 

(function HttpCachePolicyElement$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.HttpCachePolicyElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm24.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumStale", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinimumFresh", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PolicyLevel", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.HttpRequestCacheLevel"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WasReadFromConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.Field({Static:false, Public:false}, "wasReadFromConfig", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "maximumAge", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "maximumStale", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "minimumFresh", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "policyLevel", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "MaximumAge", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maximumAge"]; });

    $.Property({Static:false, Public:true }, "MaximumStale", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maximumStale"]; });

    $.Property({Static:false, Public:true }, "MinimumFresh", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["minimumFresh"]; });

    $.Property({Static:false, Public:true }, "PolicyLevel", $asm12.TypeRef("System.Net.Cache.HttpRequestCacheLevel"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["policyLevel"]; });

    $.Property({Static:false, Public:false}, "WasReadFromConfig", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.FtpCachePolicyElement */ 

(function FtpCachePolicyElement$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.FtpCachePolicyElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm24.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PolicyLevel", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheLevel"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WasReadFromConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.Field({Static:false, Public:false}, "wasReadFromConfig", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "policyLevel", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "PolicyLevel", $asm12.TypeRef("System.Net.Cache.RequestCacheLevel"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["policyLevel"]; });

    $.Property({Static:false, Public:false}, "WasReadFromConfig", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.Ipv6Element */ 

(function Ipv6Element$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.Ipv6Element", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "enabled", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enabled"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.ModuleElement */ 

(function ModuleElement$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.ModuleElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.PerformanceCountersElement */ 

(function PerformanceCountersElement$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.PerformanceCountersElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "enabled", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enabled"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.ProxyElement */ 

(function ProxyElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.ProxyElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_AutoDetect", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.ProxyElement+AutoDetectValues"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BypassOnLocal", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.ProxyElement+BypassOnLocalValues"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProxyAddress", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ScriptLocation", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSystemDefault", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.ProxyElement+UseSystemDefaultValues"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "autoDetect", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "scriptLocation", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "bypassonlocal", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "proxyaddress", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "usesystemdefault", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "AutoDetect", $asm12.TypeRef("System.Net.Configuration.ProxyElement+AutoDetectValues"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["autoDetect"]; });

    $.Property({Static:false, Public:true }, "ScriptLocation", $asm12.TypeRef("System.Uri"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["scriptLocation"]; });

    $.Property({Static:false, Public:true }, "BypassOnLocal", $asm12.TypeRef("System.Net.Configuration.ProxyElement+BypassOnLocalValues"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["bypassonlocal"]; });

    $.Property({Static:false, Public:true }, "ProxyAddress", $asm12.TypeRef("System.Uri"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["proxyaddress"]; });

    $.Property({Static:false, Public:true }, "UseSystemDefault", $asm12.TypeRef("System.Net.Configuration.ProxyElement+UseSystemDefaultValues"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["usesystemdefault"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Configuration.ProxyElement+BypassOnLocalValues */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Configuration.ProxyElement+BypassOnLocalValues", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: -1, 
    False: 0, 
    True: 1, 
  }
);

/* enum System.Net.Configuration.ProxyElement+UseSystemDefaultValues */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Configuration.ProxyElement+UseSystemDefaultValues", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: -1, 
    False: 0, 
    True: 1, 
  }
);

/* enum System.Net.Configuration.ProxyElement+AutoDetectValues */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Configuration.ProxyElement+AutoDetectValues", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: -1, 
    False: 0, 
    True: 1, 
  }
);

/* class System.Net.Configuration.RequestCachingSection */ 

(function RequestCachingSection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Net.Configuration.RequestCachingSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm24.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultFtpCachePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.FtpCachePolicyElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultHttpCachePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.HttpCachePolicyElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultPolicyLevel", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCacheLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisableAllCaching", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrivateCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnspecifiedMaximumAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisableAllCaching", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultHttpCachePolicy", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultFtpCachePolicy", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultPolicyLevel", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "disableAllCaching", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "isPrivateCache", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "unspecifiedMaximumAge", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "DefaultHttpCachePolicy", $asm12.TypeRef("System.Net.Configuration.HttpCachePolicyElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["defaultHttpCachePolicy"]; });

    $.Property({Static:false, Public:true }, "DefaultFtpCachePolicy", $asm12.TypeRef("System.Net.Configuration.FtpCachePolicyElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["defaultFtpCachePolicy"]; });

    $.Property({Static:false, Public:true }, "DefaultPolicyLevel", $asm12.TypeRef("System.Net.Cache.RequestCacheLevel"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["defaultPolicyLevel"]; });

    $.Property({Static:false, Public:true }, "DisableAllCaching", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["disableAllCaching"]; });

    $.Property({Static:false, Public:true }, "IsPrivateCache", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["isPrivateCache"]; });

    $.Property({Static:false, Public:true }, "UnspecifiedMaximumAge", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["unspecifiedMaximumAge"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.RequestCachingSectionInternal */ 

(function RequestCachingSectionInternal$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Configuration.RequestCachingSectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.RequestCachingSection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultCache", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultCachePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultFtpCachePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultFtpValidator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.FtpRequestCacheValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultHttpCachePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.HttpRequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultHttpValidator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DisableAllCaching", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrivateCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnspecifiedMaximumAge", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Field({Static:false, Public:false}, "defaultCache", $asm12.TypeRef("System.Net.Cache.RequestCache"));

    $.Field({Static:false, Public:false}, "defaultHttpCachePolicy", $asm12.TypeRef("System.Net.Cache.HttpRequestCachePolicy"));

    $.Field({Static:false, Public:false}, "defaultFtpCachePolicy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Field({Static:false, Public:false}, "defaultCachePolicy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Field({Static:false, Public:false}, "disableAllCaching", $.Boolean);

    $.Field({Static:false, Public:false}, "httpRequestCacheValidator", $asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"));

    $.Field({Static:false, Public:false}, "ftpRequestCacheValidator", $asm12.TypeRef("System.Net.Cache.FtpRequestCacheValidator"));

    $.Field({Static:false, Public:false}, "isPrivateCache", $.Boolean);

    $.Field({Static:false, Public:false}, "unspecifiedMaximumAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "DisableAllCaching", $.Boolean);

    $.Property({Static:false, Public:false}, "DefaultCache", $asm12.TypeRef("System.Net.Cache.RequestCache"));

    $.Property({Static:false, Public:false}, "DefaultCachePolicy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Property({Static:false, Public:false}, "IsPrivateCache", $.Boolean);

    $.Property({Static:false, Public:false}, "UnspecifiedMaximumAge", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "DefaultHttpCachePolicy", $asm12.TypeRef("System.Net.Cache.HttpRequestCachePolicy"));

    $.Property({Static:false, Public:false}, "DefaultFtpCachePolicy", $asm12.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Property({Static:false, Public:false}, "DefaultHttpValidator", $asm12.TypeRef("System.Net.Cache.HttpRequestCacheValidator"));

    $.Property({Static:false, Public:false}, "DefaultFtpValidator", $asm12.TypeRef("System.Net.Cache.FtpRequestCacheValidator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.SettingsSection */ 

(function SettingsSection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Net.Configuration.SettingsSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HttpListener", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.HttpListenerElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HttpWebRequest", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.HttpWebRequestElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ipv6", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.Ipv6Element"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PerformanceCounters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.PerformanceCountersElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServicePointManager", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.ServicePointManagerElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Socket", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.SocketElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WebProxyScript", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.WebProxyScriptElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WebUtility", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.WebUtilityElement"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "httpWebRequest", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ipv6", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "servicePointManager", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "socket", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "webProxyScript", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "performanceCounters", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "httpListener", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "webUtility", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "HttpWebRequest", $asm12.TypeRef("System.Net.Configuration.HttpWebRequestElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["httpWebRequest"]; });

    $.Property({Static:false, Public:true }, "Ipv6", $asm12.TypeRef("System.Net.Configuration.Ipv6Element"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["ipv6"]; });

    $.Property({Static:false, Public:true }, "ServicePointManager", $asm12.TypeRef("System.Net.Configuration.ServicePointManagerElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["servicePointManager"]; });

    $.Property({Static:false, Public:true }, "Socket", $asm12.TypeRef("System.Net.Configuration.SocketElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["socket"]; });

    $.Property({Static:false, Public:true }, "WebProxyScript", $asm12.TypeRef("System.Net.Configuration.WebProxyScriptElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["webProxyScript"]; });

    $.Property({Static:false, Public:true }, "PerformanceCounters", $asm12.TypeRef("System.Net.Configuration.PerformanceCountersElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["performanceCounters"]; });

    $.Property({Static:false, Public:true }, "HttpListener", $asm12.TypeRef("System.Net.Configuration.HttpListenerElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["httpListener"]; });

    $.Property({Static:false, Public:true }, "WebUtility", $asm12.TypeRef("System.Net.Configuration.WebUtilityElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["webUtility"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.SettingsSectionInternal */ 

(function SettingsSectionInternal$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm12.System.Net.Configuration.UnicodeDecodingConformance)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm12.System.Net.Configuration.UnicodeEncodingConformance)) ();
  };






















  function SettingsSectionInternal_set_WebUtilityUnicodeDecodingConformance (value) {
    this.SettingsSectionInternal$WebUtilityUnicodeDecodingConformance$value = value;
  }; 

  function SettingsSectionInternal_set_WebUtilityUnicodeEncodingConformance (value) {
    this.SettingsSectionInternal$WebUtilityUnicodeEncodingConformance$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Configuration.SettingsSectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.SettingsSection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AlwaysUseCompletionPortsForAccept", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AlwaysUseCompletionPortsForConnect", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckCertificateName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckCertificateRevocationList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DnsRefreshTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DownloadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableDnsRoundRobin", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptionPolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.EncryptionPolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Expect100Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IPProtectionLevel", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.IPProtectionLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ipv6Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaximumErrorResponseLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaximumResponseHeadersLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaximumUnauthorizedUploadLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PerformanceCountersEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Section", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseNagleAlgorithm", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseUnsafeHeaderParsing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_WebUtilityUnicodeDecodingConformance", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.UnicodeDecodingConformance")), 
      SettingsSectionInternal_set_WebUtilityUnicodeDecodingConformance
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_WebUtilityUnicodeEncodingConformance", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.UnicodeEncodingConformance")), 
      SettingsSectionInternal_set_WebUtilityUnicodeEncodingConformance
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Field({Static:false, Public:false}, "SettingsSectionInternal$WebUtilityUnicodeDecodingConformance$value", $asm12.TypeRef("System.Net.Configuration.UnicodeDecodingConformance"))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SettingsSectionInternal$WebUtilityUnicodeEncodingConformance$value", $asm12.TypeRef("System.Net.Configuration.UnicodeEncodingConformance"))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "s_settings", $asm12.TypeRef("System.Net.Configuration.SettingsSectionInternal"));

    $.Field({Static:false, Public:false}, "alwaysUseCompletionPortsForAccept", $.Boolean);

    $.Field({Static:false, Public:false}, "alwaysUseCompletionPortsForConnect", $.Boolean);

    $.Field({Static:false, Public:false}, "checkCertificateName", $.Boolean);

    $.Field({Static:false, Public:false}, "checkCertificateRevocationList", $.Boolean);

    $.Field({Static:false, Public:false}, "downloadTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "dnsRefreshTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "enableDnsRoundRobin", $.Boolean);

    $.Field({Static:false, Public:false}, "encryptionPolicy", $asm12.TypeRef("System.Net.Security.EncryptionPolicy"));

    $.Field({Static:false, Public:false}, "expect100Continue", $.Boolean);

    $.Field({Static:false, Public:false}, "ipProtectionLevel", $asm12.TypeRef("System.Net.Sockets.IPProtectionLevel"));

    $.Field({Static:false, Public:false}, "ipv6Enabled", $.Boolean);

    $.Field({Static:false, Public:false}, "maximumResponseHeadersLength", $.Int32);

    $.Field({Static:false, Public:false}, "maximumErrorResponseLength", $.Int32);

    $.Field({Static:false, Public:false}, "maximumUnauthorizedUploadLength", $.Int32);

    $.Field({Static:false, Public:false}, "useUnsafeHeaderParsing", $.Boolean);

    $.Field({Static:false, Public:false}, "useNagleAlgorithm", $.Boolean);

    $.Field({Static:false, Public:false}, "performanceCountersEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "httpListenerUnescapeRequestUrl", $.Boolean);

    $.Field({Static:false, Public:false}, "httpListenerTimeouts", $jsilcore.TypeRef("System.Array", [$.Int64]));

    $.Property({Static:true , Public:false}, "Section", $.Type);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "AlwaysUseCompletionPortsForAccept", $.Boolean);

    $.Property({Static:false, Public:false}, "AlwaysUseCompletionPortsForConnect", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckCertificateName", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckCertificateRevocationList", $.Boolean);

    $.Property({Static:false, Public:false}, "DnsRefreshTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "DownloadTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "EnableDnsRoundRobin", $.Boolean);

    $.Property({Static:false, Public:false}, "EncryptionPolicy", $asm12.TypeRef("System.Net.Security.EncryptionPolicy"));

    $.Property({Static:false, Public:false}, "Expect100Continue", $.Boolean);

    $.Property({Static:false, Public:false}, "IPProtectionLevel", $asm12.TypeRef("System.Net.Sockets.IPProtectionLevel"));

    $.Property({Static:false, Public:false}, "Ipv6Enabled", $.Boolean);

    $.Property({Static:false, Public:false}, "MaximumResponseHeadersLength", $.Int32);

    $.Property({Static:false, Public:false}, "MaximumUnauthorizedUploadLength", $.Int32);

    $.Property({Static:false, Public:false}, "MaximumErrorResponseLength", $.Int32);

    $.Property({Static:false, Public:false}, "UseUnsafeHeaderParsing", $.Boolean);

    $.Property({Static:false, Public:false}, "UseNagleAlgorithm", $.Boolean);

    $.Property({Static:false, Public:false}, "PerformanceCountersEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "WebUtilityUnicodeDecodingConformance", $asm12.TypeRef("System.Net.Configuration.UnicodeDecodingConformance"));

    $.Property({Static:false, Public:false}, "WebUtilityUnicodeEncodingConformance", $asm12.TypeRef("System.Net.Configuration.UnicodeEncodingConformance"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.ServicePointManagerElement */ 

(function ServicePointManagerElement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.ServicePointManagerElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_CheckCertificateName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckCertificateRevocationList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsRefreshTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableDnsRoundRobin", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptionPolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.EncryptionPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expect100Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseNagleAlgorithm", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "checkCertificateName", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "checkCertificateRevocationList", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "dnsRefreshTimeout", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "enableDnsRoundRobin", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "encryptionPolicy", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "expect100Continue", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "useNagleAlgorithm", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "CheckCertificateName", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["checkCertificateName"]; });

    $.Property({Static:false, Public:true }, "CheckCertificateRevocationList", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["checkCertificateRevocationList"]; });

    $.Property({Static:false, Public:true }, "DnsRefreshTimeout", $.Int32)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["dnsRefreshTimeout"]; });

    $.Property({Static:false, Public:true }, "EnableDnsRoundRobin", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enableDnsRoundRobin"]; });

    $.Property({Static:false, Public:true }, "EncryptionPolicy", $asm12.TypeRef("System.Net.Security.EncryptionPolicy"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["encryptionPolicy"]; });

    $.Property({Static:false, Public:true }, "Expect100Continue", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["expect100Continue"]; });

    $.Property({Static:false, Public:true }, "UseNagleAlgorithm", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["useNagleAlgorithm"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.SocketElement */ 

(function SocketElement$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.SocketElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_AlwaysUseCompletionPortsForAccept", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlwaysUseCompletionPortsForConnect", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IPProtectionLevel", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.IPProtectionLevel"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "alwaysUseCompletionPortsForConnect", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "alwaysUseCompletionPortsForAccept", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ipProtectionLevel", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "AlwaysUseCompletionPortsForAccept", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["alwaysUseCompletionPortsForAccept"]; });

    $.Property({Static:false, Public:true }, "AlwaysUseCompletionPortsForConnect", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["alwaysUseCompletionPortsForConnect"]; });

    $.Property({Static:false, Public:true }, "IPProtectionLevel", $asm12.TypeRef("System.Net.Sockets.IPProtectionLevel"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["ipProtectionLevel"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.WebProxyScriptElement */ 

(function WebProxyScriptElement$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.WebProxyScriptElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_DownloadTimeout", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "downloadTimeout", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "DownloadTimeout", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["downloadTimeout"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.WebRequestModuleElement */ 

(function WebRequestModuleElement$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.WebRequestModuleElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "prefix", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Prefix", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["prefix"]; });

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:false}, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.WebRequestModuleElement+TypeAndName */ 

(function TypeAndName$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Configuration.WebRequestModuleElement+TypeAndName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ComponentModel.TypeConverter */ 

(function TypeConverter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.ComponentModel.TypeConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "useCompatibleTypeConversion", $asm0F.TypeRef("System.Boolean"), false);

    $.Field({Static:true , Public:false}, "firstLoadAppSetting", $asm0F.TypeRef("System.Boolean"), true);

    $.Field({Static:true , Public:false}, "loadAppSettingLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Net.Configuration.WebRequestModuleElement+TypeTypeConverter */ 

(function TypeTypeConverter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Net.Configuration.WebRequestModuleElement+TypeTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.WebRequestModuleElementCollection */ 

(function WebRequestModuleElementCollection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Net.Configuration.WebRequestModuleElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.WebRequestModuleElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Net.Configuration.WebRequestModuleElement.__Type__]; });

})();

/* class System.Net.Configuration.WebRequestModulesSection */ 

(function WebRequestModulesSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Net.Configuration.WebRequestModulesSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WebRequestModules", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.WebRequestModuleElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "webRequestModules", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "WebRequestModules", $asm12.TypeRef("System.Net.Configuration.WebRequestModuleElementCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.WebRequestModulesSectionInternal */ 

(function WebRequestModulesSectionInternal$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Configuration.WebRequestModulesSectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Configuration.WebRequestModulesSection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WebRequestModules", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Field({Static:false, Public:false}, "webRequestModules", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "WebRequestModules", $asm0F.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Configuration.WebUtilityElement */ 

(function WebUtilityElement$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Net.Configuration.WebUtilityElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnicodeDecodingConformance", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.UnicodeDecodingConformance"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnicodeEncodingConformance", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Configuration.UnicodeEncodingConformance"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "unicodeDecodingConformance", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "unicodeEncodingConformance", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "UnicodeDecodingConformance", $asm12.TypeRef("System.Net.Configuration.UnicodeDecodingConformance"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["unicodeDecodingConformance"]; });

    $.Property({Static:false, Public:true }, "UnicodeEncodingConformance", $asm12.TypeRef("System.Net.Configuration.UnicodeEncodingConformance"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["unicodeEncodingConformance"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Net.Security");
/* class System.Net.Security.SecureChannel */ 

(function SecureChannel$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Security.SecureChannel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm12.TypeRef("System.Net.SchProtocols"), $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm12.TypeRef("System.Net.Security.EncryptionPolicy"), $asm12.TypeRef("System.Net.Security.LocalCertSelectionCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcquireClientCredentials", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeFreeCredentials"), [$asm12.TypeRef("System.Net.CredentialUse"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.SecureCredential")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcquireServerCredentials", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateFatalHandshakeAlertToken", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Security.ProtocolToken"), [$asm12.TypeRef("System.Net.Security.SslPolicyErrors"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Decrypt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Encrypt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsurePrivateKey", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureStoreOpened", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Store"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAlertToken", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.ProtocolToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateToken", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClientCertificates", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionInfo", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SslConnectionInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsServer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalClientCertificate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalServerCertificate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxDataSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlertMessageFromChain", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Security.TlsAlertMessage"), [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBindingKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIssuers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRemoteCertificate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogCertificateValidation", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Security.RemoteCertValidationCallback"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors"), 
          $.Boolean, $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeEx", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextMessage", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Security.ProtocolToken"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessHandshakeSuccess", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRefreshCredentialNeeded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyRemoteCertificate", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.Security.RemoteCertValidationCallback"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Security.ProtocolToken")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_SyncObject", $.Object);

    $.Field({Static:true , Public:false}, "s_MyCertStoreEx", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Store"));

    $.Field({Static:true , Public:false}, "s_MyMachineCertStoreEx", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Store"));

    $.Field({Static:false, Public:false}, "m_CredentialsHandle", $asm12.TypeRef("System.Net.SafeFreeCredentials"));

    $.Field({Static:false, Public:false}, "m_SecurityContext", $asm12.TypeRef("System.Net.SafeDeleteContext"));

    $.Field({Static:false, Public:false}, "m_Attributes", $asm12.TypeRef("System.Net.ContextFlags"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Destination", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_HostName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ServerMode", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_RemoteCertRequired", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ProtocolFlags", $asm12.TypeRef("System.Net.SchProtocols"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_EncryptionPolicy", $asm12.TypeRef("System.Net.Security.EncryptionPolicy"));

    $.Field({Static:false, Public:false}, "m_ConnectionInfo", $asm12.TypeRef("System.Net.SslConnectionInfo"));

    $.Field({Static:false, Public:false}, "m_ServerCertificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Field({Static:false, Public:false}, "m_SelectedClientCertificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Field({Static:false, Public:false}, "m_IsRemoteCertificateAvailable", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ClientCertificates", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Field({Static:false, Public:false}, "m_CertSelectionDelegate", $asm12.TypeRef("System.Net.Security.LocalCertSelectionCallback"));

    $.Field({Static:false, Public:false}, "m_HeaderSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_TrailerSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_MaxDataSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_CheckCertRevocation", $.Boolean);

    $.Field({Static:false, Public:false}, "m_CheckCertName", $.Boolean);

    $.Field({Static:false, Public:false}, "m_RefreshCredentialNeeded", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ServerAuthOid", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ClientAuthOid", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Property({Static:false, Public:false}, "LocalServerCertificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Property({Static:false, Public:false}, "LocalClientCertificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Property({Static:false, Public:false}, "ClientCertificates", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Property({Static:false, Public:false}, "MaxDataSize", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionInfo", $asm12.TypeRef("System.Net.SslConnectionInfo"));

    $.Property({Static:false, Public:false}, "IsValidContext", $.Boolean);

    $.Property({Static:false, Public:false}, "IsServer", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Security.SecureChannel+UnmanagedCertificateContext */ 

(function UnmanagedCertificateContext$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.Security.SecureChannel+UnmanagedCertificateContext", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"), [$asm12.TypeRef("System.Net.SafeFreeCertContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Security.SecureChannel+UnmanagedCertificateContext+_CERT_CONTEXT */ 

(function _CERT_CONTEXT$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Security.SecureChannel+UnmanagedCertificateContext+_CERT_CONTEXT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hCertStore", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Security.ProtocolToken */ 

(function ProtocolToken$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Security.ProtocolToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Net.SecurityStatus")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CloseConnection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Done", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Failed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Renegotiate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetException", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.ComponentModel.Win32Exception"))
    );

    $.Field({Static:false, Public:false}, "Status", $asm12.TypeRef("System.Net.SecurityStatus"));

    $.Field({Static:false, Public:false}, "Payload", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "Size", $.Int32);

    $.Property({Static:false, Public:false}, "Failed", $.Boolean);

    $.Property({Static:false, Public:false}, "Done", $.Boolean);

    $.Property({Static:false, Public:false}, "Renegotiate", $.Boolean);

    $.Property({Static:false, Public:false}, "CloseConnection", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Security.SslSessionsCache */ 

(function SslSessionsCache$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Net.Security.SslSessionsCache", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CacheCredential", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.SafeFreeCredentials"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm12.TypeRef("System.Net.SchProtocols"), $asm12.TypeRef("System.Net.Security.EncryptionPolicy")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCachedCredential", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SafeFreeCredentials"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Net.SchProtocols"), 
          $asm12.TypeRef("System.Net.Security.EncryptionPolicy")
        ])
    );

    $.Field({Static:true , Public:false}, "s_CachedCreds", $asm0F.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Security.SslSessionsCache+SslCredKey */ 

(function SslCredKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Security.SslSessionsCache+SslCredKey", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Net.SchProtocols"), 
          $asm12.TypeRef("System.Net.Security.EncryptionPolicy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EmptyArray", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Byte, 0);
      });

    $.Field({Static:false, Public:false}, "_CertThumbPrint", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_AllowedProtocols", $asm12.TypeRef("System.Net.SchProtocols"));

    $.Field({Static:false, Public:false}, "_EncryptionPolicy", $asm12.TypeRef("System.Net.Security.EncryptionPolicy"));

    $.Field({Static:false, Public:false}, "_HashCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Security.SSPIHandleCache */ 

(function SSPIHandleCache$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Net.Security.SSPIHandleCache", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CacheCredential", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.SafeFreeCredentials"))
    );

    $.Field({Static:true , Public:false}, "_CacheSlots", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.SafeCredentialReference")]), function ($pi) {
        return JSIL.Array.New($asm12.System.Net.SafeCredentialReference, 32);
      });

    $.Field({Static:true , Public:false}, "_Current", $.Int32, -1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Security.AuthenticationLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Security.AuthenticationLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    MutualAuthRequested: 1, 
    MutualAuthRequired: 2, 
  }
);

/* enum System.Net.Security.SslPolicyErrors */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Security.SslPolicyErrors", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    RemoteCertificateNotAvailable: 1, 
    RemoteCertificateNameMismatch: 2, 
    RemoteCertificateChainErrors: 4, 
  }
);

/* enum System.Net.Security.EncryptionPolicy */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Security.EncryptionPolicy", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    RequireEncryption: 0, 
    AllowNoEncryption: 1, 
    NoEncryption: 2, 
  }
);

/* delegate System.Net.Security.RemoteCertificateValidationCallback */ 

JSIL.MakeDelegate("System.Net.Security.RemoteCertificateValidationCallback", true, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [
      $asm0F.TypeRef("System.Object"), $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
      $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
    ]));

/* delegate System.Net.Security.RemoteCertValidationCallback */ 

JSIL.MakeDelegate("System.Net.Security.RemoteCertValidationCallback", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [
      $asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
      $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), $asm12.TypeRef("System.Net.Security.SslPolicyErrors")
    ]));

/* delegate System.Net.Security.LocalCertSelectionCallback */ 

JSIL.MakeDelegate("System.Net.Security.LocalCertSelectionCallback", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), [
      $asm0F.TypeRef("System.String"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"), 
      $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.String")])
    ]));

/* class System.Net.Security.SslState */ 

(function SslState$Members () {
  var $, $thisType;































































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Security.SslState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm12.TypeRef("System.Net.Security.EncryptionPolicy")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm12.TypeRef("System.Net.Security.RemoteCertValidationCallback"), 
          $asm12.TypeRef("System.Net.Security.LocalCertSelectionCallback"), $asm12.TypeRef("System.Net.Security.EncryptionPolicy")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AsyncResumeHandshake", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "AsyncResumeHandshakeRead", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCompletionBeforeNextReceive", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Security.ProtocolToken"), $asm12.TypeRef("System.Net.AsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEnqueueHandshake", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Net.AsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEnqueueHandshakeRead", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $asm12.TypeRef("System.Net.AsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEnqueueRead", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEnqueueWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.AsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckOldKeyDecryptedData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckThrow", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteHandshake", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Security.ProtocolToken")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteRequestWaitCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecryptData", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetectFraming", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Security.SslState+Framing"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncryptData", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndProcessAuthentication", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueOldKeyDecryptedData", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureBufferSize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishHandshake", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Exception"), $asm12.TypeRef("System.Net.AsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishHandshakeRead", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishRead", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishWrite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceAuthentication", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CipherAlgorithm", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Authentication.CipherAlgorithmType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CipherStrength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security.SecureChannel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HandshakeCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Authentication.HashAlgorithmType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HashStrength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerStream", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalLocalCertificate", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAuthenticated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCertValidationFailed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsServer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Authentication.ExchangeAlgorithmType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyExchangeStrength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastPayload", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastSecurityStatus", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SecurityStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxDataSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SecureStream", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Security._SslStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SslProtocol", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Authentication.SslProtocols"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChannelBinding", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), [$asm12.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBindingKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRemainingFrameSize", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalEndProcessAuthentication", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LastPayloadConsumed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PartialFrameCallback", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrivateDecryptData", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SecurityStatus"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAuthentication", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessReceivedBlob", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFrameCallback", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RehandshakeCompleteCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplyOnReAuthentication", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCertValidationDelegate", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Security.RemoteCertValidationCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartReadFrame", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartReceiveBlob", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Net.AsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSendAuthResetSignal", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Security.ProtocolToken"), $asm12.TypeRef("System.Net.AsyncProtocolRequest"), 
          $asm0F.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSendBlob", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCreateContext", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $asm12.TypeRef("System.Security.Authentication.SslProtocols"), $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:true , Public:false}, "UniqueNameInteger", $.Int32, 123);

    $.Field({Static:true , Public:false}, "_PartialFrameCallback", $asm12.TypeRef("System.Net.AsyncProtocolCallback"), function ($pi) {
        return $asm12.System.Net.AsyncProtocolCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "PartialFrameCallback", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest")), true, false));
      });

    $.Field({Static:true , Public:false}, "_ReadFrameCallback", $asm12.TypeRef("System.Net.AsyncProtocolCallback"), function ($pi) {
        return $asm12.System.Net.AsyncProtocolCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ReadFrameCallback", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest")), true, false));
      });

    $.Field({Static:true , Public:false}, "_WriteCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "WriteCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:false, Public:false}, "_CertValidationDelegate", $asm12.TypeRef("System.Net.Security.RemoteCertValidationCallback"));

    $.Field({Static:false, Public:false}, "_CertSelectionDelegate", $asm12.TypeRef("System.Net.Security.LocalCertSelectionCallback"));

    $.Field({Static:false, Public:false}, "_InnerStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_SecureStream", $asm12.TypeRef("System.Net.Security._SslStream"));

    $.Field({Static:false, Public:false}, "_Reader", $asm12.TypeRef("System.Net.FixedSizeReader"));

    $.Field({Static:false, Public:false}, "_Context", $asm12.TypeRef("System.Net.Security.SecureChannel"));

    $.Field({Static:false, Public:false}, "_HandshakeCompleted", $.Boolean);

    $.Field({Static:false, Public:false}, "_CertValidationFailed", $.Boolean);

    $.Field({Static:false, Public:false}, "_Shutdown", $.Boolean);

    $.Field({Static:false, Public:false}, "_SecurityStatus", $asm12.TypeRef("System.Net.SecurityStatus"));

    $.Field({Static:false, Public:false}, "_Exception", $asm0F.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_CachedSession", $asm12.TypeRef("System.Net.Security.SslState+CachedSessionStatus"));

    $.Field({Static:false, Public:false}, "_QueuedReadData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_QueuedReadCount", $.Int32);

    $.Field({Static:false, Public:false}, "_PendingReHandshake", $.Boolean);

    $.Field({Static:false, Public:false}, "_LockWriteState", $.Int32);

    $.Field({Static:false, Public:false}, "_QueuedWriteStateRequest", $.Object);

    $.Field({Static:false, Public:false}, "_LockReadState", $.Int32);

    $.Field({Static:false, Public:false}, "_QueuedReadStateRequest", $.Object);

    $.Field({Static:false, Public:false}, "_ForceBufferingLastHandshakePayload", $.Boolean);

    $.Field({Static:false, Public:false}, "_LastPayload", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_EncryptionPolicy", $asm12.TypeRef("System.Net.Security.EncryptionPolicy"));

    $.Field({Static:false, Public:false}, "_Framing", $asm12.TypeRef("System.Net.Security.SslState+Framing"));

    $.Property({Static:false, Public:false}, "IsAuthenticated", $.Boolean);

    $.Property({Static:false, Public:false}, "IsServer", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalLocalCertificate", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Property({Static:false, Public:false}, "LastSecurityStatus", $asm12.TypeRef("System.Net.SecurityStatus"));

    $.Property({Static:false, Public:false}, "IsCertValidationFailed", $.Boolean);

    $.Property({Static:false, Public:false}, "CipherAlgorithm", $asm12.TypeRef("System.Security.Authentication.CipherAlgorithmType"));

    $.Property({Static:false, Public:false}, "CipherStrength", $.Int32);

    $.Property({Static:false, Public:false}, "HashAlgorithm", $asm12.TypeRef("System.Security.Authentication.HashAlgorithmType"));

    $.Property({Static:false, Public:false}, "HashStrength", $.Int32);

    $.Property({Static:false, Public:false}, "KeyExchangeAlgorithm", $asm12.TypeRef("System.Security.Authentication.ExchangeAlgorithmType"));

    $.Property({Static:false, Public:false}, "KeyExchangeStrength", $.Int32);

    $.Property({Static:false, Public:false}, "SslProtocol", $asm12.TypeRef("System.Security.Authentication.SslProtocols"));

    $.Property({Static:false, Public:false}, "InnerStream", $asm0F.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "SecureStream", $asm12.TypeRef("System.Net.Security._SslStream"));

    $.Property({Static:false, Public:false}, "MaxDataSize", $.Int32);

    $.Property({Static:false, Public:false}, "LastPayload", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "HandshakeCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "Context", $asm12.TypeRef("System.Net.Security.SecureChannel"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Security.SslState+CachedSessionStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Security.SslState+CachedSessionStatus", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    IsNotCached: 1, 
    IsCached: 2, 
    Renegotiated: 3, 
  }
);

/* enum System.Net.Security.SslState+Framing */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Security.SslState+Framing", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    BeforeSSL3: 1, 
    SinceSSL3: 2, 
    Unified: 3, 
    Invalid: 4, 
  }
);

/* class System.Net.Security._SslStream */ 

(function _SslStream$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Security._SslStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Security.SslState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginRead", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginWrite", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementInternalBufferCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "EncryptBuffers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndWrite", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureInternalBufferSize", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false}, "FreeReadBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalBufferCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "MulitpleWriteCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessFrameBody", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessRead", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessReadErrorCode", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.SecurityStatus"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.Net.AsyncProtocolRequest"), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessWrite", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm12.TypeRef("System.Net.Security._SslStream+SplitWriteAsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessWrite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFrameCallback", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadHeaderCallback", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ResumeAsyncReadCallback", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ResumeAsyncWriteCallback", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartFrameBody", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartFrameHeader", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartReading", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartWriting", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.SplitWritesState"), $asm12.TypeRef("System.Net.Security._SslStream+SplitWriteAsyncProtocolRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartWriting", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.AsyncProtocolRequest")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateParameters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:true , Public:false}, "_WriteCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "WriteCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false}, "_MulitpleWriteCallback", $asm0F.TypeRef("System.AsyncCallback"), function ($pi) {
        return $asm0F.System.AsyncCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "MulitpleWriteCallback", JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult")), true, false));
      });

    $.Field({Static:true , Public:false}, "_ResumeAsyncWriteCallback", $asm12.TypeRef("System.Net.AsyncProtocolCallback"), function ($pi) {
        return $asm12.System.Net.AsyncProtocolCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ResumeAsyncWriteCallback", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest")), true, false));
      });

    $.Field({Static:true , Public:false}, "_ResumeAsyncReadCallback", $asm12.TypeRef("System.Net.AsyncProtocolCallback"), function ($pi) {
        return $asm12.System.Net.AsyncProtocolCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ResumeAsyncReadCallback", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest")), true, false));
      });

    $.Field({Static:true , Public:false}, "_ReadHeaderCallback", $asm12.TypeRef("System.Net.AsyncProtocolCallback"), function ($pi) {
        return $asm12.System.Net.AsyncProtocolCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ReadHeaderCallback", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest")), true, false));
      });

    $.Field({Static:true , Public:false}, "_ReadFrameCallback", $asm12.TypeRef("System.Net.AsyncProtocolCallback"), function ($pi) {
        return $asm12.System.Net.AsyncProtocolCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "ReadFrameCallback", JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.AsyncProtocolRequest")), true, false));
      });

    $.Field({Static:true , Public:false}, "s_PinnableReadBufferCache", $asm12.TypeRef("System.PinnableBufferCache"));

    $.Field({Static:true , Public:false}, "s_PinnableWriteBufferCache", $asm12.TypeRef("System.PinnableBufferCache"));

    $.Field({Static:false, Public:false}, "_SslState", $asm12.TypeRef("System.Net.Security.SslState"));

    $.Field({Static:false, Public:false}, "_NestedWrite", $.Int32);

    $.Field({Static:false, Public:false}, "_NestedRead", $.Int32);

    $.Field({Static:false, Public:false}, "_InternalBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_InternalBufferFromPinnableCache", $.Boolean);

    $.Field({Static:false, Public:false}, "_PinnableOutputBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_PinnableOutputBufferInUse", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_InternalOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_InternalBufferCount", $.Int32);

    $.Field({Static:false, Public:false}, "_Reader", $asm12.TypeRef("System.Net.FixedSizeReader"));

    $.Property({Static:false, Public:false}, "InternalBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "InternalOffset", $.Int32);

    $.Property({Static:false, Public:false}, "InternalBufferCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Security._SslStream+SplitWriteAsyncProtocolRequest */ 

(function SplitWriteAsyncProtocolRequest$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.AsyncProtocolRequest"), 
      Name: "System.Net.Security._SslStream+SplitWriteAsyncProtocolRequest", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNextRequest", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.SplitWritesState"), $asm12.TypeRef("System.Net.AsyncProtocolCallback")])
    );

    $.Field({Static:false, Public:false}, "SplitWritesState", $asm12.TypeRef("System.Net.SplitWritesState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Security.TlsAlertMessage */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Security.TlsAlertMessage", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CloseNotify: 0, 
    UnexpectedMessage: 10, 
    BadRecordMac: 20, 
    DecryptionFailed: 21, 
    RecordOverflow: 22, 
    DecompressionFail: 30, 
    HandshakeFailure: 40, 
    BadCertificate: 42, 
    UnsupportedCert: 43, 
    CertificateRevoked: 44, 
    CertificateExpired: 45, 
    CertificateUnknown: 46, 
    IllegalParameter: 47, 
    UnknownCA: 48, 
    AccessDenied: 49, 
    DecodeError: 50, 
    DecryptError: 51, 
    ExportRestriction: 60, 
    ProtocolVersion: 70, 
    InsuffientSecurity: 71, 
    InternalError: 80, 
    UserCanceled: 90, 
    NoRenegotiation: 100, 
    UnsupportedExt: 110, 
  }
);

/* enum System.Net.Security.TlsAlertType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Security.TlsAlertType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Warning: 1, 
    Fatal: 2, 
  }
);

/* class System.Net.Sockets.SocketException */ 

(function SocketException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Win32Exception"), 
      Name: "System.Net.Sockets.SocketException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm12.TypeRef("System.Net.EndPoint")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.SocketError"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_EndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Property({Static:false, Public:true , Virtual:true }, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Sockets.AddressFamily */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.AddressFamily", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    Unspecified: 0, 
    Unix: 1, 
    InterNetwork: 2, 
    ImpLink: 3, 
    Pup: 4, 
    Chaos: 5, 
    NS: 6, 
    Ipx: 6, 
    Osi: 7, 
    Iso: 7, 
    Ecma: 8, 
    DataKit: 9, 
    Ccitt: 10, 
    Sna: 11, 
    DecNet: 12, 
    DataLink: 13, 
    Lat: 14, 
    HyperChannel: 15, 
    AppleTalk: 16, 
    NetBios: 17, 
    VoiceView: 18, 
    FireFox: 19, 
    Banyan: 21, 
    Atm: 22, 
    InterNetworkV6: 23, 
    Cluster: 24, 
    Ieee12844: 25, 
    Irda: 26, 
    NetworkDesigners: 28, 
    Max: 29, 
  }
);

/* enum System.Net.Sockets.AsyncEventBits */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.AsyncEventBits", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    FdNone: 0, 
    FdRead: 1, 
    FdWrite: 2, 
    FdOob: 4, 
    FdAccept: 8, 
    FdConnect: 16, 
    FdClose: 32, 
    FdQos: 64, 
    FdGroupQos: 128, 
    FdRoutingInterfaceChange: 256, 
    FdAddressListChange: 512, 
    FdAllEvents: 1023, 
  }
);

/* struct System.Net.Sockets.NetworkEvents */ 

(function NetworkEvents$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Sockets.NetworkEvents", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Events", $asm12.TypeRef("System.Net.Sockets.AsyncEventBits"));

    $.Field({Static:false, Public:true }, "ErrorCodes", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Sockets.TimeValue */ 

(function TimeValue$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Net.Sockets.TimeValue", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Seconds", $.Int32);

    $.Field({Static:false, Public:true }, "Microseconds", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Sockets.IOControlCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.IOControlCode", 
    BaseType: $asm0F.TypeRef("System.Int64"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    EnableCircularQueuing: 671088642, 
    Flush: 671088644, 
    AddressListChange: 671088663, 
    DataToRead: 1074030207, 
    OobDataRead: 1074033415, 
    GetBroadcastAddress: 1207959557, 
    AddressListQuery: 1207959574, 
    QueryTargetPnpHandle: 1207959576, 
    AsyncIO: 2147772029, 
    NonBlockingIO: 2147772030, 
    AssociateHandle: 2281701377, 
    MultipointLoopback: 2281701385, 
    MulticastScope: 2281701386, 
    SetQos: 2281701387, 
    SetGroupQos: 2281701388, 
    RoutingInterfaceChange: 2281701397, 
    NamespaceChange: 2281701401, 
    ReceiveAll: 2550136833, 
    ReceiveAllMulticast: 2550136834, 
    ReceiveAllIgmpMulticast: 2550136835, 
    KeepAliveValues: 2550136836, 
    AbsorbRouterAlert: 2550136837, 
    UnicastInterface: 2550136838, 
    LimitBroadcasts: 2550136839, 
    BindToInterface: 2550136840, 
    MulticastInterface: 2550136841, 
    AddMulticastGroupOnInterface: 2550136842, 
    DeleteMulticastGroupFromInterface: 2550136843, 
    GetExtensionFunctionPointer: 3355443206, 
    GetQos: 3355443207, 
    GetGroupQos: 3355443208, 
    TranslateHandle: 3355443213, 
    RoutingInterfaceQuery: 3355443220, 
    AddressListSort: 3355443225, 
  }
);

/* enum System.Net.Sockets.IPProtectionLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.IPProtectionLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unspecified: -1, 
    Unrestricted: 10, 
    EdgeRestricted: 20, 
    Restricted: 30, 
  }
);

/* class System.Net.Sockets.LingerOption */ 

(function LingerOption$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.LingerOption", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LingerTime", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "enabled", $.Boolean);

    $.Field({Static:false, Public:false}, "lingerTime", $.Int32);

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.Property({Static:false, Public:true }, "LingerTime", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.MulticastOption */ 

(function MulticastOption$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.MulticastOption", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.IPAddress"), $asm12.TypeRef("System.Net.IPAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Group", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalAddress", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.Field({Static:false, Public:false}, "group", $asm12.TypeRef("System.Net.IPAddress"));

    $.Field({Static:false, Public:false}, "localAddress", $asm12.TypeRef("System.Net.IPAddress"));

    $.Field({Static:false, Public:false}, "ifIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Group", $asm12.TypeRef("System.Net.IPAddress"));

    $.Property({Static:false, Public:true }, "LocalAddress", $asm12.TypeRef("System.Net.IPAddress"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.IPv6MulticastOption */ 

(function IPv6MulticastOption$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.IPv6MulticastOption", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.IPAddress"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Group", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.IPAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InterfaceIndex", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "m_Group", $asm12.TypeRef("System.Net.IPAddress"));

    $.Field({Static:false, Public:false}, "m_Interface", $.Int64);

    $.Property({Static:false, Public:true }, "Group", $asm12.TypeRef("System.Net.IPAddress"));

    $.Property({Static:false, Public:true }, "InterfaceIndex", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Sockets.ProtocolFamily */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.ProtocolFamily", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    Unspecified: 0, 
    Unix: 1, 
    InterNetwork: 2, 
    ImpLink: 3, 
    Pup: 4, 
    Chaos: 5, 
    NS: 6, 
    Ipx: 6, 
    Osi: 7, 
    Iso: 7, 
    Ecma: 8, 
    DataKit: 9, 
    Ccitt: 10, 
    Sna: 11, 
    DecNet: 12, 
    DataLink: 13, 
    Lat: 14, 
    HyperChannel: 15, 
    AppleTalk: 16, 
    NetBios: 17, 
    VoiceView: 18, 
    FireFox: 19, 
    Banyan: 21, 
    Atm: 22, 
    InterNetworkV6: 23, 
    Cluster: 24, 
    Ieee12844: 25, 
    Irda: 26, 
    NetworkDesigners: 28, 
    Max: 29, 
  }
);

/* enum System.Net.Sockets.ProtocolType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.ProtocolType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    IPv6HopByHopOptions: 0, 
    Unspecified: 0, 
    IP: 0, 
    Icmp: 1, 
    Igmp: 2, 
    Ggp: 3, 
    IPv4: 4, 
    Tcp: 6, 
    Pup: 12, 
    Udp: 17, 
    Idp: 22, 
    IPv6: 41, 
    IPv6RoutingHeader: 43, 
    IPv6FragmentHeader: 44, 
    IPSecEncapsulatingSecurityPayload: 50, 
    IPSecAuthenticationHeader: 51, 
    IcmpV6: 58, 
    IPv6NoNextHeader: 59, 
    IPv6DestinationOptions: 60, 
    ND: 77, 
    Raw: 255, 
    Ipx: 1000, 
    Spx: 1256, 
    SpxII: 1257, 
  }
);

/* enum System.Net.Sockets.SelectMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SelectMode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SelectRead: 0, 
    SelectWrite: 1, 
    SelectError: 2, 
  }
);

/* class System.Net.Sockets.Socket */ 

(function Socket$Members () {
  var $, $thisType;



























































































































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.Socket", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $asm12.TypeRef("System.Net.Sockets.SocketType"), 
          $asm12.TypeRef("System.Net.Sockets.ProtocolType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.SafeCloseSocket"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Accept", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AcceptCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "AcceptEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.SafeCloseSocket"), 
          $.IntPtr, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginAccept", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [$asm0F.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginAccept", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $.Int32, $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginAccept", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $.Type, $.Int32, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginConnect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $asm12.TypeRef("System.Net.EndPoint"), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginConnectEx", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $asm12.TypeRef("System.Net.EndPoint"), $.Boolean, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMultipleSend", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginReceive", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginReceive", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketError")]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSend", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSend", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketError")]), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Bind", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToCompletionPort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallSerializeCheckDnsEndPoint", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SocketAddress"), [$asm12.TypeRef("System.Net.EndPoint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanTryAddressFamily", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.Sockets.AddressFamily")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanUseConnectEx", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.EndPoint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCacheRemote", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SocketAddress"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.EndPoint")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSetOptionPermissions", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), $asm12.TypeRef("System.Net.Sockets.SocketOptionName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteAccept", 
      new JSIL.MethodSignature(null, [$.Type, $asm12.TypeRef("System.Net.Sockets.Socket+TaskSocketAsyncEventArgs`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteAcceptResults", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteSendReceive", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm12.TypeRef("System.Net.Sockets.Socket+Int32TaskSocketAsyncEventArgs"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $.IntPtr, 
          $.Int32, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAcceptSocket", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.EndPoint"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DnsCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoBeginAccept", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.LazyAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoBeginAccept", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Int32, 
          $asm12.TypeRef("System.Net.Sockets.AcceptOverlappedAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoBeginConnect", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.EndPoint"), $asm12.TypeRef("System.Net.SocketAddress"), 
          $asm12.TypeRef("System.Net.LazyAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoBeginMultipleSend", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm12.TypeRef("System.Net.Sockets.OverlappedAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoBeginReceive", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm12.TypeRef("System.Net.Sockets.OverlappedAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoBeginSend", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm12.TypeRef("System.Net.Sockets.OverlappedAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoBind", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.EndPoint"), $asm12.TypeRef("System.Net.SocketAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoConnect", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.EndPoint"), $asm12.TypeRef("System.Net.SocketAddress")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoDnsCallback", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.IAsyncResult"), $asm12.TypeRef("System.Net.Sockets.Socket+MultipleAddressConnectAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoMultipleAddressConnectCallback", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm12.TypeRef("System.Net.Sockets.Socket+MultipleAddressConnectAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndAccept", 
      new JSIL.MethodSignature($.Type, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndAccept", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm0F.TypeRef("System.IAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndConnect", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndMultipleSend", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndReceive", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndReceive", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketError")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndSend", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndSend", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketError")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDynamicWinsockMethods", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_AddressFamily", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.AddressFamily"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Blocking", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Caches", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.Socket+CacheSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanUseAcceptEx", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CleanedUp", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connected", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DualMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsBound", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDualMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LegacySupportsIPv6", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalEndPoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OSSupportsIPv4", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OSSupportsIPv6", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.ProtocolType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoteEndPoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SafeHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SafeCloseSocket"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SocketType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.SocketType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Transport", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.TransportType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseOnlyOverlappedIO", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAcceptExSockaddrs", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAcceptQueue", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Queue"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$asm12.TypeRef("System.Net.Sockets.SocketError"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "getIPv6MulticastOpt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.IPv6MulticastOption"), [$asm12.TypeRef("System.Net.Sockets.SocketOptionName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "getLingerOpt", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.LingerOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "getMulticastOpt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.MulticastOption"), [$asm12.TypeRef("System.Net.Sockets.SocketOptionName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSocketOption", 
      new JSIL.MethodSignature($.Object, [$asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), $asm12.TypeRef("System.Net.Sockets.SocketOptionName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSockets", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalBeginConnectHostName", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.Socket+MultipleAddressConnectAsyncResult"), [
          $.String, $.Int32, 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalBind", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalConnect", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalEndConnect", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSetBlocking", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSetBlocking", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalShutdown", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.SocketShutdown"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IOControl", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IOControl", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Net.Sockets.IOControlCode"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Listen", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "MicrosecondsToTimeValue", 
      new JSIL.MethodSignature(null, [$.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.TimeValue")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultipleAddressConnectCallback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MultipleSend", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $asm12.TypeRef("System.Net.Sockets.SocketFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Poll", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm12.TypeRef("System.Net.Sockets.SelectMode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PostOneBeginConnect", 
      new JSIL.MethodSignature($.Object, [$asm12.TypeRef("System.Net.Sockets.Socket+MultipleAddressConnectAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Receive", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Receive", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketError")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RegisteredWaitCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemapIPEndPoint", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.IPEndPoint"), [$asm12.TypeRef("System.Net.IPEndPoint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnSocketAsyncEventArgs", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Net.Sockets.Socket+Int32TaskSocketAsyncEventArgs"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnSocketAsyncEventArgs", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.Socket+TaskSocketAsyncEventArgs`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Send", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Send", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.SocketError")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAsyncEventSelect", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Net.Sockets.AsyncEventBits")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIPProtectionLevel", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.IPProtectionLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSocketOption", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSocketOption", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.SocketOptionLevel"), $asm12.TypeRef("System.Net.Sockets.SocketOptionName"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToConnected", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDisconnected", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SnapshotAndSerialize", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.SocketAddress"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.EndPoint")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeBeginConnect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $asm12.TypeRef("System.Net.EndPoint"), $asm0F.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeBeginReceive", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeBeginSend", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.Sockets.SocketFlags"), 
          $asm0F.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsetAsyncEventSelect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateAcceptSocket", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $asm12.TypeRef("System.Net.EndPoint"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateStatusAfterSocketError", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.SocketException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateStatusAfterSocketError", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.SocketError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateBlockingMode", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_AcceptQueueOrConnectResult", $.Object);

    $.Field({Static:false, Public:false}, "asyncConnectOperationLock", $.Int32);

    $.Field({Static:false, Public:false}, "m_Handle", $asm12.TypeRef("System.Net.SafeCloseSocket"));

    $.Field({Static:false, Public:false}, "m_RightEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Field({Static:false, Public:false}, "m_RemoteEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Field({Static:false, Public:false}, "m_IsConnected", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsDisconnected", $.Boolean);

    $.Field({Static:false, Public:false}, "willBlock", $.Boolean);

    $.Field({Static:false, Public:false}, "willBlockInternal", $.Boolean);

    $.Field({Static:false, Public:false}, "m_NonBlockingConnectInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "m_NonBlockingConnectRightEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Field({Static:false, Public:false}, "addressFamily", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Field({Static:false, Public:false}, "socketType", $asm12.TypeRef("System.Net.Sockets.SocketType"));

    $.Field({Static:false, Public:false}, "protocolType", $asm12.TypeRef("System.Net.Sockets.ProtocolType"));

    $.Field({Static:false, Public:false}, "m_Caches", $asm12.TypeRef("System.Net.Sockets.Socket+CacheSet"));

    $.Field({Static:true , Public:false}, "UseOverlappedIO", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "useOverlappedIO", $.Boolean);

    $.Field({Static:false, Public:false}, "m_BoundToThreadPool", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ReceivingPacketInformation", $.Boolean);

    $.Field({Static:false, Public:false}, "m_AsyncEvent", $asm0F.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "m_RegisteredWait", $asm0F.TypeRef("System.Threading.RegisteredWaitHandle"));

    $.Field({Static:false, Public:false}, "m_BlockEventBits", $asm12.TypeRef("System.Net.Sockets.AsyncEventBits"));

    $.Field({Static:false, Public:false}, "m_PermittedRemoteAddress", $asm12.TypeRef("System.Net.SocketAddress"));

    $.Field({Static:false, Public:false}, "m_DynamicWinsockMethods", $asm12.TypeRef("System.Net.Sockets.DynamicWinsockMethods"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Field({Static:false, Public:false}, "m_CloseTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_IntCleanedUp", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "protocolInformationSize", $.Int32);

    $.Field({Static:true , Public:false}, "s_SupportsIPv4", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_SupportsIPv6", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_OSSupportsIPv6", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_Initialized", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_RegisteredWaitCallback", $asm0F.TypeRef("System.Threading.WaitOrTimerCallback"));

    $.Field({Static:true , Public:false}, "s_LoggingEnabled", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_PerfCountersEnabled", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AcceptCompletedHandler", $asm0F.TypeRef("System.EventHandler`1", [$asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), function ($pi) {
        return $asm0F.System.EventHandler$b1.Of($asm12.System.Net.Sockets.SocketAsyncEventArgs).New($asm12.System.Net.Sockets.Socket_$l$gc.$l$g9, null, new JSIL.MethodPointerInfo($asm12.System.Net.Sockets.Socket_$l$gc, "$l_cctor$gb__346_0", new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), false, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ReceiveCompletedHandler", $asm0F.TypeRef("System.EventHandler`1", [$asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), function ($pi) {
        return $asm0F.System.EventHandler$b1.Of($asm12.System.Net.Sockets.SocketAsyncEventArgs).New($asm12.System.Net.Sockets.Socket_$l$gc.$l$g9, null, new JSIL.MethodPointerInfo($asm12.System.Net.Sockets.Socket_$l$gc, "$l_cctor$gb__346_1", new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), false, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "SendCompletedHandler", $asm0F.TypeRef("System.EventHandler`1", [$asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), function ($pi) {
        return $asm0F.System.EventHandler$b1.Of($asm12.System.Net.Sockets.SocketAsyncEventArgs).New($asm12.System.Net.Sockets.Socket_$l$gc.$l$g9, null, new JSIL.MethodPointerInfo($asm12.System.Net.Sockets.Socket_$l$gc, "$l_cctor$gb__346_2", new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")]), false, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_rentedSocketSentinel", $asm12.TypeRef("System.Net.Sockets.Socket+TaskSocketAsyncEventArgs`1", [$.Type]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_rentedInt32Sentinel", $asm12.TypeRef("System.Net.Sockets.Socket+Int32TaskSocketAsyncEventArgs"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_zeroTask", $asm0F.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "_cachedTaskEventArgs", $asm12.TypeRef("System.Net.Sockets.Socket+CachedTaskEventArgs"));

    $.Property({Static:true , Public:true }, "OSSupportsIPv4", $.Boolean);

    $.Property({Static:true , Public:false}, "LegacySupportsIPv6", $.Boolean);

    $.Property({Static:true , Public:true }, "OSSupportsIPv6", $.Boolean);

    $.Property({Static:false, Public:true }, "LocalEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Property({Static:false, Public:true }, "RemoteEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Property({Static:false, Public:false}, "SafeHandle", $asm12.TypeRef("System.Net.SafeCloseSocket"));

    $.Property({Static:false, Public:true }, "Blocking", $.Boolean);

    $.Property({Static:false, Public:true }, "UseOnlyOverlappedIO", $.Boolean);

    $.Property({Static:false, Public:true }, "Connected", $.Boolean);

    $.Property({Static:false, Public:true }, "AddressFamily", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Property({Static:false, Public:true }, "SocketType", $asm12.TypeRef("System.Net.Sockets.SocketType"));

    $.Property({Static:false, Public:true }, "ProtocolType", $asm12.TypeRef("System.Net.Sockets.ProtocolType"));

    $.Property({Static:false, Public:true }, "IsBound", $.Boolean);

    $.Property({Static:false, Public:true }, "DualMode", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDualMode", $.Boolean);

    $.Property({Static:false, Public:false}, "CanUseAcceptEx", $.Boolean);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "Caches", $asm12.TypeRef("System.Net.Sockets.Socket+CacheSet"));

    $.Property({Static:false, Public:false}, "CleanedUp", $.Boolean);

    $.Property({Static:false, Public:false}, "Transport", $asm12.TypeRef("System.Net.TransportType"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.Socket+CacheSet */ 

(function CacheSet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.Socket+CacheSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "ConnectClosureCache", $asm12.TypeRef("System.Net.CallbackClosure"));

    $.Field({Static:false, Public:false}, "SendClosureCache", $asm12.TypeRef("System.Net.CallbackClosure"));

    $.Field({Static:false, Public:false}, "SendOverlappedCache", $asm12.TypeRef("System.Net.Sockets.OverlappedCache"));

    $.Field({Static:false, Public:false}, "ReceiveOverlappedCache", $asm12.TypeRef("System.Net.Sockets.OverlappedCache"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.Socket+MultipleAddressConnectAsyncResult */ 

(function MultipleAddressConnectAsyncResult$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.ContextAwareResult"), 
      Name: "System.Net.Sockets.Socket+MultipleAddressConnectAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]), $.Int32, 
          $asm12.TypeRef("System.Net.Sockets.Socket"), $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemoteEndPoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.Field({Static:false, Public:false}, "addresses", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.IPAddress")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "port", $.Int32);

    $.Property({Static:false, Public:false}, "RemoteEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.Socket+CachedTaskEventArgs */ 

(function CachedTaskEventArgs$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.Socket+CachedTaskEventArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Accept", $asm12.TypeRef("System.Net.Sockets.Socket+TaskSocketAsyncEventArgs`1", [$asm12.TypeRef("System.Net.Sockets.Socket")]));

    $.Field({Static:false, Public:true }, "Receive", $asm12.TypeRef("System.Net.Sockets.Socket+Int32TaskSocketAsyncEventArgs"));

    $.Field({Static:false, Public:true }, "Send", $asm12.TypeRef("System.Net.Sockets.Socket+Int32TaskSocketAsyncEventArgs"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.Socket+Int32TaskSocketAsyncEventArgs */ 

(function Int32TaskSocketAsyncEventArgs$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Sockets.Socket+TaskSocketAsyncEventArgs`1", [$asm0F.TypeRef("System.Int32")]), 
      Name: "System.Net.Sockets.Socket+Int32TaskSocketAsyncEventArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_wrapExceptionsInIOExceptions", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.Socket+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.Socket+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__346_0", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__346_1", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__346_2", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Net.Sockets.SocketAsyncEventArgs")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Sockets.ConnectAsyncResult */ 

(function ConnectAsyncResult$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.ContextAwareResult"), 
      Name: "System.Net.Sockets.ConnectAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm12.TypeRef("System.Net.EndPoint"), 
          $.Object, $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemoteEndPoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.Field({Static:false, Public:false}, "m_EndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Property({Static:false, Public:false}, "RemoteEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.AcceptAsyncResult */ 

(function AcceptAsyncResult$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.ContextAwareResult"), 
      Name: "System.Net.Sockets.AcceptAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Sockets.SocketAsyncOperation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketAsyncOperation", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Accept: 1, 
    Connect: 2, 
    Disconnect: 3, 
    Receive: 4, 
    ReceiveFrom: 5, 
    ReceiveMessageFrom: 6, 
    Send: 7, 
    SendPackets: 8, 
    SendTo: 9, 
  }
);

/* class System.Net.Sockets.SocketAsyncEventArgs */ 

(function SocketAsyncEventArgs$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.EventArgs"), 
      Name: "System.Net.Sockets.SocketAsyncEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false}, "FreeOverlapped", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AcceptSocket", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BytesTransferred", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastOperation", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.SocketAsyncOperation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SocketError", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.Sockets.SocketError"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserToken", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Completed", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_m_Completed", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.EventHandler`1", [$.Type]))
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_AcceptSocket", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ControlDataSize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ControlDataIPv6Size", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_WSAMsgSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_AcceptSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Field({Static:false, Public:false}, "m_BytesTransferred", $.Int32);

    $.Field({Static:false, Public:false}, "m_Completed", $asm0F.TypeRef("System.EventHandler`1", [$.Type]))
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));
    ; 

    $.Field({Static:false, Public:false}, "m_SocketError", $asm12.TypeRef("System.Net.Sockets.SocketError"));
    ; 
    ; 

    $.Field({Static:true , Public:false}, "s_LoggingEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "AcceptSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.Property({Static:false, Public:true }, "BytesTransferred", $.Int32);

    $.Property({Static:false, Public:true }, "LastOperation", $asm12.TypeRef("System.Net.Sockets.SocketAsyncOperation"));

    $.Property({Static:false, Public:true }, "SocketError", $asm12.TypeRef("System.Net.Sockets.SocketError"));

    $.Property({Static:false, Public:true }, "UserToken", $.Object);

    $.Event({Static:false, Public:false}, "m_Completed", $asm0F.TypeRef("System.EventHandler`1", [$.Type]));

    $.Event({Static:false, Public:true }, "Completed", $asm0F.TypeRef("System.EventHandler`1", [$.Type]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Sockets.SocketAsyncEventArgs+PinState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketAsyncEventArgs+PinState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    NoBuffer: 1, 
    SingleAcceptBuffer: 2, 
    SingleBuffer: 3, 
    MultipleBuffer: 4, 
    SendPackets: 5, 
  }
);

/* enum System.Net.Sockets.SocketError */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketError", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SocketError: -1, 
    Success: 0, 
    OperationAborted: 995, 
    IOPending: 997, 
    Interrupted: 10004, 
    AccessDenied: 10013, 
    Fault: 10014, 
    InvalidArgument: 10022, 
    TooManyOpenSockets: 10024, 
    WouldBlock: 10035, 
    InProgress: 10036, 
    AlreadyInProgress: 10037, 
    NotSocket: 10038, 
    DestinationAddressRequired: 10039, 
    MessageSize: 10040, 
    ProtocolType: 10041, 
    ProtocolOption: 10042, 
    ProtocolNotSupported: 10043, 
    SocketNotSupported: 10044, 
    OperationNotSupported: 10045, 
    ProtocolFamilyNotSupported: 10046, 
    AddressFamilyNotSupported: 10047, 
    AddressAlreadyInUse: 10048, 
    AddressNotAvailable: 10049, 
    NetworkDown: 10050, 
    NetworkUnreachable: 10051, 
    NetworkReset: 10052, 
    ConnectionAborted: 10053, 
    ConnectionReset: 10054, 
    NoBufferSpaceAvailable: 10055, 
    IsConnected: 10056, 
    NotConnected: 10057, 
    Shutdown: 10058, 
    TimedOut: 10060, 
    ConnectionRefused: 10061, 
    HostDown: 10064, 
    HostUnreachable: 10065, 
    ProcessLimit: 10067, 
    SystemNotReady: 10091, 
    VersionNotSupported: 10092, 
    NotInitialized: 10093, 
    Disconnecting: 10101, 
    TypeNotFound: 10109, 
    HostNotFound: 11001, 
    TryAgain: 11002, 
    NoRecovery: 11003, 
    NoData: 11004, 
  }
);

/* enum System.Net.Sockets.SocketFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    OutOfBand: 1, 
    Peek: 2, 
    DontRoute: 4, 
    MaxIOVectorLength: 16, 
    Truncated: 256, 
    ControlDataTruncated: 512, 
    Broadcast: 1024, 
    Multicast: 2048, 
    Partial: 32768, 
  }
);

/* enum System.Net.Sockets.SocketOptionLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketOptionLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    IP: 0, 
    Tcp: 6, 
    Udp: 17, 
    IPv6: 41, 
    Socket: 65535, 
  }
);

/* enum System.Net.Sockets.SocketOptionName */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketOptionName", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    DontLinger: -129, 
    ExclusiveAddressUse: -5, 
    Debug: 1, 
    IPOptions: 1, 
    NoChecksum: 1, 
    NoDelay: 1, 
    AcceptConnection: 2, 
    HeaderIncluded: 2, 
    BsdUrgent: 2, 
    Expedited: 2, 
    TypeOfService: 3, 
    ReuseAddress: 4, 
    IpTimeToLive: 4, 
    KeepAlive: 8, 
    MulticastInterface: 9, 
    MulticastTimeToLive: 10, 
    MulticastLoopback: 11, 
    AddMembership: 12, 
    DropMembership: 13, 
    DontFragment: 14, 
    AddSourceMembership: 15, 
    DontRoute: 16, 
    DropSourceMembership: 16, 
    BlockSource: 17, 
    UnblockSource: 18, 
    PacketInformation: 19, 
    ChecksumCoverage: 20, 
    HopLimit: 21, 
    IPProtectionLevel: 23, 
    IPv6Only: 27, 
    Broadcast: 32, 
    UseLoopback: 64, 
    Linger: 128, 
    OutOfBandInline: 256, 
    SendBuffer: 4097, 
    ReceiveBuffer: 4098, 
    SendLowWater: 4099, 
    ReceiveLowWater: 4100, 
    SendTimeout: 4101, 
    ReceiveTimeout: 4102, 
    Error: 4103, 
    Type: 4104, 
    ReuseUnicastPort: 12295, 
    UpdateAcceptContext: 28683, 
    UpdateConnectContext: 28688, 
    MaxConnections: 2147483647, 
  }
);

/* enum System.Net.Sockets.SocketShutdown */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketShutdown", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Receive: 0, 
    Send: 1, 
    Both: 2, 
  }
);

/* enum System.Net.Sockets.SocketType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Sockets.SocketType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    Stream: 1, 
    Dgram: 2, 
    Raw: 3, 
    Rdm: 4, 
    Seqpacket: 5, 
  }
);

/* class System.Net.Sockets.BaseOverlappedAsyncResult */ 

(function BaseOverlappedAsyncResult$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.ContextAwareResult"), 
      Name: "System.Net.Sockets.BaseOverlappedAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.Socket"), $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAsyncCallOverlappedResult", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Net.Sockets.SocketError"), [$asm12.TypeRef("System.Net.Sockets.SocketError")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CompletionPortCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Threading.NativeOverlapped")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractCache", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.OverlappedCache")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ForceReleaseUnmanagedStructures", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverlappedHandle", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OverlappedCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PinUnmanagedObjects", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostCompletion", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseGCHandles", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseUnmanagedStructures", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmanagedStructures", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupCache", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.OverlappedCache")]))
    );

    $.Field({Static:false, Public:false}, "m_UnmanagedBlob", $asm12.TypeRef("System.Net.SafeOverlappedFree"));

    $.Field({Static:false, Public:false}, "m_OverlappedEvent", $asm0F.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "m_CleanupCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_DisableOverlapped", $.Boolean);

    $.Field({Static:false, Public:false}, "m_UseOverlappedIO", $.Boolean);

    $.Field({Static:false, Public:false}, "m_GCHandles", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Runtime.InteropServices.GCHandle")]));

    $.Field({Static:false, Public:false}, "m_Cache", $asm12.TypeRef("System.Net.Sockets.OverlappedCache"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_IOCallback", $asm0F.TypeRef("System.Threading.IOCompletionCallback"), function ($pi) {
        return $asm0F.System.Threading.IOCompletionCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "CompletionPortCallback", new JSIL.MethodSignature(null, [
                $.UInt32, $.UInt32, 
                $jsilcore.TypeRef("JSIL.Pointer", [$asm0F.TypeRef("System.Threading.NativeOverlapped")])
              ]), true, false));
      });

    $.Property({Static:false, Public:false}, "OverlappedHandle", $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.AcceptOverlappedAsyncResult */ 

(function AcceptOverlappedAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Sockets.BaseOverlappedAsyncResult"), 
      Name: "System.Net.Sockets.AcceptOverlappedAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.Socket"), $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BytesTransferred", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "LogBuffer", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostCompletion", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AcceptSocket", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Net.Sockets.Socket"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmanagedStructures", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "m_LocalBytesTransferred", $.Int32);

    $.Field({Static:false, Public:false}, "m_Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "BytesTransferred", $.Int32);

    $.Property({Static:false, Public:false}, "AcceptSocket", $asm12.TypeRef("System.Net.Sockets.Socket"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.OverlappedCache */ 

(function OverlappedCache$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.OverlappedCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Threading.Overlapped"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm0F.TypeRef("System.Threading.IOCompletionCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Threading.Overlapped"), $.Object, 
          $asm0F.TypeRef("System.Threading.IOCompletionCallback"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NativeOverlapped", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.SafeNativeOverlapped"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Overlapped", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.Overlapped"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PinnedObjects", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PinnedObjectsArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:true , Public:false}, "InterlockedFree", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalFree", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_Overlapped", $asm0F.TypeRef("System.Threading.Overlapped"));

    $.Field({Static:false, Public:false}, "m_NativeOverlapped", $asm12.TypeRef("System.Net.SafeNativeOverlapped"));

    $.Field({Static:false, Public:false}, "m_PinnedObjects", $.Object);

    $.Field({Static:false, Public:false}, "m_PinnedObjectsArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:false}, "Overlapped", $asm0F.TypeRef("System.Threading.Overlapped"));

    $.Property({Static:false, Public:false}, "NativeOverlapped", $asm12.TypeRef("System.Net.SafeNativeOverlapped"));

    $.Property({Static:false, Public:false}, "PinnedObjects", $.Object);

    $.Property({Static:false, Public:false}, "PinnedObjectsArray", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.ConnectOverlappedAsyncResult */ 

(function ConnectOverlappedAsyncResult$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Sockets.BaseOverlappedAsyncResult"), 
      Name: "System.Net.Sockets.ConnectOverlappedAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.Socket"), $asm12.TypeRef("System.Net.EndPoint"), 
          $.Object, $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemoteEndPoint", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Net.EndPoint"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostCompletion", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "m_EndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.Property({Static:false, Public:false}, "RemoteEndPoint", $asm12.TypeRef("System.Net.EndPoint"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Sockets.DynamicWinsockMethods */ 

(function DynamicWinsockMethods$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Net.Sockets.DynamicWinsockMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $asm12.TypeRef("System.Net.Sockets.SocketType"), 
          $asm12.TypeRef("System.Net.Sockets.ProtocolType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMethods", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("System.Net.Sockets.AddressFamily"), $asm12.TypeRef("System.Net.Sockets.SocketType"), 
          $asm12.TypeRef("System.Net.Sockets.ProtocolType")
        ])
    );

    $.Field({Static:true , Public:false}, "s_MethodTable", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:false}, "addressFamily", $asm12.TypeRef("System.Net.Sockets.AddressFamily"));

    $.Field({Static:false, Public:false}, "socketType", $asm12.TypeRef("System.Net.Sockets.SocketType"));

    $.Field({Static:false, Public:false}, "protocolType", $asm12.TypeRef("System.Net.Sockets.ProtocolType"));

    $.Field({Static:false, Public:false}, "lockObject", $.Object);
    ; 
    ; 
    ; 
    ; 
    ; 
    ; 
    ; 
    ; 


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.Sockets.AcceptExDelegate */ 

JSIL.MakeDelegate("System.Net.Sockets.AcceptExDelegate", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [
      $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm12.TypeRef("System.Net.SafeCloseSocket"), 
      $asm0F.TypeRef("System.IntPtr"), $asm0F.TypeRef("System.Int32"), 
      $asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Int32")]), $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")
    ]));

/* delegate System.Net.Sockets.GetAcceptExSockaddrsDelegate */ 

JSIL.MakeDelegate("System.Net.Sockets.GetAcceptExSockaddrsDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm0F.TypeRef("System.IntPtr"), $asm0F.TypeRef("System.Int32"), 
      $asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Int32")]), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Int32")])
    ]));

/* delegate System.Net.Sockets.ConnectExDelegate */ 

JSIL.MakeDelegate("System.Net.Sockets.ConnectExDelegate", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [
      $asm12.TypeRef("System.Net.SafeCloseSocket"), $asm0F.TypeRef("System.IntPtr"), 
      $asm0F.TypeRef("System.Int32"), $asm0F.TypeRef("System.IntPtr"), 
      $asm0F.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Int32")]), 
      $asm0F.TypeRef("System.Runtime.InteropServices.SafeHandle")
    ]));

/* class System.Net.Sockets.OverlappedAsyncResult */ 

(function OverlappedAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Net.Sockets.BaseOverlappedAsyncResult"), 
      Name: "System.Net.Sockets.OverlappedAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Net.Sockets.Socket"), $.Object, 
          $asm0F.TypeRef("System.AsyncCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostCompletion", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmanagedStructures", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.SocketAddress"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmanagedStructures", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Net.SocketAddress"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.OverlappedCache")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmanagedStructures", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmanagedStructures", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.BufferOffsetSize")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Net.Sockets.OverlappedCache")])])
    );

    $.Field({Static:false, Public:false}, "m_SocketAddress", $asm12.TypeRef("System.Net.SocketAddress"));

    $.Field({Static:false, Public:false}, "m_SingleBuffer", $asm12.TypeRef("System.Net.WSABuffer"));

    $.Field({Static:false, Public:false}, "m_WSABuffers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Net.WSABuffer")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Specialized.BitVector32 */ 

(function BitVector32$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Specialized.BitVector32", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "data", $.UInt32);

    $.Property({Static:false, Public:true }, "Item", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.ListDictionary */ 

(function ListDictionary$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.ListDictionary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.IComparer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "head", $asm12.TypeRef("System.Collections.Specialized.ListDictionary+DictionaryNode"));

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.IComparer"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm0F.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IDictionary"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.ListDictionary+NodeEnumerator */ 

(function NodeEnumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.ListDictionary+NodeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.ListDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "list", $asm12.TypeRef("System.Collections.Specialized.ListDictionary"));

    $.Field({Static:false, Public:false}, "current", $asm12.TypeRef("System.Collections.Specialized.ListDictionary+DictionaryNode"));

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "start", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm0F.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.ListDictionary+NodeKeyValueCollection */ 

(function NodeKeyValueCollection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.ListDictionary+NodeKeyValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Specialized.ListDictionary"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "list", $asm12.TypeRef("System.Collections.Specialized.ListDictionary"));

    $.Field({Static:false, Public:false}, "isKeys", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.ListDictionary+NodeKeyValueCollection+NodeKeyValueEnumerator */ 

(function NodeKeyValueEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.ListDictionary+NodeKeyValueCollection+NodeKeyValueEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Specialized.ListDictionary"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "list", $asm12.TypeRef("System.Collections.Specialized.ListDictionary"));

    $.Field({Static:false, Public:false}, "current", $asm12.TypeRef("System.Collections.Specialized.ListDictionary+DictionaryNode"));

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "isKeys", $.Boolean);

    $.Field({Static:false, Public:false}, "start", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.ListDictionary+DictionaryNode */ 

(function DictionaryNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.ListDictionary+DictionaryNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "key", $.Object);

    $.Field({Static:false, Public:true }, "value", $.Object);

    $.Field({Static:false, Public:true }, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.CompatibleComparer */ 

(function CompatibleComparer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.CompatibleComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.IComparer"), $asm0F.TypeRef("System.Collections.IHashCodeProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IComparer"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultComparer", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IComparer"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultHashCodeProvider", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IHashCodeProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashCodeProvider", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IHashCodeProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_comparer", $asm0F.TypeRef("System.Collections.IComparer"));

    $.Field({Static:true , Public:false}, "defaultComparer", $asm0F.TypeRef("System.Collections.IComparer"));

    $.Field({Static:false, Public:false}, "_hcp", $asm0F.TypeRef("System.Collections.IHashCodeProvider"));

    $.Field({Static:true , Public:false}, "defaultHashProvider", $asm0F.TypeRef("System.Collections.IHashCodeProvider"));

    $.Property({Static:false, Public:true }, "Comparer", $asm0F.TypeRef("System.Collections.IComparer"));

    $.Property({Static:false, Public:true }, "HashCodeProvider", $asm0F.TypeRef("System.Collections.IHashCodeProvider"));

    $.Property({Static:true , Public:true }, "DefaultComparer", $asm0F.TypeRef("System.Collections.IComparer"));

    $.Property({Static:true , Public:true }, "DefaultHashCodeProvider", $asm0F.TypeRef("System.Collections.IHashCodeProvider"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.StringCollection */ 

(function StringCollection$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.StringCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "set_Item");

    $.Field({Static:false, Public:false}, "data", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IList"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.StringEnumerator */ 

(function StringEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Specialized.StringEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "baseEnumerator", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:false}, "temp", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:true }, "Current", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Specialized.StringDictionaryWithComparer */ 

(function StringDictionaryWithComparer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Collections.Specialized.StringDictionary"), 
      Name: "System.Collections.Specialized.StringDictionaryWithComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.IEqualityComparer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Collections.Generic");
/* class System.Collections.Generic.System_QueueDebugView`1 */ 

(function System_QueueDebugView$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.System_QueueDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:false}, "queue", $asm12.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.System_StackDebugView`1 */ 

(function System_StackDebugView$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.System_StackDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.Stack`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:false}, "stack", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.System_DictionaryDebugView`2 */ 

(function System_DictionaryDebugView$b2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.System_DictionaryDebugView`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false}, "dict", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.Queue`1 */ 

(function Queue$b1$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.Queue`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dequeue", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.Queue`1+Enumerator", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Peek", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_head", $.Int32);

    $.Field({Static:false, Public:false}, "_tail", $.Int32);

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_syncRoot", $.Object);

    $.Field({Static:true , Public:false}, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 3 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* struct System.Collections.Generic.Queue`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.Queue`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_q", $asm12.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_currentElement", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedList`2 */ 

(function SortedList$b2$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedList`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetByIndex", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyListHelper", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedList`2+KeyList", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueListHelper", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedList`2+ValueList", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOfKey", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOfValue", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.GenericParameter("TKey"), 
          $.GenericParameter("TValue")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleKey", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.Add", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.get_Keys", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.get_Values", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "keyList", $asm12.TypeRef("System.Collections.Generic.SortedList`2+KeyList", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "valueList", $asm12.TypeRef("System.Collections.Generic.SortedList`2+ValueList", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "_syncRoot", $.Object);

    $.Field({Static:true , Public:false}, "emptyKeys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]));

    $.Field({Static:true , Public:false}, "emptyValues", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.Keys", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm0F.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.Values", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 7 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* struct System.Collections.Generic.SortedList`2+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.SortedList`2+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Entry", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.DictionaryEntry"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Entry");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Key", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Key");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Value");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_sortedList", $asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "getEnumeratorRetType", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Key", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Entry", $asm0F.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IDictionaryEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedList`2+SortedListKeyEnumerator */ 

(function SortedListKeyEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedList`2+SortedListKeyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_sortedList", $asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "currentKey", $.GenericParameter("TKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TKey"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TKey")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedList`2+SortedListValueEnumerator */ 

(function SortedListValueEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedList`2+SortedListValueEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_sortedList", $asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "currentValue", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedList`2+KeyList */ 

(function KeyList$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedList`2+KeyList", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "_dict", $asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TKey"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TKey")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TKey")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedList`2+ValueList */ 

(function ValueList$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedList`2+ValueList", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TValue")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "_dict", $asm12.TypeRef("System.Collections.Generic.SortedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TValue"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.Stack`1 */ 

(function Stack$b1$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.Stack`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.Stack`1+Enumerator", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Peek", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Pop", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_syncRoot", $.Object);

    $.Field({Static:true , Public:false}, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 3 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* struct System.Collections.Generic.Stack`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.Stack`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.Stack`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_stack", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "currentElement", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedDictionary`2 */ 

(function SortedDictionary$b2$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+KeyCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+ValueCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleKey", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.Add", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.get_Keys", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.get_Values", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionary"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false}, "keys", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+KeyCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "values", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+ValueCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "_set", $asm12.TypeRef("System.Collections.Generic.TreeSet`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Keys", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+KeyCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.Keys", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true }, "Values", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+ValueCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.Values", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm0F.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 7 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.SortedDictionary`2+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.SortedDictionary`2+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NotStartedOrEnded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Entry", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.DictionaryEntry"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Entry");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Key", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Key");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Value");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "treeEnum", $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Enumerator", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:false}, "getEnumeratorRetType", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false}, "NotStartedOrEnded", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Key", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Entry", $asm0F.TypeRef("System.Collections.DictionaryEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IDictionaryEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedDictionary`2+KeyCollection */ 

(function KeyCollection$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+KeyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTKey$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTKey$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTKey$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTKey$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTKey$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TKey")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TKey")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "dictionary", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTKey$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TKey")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("TKey")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "dictEnum", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TKey"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TKey")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedDictionary`2+KeyCollection+<>c__DisplayClass5_0 */ 

(function $l$gc__DisplayClass5_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+KeyCollection+<>c__DisplayClass5_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyTo$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])])
    );

    $.Field({Static:false, Public:true }, "array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedDictionary`2+KeyCollection+<>c__DisplayClass6_0 */ 

(function $l$gc__DisplayClass6_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+KeyCollection+<>c__DisplayClass6_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSystem.Collections.ICollection.CopyTo$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])])
    );

    $.Field({Static:false, Public:true }, "objects", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+KeyCollection+<>c__DisplayClass6_1", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedDictionary`2+KeyCollection+<>c__DisplayClass6_1 */ 

(function $l$gc__DisplayClass6_1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+KeyCollection+<>c__DisplayClass6_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedDictionary`2+ValueCollection */ 

(function ValueCollection$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+ValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TValue")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTValue$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TValue")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTValue$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTValue$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TValue")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTValue$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTValue$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "dictionary", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTValue$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("TValue")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "dictEnum", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedDictionary`2+ValueCollection+<>c__DisplayClass5_0 */ 

(function $l$gc__DisplayClass5_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+ValueCollection+<>c__DisplayClass5_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyTo$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])])
    );

    $.Field({Static:false, Public:true }, "array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TValue")]));

    $.Field({Static:false, Public:true }, "index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedDictionary`2+ValueCollection+<>c__DisplayClass6_0 */ 

(function $l$gc__DisplayClass6_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+ValueCollection+<>c__DisplayClass6_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSystem.Collections.ICollection.CopyTo$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])])
    );

    $.Field({Static:false, Public:true }, "objects", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+ValueCollection+<>c__DisplayClass6_1", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedDictionary`2+ValueCollection+<>c__DisplayClass6_1 */ 

(function $l$gc__DisplayClass6_1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+ValueCollection+<>c__DisplayClass6_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer */ 

(function KeyValuePairComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.Generic.Comparer`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer")])]), 
      Name: "System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false}, "keyComparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedDictionary`2+<>c__DisplayClass34_0 */ 

(function $l$gc__DisplayClass34_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+<>c__DisplayClass34_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lContainsValue$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])])
    );

    $.Field({Static:false, Public:true }, "found", $.Boolean);

    $.Field({Static:false, Public:true }, "value", $.GenericParameter("TValue"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedDictionary`2+<>c__DisplayClass34_1 */ 

(function $l$gc__DisplayClass34_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedDictionary`2+<>c__DisplayClass34_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lContainsValue$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])])
    );

    $.Field({Static:false, Public:true }, "valueComparer", $asm0F.TypeRef("System.Collections.Generic.EqualityComparer`1", [$.GenericParameter("TValue")]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm12.TypeRef("System.Collections.Generic.SortedDictionary`2+<>c__DisplayClass34_0", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedSet`1 */ 

(function SortedSet$b1$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedSet`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddIfNotPresent", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoRemove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindNode", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedSet`1+Enumerator", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSibling", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InOrderTreeWalk", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.TreeWalkPredicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InOrderTreeWalk", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.TreeWalkPredicate`1", [$.GenericParameter("T")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertionBalance", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])]), 
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Is2Node", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Is4Node", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBlack", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullOrBlack", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRed", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsWithinRange", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:false}, "log2", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Merge2Nodes", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), 
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceChildOfNodeOrRoot", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), 
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceNode", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), 
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RotateLeft", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RotateLeftRight", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RotateRight", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RotateRightLeft", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RotationNeeded", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Collections.Generic.TreeRotation"), [
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]), 
          $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Split4Node", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:false}, "UpdateVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VersionCheck", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "root", $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "_syncRoot", $.Object);

    $.Field({Static:false, Public:false}, "siInfo", $asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Comparer", $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 5 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 6 */ $asm0F.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 7 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedSet`1+Node */ 

(function Node$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedSet`1+Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $.Boolean])
    );

    $.Field({Static:false, Public:true }, "IsRed", $.Boolean);

    $.Field({Static:false, Public:true }, "Item", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "Left", $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "Right", $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.SortedSet`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.SortedSet`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NotStartedOrEnded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Intialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "tree", $asm12.TypeRef("System.Collections.Generic.SortedSet`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "stack", $asm12.TypeRef("System.Collections.Generic.Stack`1", [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "current", $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]));

    $.Field({Static:true , Public:false}, "dummyNode", $asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "reverse", $.Boolean);

    $.Field({Static:false, Public:false}, "siInfo", $asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false}, "NotStartedOrEnded", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 3 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm0F.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.SortedSet`1+<>c__DisplayClass52_0 */ 

(function $l$gc__DisplayClass52_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedSet`1+<>c__DisplayClass52_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyTo$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:true }, "index", $.Int32);

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedSet`1+<>c__DisplayClass53_0 */ 

(function $l$gc__DisplayClass53_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedSet`1+<>c__DisplayClass53_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSystem.Collections.ICollection.CopyTo$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:true }, "objects", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm12.TypeRef("System.Collections.Generic.SortedSet`1+<>c__DisplayClass53_1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.SortedSet`1+<>c__DisplayClass53_1 */ 

(function $l$gc__DisplayClass53_1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.SortedSet`1+<>c__DisplayClass53_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Collections.Generic.TreeSet`1 */ 

(function TreeSet$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Collections.Generic.SortedSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.TreeSet`1")]), 
      Name: "System.Collections.Generic.TreeSet`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddIfNotPresent", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Collections.Generic.TreeWalkPredicate`1 */ 

JSIL.MakeDelegate("System.Collections.Generic.TreeWalkPredicate`1", false, ["T"], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [$asm12.TypeRef("System.Collections.Generic.SortedSet`1+Node", [new JSIL.GenericParameter("T", "System.Collections.Generic.TreeWalkPredicate`1")])]));

/* enum System.Collections.Generic.TreeRotation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Collections.Generic.TreeRotation", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LeftRotation: 1, 
    RightRotation: 2, 
    RightLeftRotation: 3, 
    LeftRightRotation: 4, 
  }
);

/* class System.IO.InvalidDataException */ 

(function InvalidDataException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.SystemException"), 
      Name: "System.IO.InvalidDataException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Compression.BlockType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.BlockType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Uncompressed: 0, 
    Static: 1, 
    Dynamic: 2, 
  }
);

/* enum System.IO.Compression.CompressionMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.CompressionMode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Decompress: 0, 
    Compress: 1, 
  }
);

/* enum System.IO.Compression.CompressionLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.CompressionLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Optimal: 0, 
    Fastest: 1, 
    NoCompression: 2, 
  }
);

/* class System.IO.Compression.CopyEncoder */ 

(function CopyEncoder$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.CopyEncoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBlock", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.IO.Compression.DeflateInput"), $asm12.TypeRef("System.IO.Compression.OutputBuffer"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLenNLen", 
      new JSIL.MethodSignature(null, [$.UInt16, $asm12.TypeRef("System.IO.Compression.OutputBuffer")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.Crc32Helper */ 

(function Crc32Helper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.IO.Compression.Crc32Helper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "UpdateCrc32", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "crcTable", $jsilcore.TypeRef("System.Array", [$.UInt32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.DeflateInput */ 

(function DeflateInput$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.DeflateInput", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConsumeBytes", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.DeflateInput+InputState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StartIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.DeflateInput+InputState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Buffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Count", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StartIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Property({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "StartIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IO.Compression.DeflateInput+InputState */ 

(function InputState$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.IO.Compression.DeflateInput+InputState", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IO.Compression.IDeflater */ 

JSIL.MakeInterface(
  "System.IO.Compression.IDeflater", false, [], function ($) {
    $.Method({}, "NeedsInput", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetDeflateOutput", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])]));
    $.Method({}, "Finish", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
  }, [$asm0F.TypeRef("System.IDisposable")]);

/* interface System.IO.Compression.IInflater */ 

JSIL.MakeInterface(
  "System.IO.Compression.IInflater", false, [], function ($) {
    $.Method({}, "Inflate", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "Finished", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
  }, [$asm0F.TypeRef("System.IDisposable")]);

/* class System.IO.Compression.DeflaterManaged */ 

(function DeflaterManaged$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.DeflaterManaged", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushInputWindows", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.Finish", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "Finish");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.GetDeflateOutput", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "GetDeflateOutput");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.NeedsInput", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "NeedsInput");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "SetInput");

    $.ExternalMethod({Static:false, Public:false}, "UseCompressed", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFinal", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "deflateEncoder", $asm12.TypeRef("System.IO.Compression.FastEncoder"));

    $.Field({Static:false, Public:false}, "copyEncoder", $asm12.TypeRef("System.IO.Compression.CopyEncoder"));

    $.Field({Static:false, Public:false}, "input", $asm12.TypeRef("System.IO.Compression.DeflateInput"));

    $.Field({Static:false, Public:false}, "output", $asm12.TypeRef("System.IO.Compression.OutputBuffer"));

    $.Field({Static:false, Public:false}, "processingState", $asm12.TypeRef("System.IO.Compression.DeflaterManaged+DeflaterState"));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.IO.Compression.IDeflater"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Compression.DeflaterManaged+DeflaterState */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.DeflaterManaged+DeflaterState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotStarted: 0, 
    SlowDownForIncompressible1: 1, 
    SlowDownForIncompressible2: 2, 
    StartingSmallData: 3, 
    CompressThenCheck: 4, 
    CheckingForIncompressible: 5, 
    HandlingSmallData: 6, 
  }
);

/* class System.IO.Compression.DeflaterZLib */ 

(function DeflaterZLib$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.DeflaterZLib", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.CompressionLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DeallocateInputBufferHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Deflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode")])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DeflateInit", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionLevel"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionStrategy")
        ])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false}, "ReadDeflateOutput", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.Finish", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "Finish");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.GetDeflateOutput", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "GetDeflateOutput")
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.NeedsInput", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "NeedsInput")
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IO.Compression.IDeflater.SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Overrides($asm12.TypeRef("System.IO.Compression.IDeflater"), "SetInput")
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_zlibStream", $asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle"));

    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "syncLock", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.IO.Compression.IDeflater"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.InflaterZlib */ 

(function InflaterZlib$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.InflaterZlib", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DeallocateInputBufferHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Finished", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Inflate", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Inflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode")])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InflateInit", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadInflateOutput", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "_finished", $.Boolean);

    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "_zlibStream", $asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_syncLock", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.IO.Compression.IInflater"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.ZLibNative */ 

(function ZLibNative$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.IO.Compression.ZLibNative", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateZLibStreamForDeflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle")])])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateZLibStreamForDeflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle")]), $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionLevel"), 
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionStrategy")
        ])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateZLibStreamForInflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle")])])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateZLibStreamForInflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle")]), $.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ZLibCompileFlags", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ZNullPtr", $.IntPtr);


    function ZLibNative__cctor () {
      $thisType.ZNullPtr = new $asm0F.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ZLibNative__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Compression.ZLibNative+FlushCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.ZLibNative+FlushCode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NoFlush: 0, 
    PartialFlush: 1, 
    SyncFlush: 2, 
    FullFlush: 3, 
    Finish: 4, 
    Block: 5, 
  }
);

/* enum System.IO.Compression.ZLibNative+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.ZLibNative+ErrorCode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    VersionError: -6, 
    BufError: -5, 
    MemError: -4, 
    DataError: -3, 
    StreamError: -2, 
    ErrorNo: -1, 
    Ok: 0, 
    StreamEnd: 1, 
    NeedDictionary: 2, 
  }
);

/* enum System.IO.Compression.ZLibNative+CompressionLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.ZLibNative+CompressionLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DefaultCompression: -1, 
    NoCompression: 0, 
    BestSpeed: 1, 
    BestCompression: 9, 
  }
);

/* enum System.IO.Compression.ZLibNative+CompressionStrategy */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.ZLibNative+CompressionStrategy", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DefaultStrategy: 0, 
    Filtered: 1, 
    HuffmanOnly: 2, 
    Rle: 3, 
    Fixed: 4, 
  }
);

/* enum System.IO.Compression.ZLibNative+CompressionMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.ZLibNative+CompressionMethod", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Deflated: 8, 
  }
);

/* struct System.IO.Compression.ZLibNative+ZStream */ 

(function ZStream$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.IO.Compression.ZLibNative+ZStream", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "msg", $.IntPtr);

    $.Field({Static:false, Public:false}, "zalloc", $.IntPtr);

    $.Field({Static:false, Public:false}, "zfree", $.IntPtr);

    $.Field({Static:false, Public:false}, "opaque", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.IO.Compression.ZLibNative+DeflateInit2_Delegate */ 

JSIL.MakeDelegate("System.IO.Compression.ZLibNative+DeflateInit2_Delegate", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [
      $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZStream")]), $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionLevel"), 
      $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionMethod"), $asm0F.TypeRef("System.Int32"), 
      $asm0F.TypeRef("System.Int32"), $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionStrategy"), 
      $asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Int32")
    ]), {
    Parameters: [
      {
        NativeType: "LPStr"
      }, null

    ]
  }
);

/* delegate System.IO.Compression.ZLibNative+DeflateDelegate */ 

JSIL.MakeDelegate("System.IO.Compression.ZLibNative+DeflateDelegate", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZStream")]), $asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode")]));

/* delegate System.IO.Compression.ZLibNative+DeflateEndDelegate */ 

JSIL.MakeDelegate("System.IO.Compression.ZLibNative+DeflateEndDelegate", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZStream")])]));

/* delegate System.IO.Compression.ZLibNative+InflateInit2_Delegate */ 

JSIL.MakeDelegate("System.IO.Compression.ZLibNative+InflateInit2_Delegate", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [
      $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZStream")]), $asm0F.TypeRef("System.Int32"), 
      $asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Int32")
    ]), {
    Parameters: [
      {
        NativeType: "LPStr"
      }, null

    ]
  }
);

/* delegate System.IO.Compression.ZLibNative+InflateDelegate */ 

JSIL.MakeDelegate("System.IO.Compression.ZLibNative+InflateDelegate", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZStream")]), $asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode")]));

/* delegate System.IO.Compression.ZLibNative+InflateEndDelegate */ 

JSIL.MakeDelegate("System.IO.Compression.ZLibNative+InflateEndDelegate", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.IO.Compression.ZLibNative+ZStream")])]));

/* delegate System.IO.Compression.ZLibNative+ZlibCompileFlagsDelegate */ 

JSIL.MakeDelegate("System.IO.Compression.ZLibNative+ZlibCompileFlagsDelegate", false, [], 
  JSIL.MethodSignature.Return($asm0F.TypeRef("System.Int32")));

/* class System.IO.Compression.ZLibNative+NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.ZLibNative+NativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$asm12.TypeRef("System.IO.Compression.ZLibNative+SafeLibraryHandle"), $.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibrary", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+SafeLibraryHandle"), [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.ZLibNative+SafeLibraryHandle */ 

(function SafeLibraryHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IO.Compression.ZLibNative+SafeLibraryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.IO.Compression.ZLibNative+ZLibStreamHandle */ 

(function ZLibStreamHandle$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid"), 
      Name: "System.IO.Compression.ZLibNative+ZLibStreamHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Deflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode")])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeflateEnd", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeflateInit2_", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [
          $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionLevel"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.IO.Compression.ZLibNative+CompressionStrategy")
        ])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnsureNotDisposed", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnsureState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle+State"))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Adler", 
      JSIL.MethodSignature.Return($.UInt32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AvailIn", 
      JSIL.MethodSignature.Return($.UInt32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AvailOut", 
      JSIL.MethodSignature.Return($.UInt32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_InitializationState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle+State"))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NextIn", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NextOut", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TotalIn", 
      JSIL.MethodSignature.Return($.UInt32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TotalOut", 
      JSIL.MethodSignature.Return($.UInt32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Inflate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$asm12.TypeRef("System.IO.Compression.ZLibNative+FlushCode")])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "InflateEnd", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"))
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "InflateInit2_", 
      new JSIL.MethodSignature($asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), [$.Int32])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_AvailIn", 
      JSIL.MethodSignature.Action($.UInt32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_AvailOut", 
      JSIL.MethodSignature.Action($.UInt32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NextIn", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NextOut", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ZLibCompileFlags", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "zlibLibraryHandle", $asm12.TypeRef("System.IO.Compression.ZLibNative+SafeLibraryHandle"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "zStream", $asm12.TypeRef("System.IO.Compression.ZLibNative+ZStream"));

    $.Field({Static:false, Public:false}, "initializationState", $asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle+State"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true }, "InitializationState", $asm12.TypeRef("System.IO.Compression.ZLibNative+ZLibStreamHandle+State"));

    $.Property({Static:false, Public:true }, "NextIn", $.IntPtr);

    $.Property({Static:false, Public:true }, "AvailIn", $.UInt32);

    $.Property({Static:false, Public:true }, "TotalIn", $.UInt32);

    $.Property({Static:false, Public:true }, "NextOut", $.IntPtr);

    $.Property({Static:false, Public:true }, "AvailOut", $.UInt32);

    $.Property({Static:false, Public:true }, "TotalOut", $.UInt32);

    $.Property({Static:false, Public:true }, "DataType", $.Int32);

    $.Property({Static:false, Public:true }, "Adler", $.UInt32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.IO.Compression.ZLibNative+ZLibStreamHandle+NativeZLibDLLStub */ 

(function NativeZLibDLLStub$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.IO.Compression.ZLibNative+ZLibStreamHandle+NativeZLibDLLStub", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature("!!0", [$.String], ["DT"])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InitDelegates", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LoadZLibDLL", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "deflateInit2_Delegate", $asm12.TypeRef("System.IO.Compression.ZLibNative+DeflateInit2_Delegate"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "deflateDelegate", $asm12.TypeRef("System.IO.Compression.ZLibNative+DeflateDelegate"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "deflateEndDelegate", $asm12.TypeRef("System.IO.Compression.ZLibNative+DeflateEndDelegate"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "inflateInit2_Delegate", $asm12.TypeRef("System.IO.Compression.ZLibNative+InflateInit2_Delegate"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "inflateDelegate", $asm12.TypeRef("System.IO.Compression.ZLibNative+InflateDelegate"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "inflateEndDelegate", $asm12.TypeRef("System.IO.Compression.ZLibNative+InflateEndDelegate"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "zlibCompileFlagsDelegate", $asm12.TypeRef("System.IO.Compression.ZLibNative+ZlibCompileFlagsDelegate"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* enum System.IO.Compression.ZLibNative+ZLibStreamHandle+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.ZLibNative+ZLibStreamHandle+State", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotInitialized: 0, 
    InitializedForDeflate: 1, 
    InitializedForInflate: 2, 
    Disposed: 3, 
  }
);

/* class System.IO.Compression.ZLibException */ 

(function ZLibException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.IO.IOException"), 
      Name: "System.IO.Compression.ZLibException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0F.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "zlibErrorContext", $.String);

    $.Field({Static:false, Public:false}, "zlibErrorMessage", $.String);

    $.Field({Static:false, Public:false}, "zlibErrorCode", $asm12.TypeRef("System.IO.Compression.ZLibNative+ErrorCode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.DeflateStreamAsyncResult */ 

(function DeflateStreamAsyncResult$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.DeflateStreamAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm0F.TypeRef("System.AsyncCallback"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Threading.WaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Result", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeCallback", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:true }, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "offset", $.Int32);

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:false}, "m_AsyncCallback", $asm0F.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "m_Result", $.Object);

    $.Field({Static:false, Public:false}, "m_CompletedSynchronously", $.Boolean);

    $.Field({Static:false, Public:false}, "m_InvokedCallback", $.Int32);

    $.Field({Static:false, Public:false}, "m_Completed", $.Int32);

    $.Field({Static:false, Public:false}, "m_Event", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm0F.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "Result", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.FastEncoder */ 

(function FastEncoder$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.FastEncoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushInput", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BytesInHistory", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastCompressionRatio", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnprocessedInput", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.DeflateInput"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBlock", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.IO.Compression.DeflateInput"), $asm12.TypeRef("System.IO.Compression.OutputBuffer"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBlockFooter", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.OutputBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBlockHeader", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.OutputBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompressedData", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.IO.Compression.DeflateInput"), $asm12.TypeRef("System.IO.Compression.OutputBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompressedOutput", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.IO.Compression.DeflateInput"), $asm12.TypeRef("System.IO.Compression.OutputBuffer"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompressedOutput", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.OutputBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InputAvailable", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.IO.Compression.DeflateInput")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeToWriteTo", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.IO.Compression.OutputBuffer")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteChar", 
      new JSIL.MethodSignature(null, [$.Byte, $asm12.TypeRef("System.IO.Compression.OutputBuffer")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDeflatePreamble", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.OutputBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndOfBlock", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.OutputBuffer"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteMatch", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.IO.Compression.OutputBuffer")
        ])
    );

    $.Field({Static:false, Public:false}, "inputWindow", $asm12.TypeRef("System.IO.Compression.FastEncoderWindow"));

    $.Field({Static:false, Public:false}, "currentMatch", $asm12.TypeRef("System.IO.Compression.Match"));

    $.Property({Static:false, Public:false}, "BytesInHistory", $.Int32);

    $.Property({Static:false, Public:false}, "UnprocessedInput", $asm12.TypeRef("System.IO.Compression.DeflateInput"));

    $.Property({Static:false, Public:false}, "LastCompressionRatio", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.FastEncoderStatics */ 

(function FastEncoderStatics$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.IO.Compression.FastEncoderStatics", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "BitReverse", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSlot", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "FastEncoderTreeStructureData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "BFinalFastEncoderTreeStructureData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FastEncoderLiteralCodeInfo", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FastEncoderDistanceCodeInfo", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "BitMask", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ExtraLengthBits", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ExtraDistanceBits", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "distLookup", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Byte, 512);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.FastEncoderWindow */ 

(function FastEncoderWindow$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.FastEncoderWindow", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMatch", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FlushWindow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BytesAvailable", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FreeWindowSpace", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnprocessedInput", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.DeflateInput"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextSymbolOrMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.IO.Compression.Match")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HashValue", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertString", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertStrings", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveWindows", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetWindow", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "window", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "bufPos", $.Int32);

    $.Field({Static:false, Public:false}, "bufEnd", $.Int32);

    $.Field({Static:false, Public:false}, "prev", $jsilcore.TypeRef("System.Array", [$.UInt16]));

    $.Field({Static:false, Public:false}, "lookup", $jsilcore.TypeRef("System.Array", [$.UInt16]));

    $.Property({Static:false, Public:true }, "BytesAvailable", $.Int32);

    $.Property({Static:false, Public:true }, "UnprocessedInput", $asm12.TypeRef("System.IO.Compression.DeflateInput"));

    $.Property({Static:false, Public:true }, "FreeWindowSpace", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IO.Compression.IFileFormatWriter */ 

JSIL.MakeInterface(
  "System.IO.Compression.IFileFormatWriter", false, [], function ($) {
    $.Method({}, "GetHeader", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
    $.Method({}, "UpdateWithBytesRead", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetFooter", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
  }, []);

/* interface System.IO.Compression.IFileFormatReader */ 

JSIL.MakeInterface(
  "System.IO.Compression.IFileFormatReader", false, [], function ($) {
    $.Method({}, "ReadHeader", new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.IO.Compression.InputBuffer")]));
    $.Method({}, "ReadFooter", new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.IO.Compression.InputBuffer")]));
    $.Method({}, "UpdateWithBytesRead", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "Validate", JSIL.MethodSignature.Void);
  }, []);

/* class System.IO.Compression.GZipDecoder */ 

(function GZipDecoder$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.GZipDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFooter", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.IO.Compression.InputBuffer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadHeader", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.IO.Compression.InputBuffer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UpdateWithBytesRead", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "gzipHeaderSubstate", $asm12.TypeRef("System.IO.Compression.GZipDecoder+GzipHeaderState"));

    $.Field({Static:false, Public:false}, "gzipFooterSubstate", $asm12.TypeRef("System.IO.Compression.GZipDecoder+GzipHeaderState"));

    $.Field({Static:false, Public:false}, "expectedCrc32", $.UInt32);

    $.Field({Static:false, Public:false}, "expectedOutputStreamSizeModulo", $.UInt32);

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.IO.Compression.IFileFormatReader")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Compression.GZipDecoder+GzipHeaderState */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.GZipDecoder+GzipHeaderState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ReadingID1: 0, 
    ReadingID2: 1, 
    ReadingCM: 2, 
    ReadingFLG: 3, 
    ReadingMMTime: 4, 
    ReadingXFL: 5, 
    ReadingOS: 6, 
    ReadingXLen1: 7, 
    ReadingXLen2: 8, 
    ReadingXLenData: 9, 
    ReadingFileName: 10, 
    ReadingComment: 11, 
    ReadingCRC16Part1: 12, 
    ReadingCRC16Part2: 13, 
    Done: 14, 
    ReadingCRC: 15, 
    ReadingFileSize: 16, 
  }
);

/* class System.IO.Compression.GZipFormatter */ 

(function GZipFormatter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.GZipFormatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFooter", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHeader", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UpdateWithBytesRead", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUInt32", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "headerBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.IO.Compression.IFileFormatWriter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.HuffmanTree */ 

(function HuffmanTree$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.HuffmanTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateHuffmanCode", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_StaticDistanceTree", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_StaticLiteralLengthTree", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNextSymbol", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.IO.Compression.InputBuffer")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStaticDistanceTreeLength", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStaticLiteralTreeLength", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Property({Static:true , Public:true }, "StaticLiteralLengthTree", $.Type);

    $.Property({Static:true , Public:true }, "StaticDistanceTree", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.Inflater */ 

(function Inflater$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.Inflater", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.IFileFormatReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Decode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecodeBlock", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecodeDynamicBlockHeader", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecodeUncompressedBlock", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Finished", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Inflate", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "extraLengthBits", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "lengthBase", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "distanceBasePosition", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "codeOrder", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "staticDistanceTreeTable", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "output", $asm12.TypeRef("System.IO.Compression.OutputWindow"));

    $.Field({Static:false, Public:false}, "input", $asm12.TypeRef("System.IO.Compression.InputBuffer"));

    $.Field({Static:false, Public:false}, "state", $asm12.TypeRef("System.IO.Compression.InflaterState"));

    $.Field({Static:false, Public:false}, "hasFormatReader", $.Boolean);

    $.Field({Static:false, Public:false}, "blockLengthBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "codeList", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "codeLengthTreeCodeLength", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "formatReader", $asm12.TypeRef("System.IO.Compression.IFileFormatReader"));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.IO.Compression.IInflater"), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Compression.InflaterState */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Compression.InflaterState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ReadingHeader: 0, 
    ReadingBFinal: 2, 
    ReadingBType: 3, 
    ReadingNumLitCodes: 4, 
    ReadingNumDistCodes: 5, 
    ReadingNumCodeLengthCodes: 6, 
    ReadingCodeLengthCodes: 7, 
    ReadingTreeCodesBefore: 8, 
    ReadingTreeCodesAfter: 9, 
    DecodeTop: 10, 
    HaveInitialLength: 11, 
    HaveFullLength: 12, 
    HaveDistCode: 13, 
    UncompressedAligning: 15, 
    UncompressedByte1: 16, 
    UncompressedByte2: 17, 
    UncompressedByte3: 18, 
    UncompressedByte4: 19, 
    DecodingUncompressed: 20, 
    StartReadingFooter: 21, 
    ReadingFooter: 22, 
    VerifyingFooter: 23, 
    Done: 24, 
  }
);

/* class System.IO.Compression.InputBuffer */ 

(function InputBuffer$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.InputBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureBitsAvailable", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AvailableBits", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AvailableBytes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBitMask", 
      new JSIL.MethodSignature($.UInt32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBits", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "NeedsInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipBits", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipToByteBoundary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TryLoad16Bits", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.Property({Static:false, Public:true }, "AvailableBits", $.Int32);

    $.Property({Static:false, Public:true }, "AvailableBytes", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.Match */ 

(function Match$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.Match", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Position", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm12.TypeRef("MatchState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Symbol", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Length", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Position", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm12.TypeRef("MatchState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Symbol", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Property({Static:false, Public:false}, "State", $asm12.TypeRef("MatchState"));

    $.Property({Static:false, Public:false}, "Position", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.Property({Static:false, Public:false}, "Symbol", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.OutputBuffer */ 

(function OutputBuffer$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.OutputBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.IO.Compression.OutputBuffer+BufferState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBits", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BitsInBuffer", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BytesWritten", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FreeBytes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.IO.Compression.OutputBuffer+BufferState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBits", 
      new JSIL.MethodSignature(null, [$.Int32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBytesUnaligned", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteByteUnaligned", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUInt16", 
      JSIL.MethodSignature.Action($.UInt16)
    );

    $.Property({Static:false, Public:false}, "BytesWritten", $.Int32);

    $.Property({Static:false, Public:false}, "FreeBytes", $.Int32);

    $.Property({Static:false, Public:false}, "BitsInBuffer", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IO.Compression.OutputBuffer+BufferState */ 

(function BufferState$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.IO.Compression.OutputBuffer+BufferState", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Compression.OutputWindow */ 

(function OutputWindow$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.IO.Compression.OutputWindow", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFrom", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.IO.Compression.InputBuffer"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AvailableBytes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FreeBytes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteLengthDistance", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "window", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "FreeBytes", $.Int32);

    $.Property({Static:false, Public:true }, "AvailableBytes", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Authentication.AuthenticationException */ 

(function AuthenticationException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.SystemException"), 
      Name: "System.Security.Authentication.AuthenticationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0F.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Authentication.SslProtocols */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Authentication.SslProtocols", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Ssl2: 12, 
    Ssl3: 48, 
    Tls: 192, 
    Default: 240, 
    Tls11: 768, 
    Tls12: 3072, 
  }
);

/* enum System.Security.Authentication.ExchangeAlgorithmType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Authentication.ExchangeAlgorithmType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    RsaSign: 9216, 
    RsaKeyX: 41984, 
    DiffieHellman: 43522, 
  }
);

/* enum System.Security.Authentication.CipherAlgorithmType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Authentication.CipherAlgorithmType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Null: 24576, 
    Des: 26113, 
    Rc2: 26114, 
    TripleDes: 26115, 
    Aes128: 26126, 
    Aes192: 26127, 
    Aes256: 26128, 
    Aes: 26129, 
    Rc4: 26625, 
  }
);

/* enum System.Security.Authentication.HashAlgorithmType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Authentication.HashAlgorithmType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Md5: 32771, 
    Sha1: 32772, 
    Sha256: 32780, 
    Sha384: 32781, 
    Sha512: 32782, 
  }
);

/* enum System.Security.Authentication.ExtendedProtection.ChannelBindingKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Authentication.ExtendedProtection.ChannelBindingKind", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Unique: 25, 
    Endpoint: 26, 
  }
);

JSIL.DeclareNamespace("System.Security.Cryptography");
/* class System.Security.Cryptography.AsnEncodedData */ 

(function AsnEncodedData$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.AsnEncodedData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Security.Cryptography.Oid"), $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Security.Cryptography.Oid"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Format", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Oid", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.Oid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RawData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Security.Cryptography.Oid"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Oid", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.Oid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RawData", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "m_oid", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Field({Static:false, Public:false}, "m_rawData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Oid", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Property({Static:false, Public:true }, "RawData", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BigInt */ 

(function BigInt$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.BigInt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Byte, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromDecimal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "FromHexadecimal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDigit", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "Multiply", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDigit", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "m_elements", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_size", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "decValues", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false}, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CAPIBase */ 

(function CAPIBase$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CAPIBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_ALT_NAME_INFO */ 

(function CERT_ALT_NAME_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_ALT_NAME_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cAltEntry", $.UInt32);

    $.Field({Static:false, Public:false}, "rgAltEntry", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_ALT_NAME_ENTRY */ 

(function CERT_ALT_NAME_ENTRY$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_ALT_NAME_ENTRY", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwAltNameChoice", $.UInt32);

    $.Field({Static:false, Public:false}, "Value", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CERT_ALT_NAME_ENTRY_UNION"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_ALT_NAME_ENTRY_UNION */ 

(function CERT_ALT_NAME_ENTRY_UNION$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_ALT_NAME_ENTRY_UNION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "pOtherName", $.IntPtr);

    $.Field({Static:false, Public:false, Offset: 0}, "pwszDNSName", $.IntPtr);

    $.Field({Static:false, Public:false, Offset: 0}, "pwszURL", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_CHAIN_CONTEXT */ 

(function CERT_CHAIN_CONTEXT$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_CHAIN_CONTEXT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwErrorStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "dwInfoStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "cChain", $.UInt32);

    $.Field({Static:false, Public:false}, "rgpChain", $.IntPtr);

    $.Field({Static:false, Public:false}, "cLowerQualityChainContext", $.UInt32);

    $.Field({Static:false, Public:false}, "rgpLowerQualityChainContext", $.IntPtr);

    $.Field({Static:false, Public:false}, "fHasRevocationFreshnessTime", $.UInt32);

    $.Field({Static:false, Public:false}, "dwRevocationFreshnessTime", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_CHAIN_ELEMENT */ 

(function CERT_CHAIN_ELEMENT$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_CHAIN_ELEMENT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "pCertContext", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwErrorStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "dwInfoStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "pRevocationInfo", $.IntPtr);

    $.Field({Static:false, Public:false}, "pIssuanceUsage", $.IntPtr);

    $.Field({Static:false, Public:false}, "pApplicationUsage", $.IntPtr);

    $.Field({Static:false, Public:false}, "pwszExtendedErrorInfo", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_CHAIN_PARA */ 

(function CERT_CHAIN_PARA$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_CHAIN_PARA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "RequestedUsage", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CERT_USAGE_MATCH"));

    $.Field({Static:false, Public:false}, "RequestedIssuancePolicy", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CERT_USAGE_MATCH"));

    $.Field({Static:false, Public:false}, "dwUrlRetrievalTimeout", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_CHAIN_POLICY_PARA */ 

(function CERT_CHAIN_POLICY_PARA$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_CHAIN_POLICY_PARA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwFlags", $.UInt32);

    $.Field({Static:false, Public:false}, "pvExtraPolicyPara", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_CHAIN_POLICY_STATUS */ 

(function CERT_CHAIN_POLICY_STATUS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_CHAIN_POLICY_STATUS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwError", $.UInt32);

    $.Field({Static:false, Public:false}, "lChainIndex", $.IntPtr);

    $.Field({Static:false, Public:false}, "lElementIndex", $.IntPtr);

    $.Field({Static:false, Public:false}, "pvExtraPolicyStatus", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_CONTEXT */ 

(function CERT_CONTEXT$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_CONTEXT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pCertInfo", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_DSS_PARAMETERS */ 

(function CERT_DSS_PARAMETERS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_DSS_PARAMETERS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "p", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:false}, "q", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:false}, "g", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_ENHKEY_USAGE */ 

(function CERT_ENHKEY_USAGE$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_ENHKEY_USAGE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cUsageIdentifier", $.UInt32);

    $.Field({Static:false, Public:false}, "rgpszUsageIdentifier", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_EXTENSION */ 

(function CERT_EXTENSION$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_EXTENSION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszObjId", $.String);

    $.Field({Static:false, Public:false}, "fCritical", $.Boolean);

    $.Field({Static:false, Public:false}, "Value", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_INFO */ 

(function CERT_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "SerialNumber", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:false}, "cExtension", $.UInt32);

    $.Field({Static:false, Public:false}, "rgExtension", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_NAME_VALUE */ 

(function CERT_NAME_VALUE$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_NAME_VALUE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Value", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_OTHER_NAME */ 

(function CERT_OTHER_NAME$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_OTHER_NAME", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszObjId", $.String);

    $.Field({Static:false, Public:false}, "Value", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_POLICIES_INFO */ 

(function CERT_POLICIES_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_POLICIES_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cPolicyInfo", $.UInt32);

    $.Field({Static:false, Public:false}, "rgPolicyInfo", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_POLICY_INFO */ 

(function CERT_POLICY_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_POLICY_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszPolicyIdentifier", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_SIMPLE_CHAIN */ 

(function CERT_SIMPLE_CHAIN$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_SIMPLE_CHAIN", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwErrorStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "dwInfoStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "cElement", $.UInt32);

    $.Field({Static:false, Public:false}, "rgpElement", $.IntPtr);

    $.Field({Static:false, Public:false}, "pTrustListInfo", $.IntPtr);

    $.Field({Static:false, Public:false}, "fHasRevocationFreshnessTime", $.UInt32);

    $.Field({Static:false, Public:false}, "dwRevocationFreshnessTime", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_TEMPLATE_EXT */ 

(function CERT_TEMPLATE_EXT$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_TEMPLATE_EXT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszObjId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CERT_USAGE_MATCH */ 

(function CERT_USAGE_MATCH$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CERT_USAGE_MATCH", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwType", $.UInt32);

    $.Field({Static:false, Public:false}, "Usage", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CERT_ENHKEY_USAGE"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CRYPT_ALGORITHM_IDENTIFIER */ 

(function CRYPT_ALGORITHM_IDENTIFIER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CRYPT_ALGORITHM_IDENTIFIER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CRYPT_KEY_PROV_INFO */ 

(function CRYPT_KEY_PROV_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CRYPT_KEY_PROV_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pwszContainerName", $.String);

    $.Field({Static:false, Public:false}, "pwszProvName", $.String);

    $.Field({Static:false, Public:false}, "dwProvType", $.UInt32);

    $.Field({Static:false, Public:false}, "dwFlags", $.UInt32);

    $.Field({Static:false, Public:false}, "dwKeySpec", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CRYPT_OID_INFO */ 

(function CRYPT_OID_INFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CRYPT_OID_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "pszOID", $.String);

    $.Field({Static:false, Public:false}, "pwszName", $.String);

    $.Field({Static:false, Public:false}, "dwGroupId", $.UInt32);

    $.Field({Static:false, Public:false}, "Algid", $.UInt32);

    $.Field({Static:false, Public:false}, "ExtraInfo", $asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbData", $.UInt32);

    $.Field({Static:false, Public:false}, "pbData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CAPIBase+KEY_USAGE_STRUCT */ 

(function KEY_USAGE_STRUCT$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CAPIBase+KEY_USAGE_STRUCT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.UInt32])
    );

    $.Field({Static:false, Public:false}, "pwszKeyUsage", $.String);

    $.Field({Static:false, Public:false}, "dwKeyUsageBit", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CAPINative */ 

(function CAPINative$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.CAPIBase"), 
      Name: "System.Security.Cryptography.CAPINative", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CAPISafe */ 

(function CAPISafe$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.CAPINative"), 
      Name: "System.Security.Cryptography.CAPISafe", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CertControlStore", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $.UInt32, 
          $.UInt32, $.IntPtr
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertDuplicateCertificateChain", 
      new JSIL.MethodSignature($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeX509ChainHandle"), [$asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeX509ChainHandle")]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertDuplicateCertificateContext", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), [$.IntPtr]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertDuplicateCertificateContext", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertDuplicateStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), [$.IntPtr]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFindExtension", 
      new JSIL.MethodSignature($.IntPtr, [
          $.String, $.UInt32, 
          $.IntPtr
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPStr"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeCertificateContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertGetCertificateChain", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")]), $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Security.Cryptography.CAPIBase+CERT_CHAIN_PARA")]), $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeX509ChainHandle")])
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertGetCertificateContextProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.UInt32, 
          $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertGetIntendedKeyUsage", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $.IntPtr, 
          $.IntPtr, $.UInt32
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertGetNameStringW", 
      new JSIL.MethodSignature($.UInt32, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.UInt32, 
          $.UInt32, $.IntPtr, 
          $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), $.UInt32
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertGetValidUsages", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $.IntPtr, 
          $.IntPtr, $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertNameToStrW", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.IntPtr, 
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $.UInt32
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertVerifyCertificateChainPolicy", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeX509ChainHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Security.Cryptography.CAPIBase+CERT_CHAIN_POLICY_PARA")]), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Security.Cryptography.CAPIBase+CERT_CHAIN_POLICY_STATUS")])
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertVerifyTimeValidity", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")]), $.IntPtr]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDecodeObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptFindOIDInfo", 
      new JSIL.MethodSignature($.IntPtr, [
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $asm12.TypeRef("System.Security.Cryptography.OidGroup")
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptFormatObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $.UInt32, 
          $.UInt32, $.IntPtr, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPStr"
          }, null
          , null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptFormatObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $.UInt32, 
          $.UInt32, $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "FormatMessage", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.IntPtr, 
          $.UInt32, $.UInt32, 
          $asm0F.TypeRef("System.Text.StringBuilder"), $.UInt32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$.UInt32, $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetLastError", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "kernel32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CAPIUnsafe */ 

(function CAPIUnsafe$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.CAPISafe"), 
      Name: "System.Security.Cryptography.CAPIUnsafe", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CertAddCertificateLinkToStore", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), 
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertEnumCertificatesInStore", 
      new JSIL.MethodSignature($.IntPtr, [$asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $.IntPtr]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFindCertificateInStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $.UInt32, 
          $.UInt32, $.UInt32, 
          $.IntPtr, $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertOpenStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), [
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.UInt32, 
          $.String
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CAPIMethods */ 

(function CAPIMethods$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.CAPIUnsafe"), 
      Name: "System.Security.Cryptography.CAPIMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CAPI */ 

(function CAPI$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.CAPIMethods"), 
      Name: "System.Security.Cryptography.CAPI", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BlobToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CertAddCertificateLinkToStore", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), 
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CertDuplicateCertificateContext", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "CertDuplicateCertificateContext", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CertEnumCertificatesInStore", 
      new JSIL.MethodSignature($.IntPtr, [$asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "CertFindCertificateInStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $.UInt32, 
          $.UInt32, $.UInt32, 
          $.IntPtr, $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CertOpenStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), [
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.UInt32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptFindOIDInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPT_OID_INFO"), [
          $.UInt32, $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $asm12.TypeRef("System.Security.Cryptography.OidGroup")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptFormatObject", 
      new JSIL.MethodSignature($.String, [
          $.UInt32, $.UInt32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptFormatObject", 
      new JSIL.MethodSignature($.String, [
          $.UInt32, $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecodeObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCertNameInfo", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$.UInt32, $.IntPtr])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SafeLocalAllocHandle */ 

(function SafeLocalAllocHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Security.Cryptography.SafeLocalAllocHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SafeCertContextHandle */ 

(function SafeCertContextHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Security.Cryptography.SafeCertContextHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SafeCertStoreHandle */ 

(function SafeCertStoreHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Security.Cryptography.SafeCertStoreHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.OidGroup */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.OidGroup", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    All: 0, 
    HashAlgorithm: 1, 
    EncryptionAlgorithm: 2, 
    PublicKeyAlgorithm: 3, 
    SignatureAlgorithm: 4, 
    Attribute: 5, 
    ExtensionOrAttribute: 6, 
    EnhancedKeyUsage: 7, 
    Policy: 8, 
    Template: 9, 
    KeyDerivationFunction: 10, 
  }
);

/* class System.Security.Cryptography.Oid */ 

(function Oid$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.Oid", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Security.Cryptography.OidGroup"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_value", $.String);

    $.Field({Static:false, Public:false}, "m_friendlyName", $.String);

    $.Field({Static:false, Public:false}, "m_group", $asm12.TypeRef("System.Security.Cryptography.OidGroup"));

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "FriendlyName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.OidCollection */ 

(function OidCollection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.OidCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.Oid")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.Oid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.OidEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_list", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.OidEnumerator */ 

(function OidEnumerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.OidEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.OidCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.Oid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "m_oids", $asm12.TypeRef("System.Security.Cryptography.OidCollection"));

    $.Field({Static:false, Public:false}, "m_current", $.Int32);

    $.Property({Static:false, Public:true }, "Current", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography.X509Certificates");
/* enum System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Reversed: 1, 
    UseSemicolons: 16, 
    DoNotUsePlusSign: 32, 
    DoNotUseQuotes: 64, 
    UseCommas: 128, 
    UseNewLines: 256, 
    UseUTF8Encoding: 4096, 
    UseT61Encoding: 8192, 
    ForceUTF8Encoding: 16384, 
  }
);

/* class System.Security.Cryptography.X509Certificates.X500DistinguishedName */ 

(function X500DistinguishedName$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"), 
      Name: "System.Security.Cryptography.X509Certificates.X500DistinguishedName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.CAPIBase+CRYPTOAPI_BLOB"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Decode", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Format", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "MapNameToStrFlag", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags")])
    );

    $.Field({Static:false, Public:false}, "m_distinguishedName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509NameType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509NameType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SimpleName: 0, 
    EmailName: 1, 
    UpnName: 2, 
    DnsName: 3, 
    DnsFromAlternativeName: 4, 
    UrlName: 5, 
  }
);

/* class System.Security.Cryptography.X509Certificates.PublicKey */ 

(function PublicKey$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.PublicKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Security.Cryptography.Oid"), $asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"), 
          $asm12.TypeRef("System.Security.Cryptography.AsnEncodedData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConstructDSSPubKeyCspBlob", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), $asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecodePublicKeyObject", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AlgorithmId", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CspBlobData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncodedKeyValue", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncodedParameters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Oid", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.Oid"))
    );

    $.Property({Static:false, Public:false}, "AlgorithmId", $.UInt32);

    $.Property({Static:false, Public:false}, "CspBlobData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Key", $asm0F.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:true }, "Oid", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Property({Static:false, Public:true }, "EncodedKeyValue", $asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"));

    $.Property({Static:false, Public:true }, "EncodedParameters", $asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Certificate2 */ 

(function X509Certificate2$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Certificate2", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendPrivateKeyInfo", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CertContext", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasPrivateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerName", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotAfter", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotBefore", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.PublicKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerialNumber", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.Oid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubjectName", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Thumbprint", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNameInfo", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509NameType"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrivateKeyInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Security.Cryptography.CspParameters")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSignatureAlgorithm", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.Oid"), [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVersion", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_extensions", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ExtensionCollection"));

    $.Field({Static:false, Public:false}, "m_safeCertContext", $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"));

    $.Property({Static:false, Public:true }, "Extensions", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ExtensionCollection"));

    $.Property({Static:false, Public:true }, "IssuerName", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName"));

    $.Property({Static:false, Public:true }, "NotAfter", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "NotBefore", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "HasPrivateKey", $.Boolean);

    $.Property({Static:false, Public:true }, "PublicKey", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.PublicKey"));

    $.Property({Static:false, Public:true }, "SerialNumber", $.String);

    $.Property({Static:false, Public:true }, "SubjectName", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName"));

    $.Property({Static:false, Public:true }, "SignatureAlgorithm", $asm12.TypeRef("System.Security.Cryptography.Oid"));

    $.Property({Static:false, Public:true }, "Thumbprint", $.String);

    $.Property({Static:false, Public:true }, "Version", $.Int32);

    $.Property({Static:false, Public:false}, "CertContext", $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509FindType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509FindType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    FindByThumbprint: 0, 
    FindBySubjectName: 1, 
    FindBySubjectDistinguishedName: 2, 
    FindByIssuerName: 3, 
    FindByIssuerDistinguishedName: 4, 
    FindBySerialNumber: 5, 
    FindByTimeValid: 6, 
    FindByTimeNotYetValid: 7, 
    FindByTimeExpired: 8, 
    FindByTemplateName: 9, 
    FindByApplicationPolicy: 10, 
    FindByCertificatePolicy: 11, 
    FindByExtension: 12, 
    FindByKeyUsage: 13, 
    FindBySubjectKeyIdentifier: 14, 
  }
);

/* class System.Security.Cryptography.X509Certificates.X509CertificateCollection */ 

(function X509CertificateCollection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Security.Cryptography.X509Certificates.X509CertificateCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:false, Public:true }, "Item", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator */ 

(function X509CertificateEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Property({Static:false, Public:true }, "Current", $asm0F.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Certificate2Collection */ 

(function X509Certificate2Collection$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Certificate2Collection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($.Type, [
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509FindType"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindApplicationPolicyCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindByCert", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $.UInt32, 
          $.IntPtr, $.Boolean, 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection+FindProcDelegate"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection+FindProcDelegate"), 
          $.Object, $.Object, 
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCertificatePolicyCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCertInStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509FindType"), 
          $.Object, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindExtensionCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindIssuerDistinguishedNameCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindKeyUsageCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSerialNumberCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSubjectDistinguishedNameCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSubjectKeyIdentifierCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindTemplateNameCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindTimeNotAfterCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindTimeNotBeforeCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindTimeValidCallback", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Security.Cryptography.X509Certificates.X509Certificate2Collection+FindProcDelegate */ 

JSIL.MakeDelegate("System.Security.Cryptography.X509Certificates.X509Certificate2Collection+FindProcDelegate", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Int32"), [$asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $asm0F.TypeRef("System.Object")]));

/* class System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator */ 

(function X509Certificate2Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "baseEnumerator", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:true }, "Current", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509ChainStatusFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509ChainStatusFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    NoError: 0, 
    NotTimeValid: 1, 
    NotTimeNested: 2, 
    Revoked: 4, 
    NotSignatureValid: 8, 
    NotValidForUsage: 16, 
    UntrustedRoot: 32, 
    RevocationStatusUnknown: 64, 
    Cyclic: 128, 
    InvalidExtension: 256, 
    InvalidPolicyConstraints: 512, 
    InvalidBasicConstraints: 1024, 
    InvalidNameConstraints: 2048, 
    HasNotSupportedNameConstraint: 4096, 
    HasNotDefinedNameConstraint: 8192, 
    HasNotPermittedNameConstraint: 16384, 
    HasExcludedNameConstraint: 32768, 
    PartialChain: 65536, 
    CtlNotTimeValid: 131072, 
    CtlNotSignatureValid: 262144, 
    CtlNotValidForUsage: 524288, 
    HasWeakSignature: 1048576, 
    OfflineRevocation: 16777216, 
    NoIssuanceChainPolicy: 33554432, 
    ExplicitDistrust: 67108864, 
    HasNotSupportedCriticalExtension: 134217728, 
  }
);

/* struct System.Security.Cryptography.X509Certificates.X509ChainStatus */ 

(function X509ChainStatus$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509ChainStatus", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatusInformation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StatusInformation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_status", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags"));

    $.Field({Static:false, Public:false}, "m_statusInformation", $.String);

    $.Property({Static:false, Public:true }, "Status", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags"));

    $.Property({Static:false, Public:true }, "StatusInformation", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Chain */ 

(function X509Chain$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Chain", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Build", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildChain", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"), $asm12.TypeRef("System.Security.Cryptography.OidCollection"), 
          $asm12.TypeRef("System.Security.Cryptography.OidCollection"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeX509ChainHandle")])
        ])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ChainContext", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChainElements", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChainPolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChainStatus", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChainStatusInformation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")]), [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_status", $.UInt32);

    $.Field({Static:false, Public:false}, "m_chainPolicy", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"));

    $.Field({Static:false, Public:false}, "m_chainStatus", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")]));

    $.Field({Static:false, Public:false}, "m_chainElementCollection", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElementCollection"));

    $.Field({Static:false, Public:false}, "m_safeCertChainHandle", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeX509ChainHandle"))
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_useMachineContext", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_syncRoot", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_x509ChainErrorMappings", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain+X509ChainErrorMapping")]));

    $.Property({Static:false, Public:true }, "ChainContext", $.IntPtr);

    $.Property({Static:false, Public:true }, "ChainPolicy", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"));

    $.Property({Static:false, Public:true }, "ChainStatus", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")]));

    $.Property({Static:false, Public:true }, "ChainElements", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElementCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Chain+X509ChainErrorMapping */ 

(function X509ChainErrorMapping$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Chain+X509ChainErrorMapping", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags")
        ])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Win32Flag", $.UInt32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Win32ErrorCode", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "ChainStatusFlag", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509ChainElement */ 

(function X509ChainElement$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509ChainElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Certificate", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:false, Public:false}, "m_certificate", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "m_chainStatus", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")]));

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Property({Static:false, Public:true }, "Certificate", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509ChainElementCollection */ 

(function X509ChainElementCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509ChainElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_elements", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElement")]));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator */ 

(function X509ChainElementEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509RevocationMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509RevocationMode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoCheck: 0, 
    Online: 1, 
    Offline: 2, 
  }
);

/* enum System.Security.Cryptography.X509Certificates.X509RevocationFlag */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509RevocationFlag", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    EndCertificateOnly: 0, 
    EntireChain: 1, 
    ExcludeRoot: 2, 
  }
);

/* enum System.Security.Cryptography.X509Certificates.X509VerificationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509VerificationFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    NoFlag: 0, 
    IgnoreNotTimeValid: 1, 
    IgnoreCtlNotTimeValid: 2, 
    IgnoreNotTimeNested: 4, 
    IgnoreInvalidBasicConstraints: 8, 
    AllowUnknownCertificateAuthority: 16, 
    IgnoreWrongUsage: 32, 
    IgnoreInvalidName: 64, 
    IgnoreInvalidPolicy: 128, 
    IgnoreEndRevocationUnknown: 256, 
    IgnoreCtlSignerRevocationUnknown: 512, 
    IgnoreCertificateAuthorityRevocationUnknown: 1024, 
    IgnoreRootRevocationUnknown: 2048, 
    AllFlags: 4095, 
  }
);

/* class System.Security.Cryptography.X509Certificates.X509ChainPolicy */ 

(function X509ChainPolicy$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509ChainPolicy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationPolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.OidCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificatePolicy", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.OidCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtraStore", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RevocationFlag", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RevocationMode", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UrlRetrievalTimeout", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationFlags", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509VerificationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationTime", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RevocationFlag", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RevocationMode", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VerificationFlags", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509VerificationFlags"))
    );

    $.Field({Static:false, Public:false}, "m_applicationPolicy", $asm12.TypeRef("System.Security.Cryptography.OidCollection"));

    $.Field({Static:false, Public:false}, "m_certificatePolicy", $asm12.TypeRef("System.Security.Cryptography.OidCollection"));

    $.Field({Static:false, Public:false}, "m_revocationMode", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"));

    $.Field({Static:false, Public:false}, "m_revocationFlag", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"));

    $.Field({Static:false, Public:false}, "m_verificationTime", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_timeout", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_extraStore", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"));

    $.Field({Static:false, Public:false}, "m_verificationFlags", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509VerificationFlags"));

    $.Property({Static:false, Public:true }, "ApplicationPolicy", $asm12.TypeRef("System.Security.Cryptography.OidCollection"));

    $.Property({Static:false, Public:true }, "CertificatePolicy", $asm12.TypeRef("System.Security.Cryptography.OidCollection"));

    $.Property({Static:false, Public:true }, "RevocationMode", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"));

    $.Property({Static:false, Public:true }, "RevocationFlag", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"));

    $.Property({Static:false, Public:true }, "VerificationFlags", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509VerificationFlags"));

    $.Property({Static:false, Public:true }, "VerificationTime", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "UrlRetrievalTimeout", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "ExtraStore", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Extension */ 

(function X509Extension$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Extension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyFrom", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.AsnEncodedData"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Critical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_critical", $.Boolean);

    $.Property({Static:false, Public:true }, "Critical", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509KeyUsageFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509KeyUsageFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    EncipherOnly: 1, 
    CrlSign: 2, 
    KeyCertSign: 4, 
    KeyAgreement: 8, 
    DataEncipherment: 16, 
    KeyEncipherment: 32, 
    NonRepudiation: 64, 
    DigitalSignature: 128, 
    DecipherOnly: 32768, 
  }
);

/* class System.Security.Cryptography.X509Certificates.X509ExtensionCollection */ 

(function X509ExtensionCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509ExtensionCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Extension")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Extension"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Extension"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_list", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Extension"));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Extension"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator */ 

(function X509ExtensionEnumerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509ExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Extension"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Property({Static:false, Public:true }, "Current", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Extension"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.StoreLocation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.StoreLocation", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CurrentUser: 1, 
    LocalMachine: 2, 
  }
);

/* enum System.Security.Cryptography.X509Certificates.OpenFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.OpenFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    ReadOnly: 0, 
    ReadWrite: 1, 
    MaxAllowed: 2, 
    OpenExistingOnly: 4, 
    IncludeArchived: 8, 
  }
);

/* enum System.Security.Cryptography.X509Certificates.StoreName */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.StoreName", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AddressBook: 1, 
    AuthRoot: 2, 
    CertificateAuthority: 3, 
    Disallowed: 4, 
    My: 5, 
    Root: 6, 
    TrustedPeople: 7, 
    TrustedPublisher: 8, 
  }
);

/* class System.Security.Cryptography.X509Certificates.X509Store */ 

(function X509Store$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Store", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Certificates", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Open", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Cryptography.X509Certificates.OpenFlags"))
    );

    $.Field({Static:false, Public:false}, "m_storeName", $.String);

    $.Field({Static:false, Public:false}, "m_location", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));

    $.Field({Static:false, Public:false}, "m_safeCertStoreHandle", $asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"));

    $.Property({Static:false, Public:true }, "Certificates", $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Utils */ 

(function X509Utils$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Utils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ByteToPtr", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyOidsToUnmanagedMemory", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$asm12.TypeRef("System.Security.Cryptography.OidCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecodeHexString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DiscardWhiteSpaces", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DiscardWhiteSpaces", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeHexString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeHexString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExportToMemoryStore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle"), [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOidInfo", 
      new JSIL.MethodSignature($.String, [
          $.UInt32, $.String, 
          $asm12.TypeRef("System.Security.Cryptography.OidGroup")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOidInfoWithFallback", 
      new JSIL.MethodSignature($.String, [
          $.UInt32, $.String, 
          $asm12.TypeRef("System.Security.Cryptography.OidGroup")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCertificates", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"), [$asm12.TypeRef("System.Security.Cryptography.SafeCertStoreHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHexArraySize", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSystemErrorString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
      new JSIL.MethodSignature($.Byte, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCertRdnCharString", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapNameType", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509NameType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapRevocationFlags", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapX509StoreFlags", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.OpenFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "memcpy", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OidToAlgId", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PtrToByte", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.IntPtr, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToAnsiPtr", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToUniPtr", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOidValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyCertificate", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Security.Cryptography.SafeCertContextHandle"), $asm12.TypeRef("System.Security.Cryptography.OidCollection"), 
          $asm12.TypeRef("System.Security.Cryptography.OidCollection"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), 
          $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm0F.TypeRef("System.DateTime"), 
          $asm0F.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"), 
          $.IntPtr, $.IntPtr
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "hexValues", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Permissions");
/* class System.Security.Permissions.StorePermission */ 

(function StorePermission$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Security.Permissions.StorePermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Permissions.StorePermissionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyFlags", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Permissions.StorePermissionFlags"))
    );

    $.Field({Static:false, Public:false}, "m_flags", $asm12.TypeRef("System.Security.Permissions.StorePermissionFlags"));

    $.ImplementInterfaces(
      /* 3 */ $asm0F.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Permissions.StorePermissionFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Permissions.StorePermissionFlags", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    NoFlags: 0, 
    CreateStore: 1, 
    DeleteStore: 2, 
    EnumerateStores: 4, 
    OpenStore: 16, 
    AddToStore: 32, 
    RemoveFromStore: 64, 
    EnumerateCertificates: 128, 
    AllFlags: 247, 
  }
);

/* class System.Security.Permissions.ResourcePermissionBase */ 

(function ResourcePermissionBase$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Security.Permissions.ResourcePermissionBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermissionAccess", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyChildren", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Hashtable"), [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateHashtable", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ComputerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PermissionAccessType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TagNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasContent", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IntersectContents", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsContentSubset", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeContents", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadChildren", 
      new JSIL.MethodSignature($.Object, [$asm0F.TypeRef("System.Security.SecurityElement"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PermissionAccessType", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TagNames", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Security.IPermission"), [$asm0F.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnionOfContents", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteChildren", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Security.SecurityElement"), $.Object, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "tagNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "permissionAccessType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "isUnrestricted", $.Boolean);

    $.Field({Static:false, Public:false}, "rootTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ComputerName", $.String);

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "PermissionAccessType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "TagNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.ImplementInterfaces(
      /* 3 */ $asm0F.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Permissions.ResourcePermissionBase+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Security.Permissions.ResourcePermissionBase+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetComputerName", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Permissions.ResourcePermissionBaseEntry */ 

(function ResourcePermissionBaseEntry$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Security.Permissions.ResourcePermissionBaseEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccess", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccessPath", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.Field({Static:false, Public:false}, "accessPath", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "permissionAccess", $.Int32);

    $.Property({Static:false, Public:true }, "PermissionAccess", $.Int32);

    $.Property({Static:false, Public:true }, "PermissionAccessPath", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.AssertSection */ 

(function AssertSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Diagnostics.AssertSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertUIEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propAssertUIEnabled", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propLogFile", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "AssertUIEnabled", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["assertuienabled"]; });

    $.Property({Static:false, Public:true }, "LogFileName", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["logfilename"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.AssertWrapper */ 

(function AssertWrapper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Diagnostics.AssertWrapper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_IsRTLResources", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "ShowAssert", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.Diagnostics.StackFrame"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShowMessageBoxAssert", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TruncateMessageToFitScreen", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:true , Public:false}, "IsRTLResources", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.MessageBoxPopup */ 

(function MessageBoxPopup$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };




  function MessageBoxPopup_get_ReturnValue () {
    return this.MessageBoxPopup$ReturnValue$value;
  }; 

  function MessageBoxPopup_set_ReturnValue (value) {
    this.MessageBoxPopup$ReturnValue$value = (value | 0);
  }; 


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.MessageBoxPopup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DoPopup", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0F.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:true }, "get_ReturnValue", 
      JSIL.MethodSignature.Return($.Int32), 
      MessageBoxPopup_get_ReturnValue
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ReturnValue", 
      JSIL.MethodSignature.Action($.Int32), 
      MessageBoxPopup_set_ReturnValue
    )
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ShowMessageBox", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "MessageBoxPopup$ReturnValue$value", $.Int32)
      .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "m_Event", $asm0F.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "m_Body", $.String);

    $.Field({Static:false, Public:false}, "m_Title", $.String);

    $.Field({Static:false, Public:false}, "m_Flags", $.Int32);

    $.Property({Static:false, Public:true }, "ReturnValue", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.CorrelationManager */ 

(function CorrelationManager$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.CorrelationManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActivityId", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogicalOperationStack", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Stack"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLogicalOperationStack", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Stack"))
    );

    $.Property({Static:false, Public:true }, "ActivityId", $asm0F.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "LogicalOperationStack", $asm0F.TypeRef("System.Collections.Stack"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Debug */ 

(function Debug$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Diagnostics.Debug", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.TraceListener */ 

(function TraceListener$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Diagnostics.TraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceFilter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedIndent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TraceOutputOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceOptions"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Diagnostics.TraceOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filter", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.TraceFilter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IndentLevel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IndentSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NeedIndent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TraceOutputOptions", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.TraceOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFooter", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.TraceEventCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHeader", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Diagnostics.TraceEventType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);

    $.Field({Static:false, Public:false}, "indentSize", $.Int32);

    $.Field({Static:false, Public:false}, "traceOptions", $asm12.TypeRef("System.Diagnostics.TraceOptions"));

    $.Field({Static:false, Public:false}, "needIndent", $.Boolean);

    $.Field({Static:false, Public:false}, "listenerName", $.String);

    $.Field({Static:false, Public:false}, "filter", $asm12.TypeRef("System.Diagnostics.TraceFilter"));

    $.Field({Static:false, Public:false}, "attributes", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Field({Static:false, Public:false}, "initializeData", $.String);

    $.Property({Static:false, Public:true }, "Attributes", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.Property({Static:false, Public:true }, "IndentLevel", $.Int32);

    $.Property({Static:false, Public:true }, "IndentSize", $.Int32);

    $.Property({Static:false, Public:true }, "Filter", $asm12.TypeRef("System.Diagnostics.TraceFilter"))
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "NeedIndent", $.Boolean);

    $.Property({Static:false, Public:true }, "TraceOutputOptions", $asm12.TypeRef("System.Diagnostics.TraceOptions"))
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.DefaultTraceListener */ 

(function DefaultTraceListener$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "System.Diagnostics.DefaultTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertUiEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UiPermission", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeSettings", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "internalWrite", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAssert", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteToLogFile", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "assertUIEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "logFileName", $.String);

    $.Field({Static:false, Public:false}, "settingsInitialized", $.Boolean);

    $.Property({Static:false, Public:true }, "AssertUiEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "LogFileName", $.String);

    $.Property({Static:true , Public:false}, "UiPermission", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.TextWriterTraceListener */ 

(function TextWriterTraceListener$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "System.Diagnostics.TextWriterTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWriter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingWithFallback", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Text.Encoding"), [$asm0F.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "writer", $asm0F.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "fileName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.DelimitedListTraceListener */ 

(function DelimitedListTraceListener$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TextWriterTraceListener"), 
      Name: "System.Diagnostics.DelimitedListTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEscaped", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFooter", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.TraceEventCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHeader", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Diagnostics.TraceEventType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStackEscaped", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Stack"))
    );

    $.Field({Static:false, Public:false}, "delimiter", $.String);

    $.Field({Static:false, Public:false}, "initializedDelim", $.Boolean);

    $.Property({Static:false, Public:true }, "Delimiter", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.InitState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.InitState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotInitialized: 0, 
    Initializing: 1, 
    Initialized: 2, 
  }
);

/* class System.Diagnostics.DiagnosticsConfiguration */ 

(function DiagnosticsConfiguration$Members () {
  var $, $thisType;

















  JSIL.MakeStaticClass("System.Diagnostics.DiagnosticsConfiguration", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CanInitialize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AssertUIEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AutoFlush", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConfigFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IndentSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LogFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PerfomanceCountersFileMappingSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SharedListeners", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Sources", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SourceElementsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SwitchSettings", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SwitchElementsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SystemDiagnosticsSection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SystemDiagnosticsSection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UseGlobalLock", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConfigSection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SystemDiagnosticsSection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInitializing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "configSection", $asm12.TypeRef("System.Diagnostics.SystemDiagnosticsSection"));

    $.Field({Static:true , Public:false}, "initState", $asm12.TypeRef("System.Diagnostics.InitState"));

    $.Property({Static:true , Public:false}, "SwitchSettings", $asm12.TypeRef("System.Diagnostics.SwitchElementsCollection"));

    $.Property({Static:true , Public:false}, "AssertUIEnabled", $.Boolean);

    $.Property({Static:true , Public:false}, "ConfigFilePath", $.String);

    $.Property({Static:true , Public:false}, "LogFileName", $.String);

    $.Property({Static:true , Public:false}, "AutoFlush", $.Boolean);

    $.Property({Static:true , Public:false}, "UseGlobalLock", $.Boolean);

    $.Property({Static:true , Public:false}, "IndentSize", $.Int32);

    $.Property({Static:true , Public:false}, "PerfomanceCountersFileMappingSize", $.Int32);

    $.Property({Static:true , Public:false}, "SharedListeners", $asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"));

    $.Property({Static:true , Public:false}, "Sources", $asm12.TypeRef("System.Diagnostics.SourceElementsCollection"));

    $.Property({Static:true , Public:false}, "SystemDiagnosticsSection", $asm12.TypeRef("System.Diagnostics.SystemDiagnosticsSection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.TypedElement */ 

(function TypedElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Diagnostics.TypedElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGetRuntimeObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InitData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propTypeName", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propInitData", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "_properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false}, "_runtimeObject", $.Object);

    $.Field({Static:false, Public:false}, "_baseType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "InitData", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["initializeData"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeName", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.FilterElement */ 

(function FilterElement$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TypedElement"), 
      Name: "System.Diagnostics.FilterElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "GetRuntimeObject", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceFilter"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ListenerElementsCollection */ 

(function ListenerElementsCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Diagnostics.ListenerElementsCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.ListenerElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRuntimeObject", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceListenerCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeDefaultInternal", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Diagnostics.ListenerElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Diagnostics.ListenerElement.__Type__]; });

})();

/* class System.Diagnostics.SharedListenerElementsCollection */ 

(function SharedListenerElementsCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"), 
      Name: "System.Diagnostics.SharedListenerElementsCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Diagnostics.ListenerElement.__Type__]; });

})();

/* class System.Diagnostics.ListenerElement */ 

(function ListenerElement$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TypedElement"), 
      Name: "System.Diagnostics.ListenerElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.FilterElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TraceOutputOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRuntimeObject", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceListener"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propFilter", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propName", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propOutputOpts", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "_propListenerTypeName", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "_allowReferences", $.Boolean);

    $.Field({Static:false, Public:false}, "_attributes", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_isAddedByDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "Attributes", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Filter", $asm12.TypeRef("System.Diagnostics.FilterElement"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["filter"]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "TraceOutputOptions", $asm12.TypeRef("System.Diagnostics.TraceOptions"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["traceOutputOptions"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "TypeName", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerfCounterSection */ 

(function PerfCounterSection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Diagnostics.PerfCounterSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileMappingSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propFileMappingSize", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "FileMappingSize", $.Int32)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["filemappingsize"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SourceElementsCollection */ 

(function SourceElementsCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Diagnostics.SourceElementsCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.SourceElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Diagnostics.SourceElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Diagnostics.SourceElement.__Type__]; });

})();

/* class System.Diagnostics.SourceElement */ 

(function SourceElement$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Diagnostics.SourceElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm24.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Listeners", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propName", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propSwitchName", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propSwitchValue", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propSwitchType", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propListeners", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "_attributes", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Attributes", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Listeners", $asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["listeners"]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "SwitchName", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["switchName"]; });

    $.Property({Static:false, Public:true }, "SwitchValue", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["switchValue"]; });

    $.Property({Static:false, Public:true }, "SwitchType", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["switchType"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.SourceLevels */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.SourceLevels", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    All: -1, 
    Off: 0, 
    Critical: 1, 
    Error: 3, 
    Warning: 7, 
    Information: 15, 
    Verbose: 31, 
    ActivityTracing: 65280, 
  }
);

/* class System.Diagnostics.Switch */ 

(function Switch$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Switch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "_pruneCachedSwitches", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SwitchSetting", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeConfigSettings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeWithStatus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSwitchSettingChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValueChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SwitchSetting", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "switchSettings", $asm12.TypeRef("System.Diagnostics.SwitchElementsCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "description", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "displayName", $.String);

    $.Field({Static:false, Public:false}, "switchSetting", $.Int32);

    $.Field({Static:false, Public:false}, "initialized", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "initializing", $.Boolean);

    $.Field({Static:false, Public:false}, "switchValueString", $asm0F.TypeRef("System.String"));

    $.Field({Static:false, Public:false}, "attributes", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Field({Static:false, Public:false}, "defaultValue", $.String);

    $.Field({Static:true , Public:false}, "switches", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.WeakReference")]));

    $.Field({Static:true , Public:false}, "s_LastCollectionCount", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:false}, "SwitchSetting", $.Int32);

    $.Property({Static:false, Public:false}, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SourceSwitch */ 

(function SourceSwitch$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.Switch"), 
      Name: "System.Diagnostics.SourceSwitch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValueChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Level", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.SourceLevels"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.Property({Static:false, Public:true }, "Level", $asm12.TypeRef("System.Diagnostics.SourceLevels"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SwitchElementsCollection */ 

(function SwitchElementsCollection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Diagnostics.SwitchElementsCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.SwitchElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Diagnostics.SwitchElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm14.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm12.System.Diagnostics.SwitchElement.__Type__]; });

})();

/* class System.Diagnostics.SwitchElement */ 

(function SwitchElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Diagnostics.SwitchElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propName", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propValue", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "_attributes", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Attributes", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["value"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SystemDiagnosticsSection */ 

(function SystemDiagnosticsSection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Diagnostics.SystemDiagnosticsSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Assert", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.AssertSection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PerfCounters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.PerfCounterSection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SharedListeners", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sources", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SourceElementsCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Switches", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SwitchElementsCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Trace", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceSection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propAssert", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propPerfCounters", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propSources", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propSharedListeners", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propSwitches", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propTrace", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Assert", $asm12.TypeRef("System.Diagnostics.AssertSection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["assert"]; });

    $.Property({Static:false, Public:true }, "PerfCounters", $asm12.TypeRef("System.Diagnostics.PerfCounterSection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["performanceCounters"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Sources", $asm12.TypeRef("System.Diagnostics.SourceElementsCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["sources"]; });

    $.Property({Static:false, Public:true }, "SharedListeners", $asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["sharedListeners"]; });

    $.Property({Static:false, Public:true }, "Switches", $asm12.TypeRef("System.Diagnostics.SwitchElementsCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["switches"]; });

    $.Property({Static:false, Public:true }, "Trace", $asm12.TypeRef("System.Diagnostics.TraceSection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["trace"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Trace */ 

(function Trace$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Trace", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_AutoFlush", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CorrelationManager", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.CorrelationManager"))
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "correlationManager", $asm12.TypeRef("System.Diagnostics.CorrelationManager"));

    $.Property({Static:true , Public:true }, "AutoFlush", $.Boolean);

    $.Property({Static:true , Public:true }, "CorrelationManager", $asm12.TypeRef("System.Diagnostics.CorrelationManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.TraceEventCache */ 

(function TraceEventCache$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.TraceEventCache", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ActivityId", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callstack", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateTime", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogicalOperationStack", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Stack"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThreadId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetThreadId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitProcessInfo", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "processId", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:true , Public:false}, "processName", $asm0F.TypeRef("System.String"));

    $.Field({Static:false, Public:false}, "timeStamp", $.Int64);

    $.Field({Static:false, Public:false}, "dateTime", $asm0F.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "stackTrace", $.String);

    $.Property({Static:false, Public:false}, "ActivityId", $asm0F.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "Callstack", $.String);

    $.Property({Static:false, Public:true }, "LogicalOperationStack", $asm0F.TypeRef("System.Collections.Stack"));

    $.Property({Static:false, Public:true }, "DateTime", $asm0F.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "ProcessId", $.Int32);

    $.Property({Static:false, Public:true }, "ThreadId", $.String);

    $.Property({Static:false, Public:true }, "Timestamp", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.TraceEventType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.TraceEventType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Critical: 1, 
    Error: 2, 
    Warning: 4, 
    Information: 8, 
    Verbose: 16, 
    Start: 256, 
    Stop: 512, 
    Suspend: 1024, 
    Resume: 2048, 
    Transfer: 4096, 
  }
);

/* class System.Diagnostics.TraceFilter */ 

(function TraceFilter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.TraceFilter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "initializeData", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.TraceInternal */ 

(function TraceInternal$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.Diagnostics.TraceInternal", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fail", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AutoFlush", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IndentLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IndentSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Listeners", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.TraceListenerCollection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UseGlobalLock", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSettings", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SetIndentSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "appName", $asm0F.TypeRef("System.String"), null);

    $.Field({Static:true , Public:false}, "listeners", $asm12.TypeRef("System.Diagnostics.TraceListenerCollection"));

    $.Field({Static:true , Public:false}, "autoFlush", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "useGlobalLock", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "indentLevel", $.Int32);

    $.Field({Static:true , Public:false}, "indentSize", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:true , Public:false}, "settingsInitialized", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "defaultInitialized", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "critSec", $.Object);

    $.Property({Static:true , Public:true }, "Listeners", $asm12.TypeRef("System.Diagnostics.TraceListenerCollection"));

    $.Property({Static:true , Public:true }, "AutoFlush", $.Boolean);

    $.Property({Static:true , Public:true }, "UseGlobalLock", $.Boolean);

    $.Property({Static:true , Public:true }, "IndentLevel", $.Int32);

    $.Property({Static:true , Public:true }, "IndentSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.TraceLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.TraceLevel", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Off: 0, 
    Error: 1, 
    Warning: 2, 
    Info: 3, 
    Verbose: 4, 
  }
);

/* class System.Diagnostics.TraceListenerCollection */ 

(function TraceListenerCollection$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.TraceListenerCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Diagnostics.TraceListener")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.TraceListener"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeListener", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.TraceListener"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "set_Item");

    $.Field({Static:false, Public:false}, "list", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Diagnostics.TraceListener"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IList"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.TraceOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.TraceOptions", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    LogicalOperationStack: 1, 
    DateTime: 2, 
    Timestamp: 4, 
    ProcessId: 8, 
    ThreadId: 16, 
    Callstack: 32, 
  }
);

/* class System.Diagnostics.TraceSection */ 

(function TraceSection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Diagnostics.TraceSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoFlush", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IndentSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Listeners", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseGlobalLock", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propListeners", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propAutoFlush", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propIndentSize", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propUseGlobalLock", $asm14.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "AutoFlush", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["autoflush"]; });

    $.Property({Static:false, Public:true }, "IndentSize", $.Int32)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["indentsize"]; });

    $.Property({Static:false, Public:true }, "Listeners", $asm12.TypeRef("System.Diagnostics.ListenerElementsCollection"))
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["listeners"]; });

    $.Property({Static:false, Public:true }, "UseGlobalLock", $.Boolean)
      .Attribute($asm14.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["useGlobalLock"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm14.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.TraceSwitch */ 

(function TraceSwitch$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.Switch"), 
      Name: "System.Diagnostics.TraceSwitch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSwitchSettingChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValueChanged", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.TraceUtils */ 

(function TraceUtils$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Diagnostics.TraceUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertToBaseTypeOrEnum", 
      new JSIL.MethodSignature($.Object, [$.String, $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm0F.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOwnedTextWriterTL", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOwnedTL", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyAttributes", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.IDictionary"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Object
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.XmlWriterTraceListener */ 

(function XmlWriterTraceListener$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TextWriterTraceListener"), 
      Name: "System.Diagnostics.XmlWriterTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWrite", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndHeader", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.TraceEventCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEscaped", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFooter", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.TraceEventCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHeader", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Diagnostics.TraceEventType"), 
          $.Int32, $asm12.TypeRef("System.Diagnostics.TraceEventCache")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartHeader", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Diagnostics.TraceEventType"), 
          $.Int32, $asm12.TypeRef("System.Diagnostics.TraceEventCache")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "machineName", $.String);

    $.Field({Static:false, Public:false}, "strBldr", $asm0F.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "xmlBlobWriter", $asm24.TypeRef("System.Xml.XmlTextWriter"));

    $.Field({Static:false, Public:false}, "shouldRespectFilterOnTraceTransfer", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.AsyncStreamReader */ 

(function AsyncStreamReader$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.AsyncStreamReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Diagnostics.CounterSample */ 

(function CounterSample$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.CounterSample", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 8, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int64, $.Int64, 
          $.Int64, $.Int64, 
          $asm12.TypeRef("System.Diagnostics.PerformanceCounterType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "rawValue", $.Int64);

    $.Field({Static:false, Public:false}, "baseValue", $.Int64);

    $.Field({Static:false, Public:false}, "timeStamp", $.Int64);

    $.Field({Static:false, Public:false}, "counterFrequency", $.Int64);

    $.Field({Static:false, Public:false}, "counterType", $asm12.TypeRef("System.Diagnostics.PerformanceCounterType"));

    $.Field({Static:false, Public:false}, "timeStamp100nSec", $.Int64);

    $.Field({Static:false, Public:false}, "systemFrequency", $.Int64);

    $.Field({Static:false, Public:false}, "counterTimeStamp", $.Int64);

    $.Field({Static:true , Public:true }, "Empty", $.Type);


    function CounterSample__cctor () {
      $thisType.Empty = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CounterSample__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EntryWrittenEventArgs */ 

(function EntryWrittenEventArgs$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.EventArgs"), 
      Name: "System.Diagnostics.EntryWrittenEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.EventLogEntry"))
    );

    $.Field({Static:false, Public:false}, "entry", $asm12.TypeRef("System.Diagnostics.EventLogEntry"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Diagnostics.EntryWrittenEventHandler */ 

JSIL.MakeDelegate("System.Diagnostics.EntryWrittenEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Object"), $asm12.TypeRef("System.Diagnostics.EntryWrittenEventArgs")]));

/* class System.Diagnostics.EventInstance */ 

(function EventInstance$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.EventInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntryType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.EventLogEntryType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InstanceId", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CategoryId", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntryType", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.EventLogEntryType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InstanceId", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "_categoryNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_entryType", $asm12.TypeRef("System.Diagnostics.EventLogEntryType"));

    $.Field({Static:false, Public:false}, "_instanceId", $.Int64);

    $.Property({Static:false, Public:true }, "CategoryId", $.Int32);

    $.Property({Static:false, Public:true }, "EntryType", $asm12.TypeRef("System.Diagnostics.EventLogEntryType"));

    $.Property({Static:false, Public:true }, "InstanceId", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventLog */ 

(function EventLog$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Diagnostics.EventLog", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "_InternalLogNameFromSourceName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_UnsafeGetAssertPermSet", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CharIsPrintable", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComponentGetService", 
      new JSIL.MethodSignature($.Object, [$asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEventSource", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.EventSourceCreationData"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSame8FirstCharsLog", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("Microsoft.Win32.RegistryKey"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSourceRegistration", 
      new JSIL.MethodSignature($asm0F.TypeRef("Microsoft.Win32.RegistryKey"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSourceRegistration", 
      new JSIL.MethodSignature($asm0F.TypeRef("Microsoft.Win32.RegistryKey"), [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FixupPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ComponentDesignMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SkipRegPatch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDllPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEventLogRegKey", 
      new JSIL.MethodSignature($asm0F.TypeRef("Microsoft.Win32.RegistryKey"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "LogNameFromSourceName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSpecialLogRegValues", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("Microsoft.Win32.RegistryKey"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSpecialSourceRegValues", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("Microsoft.Win32.RegistryKey"), $asm12.TypeRef("System.Diagnostics.EventSourceCreationData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SourceExists", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidLogName", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEntry", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEntry", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Diagnostics.EventLogEntryType"), 
          $.Int32, $.Int16, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.EventInstance"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Parameter(1, "values", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.EventInstance"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Parameter(2, "values", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:false, Public:false}, "m_underlyingEventLog", $asm12.TypeRef("System.Diagnostics.EventLogInternal"));

    $.Field({Static:true , Public:false}, "s_CheckedOsVersion", $asm0F.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_SkipRegPatch", $asm0F.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "SkipRegPatch", $.Boolean);

    $.Property({Static:false, Public:false}, "ComponentDesignMode", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventLogInternal */ 

(function EventLogInternal$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.EventLogInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm12.TypeRef("System.Diagnostics.EventLog")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddListenerComponent", 
      new JSIL.MethodSignature(null, [
          $.Type, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharIsPrintable", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompletionCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EntryCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InstanceLockObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpenForRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpenForWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OldestEntryNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeEventLogReadHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SynchronizingObject", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.ComponentModel.ISynchronizeInvoke"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCachedEntryPos", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntryWithOldest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.EventLogEntry"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLogName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextEntryPos", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPreviousEntryPos", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteEvent", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt16, 
          $asm12.TypeRef("System.Diagnostics.EventLogEntryType"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntFrom", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenForRead", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenForWrite", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveListenerComponent", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartListening", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticCompletionCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "StopListening", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "StopRaisingEvents", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidLogName", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAndCreateSource", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEntry", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Diagnostics.EventLogEntryType"), 
          $.Int32, $.Int16, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.EventInstance"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Parameter(2, "values", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:false, Public:false}, "logName", $.String);

    $.Field({Static:false, Public:false}, "lastSeenCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "machineName", $.String);

    $.Field({Static:false, Public:false}, "onEntryWrittenHandler", $asm12.TypeRef("System.Diagnostics.EntryWrittenEventHandler"));

    $.Field({Static:false, Public:false}, "readHandle", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeEventLogReadHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "sourceName", $.String);

    $.Field({Static:false, Public:false}, "writeHandle", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeEventLogWriteHandle"));

    $.Field({Static:false, Public:false}, "bytesCached", $.Int32);

    $.Field({Static:false, Public:false}, "cache", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "firstCachedEntry", $.Int32);

    $.Field({Static:false, Public:false}, "lastSeenEntry", $.Int32);

    $.Field({Static:false, Public:false}, "lastSeenPos", $.Int32);

    $.Field({Static:false, Public:false}, "synchronizingObject", $asm12.TypeRef("System.ComponentModel.ISynchronizeInvoke"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "parent", $asm12.TypeRef("System.Diagnostics.EventLog"));

    $.Field({Static:false, Public:false}, "boolFlags", $asm12.TypeRef("System.Collections.Specialized.BitVector32"));

    $.Field({Static:false, Public:false}, "messageLibraries", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "listenerInfos", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "m_InstanceLockObject", $.Object);

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "InstanceLockObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "EntryCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsOpen", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOpenForRead", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOpenForWrite", $.Boolean);

    $.Property({Static:false, Public:true }, "Log", $.String);

    $.Property({Static:false, Public:true }, "MachineName", $.String);

    $.Property({Static:false, Public:false}, "OldestEntryNumber", $.Int32);

    $.Property({Static:false, Public:false}, "ReadHandle", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeEventLogReadHandle"));

    $.Property({Static:false, Public:true }, "SynchronizingObject", $asm12.TypeRef("System.ComponentModel.ISynchronizeInvoke"));

    $.Property({Static:false, Public:true }, "Source", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventLogInternal+LogListeningInfo */ 

(function LogListeningInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.EventLogInternal+LogListeningInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "handleOwner", $asm12.TypeRef("System.Diagnostics.EventLogInternal"));

    $.Field({Static:false, Public:true }, "registeredWaitHandle", $asm0F.TypeRef("System.Threading.RegisteredWaitHandle"));

    $.Field({Static:false, Public:true }, "waitHandle", $asm0F.TypeRef("System.Threading.WaitHandle"));

    $.Field({Static:false, Public:true }, "listeningComponents", $asm0F.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventLogEntry */ 

(function EventLogEntry$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Diagnostics.EventLogEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm12.TypeRef("System.Diagnostics.EventLogInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IntFrom", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "dataBuf", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "bufOffset", $.Int32);

    $.Field({Static:false, Public:false}, "owner", $asm12.TypeRef("System.Diagnostics.EventLogInternal"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "beginningOfTime", $asm0F.TypeRef("System.DateTime"));


    function EventLogEntry__cctor () {
      $thisType.beginningOfTime = new $asm0F.System.DateTime();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EventLogEntry__cctor
    );

    $.ImplementInterfaces(
      /* 2 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.EventLogEntryType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.EventLogEntryType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Error: 1, 
    Warning: 2, 
    Information: 4, 
    SuccessAudit: 8, 
    FailureAudit: 16, 
  }
);

/* class System.Diagnostics.EventLogPermission */ 

(function EventLogPermission$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Permissions.ResourcePermissionBase"), 
      Name: "System.Diagnostics.EventLogPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.EventLogPermissionAccess"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermissionAccess", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.EventLogPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNames", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.EventLogPermissionAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.EventLogPermissionAccess", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Browse: 2, 
    Instrument: 6, 
    Audit: 10, 
    Write: 16, 
    Administer: 48, 
  }
);

/* class System.Diagnostics.EventLogPermissionEntry */ 

(function EventLogPermissionEntry$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.EventLogPermissionEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Diagnostics.EventLogPermissionAccess"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccess", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.EventLogPermissionAccess"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseEntry", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry"))
    );

    $.Property({Static:false, Public:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true }, "PermissionAccess", $asm12.TypeRef("System.Diagnostics.EventLogPermissionAccess"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventLogTraceListener */ 

(function EventLogTraceListener$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "System.Diagnostics.EventLogTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateEventInstance", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.EventInstance"), [$asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm12.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    )
      .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "eventLog", $asm12.TypeRef("System.Diagnostics.EventLog"));

    $.Field({Static:false, Public:false}, "nameSet", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventSourceCreationData */ 

(function EventSourceCreationData$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.EventSourceCreationData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryResourceFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageResourceFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterResourceFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_logName", $.String);

    $.Field({Static:false, Public:false}, "_machineName", $.String);

    $.Field({Static:false, Public:false}, "_source", $.String);

    $.Field({Static:false, Public:false}, "_messageResourceFile", $.String);

    $.Field({Static:false, Public:false}, "_parameterResourceFile", $.String);

    $.Field({Static:false, Public:false}, "_categoryResourceFile", $.String);

    $.Field({Static:false, Public:false}, "_categoryCount", $.Int32);

    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true }, "Source", $.String);

    $.Property({Static:false, Public:true }, "MessageResourceFile", $.String);

    $.Property({Static:false, Public:true }, "ParameterResourceFile", $.String);

    $.Property({Static:false, Public:true }, "CategoryResourceFile", $.String);

    $.Property({Static:false, Public:true }, "CategoryCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceCounter */ 

(function PerformanceCounter$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Diagnostics.PerformanceCounter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InstanceLifetime", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InstanceLockObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementBy", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeImpl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveInstance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CategoryName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CounterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InstanceLifetime", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InstanceName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MachineName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RawValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReadOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyWriteableCounterAllowed", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "categoryName", $.String);

    $.Field({Static:false, Public:false}, "counterName", $.String);

    $.Field({Static:false, Public:false}, "instanceName", $.String);

    $.Field({Static:false, Public:false}, "instanceLifetime", $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime"));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "helpMsg", $.String);

    $.Field({Static:false, Public:false}, "counterType", $.Int32);

    $.Field({Static:false, Public:false}, "oldSample", $asm12.TypeRef("System.Diagnostics.CounterSample"));

    $.Field({Static:false, Public:false}, "sharedCounter", $asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter"));

    $.Field({Static:true , Public:true }, "DefaultFileMappingSize", $.Int32, 524288);

    $.Field({Static:false, Public:false}, "m_InstanceLockObject", $.Object);

    $.Property({Static:false, Public:false}, "InstanceLockObject", $.Object);

    $.Property({Static:false, Public:true }, "CategoryName", $.String);

    $.Property({Static:false, Public:true }, "CounterName", $.String);

    $.Property({Static:false, Public:true }, "InstanceLifetime", $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime"));

    $.Property({Static:false, Public:true }, "InstanceName", $.String);

    $.Property({Static:false, Public:true }, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true }, "RawValue", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceCounterCategory */ 

(function PerformanceCounterCategory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceCounterCategory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.PerformanceCounterCategoryType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceCounterCategoryType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    SingleInstance: 0, 
    MultiInstance: 1, 
  }
);

/* enum System.Diagnostics.PerformanceCounterInstanceLifetime */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceCounterInstanceLifetime", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Global: 0, 
    Process: 1, 
  }
);

/* class System.Diagnostics.PerformanceCounterLib */ 

(function PerformanceCounterLib$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceCounterLib", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CategoryExists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CategoryExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CounterExists", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CounterExists", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindCustomCategory", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Diagnostics.PerformanceCounterCategoryType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CategoryTable", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ComputerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCategoryType", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.PerformanceCounterCategoryType"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCounterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPerformanceCounterLib", 
      new JSIL.MethodSignature($.Type, [$.String, $asm0F.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPerformanceData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringTable", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Hashtable"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCustomCategory", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCustomCategory", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:true , Public:false}, "computerName", $asm0F.TypeRef("System.String"));

    $.Field({Static:false, Public:false}, "performanceMonitor", $asm12.TypeRef("System.Diagnostics.PerformanceMonitor"));

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "perfLcid", $.String);

    $.Field({Static:false, Public:false}, "customCategoryTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "libraryTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "categoryTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "nameTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "CategoryTableLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "NameTableLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "HelpTableLock", $.Object);

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "ComputerName", $.String);

    $.Property({Static:false, Public:false}, "CategoryTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "NameTable", $asm0F.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceMonitor */ 

(function PerformanceMonitor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceMonitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "perfDataKey", $asm0F.TypeRef("Microsoft.Win32.RegistryKey"));

    $.Field({Static:false, Public:false}, "machineName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.CategoryEntry */ 

(function CategoryEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.CategoryEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("Microsoft.Win32.NativeMethods+PERF_OBJECT_TYPE"))
    );

    $.Field({Static:false, Public:false}, "NameIndex", $.Int32);

    $.Field({Static:false, Public:false}, "HelpIndex", $.Int32);

    $.Field({Static:false, Public:false}, "CounterIndexes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "HelpIndexes", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceCounterPermission */ 

(function PerformanceCounterPermission$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Security.Permissions.ResourcePermissionBase"), 
      Name: "System.Diagnostics.PerformanceCounterPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.PerformanceCounterPermissionAccess"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermissionAccess", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.PerformanceCounterPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNames", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.PerformanceCounterPermissionAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceCounterPermissionAccess", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Browse: 1, 
    Read: 1, 
    Write: 2, 
    Instrument: 3, 
    Administer: 7, 
  }
);

/* class System.Diagnostics.PerformanceCounterPermissionEntry */ 

(function PerformanceCounterPermissionEntry$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceCounterPermissionEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Diagnostics.PerformanceCounterPermissionAccess"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccess", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.PerformanceCounterPermissionAccess"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseEntry", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry"))
    );

    $.Field({Static:false, Public:false}, "categoryName", $.String);

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "permissionAccess", $asm12.TypeRef("System.Diagnostics.PerformanceCounterPermissionAccess"));

    $.Property({Static:false, Public:true }, "CategoryName", $.String);

    $.Property({Static:false, Public:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true }, "PermissionAccess", $asm12.TypeRef("System.Diagnostics.PerformanceCounterPermissionAccess"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.PerformanceCounterType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceCounterType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NumberOfItemsHEX32: 0, 
    NumberOfItemsHEX64: 256, 
    NumberOfItems32: 65536, 
    NumberOfItems64: 65792, 
    CounterDelta32: 4195328, 
    CounterDelta64: 4195584, 
    SampleCounter: 4260864, 
    CountPerTimeInterval32: 4523008, 
    CountPerTimeInterval64: 4523264, 
    RateOfCountsPerSecond32: 272696320, 
    RateOfCountsPerSecond64: 272696576, 
    RawFraction: 537003008, 
    CounterTimer: 541132032, 
    Timer100Ns: 542180608, 
    SampleFraction: 549585920, 
    CounterTimerInverse: 557909248, 
    Timer100NsInverse: 558957824, 
    CounterMultiTimer: 574686464, 
    CounterMultiTimer100Ns: 575735040, 
    CounterMultiTimerInverse: 591463680, 
    CounterMultiTimer100NsInverse: 592512256, 
    AverageTimer32: 805438464, 
    ElapsedTime: 807666944, 
    AverageCount64: 1073874176, 
    SampleBase: 1073939457, 
    AverageBase: 1073939458, 
    RawBase: 1073939459, 
    CounterMultiBase: 1107494144, 
  }
);

/* class System.Diagnostics.Process */ 

(function Process$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Diagnostics.Process", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Int32, $asm12.TypeRef("System.Diagnostics.ProcessInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.Process+State"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Associated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasExited", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MainModule", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.ProcessModule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Modules", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.ProcessModuleCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OperatingSystem", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.OperatingSystem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SynchronizingObject", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.ComponentModel.ISynchronizeInvoke"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCurrentProcess", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProcessHandle", 
      new JSIL.MethodSignature($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnExited", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseOnExited", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Refresh", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseProcessHandle", 
      JSIL.MethodSignature.Action($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProcessId", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StopWatchingForExit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "haveProcessId", $.Boolean);

    $.Field({Static:false, Public:false}, "processId", $.Int32);

    $.Field({Static:false, Public:false}, "haveProcessHandle", $.Boolean);

    $.Field({Static:false, Public:false}, "m_processHandle", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"));

    $.Field({Static:false, Public:false}, "isRemoteMachine", $.Boolean);

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "processInfo", $asm12.TypeRef("System.Diagnostics.ProcessInfo"));

    $.Field({Static:false, Public:false}, "m_processAccess", $.Int32);

    $.Field({Static:false, Public:false}, "modules", $asm12.TypeRef("System.Diagnostics.ProcessModuleCollection"));

    $.Field({Static:false, Public:false}, "onExited", $asm0F.TypeRef("System.EventHandler"));

    $.Field({Static:false, Public:false}, "exited", $.Boolean);

    $.Field({Static:false, Public:false}, "exitCode", $.Int32);

    $.Field({Static:false, Public:false}, "signaled", $.Boolean);

    $.Field({Static:false, Public:false}, "raisedOnExited", $.Boolean);

    $.Field({Static:false, Public:false}, "synchronizingObject", $asm12.TypeRef("System.ComponentModel.ISynchronizeInvoke"));

    $.Field({Static:false, Public:false}, "operatingSystem", $asm0F.TypeRef("System.OperatingSystem"));

    $.Field({Static:true , Public:false}, "s_CreateProcessLock", $.Object);

    $.Field({Static:false, Public:false}, "outputStreamReadMode", $asm12.TypeRef("System.Diagnostics.Process+StreamReadMode"));

    $.Field({Static:false, Public:false}, "errorStreamReadMode", $asm12.TypeRef("System.Diagnostics.Process+StreamReadMode"));

    $.Field({Static:true , Public:false}, "InvalidPipeHandle", $asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"));

    $.Field({Static:true , Public:false}, "processTracing", $asm12.TypeRef("System.Diagnostics.TraceSwitch"), null);

    $.Property({Static:false, Public:false}, "Associated", $.Boolean);

    $.Property({Static:false, Public:true }, "HasExited", $.Boolean);

    $.Property({Static:false, Public:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true }, "MainModule", $asm12.TypeRef("System.Diagnostics.ProcessModule"));

    $.Property({Static:false, Public:true }, "Modules", $asm12.TypeRef("System.Diagnostics.ProcessModuleCollection"));

    $.Property({Static:false, Public:false}, "OperatingSystem", $asm0F.TypeRef("System.OperatingSystem"));

    $.Property({Static:false, Public:true }, "ProcessName", $.String);

    $.Property({Static:false, Public:true }, "SynchronizingObject", $asm12.TypeRef("System.ComponentModel.ISynchronizeInvoke"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Process+StreamReadMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Process+StreamReadMode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    undefined: 0, 
    syncMode: 1, 
    asyncMode: 2, 
  }
);

/* enum System.Diagnostics.Process+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Process+State", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    HaveId: 1, 
    IsLocal: 2, 
    IsNt: 4, 
    HaveProcessInfo: 8, 
    HaveNtProcessInfo: 12, 
    Exited: 16, 
    Associated: 32, 
    IsWin2k: 64, 
  }
);

/* class System.Diagnostics.ProcessInfo */ 

(function ProcessInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.ProcessInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "threadInfoList", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:true }, "basePriority", $.Int32);

    $.Field({Static:false, Public:true }, "processName", $.String);

    $.Field({Static:false, Public:true }, "processId", $.Int32);

    $.Field({Static:false, Public:true }, "handleCount", $.Int32);

    $.Field({Static:false, Public:true }, "poolPagedBytes", $.Int64);

    $.Field({Static:false, Public:true }, "poolNonpagedBytes", $.Int64);

    $.Field({Static:false, Public:true }, "virtualBytes", $.Int64);

    $.Field({Static:false, Public:true }, "virtualBytesPeak", $.Int64);

    $.Field({Static:false, Public:true }, "workingSetPeak", $.Int64);

    $.Field({Static:false, Public:true }, "workingSet", $.Int64);

    $.Field({Static:false, Public:true }, "pageFileBytesPeak", $.Int64);

    $.Field({Static:false, Public:true }, "pageFileBytes", $.Int64);

    $.Field({Static:false, Public:true }, "privateBytes", $.Int64);

    $.Field({Static:false, Public:true }, "mainModuleId", $.Int32);

    $.Field({Static:false, Public:true }, "sessionId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ThreadInfo */ 

(function ThreadInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.ThreadInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "threadId", $.Int32);

    $.Field({Static:false, Public:true }, "processId", $.Int32);

    $.Field({Static:false, Public:true }, "basePriority", $.Int32);

    $.Field({Static:false, Public:true }, "currentPriority", $.Int32);

    $.Field({Static:false, Public:true }, "startAddress", $.IntPtr);

    $.Field({Static:false, Public:true }, "threadState", $asm12.TypeRef("System.Diagnostics.ThreadState"));

    $.Field({Static:false, Public:true }, "threadWaitReason", $asm12.TypeRef("System.Diagnostics.ThreadWaitReason"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ModuleInfo */ 

(function ModuleInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.ModuleInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "baseName", $.String);

    $.Field({Static:false, Public:true }, "fileName", $.String);

    $.Field({Static:false, Public:true }, "baseOfDll", $.IntPtr);

    $.Field({Static:false, Public:true }, "entryPoint", $.IntPtr);

    $.Field({Static:false, Public:true }, "sizeOfImage", $.Int32);

    $.Field({Static:false, Public:true }, "Id", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessManager */ 

(function ProcessManager$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.Diagnostics.ProcessManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_IsNt", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsOSOlderThanXP", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetModuleInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ModuleInfo")]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessIdFromHandle", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessIds", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.ProcessInfo"), [$.Int32, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessInfosCore", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessInfo")]), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsProcessRunning", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsProcessRunning", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsRemoteMachine", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenProcess", 
      new JSIL.MethodSignature($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"), [
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.Property({Static:true , Public:true }, "IsNt", $.Boolean);

    $.Property({Static:true , Public:true }, "IsOSOlderThanXP", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessManager+<>c__DisplayClass5_0 */ 

(function $l$gc__DisplayClass5_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.ProcessManager+<>c__DisplayClass5_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetProcessInfo$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Field({Static:false, Public:true }, "processId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Diagnostics.WinProcessManager */ 

(function WinProcessManager$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Diagnostics.WinProcessManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetModuleInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ModuleInfo")]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessIds", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessInfos", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessInfo")]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.NtProcessManager */ 

(function NtProcessManager$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.Diagnostics.NtProcessManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_SystemProcessID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFirstModuleInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.ModuleInfo"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetModuleInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ModuleInfo")]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetModuleInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ModuleInfo")]), [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessIdFromHandle", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessIds", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.ProcessInfo"), [
          $asm12.TypeRef("Microsoft.Win32.NativeMethods+PERF_OBJECT_TYPE"), $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("Microsoft.Win32.NativeMethods+PERF_COUNTER_DEFINITION")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessInfo")]), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessInfo")]), [$asm12.TypeRef("System.Diagnostics.PerformanceCounterLib")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessInfo")]), [
          $asm12.TypeRef("System.Diagnostics.PerformanceCounterLib"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetThreadInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.ThreadInfo"), [
          $asm12.TypeRef("Microsoft.Win32.NativeMethods+PERF_OBJECT_TYPE"), $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("Microsoft.Win32.NativeMethods+PERF_COUNTER_DEFINITION")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetThreadWaitReason", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.ThreadWaitReason"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValueId", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Diagnostics.NtProcessManager+ValueId"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadCounterValue", 
      new JSIL.MethodSignature($.Int64, [$.Int32, $.IntPtr])
    );

    $.Field({Static:true , Public:false}, "valueIds", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:true , Public:false}, "SystemProcessID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.NtProcessManager+ValueId */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.NtProcessManager+ValueId", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    HandleCount: 0, 
    PoolPagedBytes: 1, 
    PoolNonpagedBytes: 2, 
    ElapsedTime: 3, 
    VirtualBytesPeak: 4, 
    VirtualBytes: 5, 
    PrivateBytes: 6, 
    PageFileBytes: 7, 
    PageFileBytesPeak: 8, 
    WorkingSetPeak: 9, 
    WorkingSet: 10, 
    ThreadId: 11, 
    ProcessId: 12, 
    BasePriority: 13, 
    CurrentPriority: 14, 
    UserTime: 15, 
    PrivilegedTime: 16, 
    StartAddress: 17, 
    ThreadState: 18, 
    ThreadWaitReason: 19, 
  }
);

/* class System.Diagnostics.NtProcessInfoHelper */ 

(function NtProcessInfoHelper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Diagnostics.NtProcessInfoHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetNewBufferSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcessInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessInfo")]), [$asm0F.TypeRef("System.Predicate`1", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessInfo")]), [$.IntPtr, $asm0F.TypeRef("System.Predicate`1", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessShortName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "CachedBuffer", $jsilcore.TypeRef("System.Array", [$.Int64]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.NtProcessInfoHelper+SystemProcessInformation */ 

(function SystemProcessInformation$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.NtProcessInfoHelper+SystemProcessInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "NextEntryOffset", $.UInt32);

    $.Field({Static:false, Public:false}, "NumberOfThreads", $.UInt32);

    $.Field({Static:false, Public:false}, "NameLength", $.UInt16);

    $.Field({Static:false, Public:false}, "NamePtr", $.IntPtr);

    $.Field({Static:false, Public:false}, "BasePriority", $.Int32);

    $.Field({Static:false, Public:false}, "UniqueProcessId", $.IntPtr);

    $.Field({Static:false, Public:false}, "HandleCount", $.UInt32);

    $.Field({Static:false, Public:false}, "SessionId", $.UInt32);

    $.Field({Static:false, Public:false}, "PeakVirtualSize", $.UIntPtr);

    $.Field({Static:false, Public:false}, "VirtualSize", $.UIntPtr);

    $.Field({Static:false, Public:false}, "PeakWorkingSetSize", $.UIntPtr);

    $.Field({Static:false, Public:false}, "WorkingSetSize", $.UIntPtr);

    $.Field({Static:false, Public:false}, "QuotaPagedPoolUsage", $.UIntPtr);

    $.Field({Static:false, Public:false}, "QuotaNonPagedPoolUsage", $.UIntPtr);

    $.Field({Static:false, Public:false}, "PagefileUsage", $.UIntPtr);

    $.Field({Static:false, Public:false}, "PeakPagefileUsage", $.UIntPtr);

    $.Field({Static:false, Public:false}, "PrivatePageCount", $.UIntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.NtProcessInfoHelper+SystemThreadInformation */ 

(function SystemThreadInformation$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.NtProcessInfoHelper+SystemThreadInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "StartAddress", $.IntPtr);

    $.Field({Static:false, Public:false}, "UniqueProcess", $.IntPtr);

    $.Field({Static:false, Public:false}, "UniqueThread", $.IntPtr);

    $.Field({Static:false, Public:false}, "Priority", $.Int32);

    $.Field({Static:false, Public:false}, "BasePriority", $.Int32);

    $.Field({Static:false, Public:false}, "ThreadState", $.UInt32);

    $.Field({Static:false, Public:false}, "WaitReason", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessModule */ 

(function ProcessModule$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Diagnostics.ProcessModule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Diagnostics.ModuleInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ModuleName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "moduleInfo", $asm12.TypeRef("System.Diagnostics.ModuleInfo"));

    $.Property({Static:false, Public:true }, "ModuleName", $.String);

    $.Property({Static:false, Public:true }, "FileName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessModuleCollection */ 

(function ProcessModuleCollection$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.Diagnostics.ProcessModuleCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Diagnostics.ProcessModule")]))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessStartInfo */ 

(function ProcessStartInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.ProcessStartInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Environment", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnvironmentVariables", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.Property({Static:false, Public:true }, "EnvironmentVariables", $asm12.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Property({Static:false, Public:true }, "Environment", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessThreadCollection */ 

(function ProcessThreadCollection$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.Diagnostics.ProcessThreadCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessWaitHandle */ 

(function ProcessWaitHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Threading.WaitHandle"), 
      Name: "System.Diagnostics.ProcessWaitHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeProcessHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SharedPerformanceCounter */ 

(function SharedPerformanceCounter$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.SharedPerformanceCounter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToValue", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CounterEntry")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateAndAllocateMemory", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateMemory", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateMemoryNoBoundsCheck", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearCounterValues", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCategory", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryEntry")]), $.Int32, 
          $.String, $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCounter", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CounterEntry")]), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInstance", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryEntry")]), $.Int32, 
          $.String, $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExitCriticalSection", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindCategory", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Pointer", [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryEntry")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindCounter", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")]), $jsilcore.TypeRef("JSIL.Pointer", [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CounterEntry")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindInstance", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryEntry")]), $jsilcore.TypeRef("JSIL.Pointer", [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")])]), 
          $.Boolean, $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileView", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+FileMapping"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProcessData", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.ProcessData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCategoryData", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCounter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CounterEntry")]), [
          $.String, $.String, 
          $.Boolean, $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileMappingSizeFromConfig", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringLength", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWstrHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementBy", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMisaligned", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CounterEntry")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "PopulateLifetimeEntry", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+ProcessLifetimeEntry")]), $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveInstance", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveOneInstance", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAddress", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveOffset", 
      new JSIL.MethodSignature($.Int64, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeMarshalCopy", 
      new JSIL.MethodSignature(null, [$.String, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CounterEntry")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "StringEquals", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReuseInstance", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryEntry")]), $jsilcore.TypeRef("JSIL.Pointer", [$jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")])]), 
          $asm12.TypeRef("System.Diagnostics.PerformanceCounterInstanceLifetime"), $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Verify", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyCategory", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyInstance", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyLifetime", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+InstanceEntry")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "WaitAndEnterCriticalSection", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "WaitForCriticalSection", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$.Int32]))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleInstanceHashCode", $.Int32);

    $.Field({Static:true , Public:false}, "categoryDataTable", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CategoryEntrySize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InstanceEntrySize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "CounterEntrySize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ProcessLifetimeEntrySize", $.Int32);

    $.Field({Static:true , Public:false}, "LastInstanceLifetimeSweepTick", $.Int64);

    $.Field({Static:true , Public:false}, "procData", $asm12.TypeRef("System.Diagnostics.ProcessData"));

    $.Field({Static:false, Public:false}, "InitialOffset", $.Int32);

    $.Field({Static:false, Public:false}, "categoryData", $asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CategoryData"));

    $.Field({Static:false, Public:false}, "baseAddress", $.Int64);

    $.Field({Static:false, Public:false}, "counterEntryPointer", $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+CounterEntry")]));

    $.Field({Static:false, Public:false}, "categoryName", $.String);

    $.Field({Static:false, Public:false}, "categoryNameHashCode", $.Int32);

    $.Field({Static:false, Public:false}, "thisInstanceOffset", $.Int32);

    $.Property({Static:true , Public:false}, "ProcessData", $asm12.TypeRef("System.Diagnostics.ProcessData"));

    $.Property({Static:false, Public:false}, "FileView", $asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+FileMapping"));

    $.Property({Static:false, Public:false}, "Value", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SharedPerformanceCounter+FileMapping */ 

(function FileMapping$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.SharedPerformanceCounter+FileMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileViewAddress", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "FileMappingSize", $.Int32);

    $.Field({Static:false, Public:false}, "fileViewAddress", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeFileMapViewHandle"));

    $.Field({Static:false, Public:false}, "fileMappingHandle", $asm12.TypeRef("Microsoft.Win32.SafeHandles.SafeFileMappingHandle"));

    $.Property({Static:false, Public:false}, "FileViewAddress", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Diagnostics.SharedPerformanceCounter+CategoryEntry */ 

(function CategoryEntry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.SharedPerformanceCounter+CategoryEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "SpinLock", $.Int32);

    $.Field({Static:false, Public:true }, "CategoryNameHashCode", $.Int32);

    $.Field({Static:false, Public:true }, "CategoryNameOffset", $.Int32);

    $.Field({Static:false, Public:true }, "FirstInstanceOffset", $.Int32);

    $.Field({Static:false, Public:true }, "NextCategoryOffset", $.Int32);

    $.Field({Static:false, Public:true }, "IsConsistent", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Diagnostics.SharedPerformanceCounter+InstanceEntry */ 

(function InstanceEntry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.SharedPerformanceCounter+InstanceEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "SpinLock", $.Int32);

    $.Field({Static:false, Public:true }, "InstanceNameHashCode", $.Int32);

    $.Field({Static:false, Public:true }, "InstanceNameOffset", $.Int32);

    $.Field({Static:false, Public:true }, "RefCount", $.Int32);

    $.Field({Static:false, Public:true }, "FirstCounterOffset", $.Int32);

    $.Field({Static:false, Public:true }, "NextInstanceOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Diagnostics.SharedPerformanceCounter+CounterEntry */ 

(function CounterEntry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.SharedPerformanceCounter+CounterEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "SpinLock", $.Int32);

    $.Field({Static:false, Public:true }, "CounterNameHashCode", $.Int32);

    $.Field({Static:false, Public:true }, "CounterNameOffset", $.Int32);

    $.Field({Static:false, Public:true }, "LifetimeOffset", $.Int32);

    $.Field({Static:false, Public:true }, "Value", $.Int64);

    $.Field({Static:false, Public:true }, "NextCounterOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Diagnostics.SharedPerformanceCounter+CounterEntryMisaligned */ 

(function CounterEntryMisaligned$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.SharedPerformanceCounter+CounterEntryMisaligned", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Value_lo", $.Int32);

    $.Field({Static:false, Public:true }, "Value_hi", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Diagnostics.SharedPerformanceCounter+ProcessLifetimeEntry */ 

(function ProcessLifetimeEntry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.SharedPerformanceCounter+ProcessLifetimeEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "LifetimeType", $.Int32);

    $.Field({Static:false, Public:true }, "ProcessId", $.Int32);

    $.Field({Static:false, Public:true }, "StartupTime", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SharedPerformanceCounter+CategoryData */ 

(function CategoryData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.SharedPerformanceCounter+CategoryData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "FileMapping", $asm12.TypeRef("System.Diagnostics.SharedPerformanceCounter+FileMapping"));

    $.Field({Static:false, Public:true }, "EnableReuse", $.Boolean);

    $.Field({Static:false, Public:true }, "UseUniqueSharedMemory", $.Boolean);

    $.Field({Static:false, Public:true }, "FileMappingName", $.String);

    $.Field({Static:false, Public:true }, "MutexName", $.String);

    $.Field({Static:false, Public:true }, "CounterNames", $asm0F.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.ProcessData */ 

(function ProcessData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.ProcessData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.Field({Static:false, Public:true }, "ProcessId", $.Int32);

    $.Field({Static:false, Public:true }, "StartupTime", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SharedUtils */ 

(function SharedUtils$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.Diagnostics.SharedUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CheckEnvironment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckNtEnvironment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSafeWin32Exception", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.ComponentModel.Win32Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSafeWin32Exception", 
      new JSIL.MethodSignature($asm12.TypeRef("System.ComponentModel.Win32Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnterMutex", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.Mutex")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnterMutexWithoutGlobal", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.Mutex")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentEnvironment", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLargestBuildNumberFromKey", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("Microsoft.Win32.RegistryKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLatestBuildDllDirectory", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocalBuildDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeWaitForMutex", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Threading.Mutex"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.Mutex")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeWaitForMutexOnce", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Threading.Mutex"), $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Threading.Mutex")])])
    );

    $.PInvokeMethod({Static:true , Public:false}, "WaitForSingleObjectDontCallThis", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), $.Int32]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "WaitForSingleObject", 
      }
    );

    $.Field({Static:true , Public:false}, "environment", $asm0F.TypeRef("System.Int32"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "CurrentEnvironment", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Stopwatch */ 

(function Stopwatch$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Stopwatch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElapsedMilliseconds", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElapsedDateTimeTicks", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRawElapsedTicks", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTimestamp", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Frequency", $.Int64, function ($pi) {
        return $asm0F.System.Int64.FromNumber(10000000);
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsHighResolution", $.Boolean, true);

    $.Field({Static:true , Public:false, ReadOnly:true }, "tickFrequency", $.Double, function ($pi) {
        return +((+$pi.tickFrequency / +$pi.Frequency.ToNumber(-1, false)));
      });

    $.Property({Static:false, Public:true }, "ElapsedMilliseconds", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.ThreadState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.ThreadState", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Initialized: 0, 
    Ready: 1, 
    Running: 2, 
    Standby: 3, 
    Terminated: 4, 
    Wait: 5, 
    Transition: 6, 
    Unknown: 7, 
  }
);

/* enum System.Diagnostics.ThreadWaitReason */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.ThreadWaitReason", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Executive: 0, 
    FreePage: 1, 
    PageIn: 2, 
    SystemAllocation: 3, 
    ExecutionDelay: 4, 
    Suspended: 5, 
    UserRequest: 6, 
    EventPairHigh: 7, 
    EventPairLow: 8, 
    LpcReceive: 9, 
    LpcReply: 10, 
    VirtualMemory: 11, 
    PageOut: 12, 
    Unknown: 13, 
  }
);

/* class System.ComponentModel.EventHandlerList */ 

(function EventHandlerList$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.ComponentModel.EventHandlerList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($asm12.TypeRef("System.ComponentModel.EventHandlerList+ListEntry"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Delegate"), [$.Object])
    );

    $.Field({Static:false, Public:false}, "head", $asm12.TypeRef("System.ComponentModel.EventHandlerList+ListEntry"));

    $.Field({Static:false, Public:false}, "parent", $asm12.TypeRef("System.ComponentModel.Component"));

    $.Property({Static:false, Public:true }, "Item", $asm0F.TypeRef("System.Delegate"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ComponentModel.EventHandlerList+ListEntry */ 

(function ListEntry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.ComponentModel.EventHandlerList+ListEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Field({Static:false, Public:false}, "key", $.Object);

    $.Field({Static:false, Public:false}, "handler", $asm0F.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.ComponentModel.IComponent */ 

JSIL.MakeInterface(
  "System.ComponentModel.IComponent", true, [], function ($) {
  }, [$asm0F.TypeRef("System.IDisposable")])
  .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface System.ComponentModel.IContainer */ 

JSIL.MakeInterface(
  "System.ComponentModel.IContainer", true, [], function ($) {
    $.Method({}, "Remove", JSIL.MethodSignature.Action($asm12.TypeRef("System.ComponentModel.IComponent")));
  }, [$asm0F.TypeRef("System.IDisposable")])
  .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class System.ComponentModel.InvalidEnumArgumentException */ 

(function InvalidEnumArgumentException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ArgumentException"), 
      Name: "System.ComponentModel.InvalidEnumArgumentException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.ComponentModel.ISite */ 

JSIL.MakeInterface(
  "System.ComponentModel.ISite", true, [], function ($) {
    $.Method({}, "get_Container", JSIL.MethodSignature.Return($asm12.TypeRef("System.ComponentModel.IContainer")));
    $.Method({}, "get_DesignMode", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Property({}, "Container");
    $.Property({}, "DesignMode");
    $.Property({}, "Name");
  }, [$asm0F.TypeRef("System.IServiceProvider")])
  .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface System.ComponentModel.ISynchronizeInvoke */ 

JSIL.MakeInterface(
  "System.ComponentModel.ISynchronizeInvoke", true, [], function ($) {
    $.Method({}, "get_InvokeRequired", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "BeginInvoke", new JSIL.MethodSignature($asm0F.TypeRef("System.IAsyncResult"), [$asm0F.TypeRef("System.Delegate"), $jsilcore.TypeRef("System.Array", [$.Object])]));
    $.Property({}, "InvokeRequired");
  }, []);

/* class System.ComponentModel.SyntaxCheck */ 

(function SyntaxCheck$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.ComponentModel.SyntaxCheck", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CheckMachineName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ComponentModel.Design");
/* interface System.ComponentModel.Design.IDesignerHost */ 

JSIL.MakeInterface(
  "System.ComponentModel.Design.IDesignerHost", true, [], function ($) {
    $.Method({}, "get_RootComponent", JSIL.MethodSignature.Return($asm12.TypeRef("System.ComponentModel.IComponent")));
    $.Property({}, "RootComponent");
  }, [$asm0F.TypeRef("System.IServiceProvider")])
  .Attribute($asm0F.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class System.CodeDom.Compiler.CodeDomCompilationConfiguration */ 

(function CodeDomCompilationConfiguration$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.CodeDom.Compiler.CodeDomCompilationConfiguration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCompilerInfo", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.CodeDom.Compiler.CompilerInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Default", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_fieldSeparators", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "_compilerLanguages", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_compilerExtensions", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_allCompilerInfo", $asm0F.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:true , Public:false}, "defaultInstance", $.Type);

    $.Property({Static:true , Public:false}, "Default", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.CodeDomCompilationConfiguration+SectionHandler */ 

(function SectionHandler$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.CodeDom.Compiler.CodeDomCompilationConfiguration+SectionHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetProviderOptions", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm24.TypeRef("System.Xml.XmlNode")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.HandlerBase */ 

(function HandlerBase$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.CodeDom.Compiler.HandlerBase", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CheckForChildNodes", 
      JSIL.MethodSignature.Action($asm24.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForUnrecognizedAttributes", 
      JSIL.MethodSignature.Action($asm24.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveAttribute", 
      new JSIL.MethodSignature($asm24.TypeRef("System.Xml.XmlNode"), [
          $asm24.TypeRef("System.Xml.XmlNode"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveNonEmptyStringAttributeInternal", 
      new JSIL.MethodSignature($asm24.TypeRef("System.Xml.XmlNode"), [
          $asm24.TypeRef("System.Xml.XmlNode"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveRequiredNonEmptyStringAttribute", 
      new JSIL.MethodSignature($asm24.TypeRef("System.Xml.XmlNode"), [
          $asm24.TypeRef("System.Xml.XmlNode"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveStringAttributeInternal", 
      new JSIL.MethodSignature($asm24.TypeRef("System.Xml.XmlNode"), [
          $asm24.TypeRef("System.Xml.XmlNode"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowUnrecognizedElement", 
      JSIL.MethodSignature.Action($asm24.TypeRef("System.Xml.XmlNode"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.CompilerInfo */ 

(function CompilerInfo$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.CodeDom.Compiler.CompilerInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateProvider", 
      new JSIL.MethodSignature($asm12.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeDomProviderType", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompilerParams", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.CodeDom.Compiler.CompilerParameters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderOptions", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_codeDomProviderTypeName", $.String);

    $.Field({Static:false, Public:false}, "_compilerParams", $asm12.TypeRef("System.CodeDom.Compiler.CompilerParameters"));

    $.Field({Static:false, Public:false}, "_compilerLanguages", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_compilerExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "configFileName", $.String);

    $.Field({Static:false, Public:false}, "_providerOptions", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "configFileLineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CodeDomProviderType", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "CompilerParams", $asm12.TypeRef("System.CodeDom.Compiler.CompilerParameters"));

    $.Property({Static:false, Public:false}, "ProviderOptions", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.CompilerParameters */ 

(function CompilerParameters$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.CodeDom.Compiler.CompilerParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompilerOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeDebugInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferencedAssemblies", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarningLevel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "coreAssemblyFileName", $.String)
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "assemblyNames", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "embeddedResources", $asm12.TypeRef("System.Collections.Specialized.StringCollection"))
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "linkedResources", $asm12.TypeRef("System.Collections.Specialized.StringCollection"))
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "outputName", $.String);

    $.Field({Static:false, Public:false}, "includeDebugInformation", $.Boolean);

    $.Field({Static:false, Public:false}, "warningLevel", $.Int32);

    $.Field({Static:false, Public:false}, "compilerOptions", $.String);

    $.Property({Static:false, Public:true }, "ReferencedAssemblies", $asm12.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "IncludeDebugInformation", $.Boolean);

    $.Property({Static:false, Public:true }, "WarningLevel", $.Int32);

    $.Property({Static:false, Public:true }, "CompilerOptions", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.Executor */ 

(function Executor$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.CodeDom.Compiler.Executor", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetRuntimeInstallDirectory", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.CodeDom.Compiler.RedistVersionInfo */ 

(function RedistVersionInfo$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.CodeDom.Compiler.RedistVersionInfo", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetCompilerPath", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCompilerPathFromRegistry", 
      new JSIL.MethodSignature($.String, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Text");
JSIL.DeclareNamespace("System.Text.RegularExpressions");
/* class System.Text.RegularExpressions.Regex */ 

(function Regex$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.Regex", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"), 
          $asm0F.TypeRef("System.TimeSpan"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheCode", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.CachedCodeEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexRunnerFactory"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexCode"), $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Escape", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MatchTimeout", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RightToLeft", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GroupNameFromNumber", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GroupNumberFromName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDefaultMatchTimeout", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeReferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupCachedAndUpdate", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.CachedCodeEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Match", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Match"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Match", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Match"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Run", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Match"), [
          $.Boolean, $.Int32, 
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionC", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionInvariant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionR", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMatchTimeout", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "pattern", $.String);

    $.Field({Static:false, Public:false}, "factory", $asm12.TypeRef("System.Text.RegularExpressions.RegexRunnerFactory"));

    $.Field({Static:false, Public:false}, "roptions", $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaximumMatchTimeout", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "InfiniteMatchTimeout", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "internalMatchTimeout", $asm0F.TypeRef("System.TimeSpan"))
      .Attribute($asm0F.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FallbackDefaultMatchTimeout", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultMatchTimeout", $asm0F.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "caps", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "capnames", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "capslist", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "capsize", $.Int32);

    $.Field({Static:false, Public:false}, "runnerref", $asm12.TypeRef("System.Text.RegularExpressions.ExclusiveReference"));

    $.Field({Static:false, Public:false}, "replref", $asm12.TypeRef("System.Text.RegularExpressions.SharedReference"));

    $.Field({Static:false, Public:false}, "code", $asm12.TypeRef("System.Text.RegularExpressions.RegexCode"));

    $.Field({Static:false, Public:false}, "refsInitialized", $.Boolean);

    $.Field({Static:true , Public:false}, "livecode", $asm12.TypeRef("System.Collections.Generic.LinkedList`1", [$asm12.TypeRef("System.Text.RegularExpressions.CachedCodeEntry")]));

    $.Field({Static:true , Public:false}, "cacheSize", $.Int32, 15);


    function Regex__cctor () {
      $thisType.MaximumMatchTimeout = new $asm0F.System.TimeSpan();
      $thisType.InfiniteMatchTimeout = new $asm0F.System.TimeSpan();
      $thisType.FallbackDefaultMatchTimeout = new $asm0F.System.TimeSpan();
      $thisType.DefaultMatchTimeout = new $asm0F.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Regex__cctor
    );

    $.Property({Static:false, Public:true }, "Options", $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"));

    $.Property({Static:false, Public:true }, "MatchTimeout", $asm0F.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "RightToLeft", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.CachedCodeEntry */ 

(function CachedCodeEntry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.CachedCodeEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0F.TypeRef("System.Collections.Hashtable"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm12.TypeRef("System.Text.RegularExpressions.RegexCode"), 
          $asm0F.TypeRef("System.Collections.Hashtable"), $.Int32, 
          $asm12.TypeRef("System.Text.RegularExpressions.ExclusiveReference"), $asm12.TypeRef("System.Text.RegularExpressions.SharedReference")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCompiled", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Text.RegularExpressions.RegexRunnerFactory"))
    );

    $.Field({Static:false, Public:false}, "_key", $.String);

    $.Field({Static:false, Public:false}, "_code", $asm12.TypeRef("System.Text.RegularExpressions.RegexCode"));

    $.Field({Static:false, Public:false}, "_caps", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_capnames", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_capslist", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_capsize", $.Int32);

    $.Field({Static:false, Public:false}, "_factory", $asm12.TypeRef("System.Text.RegularExpressions.RegexRunnerFactory"));

    $.Field({Static:false, Public:false}, "_runnerref", $asm12.TypeRef("System.Text.RegularExpressions.ExclusiveReference"));

    $.Field({Static:false, Public:false}, "_replref", $asm12.TypeRef("System.Text.RegularExpressions.SharedReference"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.ExclusiveReference */ 

(function ExclusiveReference$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.ExclusiveReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Get", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Release", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.SharedReference */ 

(function SharedReference$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.SharedReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_ref", $asm0F.TypeRef("System.WeakReference"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexBoyerMoore */ 

(function RegexBoyerMoore$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexBoyerMoore", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $asm0F.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchPattern", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Scan", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_positive", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_negativeASCII", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_negativeUnicode", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]));

    $.Field({Static:false, Public:false}, "_pattern", $.String);

    $.Field({Static:false, Public:false}, "_lowASCII", $.Int32);

    $.Field({Static:false, Public:false}, "_highASCII", $.Int32);

    $.Field({Static:false, Public:false}, "_rightToLeft", $.Boolean);

    $.Field({Static:false, Public:false}, "_caseInsensitive", $.Boolean);

    $.Field({Static:false, Public:false}, "_culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.Capture */ 

(function Capture$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.Capture", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "Index", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexCharClass */ 

(function RegexCharClass$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexCharClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass+SingleRange")]), 
          $asm0F.TypeRef("System.Text.StringBuilder"), $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCategory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCategoryFromName", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCharClass", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDigit", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLowercase", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLowercaseRange", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $asm0F.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRange", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSet", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSpace", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSubtraction", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWord", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Canonicalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CharInCategory", 
      new JSIL.MethodSignature($.Boolean, [
          $.Char, $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharInCategoryGroup", 
      new JSIL.MethodSignature($.Boolean, [
          $.Char, $asm0F.TypeRef("System.Globalization.UnicodeCategory"), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharInClass", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharInClassInternal", 
      new JSIL.MethodSignature($.Boolean, [
          $.Char, $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharInClassRecursive", 
      new JSIL.MethodSignature($.Boolean, [
          $.Char, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanMerge", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRangeAt", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass+SingleRange"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsECMAWordChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMergeable", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNegated", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSingleton", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSingletonInverse", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSubtraction", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWordChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateCategory", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseRecursive", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Negate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "SetFromProperty", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SingletonChar", 
      new JSIL.MethodSignature($.Char, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToStringClass", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_rangelist", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass+SingleRange")]));

    $.Field({Static:false, Public:false}, "_categories", $asm0F.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "_canonical", $.Boolean);

    $.Field({Static:false, Public:false}, "_negate", $.Boolean);

    $.Field({Static:false, Public:false}, "_subtractor", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InternalRegexIgnoreCase", $.String, "__InternalRegexIgnoreCase__");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Space", $.String, "d");

    $.Field({Static:true , Public:false, ReadOnly:true }, "NotSpace", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Word", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NotWord", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SpaceClass", $.String, function ($pi) {
        return JSIL.ConcatString("\x00\x00\x01", $pi.Space);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "NotSpaceClass", $.String, function ($pi) {
        return JSIL.ConcatString("\x01\x00\x01", $pi.Space);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "WordClass", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NotWordClass", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DigitClass", $.String, "\x00\x00\x01\t");

    $.Field({Static:true , Public:false, ReadOnly:true }, "NotDigitClass", $.String, "\x00\x00\x01\ufff7");

    $.Field({Static:true , Public:false}, "_definedCategories", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propTable", $jsilcore.TypeRef("System.Array", [$.String, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_lcTable", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass+LowerCaseMapping")]));

    $.Property({Static:false, Public:false}, "CanMerge", $.Boolean);

    $.Property({Static:false, Public:false}, "Negate", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Text.RegularExpressions.RegexCharClass+LowerCaseMapping */ 

(function LowerCaseMapping$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Text.RegularExpressions.RegexCharClass+LowerCaseMapping", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_chMin", $.Char);

    $.Field({Static:false, Public:false}, "_chMax", $.Char);

    $.Field({Static:false, Public:false}, "_lcOp", $.Int32);

    $.Field({Static:false, Public:false}, "_data", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexCharClass+SingleRangeComparer */ 

(function SingleRangeComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexCharClass+SingleRangeComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass+SingleRange"), $asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass+SingleRange")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IComparer`1", [$asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass+SingleRange")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexCharClass+SingleRange */ 

(function SingleRange$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexCharClass+SingleRange", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.Field({Static:false, Public:false}, "_first", $.Char);

    $.Field({Static:false, Public:false}, "_last", $.Char);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexCode */ 

(function RegexCode$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexCode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $asm0F.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $.Int32, $asm0F.TypeRef("System.Collections.Hashtable"), 
          $.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexBoyerMoore"), 
          $asm12.TypeRef("System.Text.RegularExpressions.RegexPrefix"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpcodeBacktracks", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpcodeSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_codes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_strings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_trackcount", $.Int32);

    $.Field({Static:false, Public:false}, "_caps", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_capsize", $.Int32);

    $.Field({Static:false, Public:false}, "_fcPrefix", $asm12.TypeRef("System.Text.RegularExpressions.RegexPrefix"));

    $.Field({Static:false, Public:false}, "_bmPrefix", $asm12.TypeRef("System.Text.RegularExpressions.RegexBoyerMoore"));

    $.Field({Static:false, Public:false}, "_anchors", $.Int32);

    $.Field({Static:false, Public:false}, "_rightToLeft", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexCompiler */ 

(function RegexCompiler$Members () {
  var $, $thisType;



























































































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBacktrackNote", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm0F.TypeRef("System.Reflection.Emit.Label"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddGoto", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTrack", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTrack", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUniqueTrack", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUniqueTrack", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceLabel", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Back", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Beq", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeqFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Bge", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BgeFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Bgt", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BgtFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Bgtun", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ble", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BleFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Blt", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BltFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Bne", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BneFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Br", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Brfalse", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BrfalseFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BrFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BrtrueFar", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CallToLower", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Callvirt", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Code", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexRunnerFactory"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexCode"), $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareInt", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareIntArray", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareString", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineLabel", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoPush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoReplace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBacktrackSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateFindFirstChar", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateForwardSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitTrackCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMiddleSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateOneCode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Goto", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCi", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRtl", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldlen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloc", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldstr", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldthis", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldthisfld", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Leftchar", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Leftcharnext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkLabel", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Mvfldloc", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.FieldInfo"), $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Mvlocfld", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm0F.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextCodepos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Operand", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopDiscardStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopDiscardStack", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PopStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopTrack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushStack", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PushTrack", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadyPushStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadyPushTrack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadyReplaceStack", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "RegexRunnerField", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.FieldInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RegexRunnerMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ret", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Rightchar", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Rightcharnext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Stfld", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Stloc", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Sub", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Sub", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TopStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TopTrack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Track", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Trackagain", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackUnique", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackUnique2", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:true , Public:false}, "_textbegF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_textendF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_textstartF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_textposF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_textF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_trackposF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_trackF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_stackposF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_stackF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_trackcountF", $asm0F.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:true , Public:false}, "_ensurestorageM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_captureM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_transferM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_uncaptureM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_ismatchedM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_matchlengthM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_matchindexM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_isboundaryM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_isECMABoundaryM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_chartolowerM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_getcharM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_crawlposM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_charInSetM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_getCurrentCulture", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_getInvariantCulture", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "_checkTimeoutM", $asm0F.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "_ilg", $asm0F.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Field({Static:false, Public:false}, "_textstartV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_textbegV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_textendV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_textposV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_textV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_trackposV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_trackV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_stackposV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_stackV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_tempV", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_temp2V", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_temp3V", $asm0F.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "_code", $asm12.TypeRef("System.Text.RegularExpressions.RegexCode"));

    $.Field({Static:false, Public:false}, "_codes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_strings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_fcPrefix", $asm12.TypeRef("System.Text.RegularExpressions.RegexPrefix"));

    $.Field({Static:false, Public:false}, "_bmPrefix", $asm12.TypeRef("System.Text.RegularExpressions.RegexBoyerMoore"));

    $.Field({Static:false, Public:false}, "_anchors", $.Int32);

    $.Field({Static:false, Public:false}, "_labels", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Reflection.Emit.Label")]));

    $.Field({Static:false, Public:false}, "_notes", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Text.RegularExpressions.RegexCompiler+BacktrackNote")]));

    $.Field({Static:false, Public:false}, "_notecount", $.Int32);

    $.Field({Static:false, Public:false}, "_trackcount", $.Int32);

    $.Field({Static:false, Public:false}, "_backtrack", $asm0F.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "_regexopcode", $.Int32);

    $.Field({Static:false, Public:false}, "_codepos", $.Int32);

    $.Field({Static:false, Public:false}, "_backpos", $.Int32);

    $.Field({Static:false, Public:false}, "_options", $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"));

    $.Field({Static:false, Public:false}, "_uniquenote", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_goto", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexCompiler+BacktrackNote */ 

(function BacktrackNote$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexCompiler+BacktrackNote", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0F.TypeRef("System.Reflection.Emit.Label"), 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_codepos", $.Int32);

    $.Field({Static:false, Public:false}, "_flags", $.Int32);

    $.Field({Static:false, Public:false}, "_label", $asm0F.TypeRef("System.Reflection.Emit.Label"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexLWCGCompiler */ 

(function RegexLWCGCompiler$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Text.RegularExpressions.RegexCompiler"), 
      Name: "System.Text.RegularExpressions.RegexLWCGCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineDynamicMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.Emit.DynamicMethod"), [
          $.String, $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FactoryInstanceFromCode", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexRunnerFactory"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexCode"), $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")])
    );

    $.Field({Static:true , Public:false}, "_regexCount", $.Int32, 0);

    $.Field({Static:true , Public:false}, "_paramTypes", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexFCD */ 

(function RegexFCD$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexFCD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AnchorFromType", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Anchors", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Text.RegularExpressions.RegexTree")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateFC", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FCIsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "FirstChars", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexPrefix"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexTree")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IntIsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "PopFC", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexFC"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PopInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "Prefix", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexPrefix"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexTree")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushFC", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Text.RegularExpressions.RegexFC"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PushInt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RegexFCFromRegexTree", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexFC"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexTree")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipChild", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TopFC", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexFC"))
    );

    $.Field({Static:false, Public:false}, "_intStack", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_intDepth", $.Int32);

    $.Field({Static:false, Public:false}, "_fcStack", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Text.RegularExpressions.RegexFC")]));

    $.Field({Static:false, Public:false}, "_fcDepth", $.Int32);

    $.Field({Static:false, Public:false}, "_skipAllChildren", $.Boolean);

    $.Field({Static:false, Public:false}, "_skipchild", $.Boolean);

    $.Field({Static:false, Public:false}, "_failed", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexFC */ 

(function RegexFC$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexFC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFC", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFirstChars", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCaseInsensitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_cc", $asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass"));

    $.Field({Static:false, Public:false}, "_nullable", $.Boolean);

    $.Field({Static:false, Public:false}, "_caseInsensitive", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexPrefix */ 

(function RegexPrefix$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexPrefix", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CaseInsensitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_prefix", $.String);

    $.Field({Static:false, Public:false}, "_caseInsensitive", $.Boolean);

    $.Field({Static:true , Public:false}, "_empty", $.Type);

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "CaseInsensitive", $.Boolean);

    $.Property({Static:true , Public:false}, "Empty", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.Group */ 

(function Group$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Text.RegularExpressions.Capture"), 
      Name: "System.Text.RegularExpressions.Group", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Success", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true }, "Success", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.GroupCollection */ 

(function GroupCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.GroupCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Text.RegularExpressions.Match"), $asm0F.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Group"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Group"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Group"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGroupImpl", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Group"), [$.Int32])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Text.RegularExpressions.Group"));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Text.RegularExpressions.Group"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.GroupEnumerator */ 

(function GroupEnumerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.GroupEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Text.RegularExpressions.GroupCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capture", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.Capture"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_rgc", $asm12.TypeRef("System.Text.RegularExpressions.GroupCollection"));

    $.Field({Static:false, Public:false}, "_curindex", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true }, "Capture", $asm12.TypeRef("System.Text.RegularExpressions.Capture"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexRunner */ 

(function RegexRunner$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexRunner", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Capture", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTimeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Crawl", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Crawlpos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DoCheckTimeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoubleCrawl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoubleStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoubleTrack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureStorage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindFirstChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Go", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitMatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitTrackCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBoundary", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsECMABoundary", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatched", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Popcrawl", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Scan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Match"), [
          $asm12.TypeRef("System.Text.RegularExpressions.Regex"), $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Boolean, $asm0F.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartTimeoutWatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TidyMatch", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.Match"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransferCapture", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Uncapture", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexInterpreter */ 

(function RegexInterpreter$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Text.RegularExpressions.RegexRunner"), 
      Name: "System.Text.RegularExpressions.RegexInterpreter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Text.RegularExpressions.RegexCode"), $asm0F.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Backtrack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Backwardnext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Bump", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CharAt", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindFirstChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Forwardcharnext", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "Forwardchars", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Go", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Goto", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitTrackCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Leftchars", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Operand", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Operator", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Refmatch", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rightchars", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOperator", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StackPeek", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StackPeek", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "StackPop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StackPop", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StackPush", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StackPush", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stringmatch", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Textpos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Textstart", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Textto", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPeek", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPeek", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPop", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Trackpos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPush", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPush", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPush", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPush2", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrackPush2", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Trackto", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "runoperator", $.Int32);

    $.Field({Static:false, Public:false}, "runcodes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "runcodepos", $.Int32);

    $.Field({Static:false, Public:false}, "runstrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "runcode", $asm12.TypeRef("System.Text.RegularExpressions.RegexCode"));

    $.Field({Static:false, Public:false}, "runfcPrefix", $asm12.TypeRef("System.Text.RegularExpressions.RegexPrefix"));

    $.Field({Static:false, Public:false}, "runbmPrefix", $asm12.TypeRef("System.Text.RegularExpressions.RegexBoyerMoore"));

    $.Field({Static:false, Public:false}, "runanchors", $.Int32);

    $.Field({Static:false, Public:false}, "runrtl", $.Boolean);

    $.Field({Static:false, Public:false}, "runci", $.Boolean);

    $.Field({Static:false, Public:false}, "runculture", $asm0F.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.Match */ 

(function Match$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Text.RegularExpressions.Group"), 
      Name: "System.Text.RegularExpressions.Match", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Text.RegularExpressions.Regex"), $.Int32, 
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddMatch", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BalanceMatch", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Groups", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.GroupCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsMatched", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveMatch", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Text.RegularExpressions.Regex"), $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Tidy", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Groups", $asm12.TypeRef("System.Text.RegularExpressions.GroupCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.MatchSparse */ 

(function MatchSparse$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Text.RegularExpressions.Match"), 
      Name: "System.Text.RegularExpressions.MatchSparse", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Text.RegularExpressions.Regex"), $asm0F.TypeRef("System.Collections.Hashtable"), 
          $.Int32, $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Groups", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.GroupCollection"))
    );

    $.Field({Static:false, Public:false}, "_caps", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Groups", $asm12.TypeRef("System.Text.RegularExpressions.GroupCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexMatchTimeoutException */ 

(function RegexMatchTimeoutException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.TimeoutException"), 
      Name: "System.Text.RegularExpressions.RegexMatchTimeoutException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0F.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0F.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "regexInput", $.String);

    $.Field({Static:false, Public:false}, "regexPattern", $.String);

    $.Field({Static:false, Public:false}, "matchTimeout", $asm0F.TypeRef("System.TimeSpan"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexNode */ 

(function RegexNode$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"), 
          $.Char
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddChild", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Child", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChildCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeQuantifier", 
      new JSIL.MethodSignature($.Type, [
          $.Boolean, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeRep", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reduce", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceAlternation", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceConcatenation", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceGroup", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceRep", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceSet", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReverseLeft", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "StripEnation", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Type", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionR", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_type", $.Int32);

    $.Field({Static:false, Public:false}, "_children", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:false}, "_str", $.String);

    $.Field({Static:false, Public:false}, "_ch", $.Char);

    $.Field({Static:false, Public:false}, "_m", $.Int32);

    $.Field({Static:false, Public:false}, "_n", $.Int32);

    $.Field({Static:false, Public:false}, "_options", $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"));

    $.Field({Static:false, Public:false}, "_next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Text.RegularExpressions.RegexOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Text.RegularExpressions.RegexOptions", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    IgnoreCase: 1, 
    Multiline: 2, 
    ExplicitCapture: 4, 
    Compiled: 8, 
    Singleline: 16, 
    IgnorePatternWhitespace: 32, 
    RightToLeft: 64, 
    ECMAScript: 256, 
    CultureInvariant: 512, 
  }
);

/* class System.Text.RegularExpressions.RegexParser */ 

(function RegexParser$Members () {
  var $, $thisType;










































































  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAlternate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConcatenate", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConcatenate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConcatenate", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddGroup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnitNode", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Text.RegularExpressions.RegexNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnitNotone", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnitOne", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnitSet", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnitType", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignNameSlots", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CaptureSlotFromName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CharAt", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CharsRight", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CountCaptures", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmptyOptionsStack", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmptyStack", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "Escape", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexDigit", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCaptureName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCaptureSlot", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMetachar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOnlyTopOption", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsQuantifier", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSpecial", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStopperX", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTrueQuantifier", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveLeft", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveRight", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveRight", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveRightGetChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "NoteCaptureName", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NoteCaptureSlot", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "OptionFromCode", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexTree"), [$.String, $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "PopGroup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopKeepOptions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopOptions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushGroup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushOptions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RightChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "RightChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanBackslash", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanBasicBackslash", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanBlank", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCapname", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCharClass", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCharClass", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexCharClass"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCharEscape", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanControl", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDecimal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanGroupOpen", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanHex", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanOctal", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanOptions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanRegex", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPattern", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartGroup", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Text.RegularExpressions.RegexNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Textpos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Textto", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeFromCode", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "Unit", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionE", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionI", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionM", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionN", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionS", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UseOptionX", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_stack", $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"));

    $.Field({Static:false, Public:false}, "_group", $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"));

    $.Field({Static:false, Public:false}, "_alternation", $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"));

    $.Field({Static:false, Public:false}, "_concatenation", $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"));

    $.Field({Static:false, Public:false}, "_unit", $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"));

    $.Field({Static:false, Public:false}, "_pattern", $.String);

    $.Field({Static:false, Public:false}, "_currentPos", $.Int32);

    $.Field({Static:false, Public:false}, "_culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "_autocap", $.Int32);

    $.Field({Static:false, Public:false}, "_capcount", $.Int32);

    $.Field({Static:false, Public:false}, "_captop", $.Int32);

    $.Field({Static:false, Public:false}, "_capsize", $.Int32);

    $.Field({Static:false, Public:false}, "_caps", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_capnames", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_capnumlist", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_capnamelist", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "_options", $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"));

    $.Field({Static:false, Public:false}, "_optionsStack", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")]));

    $.Field({Static:false, Public:false}, "_ignoreNextParen", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_category", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexRunnerFactory */ 

(function RegexRunnerFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexRunnerFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstance", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexRunner"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexTree */ 

(function RegexTree$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"), $asm0F.TypeRef("System.Collections.Hashtable"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $asm0F.TypeRef("System.Collections.Hashtable"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions")
        ])
    );

    $.Field({Static:false, Public:false}, "_root", $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"));

    $.Field({Static:false, Public:false}, "_caps", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_capnumlist", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_capnames", $asm0F.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_capslist", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_options", $asm12.TypeRef("System.Text.RegularExpressions.RegexOptions"));

    $.Field({Static:false, Public:false}, "_captop", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.RegexWriter */ 

(function RegexWriter$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Text.RegularExpressions.RegexWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CurPos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Emit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitFragment", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm12.TypeRef("System.Text.RegularExpressions.RegexNode"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmptyStack", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapCapnum", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PatchJump", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PushInt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RegexCodeFromRegexTree", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexCode"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexTree")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StringCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Write", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Text.RegularExpressions.RegexCode"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexTree")])
    );

    $.Field({Static:false, Public:false}, "_intStack", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_depth", $.Int32);

    $.Field({Static:false, Public:false}, "_emitted", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_curpos", $.Int32);

    $.Field({Static:false, Public:false}, "_stringhash", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "_stringtable", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "_counting", $.Boolean);

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:false, Public:false}, "_trackcount", $.Int32);

    $.Field({Static:false, Public:false}, "_caps", $asm0F.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.RegularExpressions.CompiledRegexRunner */ 

(function CompiledRegexRunner$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Text.RegularExpressions.RegexRunner"), 
      Name: "System.Text.RegularExpressions.CompiledRegexRunner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindFirstChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Go", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitTrackCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDelegates", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Text.RegularExpressions.NoParamDelegate"), $asm12.TypeRef("System.Text.RegularExpressions.FindFirstCharDelegate"), 
          $asm12.TypeRef("System.Text.RegularExpressions.NoParamDelegate")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Text.RegularExpressions.NoParamDelegate */ 

JSIL.MakeDelegate("System.Text.RegularExpressions.NoParamDelegate", false, [], 
  JSIL.MethodSignature.Action($asm12.TypeRef("System.Text.RegularExpressions.RegexRunner")));

/* delegate System.Text.RegularExpressions.FindFirstCharDelegate */ 

JSIL.MakeDelegate("System.Text.RegularExpressions.FindFirstCharDelegate", false, [], 
  new JSIL.MethodSignature($asm0F.TypeRef("System.Boolean"), [$asm12.TypeRef("System.Text.RegularExpressions.RegexRunner")]));

/* class System.Text.RegularExpressions.CompiledRegexRunnerFactory */ 

(function CompiledRegexRunnerFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Text.RegularExpressions.RegexRunnerFactory"), 
      Name: "System.Text.RegularExpressions.CompiledRegexRunnerFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Reflection.Emit.DynamicMethod"), $asm0F.TypeRef("System.Reflection.Emit.DynamicMethod"), 
          $asm0F.TypeRef("System.Reflection.Emit.DynamicMethod")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstance", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Text.RegularExpressions.RegexRunner"))
    );

    $.Field({Static:false, Public:false}, "goMethod", $asm0F.TypeRef("System.Reflection.Emit.DynamicMethod"));

    $.Field({Static:false, Public:false}, "findFirstCharMethod", $asm0F.TypeRef("System.Reflection.Emit.DynamicMethod"));

    $.Field({Static:false, Public:false}, "initTrackCountMethod", $asm0F.TypeRef("System.Reflection.Emit.DynamicMethod"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "03F4297FCC30D0FD5E420E5D26E7FA711167C7EF", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "E5BC1BAFADE1862DD6E0B9FB632BFAA6C3873A78", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

